/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		5:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "script/" + ({"0":"app","1":"cpu.tpl","2":"cpu.ctrl","3":"ram.tpl","4":"ram.ctrl"}[chunkId]||chunkId) + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(26);
	__webpack_require__(27);
	__webpack_require__(28);
	__webpack_require__(29);
	__webpack_require__(11);
	__webpack_require__(30);
	module.exports = __webpack_require__(31);


/***/ },

/***/ 11:
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["echarts"] = factory();
		else
			root["echarts"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Export echarts as CommonJS module
		 */
		module.exports = __webpack_require__(1);

		// Import all charts and components
		__webpack_require__(91);
		__webpack_require__(127);
		__webpack_require__(132);
		__webpack_require__(141);
		__webpack_require__(145);

		__webpack_require__(155);
		__webpack_require__(177);
		__webpack_require__(189);
		__webpack_require__(207);
		__webpack_require__(211);
		__webpack_require__(215);
		__webpack_require__(230);
		__webpack_require__(236);
		__webpack_require__(243);
		__webpack_require__(249);
		__webpack_require__(253);
		__webpack_require__(258);

		__webpack_require__(106);
		__webpack_require__(262);
		__webpack_require__(268);
		__webpack_require__(272);
		__webpack_require__(283);
		__webpack_require__(216);

		__webpack_require__(285);

		__webpack_require__(286);
		__webpack_require__(300);

		__webpack_require__(315);
		__webpack_require__(319);

		__webpack_require__(322);
		__webpack_require__(331);

		__webpack_require__(345);


	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/*!
		 * ECharts, a javascript interactive chart library.
		 *
		 * Copyright (c) 2015, Baidu Inc.
		 * All rights reserved.
		 *
		 * LICENSE
		 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
		 */

		/**
		 * @module echarts
		 */


		    var GlobalModel = __webpack_require__(2);
		    var ExtensionAPI = __webpack_require__(24);
		    var CoordinateSystemManager = __webpack_require__(25);
		    var OptionManager = __webpack_require__(26);

		    var ComponentModel = __webpack_require__(19);
		    var SeriesModel = __webpack_require__(27);

		    var ComponentView = __webpack_require__(28);
		    var ChartView = __webpack_require__(41);
		    var graphic = __webpack_require__(42);

		    var zrender = __webpack_require__(77);
		    var zrUtil = __webpack_require__(3);
		    var colorTool = __webpack_require__(38);
		    var env = __webpack_require__(78);
		    var Eventful = __webpack_require__(32);

		    var each = zrUtil.each;

		    var VISUAL_CODING_STAGES = ['echarts', 'chart', 'component'];

		    // TODO Transform first or filter first
		    var PROCESSOR_STAGES = ['transform', 'filter', 'statistic'];

		    function createRegisterEventWithLowercaseName(method) {
		        return function (eventName, handler, context) {
		            // Event name is all lowercase
		            eventName = eventName && eventName.toLowerCase();
		            Eventful.prototype[method].call(this, eventName, handler, context);
		        };
		    }
		    /**
		     * @module echarts~MessageCenter
		     */
		    function MessageCenter() {
		        Eventful.call(this);
		    }
		    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
		    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
		    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
		    zrUtil.mixin(MessageCenter, Eventful);
		    /**
		     * @module echarts~ECharts
		     */
		    function ECharts (dom, theme, opts) {
		        opts = opts || {};

		        // Get theme by name
		        if (typeof theme === 'string') {
		            theme = themeStorage[theme];
		        }

		        if (theme) {
		            each(optionPreprocessorFuncs, function (preProcess) {
		                preProcess(theme);
		            });
		        }
		        /**
		         * @type {string}
		         */
		        this.id;
		        /**
		         * Group id
		         * @type {string}
		         */
		        this.group;
		        /**
		         * @type {HTMLDomElement}
		         * @private
		         */
		        this._dom = dom;
		        /**
		         * @type {module:zrender/ZRender}
		         * @private
		         */
		        this._zr = zrender.init(dom, {
		            renderer: opts.renderer || 'canvas',
		            devicePixelRatio: opts.devicePixelRatio
		        });

		        /**
		         * @type {Object}
		         * @private
		         */
		        this._theme = zrUtil.clone(theme);

		        /**
		         * @type {Array.<module:echarts/view/Chart>}
		         * @private
		         */
		        this._chartsViews = [];

		        /**
		         * @type {Object.<string, module:echarts/view/Chart>}
		         * @private
		         */
		        this._chartsMap = {};

		        /**
		         * @type {Array.<module:echarts/view/Component>}
		         * @private
		         */
		        this._componentsViews = [];

		        /**
		         * @type {Object.<string, module:echarts/view/Component>}
		         * @private
		         */
		        this._componentsMap = {};

		        /**
		         * @type {module:echarts/ExtensionAPI}
		         * @private
		         */
		        this._api = new ExtensionAPI(this);

		        /**
		         * @type {module:echarts/CoordinateSystem}
		         * @private
		         */
		        this._coordSysMgr = new CoordinateSystemManager();

		        Eventful.call(this);

		        /**
		         * @type {module:echarts~MessageCenter}
		         * @private
		         */
		        this._messageCenter = new MessageCenter();

		        // Init mouse events
		        this._initEvents();

		        // In case some people write `window.onresize = chart.resize`
		        this.resize = zrUtil.bind(this.resize, this);
		    }

		    var echartsProto = ECharts.prototype;

		    /**
		     * @return {HTMLDomElement}
		     */
		    echartsProto.getDom = function () {
		        return this._dom;
		    };

		    /**
		     * @return {module:zrender~ZRender}
		     */
		    echartsProto.getZr = function () {
		        return this._zr;
		    };

		    /**
		     * @param {Object} option
		     * @param {boolean} notMerge
		     * @param {boolean} [notRefreshImmediately=false] Useful when setOption frequently.
		     */
		    echartsProto.setOption = function (option, notMerge, notRefreshImmediately) {
		        if (!this._model || notMerge) {
		            this._model = new GlobalModel(
		                null, null, this._theme, new OptionManager(this._api)
		            );
		        }

		        this._model.setOption(option, optionPreprocessorFuncs);

		        updateMethods.prepareAndUpdate.call(this);

		        !notRefreshImmediately && this._zr.refreshImmediately();
		    };

		    /**
		     * @DEPRECATED
		     */
		    echartsProto.setTheme = function () {
		        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
		    };

		    /**
		     * @return {module:echarts/model/Global}
		     */
		    echartsProto.getModel = function () {
		        return this._model;
		    };

		    /**
		     * @return {Object}
		     */
		    echartsProto.getOption = function () {
		        return this._model.getOption();
		    };

		    /**
		     * @return {number}
		     */
		    echartsProto.getWidth = function () {
		        return this._zr.getWidth();
		    };

		    /**
		     * @return {number}
		     */
		    echartsProto.getHeight = function () {
		        return this._zr.getHeight();
		    };

		    /**
		     * Get canvas which has all thing rendered
		     * @param {Object} opts
		     * @param {string} [opts.backgroundColor]
		     */
		    echartsProto.getRenderedCanvas = function (opts) {
		        if (!env.canvasSupported) {
		            return;
		        }
		        opts = opts || {};
		        opts.pixelRatio = opts.pixelRatio || 1;
		        opts.backgroundColor = opts.backgroundColor
		            || this._model.get('backgroundColor');
		        var zr = this._zr;
		        var list = zr.storage.getDisplayList();
		        // Stop animations
		        zrUtil.each(list, function (el) {
		            el.stopAnimation(true);
		        });
		        return zr.painter.getRenderedCanvas(opts);
		    };
		    /**
		     * @return {string}
		     * @param {Object} opts
		     * @param {string} [opts.type='png']
		     * @param {string} [opts.pixelRatio=1]
		     * @param {string} [opts.backgroundColor]
		     */
		    echartsProto.getDataURL = function (opts) {
		        opts = opts || {};
		        var excludeComponents = opts.excludeComponents;
		        var ecModel = this._model;
		        var excludesComponentViews = [];
		        var self = this;

		        each(excludeComponents, function (componentType) {
		            ecModel.eachComponent({
		                mainType: componentType
		            }, function (component) {
		                var view = self._componentsMap[component.__viewId];
		                if (!view.group.ignore) {
		                    excludesComponentViews.push(view);
		                    view.group.ignore = true;
		                }
		            });
		        });

		        var url = this.getRenderedCanvas(opts).toDataURL(
		            'image/' + (opts && opts.type || 'png')
		        );

		        each(excludesComponentViews, function (view) {
		            view.group.ignore = false;
		        });
		        return url;
		    };


		    /**
		     * @return {string}
		     * @param {Object} opts
		     * @param {string} [opts.type='png']
		     * @param {string} [opts.pixelRatio=1]
		     * @param {string} [opts.backgroundColor]
		     */
		    echartsProto.getConnectedDataURL = function (opts) {
		        if (!env.canvasSupported) {
		            return;
		        }
		        var groupId = this.group;
		        var mathMin = Math.min;
		        var mathMax = Math.max;
		        var MAX_NUMBER = Infinity;
		        if (connectedGroups[groupId]) {
		            var left = MAX_NUMBER;
		            var top = MAX_NUMBER;
		            var right = -MAX_NUMBER;
		            var bottom = -MAX_NUMBER;
		            var canvasList = [];
		            var dpr = (opts && opts.pixelRatio) || 1;
		            for (var id in instances) {
		                var chart = instances[id];
		                if (chart.group === groupId) {
		                    var canvas = chart.getRenderedCanvas(
		                        zrUtil.clone(opts)
		                    );
		                    var boundingRect = chart.getDom().getBoundingClientRect();
		                    left = mathMin(boundingRect.left, left);
		                    top = mathMin(boundingRect.top, top);
		                    right = mathMax(boundingRect.right, right);
		                    bottom = mathMax(boundingRect.bottom, bottom);
		                    canvasList.push({
		                        dom: canvas,
		                        left: boundingRect.left,
		                        top: boundingRect.top
		                    });
		                }
		            }

		            left *= dpr;
		            top *= dpr;
		            right *= dpr;
		            bottom *= dpr;
		            var width = right - left;
		            var height = bottom - top;
		            var targetCanvas = zrUtil.createCanvas();
		            targetCanvas.width = width;
		            targetCanvas.height = height;
		            var zr = zrender.init(targetCanvas);

		            each(canvasList, function (item) {
		                var img = new graphic.Image({
		                    style: {
		                        x: item.left * dpr - left,
		                        y: item.top * dpr - top,
		                        image: item.dom
		                    }
		                });
		                zr.add(img);
		            });
		            zr.refreshImmediately();

		            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
		        }
		        else {
		            return this.getDataURL(opts);
		        }
		    };

		    var updateMethods = {

		        /**
		         * @param {Object} payload
		         * @private
		         */
		        update: function (payload) {
		            // console.time && console.time('update');

		            var ecModel = this._model;
		            var api = this._api;
		            var coordSysMgr = this._coordSysMgr;
		            // update before setOption
		            if (!ecModel) {
		                return;
		            }

		            ecModel.restoreData();

		            // TODO
		            // Save total ecModel here for undo/redo (after restoring data and before processing data).
		            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.

		            // Create new coordinate system each update
		            // In LineView may save the old coordinate system and use it to get the orignal point
		            coordSysMgr.create(this._model, this._api);

		            processData.call(this, ecModel, api);

		            stackSeriesData.call(this, ecModel);

		            coordSysMgr.update(ecModel, api);

		            doLayout.call(this, ecModel, payload);

		            doVisualCoding.call(this, ecModel, payload);

		            doRender.call(this, ecModel, payload);

		            // Set background
		            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';

		            var painter = this._zr.painter;
		            // TODO all use clearColor ?
		            if (painter.isSingleCanvas && painter.isSingleCanvas()) {
		                this._zr.configLayer(0, {
		                    clearColor: backgroundColor
		                });
		            }
		            else {
		                // In IE8
		                if (!env.canvasSupported) {
		                    var colorArr = colorTool.parse(backgroundColor);
		                    backgroundColor = colorTool.stringify(colorArr, 'rgb');
		                    if (colorArr[3] === 0) {
		                        backgroundColor = 'transparent';
		                    }
		                }
		                backgroundColor = backgroundColor;
		                this._dom.style.backgroundColor = backgroundColor;
		            }

		            // console.time && console.timeEnd('update');
		        },

		        // PENDING
		        /**
		         * @param {Object} payload
		         * @private
		         */
		        updateView: function (payload) {
		            var ecModel = this._model;

		            // update before setOption
		            if (!ecModel) {
		                return;
		            }

		            doLayout.call(this, ecModel, payload);

		            doVisualCoding.call(this, ecModel, payload);

		            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
		        },

		        /**
		         * @param {Object} payload
		         * @private
		         */
		        updateVisual: function (payload) {
		            var ecModel = this._model;

		            // update before setOption
		            if (!ecModel) {
		                return;
		            }

		            doVisualCoding.call(this, ecModel, payload);

		            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
		        },

		        /**
		         * @param {Object} payload
		         * @private
		         */
		        updateLayout: function (payload) {
		            var ecModel = this._model;

		            // update before setOption
		            if (!ecModel) {
		                return;
		            }

		            doLayout.call(this, ecModel, payload);

		            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
		        },

		        /**
		         * @param {Object} payload
		         * @private
		         */
		        highlight: function (payload) {
		            toggleHighlight.call(this, 'highlight', payload);
		        },

		        /**
		         * @param {Object} payload
		         * @private
		         */
		        downplay: function (payload) {
		            toggleHighlight.call(this, 'downplay', payload);
		        },

		        /**
		         * @param {Object} payload
		         * @private
		         */
		        prepareAndUpdate: function (payload) {
		            var ecModel = this._model;

		            prepareView.call(this, 'component', ecModel);

		            prepareView.call(this, 'chart', ecModel);

		            updateMethods.update.call(this, payload);
		        }
		    };

		    /**
		     * @param {Object} payload
		     * @private
		     */
		    function toggleHighlight(method, payload) {
		        var ecModel = this._model;

		        // dispatchAction before setOption
		        if (!ecModel) {
		            return;
		        }

		        ecModel.eachComponent(
		            {mainType: 'series', query: payload},
		            function (seriesModel, index) {
		                var chartView = this._chartsMap[seriesModel.__viewId];
		                if (chartView && chartView.__alive) {
		                    chartView[method](
		                        seriesModel, ecModel, this._api, payload
		                    );
		                }
		            },
		            this
		        );
		    }

		    /**
		     * Resize the chart
		     */
		    echartsProto.resize = function () {
		        this._zr.resize();

		        var optionChanged = this._model && this._model.resetOption('media');
		        updateMethods[optionChanged ? 'prepareAndUpdate' : 'update'].call(this);

		        // Resize loading effect
		        this._loadingFX && this._loadingFX.resize();
		    };

		    var defaultLoadingEffect = __webpack_require__(87);
		    /**
		     * Show loading effect
		     * @param  {string} [name='default']
		     * @param  {Object} [cfg]
		     */
		    echartsProto.showLoading = function (name, cfg) {
		        if (zrUtil.isObject(name)) {
		            cfg = name;
		            name = 'default';
		        }
		        this.hideLoading();
		        var el = defaultLoadingEffect(this._api, cfg);
		        var zr = this._zr;
		        this._loadingFX = el;

		        zr.add(el);
		    };

		    /**
		     * Hide loading effect
		     */
		    echartsProto.hideLoading = function () {
		        this._loadingFX && this._zr.remove(this._loadingFX);
		        this._loadingFX = null;
		    };

		    /**
		     * @param {Object} eventObj
		     * @return {Object}
		     */
		    echartsProto.makeActionFromEvent = function (eventObj) {
		        var payload = zrUtil.extend({}, eventObj);
		        payload.type = eventActionMap[eventObj.type];
		        return payload;
		    };

		    /**
		     * @pubilc
		     * @param {Object} payload
		     * @param {string} [payload.type] Action type
		     * @param {boolean} [silent=false] Whether trigger event.
		     */
		    echartsProto.dispatchAction = function (payload, silent) {
		        var actionWrap = actions[payload.type];
		        if (actionWrap) {
		            var actionInfo = actionWrap.actionInfo;
		            var updateMethod = actionInfo.update || 'update';

		            var payloads = [payload];
		            var batched = false;
		            // Batch action
		            if (payload.batch) {
		                batched = true;
		                payloads = zrUtil.map(payload.batch, function (item) {
		                    item = zrUtil.defaults(zrUtil.extend({}, item), payload);
		                    item.batch = null;
		                    return item;
		                });
		            }

		            var eventObjBatch = [];
		            var eventObj;
		            var isHighlightOrDownplay = payload.type === 'highlight' || payload.type === 'downplay';
		            for (var i = 0; i < payloads.length; i++) {
		                var batchItem = payloads[i];
		                // Action can specify the event by return it.
		                eventObj = actionWrap.action(batchItem, this._model);
		                // Emit event outside
		                eventObj = eventObj || zrUtil.extend({}, batchItem);
		                // Convert type to eventType
		                eventObj.type = actionInfo.event || eventObj.type;
		                eventObjBatch.push(eventObj);

		                // Highlight and downplay are special.
		                isHighlightOrDownplay && updateMethods[updateMethod].call(this, batchItem);
		            }

		            (updateMethod !== 'none' && !isHighlightOrDownplay)
		                && updateMethods[updateMethod].call(this, payload);

		            if (!silent) {
		                // Follow the rule of action batch
		                if (batched) {
		                    eventObj = {
		                        type: actionInfo.event || payload.type,
		                        batch: eventObjBatch
		                    };
		                }
		                else {
		                    eventObj = eventObjBatch[0];
		                }
		                this._messageCenter.trigger(eventObj.type, eventObj);
		            }
		        }
		    };

		    /**
		     * Register event
		     * @method
		     */
		    echartsProto.on = createRegisterEventWithLowercaseName('on');
		    echartsProto.off = createRegisterEventWithLowercaseName('off');
		    echartsProto.one = createRegisterEventWithLowercaseName('one');

		    /**
		     * @param {string} methodName
		     * @private
		     */
		    function invokeUpdateMethod(methodName, ecModel, payload) {
		        var api = this._api;

		        // Update all components
		        each(this._componentsViews, function (component) {
		            var componentModel = component.__model;
		            component[methodName](componentModel, ecModel, api, payload);

		            updateZ(componentModel, component);
		        }, this);

		        // Upate all charts
		        ecModel.eachSeries(function (seriesModel, idx) {
		            var chart = this._chartsMap[seriesModel.__viewId];
		            chart[methodName](seriesModel, ecModel, api, payload);

		            updateZ(seriesModel, chart);
		        }, this);

		    }

		    /**
		     * Prepare view instances of charts and components
		     * @param  {module:echarts/model/Global} ecModel
		     * @private
		     */
		    function prepareView(type, ecModel) {
		        var isComponent = type === 'component';
		        var viewList = isComponent ? this._componentsViews : this._chartsViews;
		        var viewMap = isComponent ? this._componentsMap : this._chartsMap;
		        var zr = this._zr;

		        for (var i = 0; i < viewList.length; i++) {
		            viewList[i].__alive = false;
		        }

		        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
		            if (isComponent) {
		                if (componentType === 'series') {
		                    return;
		                }
		            }
		            else {
		                model = componentType;
		            }

		            // Consider: id same and type changed.
		            var viewId = model.id + '_' + model.type;
		            var view = viewMap[viewId];
		            if (!view) {
		                var classType = ComponentModel.parseClassType(model.type);
		                var Clazz = isComponent
		                    ? ComponentView.getClass(classType.main, classType.sub)
		                    : ChartView.getClass(classType.sub);
		                if (Clazz) {
		                    view = new Clazz();
		                    view.init(ecModel, this._api);
		                    viewMap[viewId] = view;
		                    viewList.push(view);
		                    zr.add(view.group);
		                }
		                else {
		                    // Error
		                    return;
		                }
		            }

		            model.__viewId = viewId;
		            view.__alive = true;
		            view.__id = viewId;
		            view.__model = model;
		        }, this);

		        for (var i = 0; i < viewList.length;) {
		            var view = viewList[i];
		            if (!view.__alive) {
		                zr.remove(view.group);
		                view.dispose(ecModel, this._api);
		                viewList.splice(i, 1);
		                delete viewMap[view.__id];
		            }
		            else {
		                i++;
		            }
		        }
		    }

		    /**
		     * Processor data in each series
		     *
		     * @param {module:echarts/model/Global} ecModel
		     * @private
		     */
		    function processData(ecModel, api) {
		        each(PROCESSOR_STAGES, function (stage) {
		            each(dataProcessorFuncs[stage] || [], function (process) {
		                process(ecModel, api);
		            });
		        });
		    }

		    /**
		     * @private
		     */
		    function stackSeriesData(ecModel) {
		        var stackedDataMap = {};
		        ecModel.eachSeries(function (series) {
		            var stack = series.get('stack');
		            var data = series.getData();
		            if (stack && data.type === 'list') {
		                var previousStack = stackedDataMap[stack];
		                if (previousStack) {
		                    data.stackedOn = previousStack;
		                }
		                stackedDataMap[stack] = data;
		            }
		        });
		    }

		    /**
		     * Layout before each chart render there series, after visual coding and data processing
		     *
		     * @param {module:echarts/model/Global} ecModel
		     * @private
		     */
		    function doLayout(ecModel, payload) {
		        var api = this._api;
		        each(layoutFuncs, function (layout) {
		            layout(ecModel, api, payload);
		        });
		    }

		    /**
		     * Code visual infomation from data after data processing
		     *
		     * @param {module:echarts/model/Global} ecModel
		     * @private
		     */
		    function doVisualCoding(ecModel, payload) {
		        each(VISUAL_CODING_STAGES, function (stage) {
		            each(visualCodingFuncs[stage] || [], function (visualCoding) {
		                visualCoding(ecModel, payload);
		            });
		        });
		    }

		    /**
		     * Render each chart and component
		     * @private
		     */
		    function doRender(ecModel, payload) {
		        var api = this._api;
		        // Render all components
		        each(this._componentsViews, function (componentView) {
		            var componentModel = componentView.__model;
		            componentView.render(componentModel, ecModel, api, payload);

		            updateZ(componentModel, componentView);
		        }, this);

		        each(this._chartsViews, function (chart) {
		            chart.__alive = false;
		        }, this);

		        // Render all charts
		        ecModel.eachSeries(function (seriesModel, idx) {
		            var chartView = this._chartsMap[seriesModel.__viewId];
		            chartView.__alive = true;
		            chartView.render(seriesModel, ecModel, api, payload);

		            updateZ(seriesModel, chartView);
		        }, this);

		        // Remove groups of unrendered charts
		        each(this._chartsViews, function (chart) {
		            if (!chart.__alive) {
		                chart.remove(ecModel, api);
		            }
		        }, this);
		    }

		    var MOUSE_EVENT_NAMES = [
		        'click', 'dblclick', 'mouseover', 'mouseout', 'mousedown', 'mouseup', 'globalout'
		    ];
		    /**
		     * @private
		     */
		    echartsProto._initEvents = function () {
		        var zr = this._zr;
		        each(MOUSE_EVENT_NAMES, function (eveName) {
		            zr.on(eveName, function (e) {
		                var ecModel = this.getModel();
		                var el = e.target;
		                if (el && el.dataIndex != null) {
		                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
		                    var params = dataModel && dataModel.getDataParams(el.dataIndex) || {};
		                    params.event = e;
		                    params.type = eveName;
		                    this.trigger(eveName, params);
		                }
		            }, this);
		        }, this);

		        each(eventActionMap, function (actionType, eventType) {
		            this._messageCenter.on(eventType, function (event) {
		                this.trigger(eventType, event);
		            }, this);
		        }, this);
		    };

		    /**
		     * @return {boolean}
		     */
		    echartsProto.isDisposed = function () {
		        return this._disposed;
		    };

		    /**
		     * Clear
		     */
		    echartsProto.clear = function () {
		        this.setOption({}, true);
		    };
		    /**
		     * Dispose instance
		     */
		    echartsProto.dispose = function () {
		        this._disposed = true;
		        var api = this._api;
		        var ecModel = this._model;

		        each(this._componentsViews, function (component) {
		            component.dispose(ecModel, api);
		        });
		        each(this._chartsViews, function (chart) {
		            chart.dispose(ecModel, api);
		        });

		        this._zr.dispose();

		        delete instances[this.id];
		    };

		    zrUtil.mixin(ECharts, Eventful);

		    /**
		     * @param {module:echarts/model/Series|module:echarts/model/Component} model
		     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
		     * @return {string}
		     */
		    function updateZ(model, view) {
		        var z = model.get('z');
		        var zlevel = model.get('zlevel');
		        // Set z and zlevel
		        view.group.traverse(function (el) {
		            z != null && (el.z = z);
		            zlevel != null && (el.zlevel = zlevel);
		        });
		    }
		    /**
		     * @type {Array.<Function>}
		     * @inner
		     */
		    var actions = [];

		    /**
		     * Map eventType to actionType
		     * @type {Object}
		     */
		    var eventActionMap = {};

		    /**
		     * @type {Array.<Function>}
		     * @inner
		     */
		    var layoutFuncs = [];

		    /**
		     * Data processor functions of each stage
		     * @type {Array.<Object.<string, Function>>}
		     * @inner
		     */
		    var dataProcessorFuncs = {};

		    /**
		     * @type {Array.<Function>}
		     * @inner
		     */
		    var optionPreprocessorFuncs = [];

		    /**
		     * Visual coding functions of each stage
		     * @type {Array.<Object.<string, Function>>}
		     * @inner
		     */
		    var visualCodingFuncs = {};
		    /**
		     * Theme storage
		     * @type {Object.<key, Object>}
		     */
		    var themeStorage = {};


		    var instances = {};
		    var connectedGroups = {};

		    var idBase = new Date() - 0;
		    var groupIdBase = new Date() - 0;
		    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
		    /**
		     * @alias module:echarts
		     */
		    var echarts = {
		        /**
		         * @type {number}
		         */
		        version: '3.1.6',
		        dependencies: {
		            zrender: '3.0.7'
		        }
		    };

		    function enableConnect(chart) {

		        var STATUS_PENDING = 0;
		        var STATUS_UPDATING = 1;
		        var STATUS_UPDATED = 2;
		        var STATUS_KEY = '__connectUpdateStatus';
		        function updateConnectedChartsStatus(charts, status) {
		            for (var i = 0; i < charts.length; i++) {
		                var otherChart = charts[i];
		                otherChart[STATUS_KEY] = status;
		            }
		        }
		        zrUtil.each(eventActionMap, function (actionType, eventType) {
		            chart._messageCenter.on(eventType, function (event) {
		                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
		                    var action = chart.makeActionFromEvent(event);
		                    var otherCharts = [];
		                    for (var id in instances) {
		                        var otherChart = instances[id];
		                        if (otherChart !== chart && otherChart.group === chart.group) {
		                            otherCharts.push(otherChart);
		                        }
		                    }
		                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
		                    each(otherCharts, function (otherChart) {
		                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
		                            otherChart.dispatchAction(action);
		                        }
		                    });
		                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
		                }
		            });
		        });

		    }
		    /**
		     * @param {HTMLDomElement} dom
		     * @param {Object} [theme]
		     * @param {Object} opts
		     */
		    echarts.init = function (dom, theme, opts) {
		        // Check version
		        if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {
		            throw new Error(
		                'ZRender ' + zrender.version
		                + ' is too old for ECharts ' + echarts.version
		                + '. Current version need ZRender '
		                + echarts.dependencies.zrender + '+'
		            );
		        }
		        if (!dom) {
		            throw new Error('Initialize failed: invalid dom.');
		        }

		        var chart = new ECharts(dom, theme, opts);
		        chart.id = 'ec_' + idBase++;
		        instances[chart.id] = chart;

		        dom.setAttribute &&
		            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);

		        enableConnect(chart);

		        return chart;
		    };

		    /**
		     * @return {string|Array.<module:echarts~ECharts>} groupId
		     */
		    echarts.connect = function (groupId) {
		        // Is array of charts
		        if (zrUtil.isArray(groupId)) {
		            var charts = groupId;
		            groupId = null;
		            // If any chart has group
		            zrUtil.each(charts, function (chart) {
		                if (chart.group != null) {
		                    groupId = chart.group;
		                }
		            });
		            groupId = groupId || ('g_' + groupIdBase++);
		            zrUtil.each(charts, function (chart) {
		                chart.group = groupId;
		            });
		        }
		        connectedGroups[groupId] = true;
		        return groupId;
		    };

		    /**
		     * @return {string} groupId
		     */
		    echarts.disConnect = function (groupId) {
		        connectedGroups[groupId] = false;
		    };

		    /**
		     * Dispose a chart instance
		     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
		     */
		    echarts.dispose = function (chart) {
		        if (zrUtil.isDom(chart)) {
		            chart = echarts.getInstanceByDom(chart);
		        }
		        else if (typeof chart === 'string') {
		            chart = instances[chart];
		        }
		        if ((chart instanceof ECharts) && !chart.isDisposed()) {
		            chart.dispose();
		        }
		    };

		    /**
		     * @param  {HTMLDomElement} dom
		     * @return {echarts~ECharts}
		     */
		    echarts.getInstanceByDom = function (dom) {
		        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
		        return instances[key];
		    };
		    /**
		     * @param {string} key
		     * @return {echarts~ECharts}
		     */
		    echarts.getInstanceById = function (key) {
		        return instances[key];
		    };

		    /**
		     * Register theme
		     */
		    echarts.registerTheme = function (name, theme) {
		        themeStorage[name] = theme;
		    };

		    /**
		     * Register option preprocessor
		     * @param {Function} preprocessorFunc
		     */
		    echarts.registerPreprocessor = function (preprocessorFunc) {
		        optionPreprocessorFuncs.push(preprocessorFunc);
		    };

		    /**
		     * @param {string} stage
		     * @param {Function} processorFunc
		     */
		    echarts.registerProcessor = function (stage, processorFunc) {
		        if (zrUtil.indexOf(PROCESSOR_STAGES, stage) < 0) {
		            throw new Error('stage should be one of ' + PROCESSOR_STAGES);
		        }
		        var funcs = dataProcessorFuncs[stage] || (dataProcessorFuncs[stage] = []);
		        funcs.push(processorFunc);
		    };

		    /**
		     * Usage:
		     * registerAction('someAction', 'someEvent', function () { ... });
		     * registerAction('someAction', function () { ... });
		     * registerAction(
		     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
		     *     function () { ... }
		     * );
		     *
		     * @param {(string|Object)} actionInfo
		     * @param {string} actionInfo.type
		     * @param {string} [actionInfo.event]
		     * @param {string} [actionInfo.update]
		     * @param {string} [eventName]
		     * @param {Function} action
		     */
		    echarts.registerAction = function (actionInfo, eventName, action) {
		        if (typeof eventName === 'function') {
		            action = eventName;
		            eventName = '';
		        }
		        var actionType = zrUtil.isObject(actionInfo)
		            ? actionInfo.type
		            : ([actionInfo, actionInfo = {
		                event: eventName
		            }][0]);

		        // Event name is all lowercase
		        actionInfo.event = (actionInfo.event || actionType).toLowerCase();
		        eventName = actionInfo.event;

		        if (!actions[actionType]) {
		            actions[actionType] = {action: action, actionInfo: actionInfo};
		        }
		        eventActionMap[eventName] = actionType;
		    };

		    /**
		     * @param {string} type
		     * @param {*} CoordinateSystem
		     */
		    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {
		        CoordinateSystemManager.register(type, CoordinateSystem);
		    };

		    /**
		     * @param {*} layout
		     */
		    echarts.registerLayout = function (layout) {
		        // PENDING All functions ?
		        if (zrUtil.indexOf(layoutFuncs, layout) < 0) {
		            layoutFuncs.push(layout);
		        }
		    };

		    /**
		     * @param {string} stage
		     * @param {Function} visualCodingFunc
		     */
		    echarts.registerVisualCoding = function (stage, visualCodingFunc) {
		        if (zrUtil.indexOf(VISUAL_CODING_STAGES, stage) < 0) {
		            throw new Error('stage should be one of ' + VISUAL_CODING_STAGES);
		        }
		        var funcs = visualCodingFuncs[stage] || (visualCodingFuncs[stage] = []);
		        funcs.push(visualCodingFunc);
		    };

		    /**
		     * @param {Object} opts
		     */
		    echarts.extendChartView = function (opts) {
		        return ChartView.extend(opts);
		    };

		    /**
		     * @param {Object} opts
		     */
		    echarts.extendComponentModel = function (opts) {
		        return ComponentModel.extend(opts);
		    };

		    /**
		     * @param {Object} opts
		     */
		    echarts.extendSeriesModel = function (opts) {
		        return SeriesModel.extend(opts);
		    };

		    /**
		     * @param {Object} opts
		     */
		    echarts.extendComponentView = function (opts) {
		        return ComponentView.extend(opts);
		    };

		    /**
		     * ZRender need a canvas context to do measureText.
		     * But in node environment canvas may be created by node-canvas.
		     * So we need to specify how to create a canvas instead of using document.createElement('canvas')
		     *
		     * Be careful of using it in the browser.
		     *
		     * @param {Function} creator
		     * @example
		     *     var Canvas = require('canvas');
		     *     var echarts = require('echarts');
		     *     echarts.setCanvasCreator(function () {
		     *         // Small size is enough.
		     *         return new Canvas(32, 32);
		     *     });
		     */
		    echarts.setCanvasCreator = function (creator) {
		        zrUtil.createCanvas = creator;
		    };

		    echarts.registerVisualCoding('echarts', zrUtil.curry(
		        __webpack_require__(88), '', 'itemStyle'
		    ));
		    echarts.registerPreprocessor(__webpack_require__(89));

		    // Default action
		    echarts.registerAction({
		        type: 'highlight',
		        event: 'highlight',
		        update: 'highlight'
		    }, zrUtil.noop);
		    echarts.registerAction({
		        type: 'downplay',
		        event: 'downplay',
		        update: 'downplay'
		    }, zrUtil.noop);


		    // --------
		    // Exports
		    // --------

		    echarts.graphic = __webpack_require__(42);
		    echarts.number = __webpack_require__(7);
		    echarts.format = __webpack_require__(6);
		    echarts.matrix = __webpack_require__(17);
		    echarts.vector = __webpack_require__(16);

		    echarts.util = {};
		    each([
		            'map', 'each', 'filter', 'indexOf', 'inherits',
		            'reduce', 'filter', 'bind', 'curry', 'isArray',
		            'isString', 'isObject', 'isFunction', 'extend'
		        ],
		        function (name) {
		            echarts.util[name] = zrUtil[name];
		        }
		    );

		    module.exports = echarts;


	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * ECharts global model
		 *
		 * @module {echarts/model/Global}
		 *
		 */



		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);
		    var Model = __webpack_require__(8);
		    var each = zrUtil.each;
		    var filter = zrUtil.filter;
		    var map = zrUtil.map;
		    var isArray = zrUtil.isArray;
		    var indexOf = zrUtil.indexOf;
		    var isObject = zrUtil.isObject;

		    var ComponentModel = __webpack_require__(19);

		    var globalDefault = __webpack_require__(23);

		    var OPTION_INNER_KEY = '\0_ec_inner';

		    /**
		     * @alias module:echarts/model/Global
		     *
		     * @param {Object} option
		     * @param {module:echarts/model/Model} parentModel
		     * @param {Object} theme
		     */
		    var GlobalModel = Model.extend({

		        constructor: GlobalModel,

		        init: function (option, parentModel, theme, optionManager) {
		            theme = theme || {};

		            this.option = null; // Mark as not initialized.

		            /**
		             * @type {module:echarts/model/Model}
		             * @private
		             */
		            this._theme = new Model(theme);

		            /**
		             * @type {module:echarts/model/OptionManager}
		             */
		            this._optionManager = optionManager;
		        },

		        setOption: function (option, optionPreprocessorFuncs) {
		            zrUtil.assert(
		                !(OPTION_INNER_KEY in option),
		                'please use chart.getOption()'
		            );

		            this._optionManager.setOption(option, optionPreprocessorFuncs);

		            this.resetOption();
		        },

		        /**
		         * @param {string} type null/undefined: reset all.
		         *                      'recreate': force recreate all.
		         *                      'timeline': only reset timeline option
		         *                      'media': only reset media query option
		         * @return {boolean} Whether option changed.
		         */
		        resetOption: function (type) {
		            var optionChanged = false;
		            var optionManager = this._optionManager;

		            if (!type || type === 'recreate') {
		                var baseOption = optionManager.mountOption(type === 'recreate');

		                if (!this.option || type === 'recreate') {
		                    initBase.call(this, baseOption);
		                }
		                else {
		                    this.restoreData();
		                    this.mergeOption(baseOption);
		                }
		                optionChanged = true;
		            }

		            if (type === 'timeline' || type === 'media') {
		                this.restoreData();
		            }

		            if (!type || type === 'recreate' || type === 'timeline') {
		                var timelineOption = optionManager.getTimelineOption(this);
		                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
		            }

		            if (!type || type === 'recreate' || type === 'media') {
		                var mediaOptions = optionManager.getMediaOption(this, this._api);
		                if (mediaOptions.length) {
		                    each(mediaOptions, function (mediaOption) {
		                        this.mergeOption(mediaOption, optionChanged = true);
		                    }, this);
		                }
		            }

		            return optionChanged;
		        },

		        /**
		         * @protected
		         */
		        mergeOption: function (newOption) {
		            var option = this.option;
		            var componentsMap = this._componentsMap;
		            var newCptTypes = [];

		            // 如果不存在对应的 component model 则直接 merge
		            each(newOption, function (componentOption, mainType) {
		                if (componentOption == null) {
		                    return;
		                }

		                if (!ComponentModel.hasClass(mainType)) {
		                    option[mainType] = option[mainType] == null
		                        ? zrUtil.clone(componentOption)
		                        : zrUtil.merge(option[mainType], componentOption, true);
		                }
		                else {
		                    newCptTypes.push(mainType);
		                }
		            });

		            // FIXME OPTION 同步是否要改回原来的
		            ComponentModel.topologicalTravel(
		                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this
		            );

		            function visitComponent(mainType, dependencies) {
		                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);

		                var mapResult = modelUtil.mappingToExists(
		                    componentsMap[mainType], newCptOptionList
		                );

		                makeKeyInfo(mainType, mapResult);

		                var dependentModels = getComponentsByTypes(
		                    componentsMap, dependencies
		                );

		                option[mainType] = [];
		                componentsMap[mainType] = [];

		                each(mapResult, function (resultItem, index) {
		                    var componentModel = resultItem.exist;
		                    var newCptOption = resultItem.option;

		                    zrUtil.assert(
		                        isObject(newCptOption) || componentModel,
		                        'Empty component definition'
		                    );

		                    // Consider where is no new option and should be merged using {},
		                    // see removeEdgeAndAdd in topologicalTravel and
		                    // ComponentModel.getAllClassMainTypes.
		                    if (!newCptOption) {
		                        componentModel.mergeOption({}, this);
		                        componentModel.optionUpdated(this);
		                    }
		                    else {
		                        var ComponentModelClass = ComponentModel.getClass(
		                            mainType, resultItem.keyInfo.subType, true
		                        );

		                        if (componentModel && componentModel instanceof ComponentModelClass) {
		                            componentModel.mergeOption(newCptOption, this);
		                            componentModel.optionUpdated(this);
		                        }
		                        else {
		                            // PENDING Global as parent ?
		                            componentModel = new ComponentModelClass(
		                                newCptOption, this, this,
		                                zrUtil.extend(
		                                    {
		                                        dependentModels: dependentModels,
		                                        componentIndex: index
		                                    },
		                                    resultItem.keyInfo
		                                )
		                            );
		                            // Call optionUpdated after init
		                            componentModel.optionUpdated(this);
		                        }
		                    }

		                    componentsMap[mainType][index] = componentModel;
		                    option[mainType][index] = componentModel.option;
		                }, this);

		                // Backup series for filtering.
		                if (mainType === 'series') {
		                    this._seriesIndices = createSeriesIndices(componentsMap.series);
		                }
		            }
		        },

		        /**
		         * Get option for output (cloned option and inner info removed)
		         * @public
		         * @return {Object}
		         */
		        getOption: function () {
		            var option = zrUtil.clone(this.option);

		            each(option, function (opts, mainType) {
		                if (ComponentModel.hasClass(mainType)) {
		                    var opts = modelUtil.normalizeToArray(opts);
		                    for (var i = opts.length - 1; i >= 0; i--) {
		                        // Remove options with inner id.
		                        if (modelUtil.isIdInner(opts[i])) {
		                            opts.splice(i, 1);
		                        }
		                    }
		                    option[mainType] = opts;
		                }
		            });

		            delete option[OPTION_INNER_KEY];

		            return option;
		        },

		        /**
		         * @return {module:echarts/model/Model}
		         */
		        getTheme: function () {
		            return this._theme;
		        },

		        /**
		         * @param {string} mainType
		         * @param {number} [idx=0]
		         * @return {module:echarts/model/Component}
		         */
		        getComponent: function (mainType, idx) {
		            var list = this._componentsMap[mainType];
		            if (list) {
		                return list[idx || 0];
		            }
		        },

		        /**
		         * @param {Object} condition
		         * @param {string} condition.mainType
		         * @param {string} [condition.subType] If ignore, only query by mainType
		         * @param {number} [condition.index] Either input index or id or name.
		         * @param {string} [condition.id] Either input index or id or name.
		         * @param {string} [condition.name] Either input index or id or name.
		         * @return {Array.<module:echarts/model/Component>}
		         */
		        queryComponents: function (condition) {
		            var mainType = condition.mainType;
		            if (!mainType) {
		                return [];
		            }

		            var index = condition.index;
		            var id = condition.id;
		            var name = condition.name;

		            var cpts = this._componentsMap[mainType];

		            if (!cpts || !cpts.length) {
		                return [];
		            }

		            var result;

		            if (index != null) {
		                if (!isArray(index)) {
		                    index = [index];
		                }
		                result = filter(map(index, function (idx) {
		                    return cpts[idx];
		                }), function (val) {
		                    return !!val;
		                });
		            }
		            else if (id != null) {
		                var isIdArray = isArray(id);
		                result = filter(cpts, function (cpt) {
		                    return (isIdArray && indexOf(id, cpt.id) >= 0)
		                        || (!isIdArray && cpt.id === id);
		                });
		            }
		            else if (name != null) {
		                var isNameArray = isArray(name);
		                result = filter(cpts, function (cpt) {
		                    return (isNameArray && indexOf(name, cpt.name) >= 0)
		                        || (!isNameArray && cpt.name === name);
		                });
		            }

		            return filterBySubType(result, condition);
		        },

		        /**
		         * The interface is different from queryComponents,
		         * which is convenient for inner usage.
		         *
		         * @usage
		         * var result = findComponents(
		         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
		         * );
		         * var result = findComponents(
		         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
		         * );
		         * var result = findComponents(
		         *     {mainType: 'series'},
		         *     function (model, index) {...}
		         * );
		         * // result like [component0, componnet1, ...]
		         *
		         * @param {Object} condition
		         * @param {string} condition.mainType Mandatory.
		         * @param {string} [condition.subType] Optional.
		         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
		         *        where xxx is mainType.
		         *        If query attribute is null/undefined or has no index/id/name,
		         *        do not filtering by query conditions, which is convenient for
		         *        no-payload situations or when target of action is global.
		         * @param {Function} [condition.filter] parameter: component, return boolean.
		         * @return {Array.<module:echarts/model/Component>}
		         */
		        findComponents: function (condition) {
		            var query = condition.query;
		            var mainType = condition.mainType;

		            var queryCond = getQueryCond(query);
		            var result = queryCond
		                ? this.queryComponents(queryCond)
		                : this._componentsMap[mainType];

		            return doFilter(filterBySubType(result, condition));

		            function getQueryCond(q) {
		                var indexAttr = mainType + 'Index';
		                var idAttr = mainType + 'Id';
		                var nameAttr = mainType + 'Name';
		                return q && (
		                        q.hasOwnProperty(indexAttr)
		                        || q.hasOwnProperty(idAttr)
		                        || q.hasOwnProperty(nameAttr)
		                    )
		                    ? {
		                        mainType: mainType,
		                        // subType will be filtered finally.
		                        index: q[indexAttr],
		                        id: q[idAttr],
		                        name: q[nameAttr]
		                    }
		                    : null;
		            }

		            function doFilter(res) {
		                return condition.filter
		                     ? filter(res, condition.filter)
		                     : res;
		            }
		        },

		        /**
		         * @usage
		         * eachComponent('legend', function (legendModel, index) {
		         *     ...
		         * });
		         * eachComponent(function (componentType, model, index) {
		         *     // componentType does not include subType
		         *     // (componentType is 'xxx' but not 'xxx.aa')
		         * });
		         * eachComponent(
		         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
		         *     function (model, index) {...}
		         * );
		         * eachComponent(
		         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
		         *     function (model, index) {...}
		         * );
		         *
		         * @param {string|Object=} mainType When mainType is object, the definition
		         *                                  is the same as the method 'findComponents'.
		         * @param {Function} cb
		         * @param {*} context
		         */
		        eachComponent: function (mainType, cb, context) {
		            var componentsMap = this._componentsMap;

		            if (typeof mainType === 'function') {
		                context = cb;
		                cb = mainType;
		                each(componentsMap, function (components, componentType) {
		                    each(components, function (component, index) {
		                        cb.call(context, componentType, component, index);
		                    });
		                });
		            }
		            else if (zrUtil.isString(mainType)) {
		                each(componentsMap[mainType], cb, context);
		            }
		            else if (isObject(mainType)) {
		                var queryResult = this.findComponents(mainType);
		                each(queryResult, cb, context);
		            }
		        },

		        /**
		         * @param {string} name
		         * @return {Array.<module:echarts/model/Series>}
		         */
		        getSeriesByName: function (name) {
		            var series = this._componentsMap.series;
		            return filter(series, function (oneSeries) {
		                return oneSeries.name === name;
		            });
		        },

		        /**
		         * @param {number} seriesIndex
		         * @return {module:echarts/model/Series}
		         */
		        getSeriesByIndex: function (seriesIndex) {
		            return this._componentsMap.series[seriesIndex];
		        },

		        /**
		         * @param {string} subType
		         * @return {Array.<module:echarts/model/Series>}
		         */
		        getSeriesByType: function (subType) {
		            var series = this._componentsMap.series;
		            return filter(series, function (oneSeries) {
		                return oneSeries.subType === subType;
		            });
		        },

		        /**
		         * @return {Array.<module:echarts/model/Series>}
		         */
		        getSeries: function () {
		            return this._componentsMap.series.slice();
		        },

		        /**
		         * After filtering, series may be different
		         * frome raw series.
		         *
		         * @param {Function} cb
		         * @param {*} context
		         */
		        eachSeries: function (cb, context) {
		            assertSeriesInitialized(this);
		            each(this._seriesIndices, function (rawSeriesIndex) {
		                var series = this._componentsMap.series[rawSeriesIndex];
		                cb.call(context, series, rawSeriesIndex);
		            }, this);
		        },

		        /**
		         * Iterate raw series before filtered.
		         *
		         * @param {Function} cb
		         * @param {*} context
		         */
		        eachRawSeries: function (cb, context) {
		            each(this._componentsMap.series, cb, context);
		        },

		        /**
		         * After filtering, series may be different.
		         * frome raw series.
		         *
		         * @parma {string} subType
		         * @param {Function} cb
		         * @param {*} context
		         */
		        eachSeriesByType: function (subType, cb, context) {
		            assertSeriesInitialized(this);
		            each(this._seriesIndices, function (rawSeriesIndex) {
		                var series = this._componentsMap.series[rawSeriesIndex];
		                if (series.subType === subType) {
		                    cb.call(context, series, rawSeriesIndex);
		                }
		            }, this);
		        },

		        /**
		         * Iterate raw series before filtered of given type.
		         *
		         * @parma {string} subType
		         * @param {Function} cb
		         * @param {*} context
		         */
		        eachRawSeriesByType: function (subType, cb, context) {
		            return each(this.getSeriesByType(subType), cb, context);
		        },

		        /**
		         * @param {module:echarts/model/Series} seriesModel
		         */
		        isSeriesFiltered: function (seriesModel) {
		            assertSeriesInitialized(this);
		            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
		        },

		        /**
		         * @param {Function} cb
		         * @param {*} context
		         */
		        filterSeries: function (cb, context) {
		            assertSeriesInitialized(this);
		            var filteredSeries = filter(
		                this._componentsMap.series, cb, context
		            );
		            this._seriesIndices = createSeriesIndices(filteredSeries);
		        },

		        restoreData: function () {
		            var componentsMap = this._componentsMap;

		            this._seriesIndices = createSeriesIndices(componentsMap.series);

		            var componentTypes = [];
		            each(componentsMap, function (components, componentType) {
		                componentTypes.push(componentType);
		            });

		            ComponentModel.topologicalTravel(
		                componentTypes,
		                ComponentModel.getAllClassMainTypes(),
		                function (componentType, dependencies) {
		                    each(componentsMap[componentType], function (component) {
		                        component.restoreData();
		                    });
		                }
		            );
		        }

		    });

		    /**
		     * @inner
		     */
		    function mergeTheme(option, theme) {
		        for (var name in theme) {
		            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
		            if (!ComponentModel.hasClass(name)) {
		                if (typeof theme[name] === 'object') {
		                    option[name] = !option[name]
		                        ? zrUtil.clone(theme[name])
		                        : zrUtil.merge(option[name], theme[name], false);
		                }
		                else {
		                    if (option[name] == null) {
		                        option[name] = theme[name];
		                    }
		                }
		            }
		        }
		    }

		    function initBase(baseOption) {
		        baseOption = baseOption;

		        // Using OPTION_INNER_KEY to mark that this option can not be used outside,
		        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
		        this.option = {};
		        this.option[OPTION_INNER_KEY] = 1;

		        /**
		         * @type {Object.<string, Array.<module:echarts/model/Model>>}
		         * @private
		         */
		        this._componentsMap = {};

		        /**
		         * Mapping between filtered series list and raw series list.
		         * key: filtered series indices, value: raw series indices.
		         * @type {Array.<nubmer>}
		         * @private
		         */
		        this._seriesIndices = null;

		        mergeTheme(baseOption, this._theme.option);

		        // TODO Needs clone when merging to the unexisted property
		        zrUtil.merge(baseOption, globalDefault, false);

		        this.mergeOption(baseOption);
		    }

		    /**
		     * @inner
		     * @param {Array.<string>|string} types model types
		     * @return {Object} key: {string} type, value: {Array.<Object>} models
		     */
		    function getComponentsByTypes(componentsMap, types) {
		        if (!zrUtil.isArray(types)) {
		            types = types ? [types] : [];
		        }

		        var ret = {};
		        each(types, function (type) {
		            ret[type] = (componentsMap[type] || []).slice();
		        });

		        return ret;
		    }

		    /**
		     * @inner
		     */
		    function makeKeyInfo(mainType, mapResult) {
		        // We use this id to hash component models and view instances
		        // in echarts. id can be specified by user, or auto generated.

		        // The id generation rule ensures new view instance are able
		        // to mapped to old instance when setOption are called in
		        // no-merge mode. So we generate model id by name and plus
		        // type in view id.

		        // name can be duplicated among components, which is convenient
		        // to specify multi components (like series) by one name.

		        // Ensure that each id is distinct.
		        var idMap = {};

		        each(mapResult, function (item, index) {
		            var existCpt = item.exist;
		            existCpt && (idMap[existCpt.id] = item);
		        });

		        each(mapResult, function (item, index) {
		            var opt = item.option;

		            zrUtil.assert(
		                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,
		                'id duplicates: ' + (opt && opt.id)
		            );

		            opt && opt.id != null && (idMap[opt.id] = item);

		            // Complete subType
		            if (isObject(opt)) {
		                var subType = determineSubType(mainType, opt, item.exist);
		                item.keyInfo = {mainType: mainType, subType: subType};
		            }
		        });

		        // Make name and id.
		        each(mapResult, function (item, index) {
		            var existCpt = item.exist;
		            var opt = item.option;
		            var keyInfo = item.keyInfo;

		            if (!isObject(opt)) {
		                return;
		            }

		            // name can be overwitten. Consider case: axis.name = '20km'.
		            // But id generated by name will not be changed, which affect
		            // only in that case: setOption with 'not merge mode' and view
		            // instance will be recreated, which can be accepted.
		            keyInfo.name = opt.name != null
		                ? opt.name + ''
		                : existCpt
		                ? existCpt.name
		                : '\0-';

		            if (existCpt) {
		                keyInfo.id = existCpt.id;
		            }
		            else if (opt.id != null) {
		                keyInfo.id = opt.id + '';
		            }
		            else {
		                // Consider this situatoin:
		                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
		                //  optionB [{..}, {name: 'a'}, {name: 'a'}]
		                // Series with the same name between optionA and optionB
		                // should be mapped.
		                var idNum = 0;
		                do {
		                    keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
		                }
		                while (idMap[keyInfo.id]);
		            }

		            idMap[keyInfo.id] = item;
		        });
		    }

		    /**
		     * @inner
		     */
		    function determineSubType(mainType, newCptOption, existComponent) {
		        var subType = newCptOption.type
		            ? newCptOption.type
		            : existComponent
		            ? existComponent.subType
		            // Use determineSubType only when there is no existComponent.
		            : ComponentModel.determineSubType(mainType, newCptOption);

		        // tooltip, markline, markpoint may always has no subType
		        return subType;
		    }

		    /**
		     * @inner
		     */
		    function createSeriesIndices(seriesModels) {
		        return map(seriesModels, function (series) {
		            return series.componentIndex;
		        }) || [];
		    }

		    /**
		     * @inner
		     */
		    function filterBySubType(components, condition) {
		        // Using hasOwnProperty for restrict. Consider
		        // subType is undefined in user payload.
		        return condition.hasOwnProperty('subType')
		            ? filter(components, function (cpt) {
		                return cpt.subType === condition.subType;
		            })
		            : components;
		    }

		    /**
		     * @inner
		     */
		    function assertSeriesInitialized(ecModel) {
		        // Components that use _seriesIndices should depends on series component,
		        // which make sure that their initialization is after series.
		        if (!ecModel._seriesIndices) {
		            throw new Error('Series has not been initialized yet.');
		        }
		    }

		    module.exports = GlobalModel;


	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module zrender/core/util
		 */

		    var Gradient = __webpack_require__(4);
		    // 用于处理merge时无法遍历Date等对象的问题
		    var BUILTIN_OBJECT = {
		        '[object Function]': 1,
		        '[object RegExp]': 1,
		        '[object Date]': 1,
		        '[object Error]': 1,
		        '[object CanvasGradient]': 1
		    };

		    var objToString = Object.prototype.toString;

		    var arrayProto = Array.prototype;
		    var nativeForEach = arrayProto.forEach;
		    var nativeFilter = arrayProto.filter;
		    var nativeSlice = arrayProto.slice;
		    var nativeMap = arrayProto.map;
		    var nativeReduce = arrayProto.reduce;

		    /**
		     * @param {*} source
		     * @return {*} 拷贝后的新对象
		     */
		    function clone(source) {
		        if (typeof source == 'object' && source !== null) {
		            var result = source;
		            if (source instanceof Array) {
		                result = [];
		                for (var i = 0, len = source.length; i < len; i++) {
		                    result[i] = clone(source[i]);
		                }
		            }
		            else if (
		                !isBuildInObject(source)
		                // 是否为 dom 对象
		                && !isDom(source)
		            ) {
		                result = {};
		                for (var key in source) {
		                    if (source.hasOwnProperty(key)) {
		                        result[key] = clone(source[key]);
		                    }
		                }
		            }

		            return result;
		        }

		        return source;
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {*} target
		     * @param {*} source
		     * @param {boolean} [overwrite=false]
		     */
		    function merge(target, source, overwrite) {
		        // We should escapse that source is string
		        // and enter for ... in ...
		        if (!isObject(source) || !isObject(target)) {
		            return overwrite ? clone(source) : target;
		        }

		        for (var key in source) {
		            if (source.hasOwnProperty(key)) {
		                var targetProp = target[key];
		                var sourceProp = source[key];

		                if (isObject(sourceProp)
		                    && isObject(targetProp)
		                    && !isArray(sourceProp)
		                    && !isArray(targetProp)
		                    && !isDom(sourceProp)
		                    && !isDom(targetProp)
		                    && !isBuildInObject(sourceProp)
		                    && !isBuildInObject(targetProp)
		                ) {
		                    // 如果需要递归覆盖，就递归调用merge
		                    merge(targetProp, sourceProp, overwrite);
		                }
		                else if (overwrite || !(key in target)) {
		                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
		                    // NOTE，在 target[key] 不存在的时候也是直接覆盖
		                    target[key] = clone(source[key], true);
		                }
		            }
		        }

		        return target;
		    }

		    /**
		     * @param {Array} targetAndSources The first item is target, and the rests are source.
		     * @param {boolean} [overwrite=false]
		     * @return {*} target
		     */
		    function mergeAll(targetAndSources, overwrite) {
		        var result = targetAndSources[0];
		        for (var i = 1, len = targetAndSources.length; i < len; i++) {
		            result = merge(result, targetAndSources[i], overwrite);
		        }
		        return result;
		    }

		    /**
		     * @param {*} target
		     * @param {*} source
		     * @memberOf module:zrender/core/util
		     */
		    function extend(target, source) {
		        for (var key in source) {
		            if (source.hasOwnProperty(key)) {
		                target[key] = source[key];
		            }
		        }
		        return target;
		    }

		    /**
		     * @param {*} target
		     * @param {*} source
		     * @param {boolen} [overlay=false]
		     * @memberOf module:zrender/core/util
		     */
		    function defaults(target, source, overlay) {
		        for (var key in source) {
		            if (source.hasOwnProperty(key)
		                && (overlay ? source[key] != null : target[key] == null)
		            ) {
		                target[key] = source[key];
		            }
		        }
		        return target;
		    }

		    function createCanvas() {
		        return document.createElement('canvas');
		    }
		    // FIXME
		    var _ctx;
		    function getContext() {
		        if (!_ctx) {
		            // Use util.createCanvas instead of createCanvas
		            // because createCanvas may be overwritten in different environment
		            _ctx = util.createCanvas().getContext('2d');
		        }
		        return _ctx;
		    }

		    /**
		     * 查询数组中元素的index
		     * @memberOf module:zrender/core/util
		     */
		    function indexOf(array, value) {
		        if (array) {
		            if (array.indexOf) {
		                return array.indexOf(value);
		            }
		            for (var i = 0, len = array.length; i < len; i++) {
		                if (array[i] === value) {
		                    return i;
		                }
		            }
		        }
		        return -1;
		    }

		    /**
		     * 构造类继承关系
		     *
		     * @memberOf module:zrender/core/util
		     * @param {Function} clazz 源类
		     * @param {Function} baseClazz 基类
		     */
		    function inherits(clazz, baseClazz) {
		        var clazzPrototype = clazz.prototype;
		        function F() {}
		        F.prototype = baseClazz.prototype;
		        clazz.prototype = new F();

		        for (var prop in clazzPrototype) {
		            clazz.prototype[prop] = clazzPrototype[prop];
		        }
		        clazz.prototype.constructor = clazz;
		        clazz.superClass = baseClazz;
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {Object|Function} target
		     * @param {Object|Function} sorce
		     * @param {boolean} overlay
		     */
		    function mixin(target, source, overlay) {
		        target = 'prototype' in target ? target.prototype : target;
		        source = 'prototype' in source ? source.prototype : source;

		        defaults(target, source, overlay);
		    }

		    /**
		     * @param {Array|TypedArray} data
		     */
		    function isArrayLike(data) {
		        if (! data) {
		            return;
		        }
		        if (typeof data == 'string') {
		            return false;
		        }
		        return typeof data.length == 'number';
		    }

		    /**
		     * 数组或对象遍历
		     * @memberOf module:zrender/core/util
		     * @param {Object|Array} obj
		     * @param {Function} cb
		     * @param {*} [context]
		     */
		    function each(obj, cb, context) {
		        if (!(obj && cb)) {
		            return;
		        }
		        if (obj.forEach && obj.forEach === nativeForEach) {
		            obj.forEach(cb, context);
		        }
		        else if (obj.length === +obj.length) {
		            for (var i = 0, len = obj.length; i < len; i++) {
		                cb.call(context, obj[i], i, obj);
		            }
		        }
		        else {
		            for (var key in obj) {
		                if (obj.hasOwnProperty(key)) {
		                    cb.call(context, obj[key], key, obj);
		                }
		            }
		        }
		    }

		    /**
		     * 数组映射
		     * @memberOf module:zrender/core/util
		     * @param {Array} obj
		     * @param {Function} cb
		     * @param {*} [context]
		     * @return {Array}
		     */
		    function map(obj, cb, context) {
		        if (!(obj && cb)) {
		            return;
		        }
		        if (obj.map && obj.map === nativeMap) {
		            return obj.map(cb, context);
		        }
		        else {
		            var result = [];
		            for (var i = 0, len = obj.length; i < len; i++) {
		                result.push(cb.call(context, obj[i], i, obj));
		            }
		            return result;
		        }
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {Array} obj
		     * @param {Function} cb
		     * @param {Object} [memo]
		     * @param {*} [context]
		     * @return {Array}
		     */
		    function reduce(obj, cb, memo, context) {
		        if (!(obj && cb)) {
		            return;
		        }
		        if (obj.reduce && obj.reduce === nativeReduce) {
		            return obj.reduce(cb, memo, context);
		        }
		        else {
		            for (var i = 0, len = obj.length; i < len; i++) {
		                memo = cb.call(context, memo, obj[i], i, obj);
		            }
		            return memo;
		        }
		    }

		    /**
		     * 数组过滤
		     * @memberOf module:zrender/core/util
		     * @param {Array} obj
		     * @param {Function} cb
		     * @param {*} [context]
		     * @return {Array}
		     */
		    function filter(obj, cb, context) {
		        if (!(obj && cb)) {
		            return;
		        }
		        if (obj.filter && obj.filter === nativeFilter) {
		            return obj.filter(cb, context);
		        }
		        else {
		            var result = [];
		            for (var i = 0, len = obj.length; i < len; i++) {
		                if (cb.call(context, obj[i], i, obj)) {
		                    result.push(obj[i]);
		                }
		            }
		            return result;
		        }
		    }

		    /**
		     * 数组项查找
		     * @memberOf module:zrender/core/util
		     * @param {Array} obj
		     * @param {Function} cb
		     * @param {*} [context]
		     * @return {Array}
		     */
		    function find(obj, cb, context) {
		        if (!(obj && cb)) {
		            return;
		        }
		        for (var i = 0, len = obj.length; i < len; i++) {
		            if (cb.call(context, obj[i], i, obj)) {
		                return obj[i];
		            }
		        }
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {Function} func
		     * @param {*} context
		     * @return {Function}
		     */
		    function bind(func, context) {
		        var args = nativeSlice.call(arguments, 2);
		        return function () {
		            return func.apply(context, args.concat(nativeSlice.call(arguments)));
		        };
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {Function} func
		     * @return {Function}
		     */
		    function curry(func) {
		        var args = nativeSlice.call(arguments, 1);
		        return function () {
		            return func.apply(this, args.concat(nativeSlice.call(arguments)));
		        };
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {*} value
		     * @return {boolean}
		     */
		    function isArray(value) {
		        return objToString.call(value) === '[object Array]';
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {*} value
		     * @return {boolean}
		     */
		    function isFunction(value) {
		        return typeof value === 'function';
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {*} value
		     * @return {boolean}
		     */
		    function isString(value) {
		        return objToString.call(value) === '[object String]';
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {*} value
		     * @return {boolean}
		     */
		    function isObject(value) {
		        // Avoid a V8 JIT bug in Chrome 19-20.
		        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
		        var type = typeof value;
		        return type === 'function' || (!!value && type == 'object');
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {*} value
		     * @return {boolean}
		     */
		    function isBuildInObject(value) {
		        return !!BUILTIN_OBJECT[objToString.call(value)]
		            || (value instanceof Gradient);
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {*} value
		     * @return {boolean}
		     */
		    function isDom(value) {
		        return value && value.nodeType === 1
		               && typeof(value.nodeName) == 'string';
		    }

		    /**
		     * If value1 is not null, then return value1, otherwise judget rest of values.
		     * @memberOf module:zrender/core/util
		     * @return {*} Final value
		     */
		    function retrieve(values) {
		        for (var i = 0, len = arguments.length; i < len; i++) {
		            if (arguments[i] != null) {
		                return arguments[i];
		            }
		        }
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {Array} arr
		     * @param {number} startIndex
		     * @param {number} endIndex
		     * @return {Array}
		     */
		    function slice() {
		        return Function.call.apply(nativeSlice, arguments);
		    }

		    /**
		     * @memberOf module:zrender/core/util
		     * @param {boolean} condition
		     * @param {string} message
		     */
		    function assert(condition, message) {
		        if (!condition) {
		            throw new Error(message);
		        }
		    }

		    var util = {
		        inherits: inherits,
		        mixin: mixin,
		        clone: clone,
		        merge: merge,
		        mergeAll: mergeAll,
		        extend: extend,
		        defaults: defaults,
		        getContext: getContext,
		        createCanvas: createCanvas,
		        indexOf: indexOf,
		        slice: slice,
		        find: find,
		        isArrayLike: isArrayLike,
		        each: each,
		        map: map,
		        reduce: reduce,
		        filter: filter,
		        bind: bind,
		        curry: curry,
		        isArray: isArray,
		        isString: isString,
		        isObject: isObject,
		        isFunction: isFunction,
		        isBuildInObject: isBuildInObject,
		        isDom: isDom,
		        retrieve: retrieve,
		        assert: assert,
		        noop: function () {}
		    };
		    module.exports = util;



	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		

		    /**
		     * @param {Array.<Object>} colorStops
		     */
		    var Gradient = function (colorStops) {

		        this.colorStops = colorStops || [];
		    };

		    Gradient.prototype = {

		        constructor: Gradient,

		        addColorStop: function (offset, color) {
		            this.colorStops.push({

		                offset: offset,

		                color: color
		            });
		        }
		    };

		    module.exports = Gradient;


	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var formatUtil = __webpack_require__(6);
		    var nubmerUtil = __webpack_require__(7);
		    var zrUtil = __webpack_require__(3);

		    var Model = __webpack_require__(8);

		    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle'];

		    var modelUtil = {};

		    /**
		     * Create "each" method to iterate names.
		     *
		     * @pubilc
		     * @param  {Array.<string>} names
		     * @param  {Array.<string>=} attrs
		     * @return {Function}
		     */
		    modelUtil.createNameEach = function (names, attrs) {
		        names = names.slice();
		        var capitalNames = zrUtil.map(names, modelUtil.capitalFirst);
		        attrs = (attrs || []).slice();
		        var capitalAttrs = zrUtil.map(attrs, modelUtil.capitalFirst);

		        return function (callback, context) {
		            zrUtil.each(names, function (name, index) {
		                var nameObj = {name: name, capital: capitalNames[index]};

		                for (var j = 0; j < attrs.length; j++) {
		                    nameObj[attrs[j]] = name + capitalAttrs[j];
		                }

		                callback.call(context, nameObj);
		            });
		        };
		    };

		    /**
		     * @public
		     */
		    modelUtil.capitalFirst = function (str) {
		        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
		    };

		    /**
		     * Iterate each dimension name.
		     *
		     * @public
		     * @param {Function} callback The parameter is like:
		     *                            {
		     *                                name: 'angle',
		     *                                capital: 'Angle',
		     *                                axis: 'angleAxis',
		     *                                axisIndex: 'angleAixs',
		     *                                index: 'angleIndex'
		     *                            }
		     * @param {Object} context
		     */
		    modelUtil.eachAxisDim = modelUtil.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index']);

		    /**
		     * If value is not array, then translate it to array.
		     * @param  {*} value
		     * @return {Array} [value] or value
		     */
		    modelUtil.normalizeToArray = function (value) {
		        return zrUtil.isArray(value)
		            ? value
		            : value == null
		            ? []
		            : [value];
		    };

		    /**
		     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
		     * dataZoomModels and 'links' make up one or more graphics.
		     * This function finds the graphic where the source dataZoomModel is in.
		     *
		     * @public
		     * @param {Function} forEachNode Node iterator.
		     * @param {Function} forEachEdgeType edgeType iterator
		     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
		     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
		     */
		    modelUtil.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {

		        return function (sourceNode) {
		            var result = {
		                nodes: [],
		                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).
		            };

		            forEachEdgeType(function (edgeType) {
		                result.records[edgeType.name] = {};
		            });

		            if (!sourceNode) {
		                return result;
		            }

		            absorb(sourceNode, result);

		            var existsLink;
		            do {
		                existsLink = false;
		                forEachNode(processSingleNode);
		            }
		            while (existsLink);

		            function processSingleNode(node) {
		                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
		                    absorb(node, result);
		                    existsLink = true;
		                }
		            }

		            return result;
		        };

		        function isNodeAbsorded(node, result) {
		            return zrUtil.indexOf(result.nodes, node) >= 0;
		        }

		        function isLinked(node, result) {
		            var hasLink = false;
		            forEachEdgeType(function (edgeType) {
		                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
		                    result.records[edgeType.name][edgeId] && (hasLink = true);
		                });
		            });
		            return hasLink;
		        }

		        function absorb(node, result) {
		            result.nodes.push(node);
		            forEachEdgeType(function (edgeType) {
		                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
		                    result.records[edgeType.name][edgeId] = true;
		                });
		            });
		        }
		    };

		    /**
		     * Sync default option between normal and emphasis like `position` and `show`
		     * In case some one will write code like
		     *     label: {
		     *         normal: {
		     *             show: false,
		     *             position: 'outside',
		     *             textStyle: {
		     *                 fontSize: 18
		     *             }
		     *         },
		     *         emphasis: {
		     *             show: true
		     *         }
		     *     }
		     * @param {Object} opt
		     * @param {Array.<string>} subOpts
		     */
		     modelUtil.defaultEmphasis = function (opt, subOpts) {
		        if (opt) {
		            var emphasisOpt = opt.emphasis = opt.emphasis || {};
		            var normalOpt = opt.normal = opt.normal || {};

		            // Default emphasis option from normal
		            zrUtil.each(subOpts, function (subOptName) {
		                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);
		                if (val != null) {
		                    emphasisOpt[subOptName] = val;
		                }
		            });
		        }
		    };

		    /**
		     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
		     * @param {Object} opt
		     * @param {string} [opt.seriesIndex]
		     * @param {Object} [opt.name]
		     * @param {module:echarts/data/List} data
		     * @param {Array.<Object>} rawData
		     */
		    modelUtil.createDataFormatModel = function (opt, data, rawData) {
		        var model = new Model();
		        zrUtil.mixin(model, modelUtil.dataFormatMixin);
		        model.seriesIndex = opt.seriesIndex;
		        model.name = opt.name || '';

		        model.getData = function () {
		            return data;
		        };
		        model.getRawDataArray = function () {
		            return rawData;
		        };
		        return model;
		    };

		    /**
		     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
		     * This helper method retieves value from data.
		     * @param {string|number|Date|Array|Object} dataItem
		     * @return {number|string|Date|Array.<number|string|Date>}
		     */
		    modelUtil.getDataItemValue = function (dataItem) {
		        // Performance sensitive.
		        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
		    };

		    /**
		     * This helper method convert value in data.
		     * @param {string|number|Date} value
		     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
		     */
		    modelUtil.converDataValue = function (value, dimInfo) {
		        // Performance sensitive.
		        var dimType = dimInfo && dimInfo.type;
		        if (dimType === 'ordinal') {
		            return value;
		        }

		        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {
		            value = +nubmerUtil.parseDate(value);
		        }

		        // dimType defaults 'number'.
		        // If dimType is not ordinal and value is null or undefined or NaN or '-',
		        // parse to NaN.
		        return (value == null || value === '')
		            ? NaN : +value; // If string (like '-'), using '+' parse to NaN
		    };

		    modelUtil.dataFormatMixin = {
		        /**
		         * Get params for formatter
		         * @param {number} dataIndex
		         * @return {Object}
		         */
		        getDataParams: function (dataIndex) {
		            var data = this.getData();

		            var seriesIndex = this.seriesIndex;
		            var seriesName = this.name;

		            var rawValue = this.getRawValue(dataIndex);
		            var rawDataIndex = data.getRawIndex(dataIndex);
		            var name = data.getName(dataIndex, true);

		            // Data may not exists in the option given by user
		            var rawDataArray = this.getRawDataArray();
		            var itemOpt = rawDataArray && rawDataArray[rawDataIndex];

		            return {
		                seriesIndex: seriesIndex,
		                seriesName: seriesName,
		                name: name,
		                dataIndex: rawDataIndex,
		                data: itemOpt,
		                value: rawValue,
		                color: data.getItemVisual(dataIndex, 'color'),

		                // Param name list for mapping `a`, `b`, `c`, `d`, `e`
		                $vars: ['seriesName', 'name', 'value']
		            };
		        },

		        /**
		         * Format label
		         * @param {number} dataIndex
		         * @param {string} [status='normal'] 'normal' or 'emphasis'
		         * @param {Function|string} [formatter] Default use the `itemStyle[status].label.formatter`
		         * @return {string}
		         */
		        getFormattedLabel: function (dataIndex, status, formatter) {
		            status = status || 'normal';
		            var data = this.getData();
		            var itemModel = data.getItemModel(dataIndex);

		            var params = this.getDataParams(dataIndex);
		            if (formatter == null) {
		                formatter = itemModel.get(['label', status, 'formatter']);
		            }

		            if (typeof formatter === 'function') {
		                params.status = status;
		                return formatter(params);
		            }
		            else if (typeof formatter === 'string') {
		                return formatUtil.formatTpl(formatter, params);
		            }
		        },

		        /**
		         * Get raw value in option
		         * @param {number} idx
		         * @return {Object}
		         */
		        getRawValue: function (idx) {
		            var itemModel = this.getData().getItemModel(idx);
		            if (itemModel && itemModel.option != null) {
		                var dataItem = itemModel.option;
		                return (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem))
		                    ? dataItem.value : dataItem;
		            }
		        }
		    };

		    /**
		     * Mapping to exists for merge.
		     *
		     * @public
		     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
		     * @param {Object|Array.<Object>} newCptOptions
		     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
		     *                          which order is the same as exists.
		     */
		    modelUtil.mappingToExists = function (exists, newCptOptions) {
		        // Mapping by the order by original option (but not order of
		        // new option) in merge mode. Because we should ensure
		        // some specified index (like xAxisIndex) is consistent with
		        // original option, which is easy to understand, espatially in
		        // media query. And in most case, merge option is used to
		        // update partial option but not be expected to change order.
		        newCptOptions = (newCptOptions || []).slice();

		        var result = zrUtil.map(exists || [], function (obj, index) {
		            return {exist: obj};
		        });

		        // Mapping by id or name if specified.
		        zrUtil.each(newCptOptions, function (cptOption, index) {
		            if (!zrUtil.isObject(cptOption)) {
		                return;
		            }

		            for (var i = 0; i < result.length; i++) {
		                var exist = result[i].exist;
		                if (!result[i].option // Consider name: two map to one.
		                    && (
		                        // id has highest priority.
		                        (cptOption.id != null && exist.id === cptOption.id + '')
		                        || (cptOption.name != null
		                            && !modelUtil.isIdInner(cptOption)
		                            && !modelUtil.isIdInner(exist)
		                            && exist.name === cptOption.name + ''
		                        )
		                    )
		                ) {
		                    result[i].option = cptOption;
		                    newCptOptions[index] = null;
		                    break;
		                }
		            }
		        });

		        // Otherwise mapping by index.
		        zrUtil.each(newCptOptions, function (cptOption, index) {
		            if (!zrUtil.isObject(cptOption)) {
		                return;
		            }

		            var i = 0;
		            for (; i < result.length; i++) {
		                var exist = result[i].exist;
		                if (!result[i].option
		                    && !modelUtil.isIdInner(exist)
		                    // Caution:
		                    // Do not overwrite id. But name can be overwritten,
		                    // because axis use name as 'show label text'.
		                    // 'exist' always has id and name and we dont
		                    // need to check it.
		                    && cptOption.id == null
		                ) {
		                    result[i].option = cptOption;
		                    break;
		                }
		            }

		            if (i >= result.length) {
		                result.push({option: cptOption});
		            }
		        });

		        return result;
		    };

		    /**
		     * @public
		     * @param {Object} cptOption
		     * @return {boolean}
		     */
		    modelUtil.isIdInner = function (cptOption) {
		        return zrUtil.isObject(cptOption)
		            && cptOption.id
		            && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
		    };

		    module.exports = modelUtil;


	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);

		    /**
		     * 每三位默认加,格式化
		     * @type {string|number} x
		     */
		    function addCommas(x) {
		        if (isNaN(x)) {
		            return '-';
		        }
		        x = (x + '').split('.');
		        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,'$1,')
		               + (x.length > 1 ? ('.' + x[1]) : '');
		    }

		    /**
		     * @param {string} str
		     * @return {string} str
		     */
		    function toCamelCase(str) {
		        return str.toLowerCase().replace(/-(.)/g, function(match, group1) {
		            return group1.toUpperCase();
		        });
		    }

		    /**
		     * Normalize css liked array configuration
		     * e.g.
		     *  3 => [3, 3, 3, 3]
		     *  [4, 2] => [4, 2, 4, 2]
		     *  [4, 3, 2] => [4, 3, 2, 3]
		     * @param {number|Array.<number>} val
		     */
		    function normalizeCssArray(val) {
		        var len = val.length;
		        if (typeof (val) === 'number') {
		            return [val, val, val, val];
		        }
		        else if (len === 2) {
		            // vertical | horizontal
		            return [val[0], val[1], val[0], val[1]];
		        }
		        else if (len === 3) {
		            // top | horizontal | bottom
		            return [val[0], val[1], val[2], val[1]];
		        }
		        return val;
		    }

		    function encodeHTML(source) {
		        return String(source)
		            .replace(/&/g, '&amp;')
		            .replace(/</g, '&lt;')
		            .replace(/>/g, '&gt;')
		            .replace(/"/g, '&quot;')
		            .replace(/'/g, '&#39;');
		    }

		    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

		    function wrapVar(varName, seriesIdx) {
		        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
		    }
		    /**
		     * Template formatter
		     * @param  {string} tpl
		     * @param  {Array.<Object>|Object} paramsList
		     * @return {string}
		     */
		    function formatTpl(tpl, paramsList) {
		        if (!zrUtil.isArray(paramsList)) {
		            paramsList = [paramsList];
		        }
		        var seriesLen = paramsList.length;
		        if (!seriesLen) {
		            return '';
		        }

		        var $vars = paramsList[0].$vars;
		        for (var i = 0; i < $vars.length; i++) {
		            var alias = TPL_VAR_ALIAS[i];
		            tpl = tpl.replace(wrapVar(alias),  wrapVar(alias, 0));
		        }
		        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
		            for (var k = 0; k < $vars.length; k++) {
		                tpl = tpl.replace(
		                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),
		                    paramsList[seriesIdx][$vars[k]]
		                );
		            }
		        }

		        return tpl;
		    }

		    /**
		     * ISO Date format
		     * @param {string} tpl
		     * @param {number} value
		     * @inner
		     */
		    function formatTime(tpl, value) {
		        if (tpl === 'week'
		            || tpl === 'month'
		            || tpl === 'quarter'
		            || tpl === 'half-year'
		            || tpl === 'year'
		        ) {
		            tpl = 'MM-dd\nyyyy';
		        }

		        var date = numberUtil.parseDate(value);
		        var y = date.getFullYear();
		        var M = date.getMonth() + 1;
		        var d = date.getDate();
		        var h = date.getHours();
		        var m = date.getMinutes();
		        var s = date.getSeconds();

		        tpl = tpl.replace('MM', s2d(M))
		            .toLowerCase()
		            .replace('yyyy', y)
		            .replace('yy', y % 100)
		            .replace('dd', s2d(d))
		            .replace('d', d)
		            .replace('hh', s2d(h))
		            .replace('h', h)
		            .replace('mm', s2d(m))
		            .replace('m', m)
		            .replace('ss', s2d(s))
		            .replace('s', s);

		        return tpl;
		    }

		    /**
		     * @param {string} str
		     * @return {string}
		     * @inner
		     */
		    function s2d(str) {
		        return str < 10 ? ('0' + str) : str;
		    }

		    module.exports = {

		        normalizeCssArray: normalizeCssArray,

		        addCommas: addCommas,

		        toCamelCase: toCamelCase,

		        encodeHTML: encodeHTML,

		        formatTpl: formatTpl,

		        formatTime: formatTime
		    };


	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		/**
		 * 数值处理模块
		 * @module echarts/util/number
		 */



		    var number = {};

		    var RADIAN_EPSILON = 1e-4;

		    function _trim(str) {
		        return str.replace(/^\s+/, '').replace(/\s+$/, '');
		    }

		    /**
		     * Linear mapping a value from domain to range
		     * @memberOf module:echarts/util/number
		     * @param  {(number|Array.<number>)} val
		     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
		     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
		     * @param  {boolean} clamp
		     * @return {(number|Array.<number>}
		     */
		    number.linearMap = function (val, domain, range, clamp) {

		        var sub = domain[1] - domain[0];

		        if (sub === 0) {
		            return (range[0] + range[1]) / 2;
		        }
		        var t = (val - domain[0]) / sub;

		        if (clamp) {
		            t = Math.min(Math.max(t, 0), 1);
		        }

		        return t * (range[1] - range[0]) + range[0];
		    };

		    /**
		     * Convert a percent string to absolute number.
		     * Returns NaN if percent is not a valid string or number
		     * @memberOf module:echarts/util/number
		     * @param {string|number} percent
		     * @param {number} all
		     * @return {number}
		     */
		    number.parsePercent = function(percent, all) {
		        switch (percent) {
		            case 'center':
		            case 'middle':
		                percent = '50%';
		                break;
		            case 'left':
		            case 'top':
		                percent = '0%';
		                break;
		            case 'right':
		            case 'bottom':
		                percent = '100%';
		                break;
		        }
		        if (typeof percent === 'string') {
		            if (_trim(percent).match(/%$/)) {
		                return parseFloat(percent) / 100 * all;
		            }

		            return parseFloat(percent);
		        }

		        return percent == null ? NaN : +percent;
		    };

		    /**
		     * Fix rounding error of float numbers
		     * @param {number} x
		     * @return {number}
		     */
		    number.round = function (x) {
		        // PENDING
		        return +(+x).toFixed(12);
		    };

		    number.asc = function (arr) {
		        arr.sort(function (a, b) {
		            return a - b;
		        });
		        return arr;
		    };

		    /**
		     * Get precision
		     * @param {number} val
		     */
		    number.getPrecision = function (val) {
		        if (isNaN(val)) {
		            return 0;
		        }
		        // It is much faster than methods converting number to string as follows
		        //      var tmp = val.toString();
		        //      return tmp.length - 1 - tmp.indexOf('.');
		        // especially when precision is low
		        var e = 1;
		        var count = 0;
		        while (Math.round(val * e) / e !== val) {
		            e *= 10;
		            count++;
		        }
		        return count;
		    };

		    /**
		     * @param {Array.<number>} dataExtent
		     * @param {Array.<number>} pixelExtent
		     * @return {number}  precision
		     */
		    number.getPixelPrecision = function (dataExtent, pixelExtent) {
		        var log = Math.log;
		        var LN10 = Math.LN10;
		        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
		        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
		        return Math.max(
		            -dataQuantity + sizeQuantity,
		            0
		        );
		    };

		    // Number.MAX_SAFE_INTEGER, ie do not support.
		    number.MAX_SAFE_INTEGER = 9007199254740991;

		    /**
		     * To 0 - 2 * PI, considering negative radian.
		     * @param {number} radian
		     * @return {number}
		     */
		    number.remRadian = function (radian) {
		        var pi2 = Math.PI * 2;
		        return (radian % pi2 + pi2) % pi2;
		    };

		    /**
		     * @param {type} radian
		     * @return {boolean}
		     */
		    number.isRadianAroundZero = function (val) {
		        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
		    };

		    /**
		     * @param {string|Date|number} value
		     * @return {number} timestamp
		     */
		    number.parseDate = function (value) {
		        return value instanceof Date
		            ? value
		            : new Date(
		                typeof value === 'string'
		                    ? value.replace(/-/g, '/')
		                    : Math.round(value)
		            );
		    };

		    // "Nice Numbers for Graph Labels" of Graphic Gems
		    /**
		     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
		     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
		     * @param  {number} val
		     * @param  {boolean} round
		     * @return {number}
		     */
		    number.nice = function (val, round) {
		        var exp = Math.floor(Math.log(val) / Math.LN10);
		        var exp10 = Math.pow(10, exp);
		        var f = val / exp10; // between 1 and 10
		        var nf;
		        if (round) {
		            if (f < 1.5) { nf = 1; }
		            else if (f < 2.5) { nf = 2; }
		            else if (f < 4) { nf = 3; }
		            else if (f < 7) { nf = 5; }
		            else { nf = 10; }
		        }
		        else {
		            if (f < 1) { nf = 1; }
		            else if (f < 2) { nf = 2; }
		            else if (f < 3) { nf = 3; }
		            else if (f < 5) { nf = 5; }
		            else { nf = 10; }
		        }
		        return nf * exp10;
		    };

		    module.exports = number;


	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/model/Model
		 */


		    var zrUtil = __webpack_require__(3);
		    var clazzUtil = __webpack_require__(9);

		    /**
		     * @alias module:echarts/model/Model
		     * @constructor
		     * @param {Object} option
		     * @param {module:echarts/model/Model} parentModel
		     * @param {module:echarts/model/Global} ecModel
		     * @param {Object} extraOpt
		     */
		    function Model(option, parentModel, ecModel, extraOpt) {
		        /**
		         * @type {module:echarts/model/Model}
		         * @readOnly
		         */
		        this.parentModel = parentModel;

		        /**
		         * @type {module:echarts/model/Global}
		         * @readOnly
		         */
		        this.ecModel = ecModel;

		        /**
		         * @type {Object}
		         * @protected
		         */
		        this.option = option;

		        // Simple optimization
		        if (this.init) {
		            if (arguments.length <= 4) {
		                this.init(option, parentModel, ecModel, extraOpt);
		            }
		            else {
		                this.init.apply(this, arguments);
		            }
		        }
		    }

		    Model.prototype = {

		        constructor: Model,

		        /**
		         * Model 的初始化函数
		         * @param {Object} option
		         */
		        init: null,

		        /**
		         * 从新的 Option merge
		         */
		        mergeOption: function (option) {
		            zrUtil.merge(this.option, option, true);
		        },

		        /**
		         * @param {string} path
		         * @param {boolean} [ignoreParent=false]
		         * @return {*}
		         */
		        get: function (path, ignoreParent) {
		            if (!path) {
		                return this.option;
		            }

		            if (typeof path === 'string') {
		                path = path.split('.');
		            }

		            var obj = this.option;
		            var parentModel = this.parentModel;
		            for (var i = 0; i < path.length; i++) {
		                // obj could be number/string/... (like 0)
		                obj = (obj && typeof obj === 'object') ? obj[path[i]] : null;
		                if (obj == null) {
		                    break;
		                }
		            }
		            if (obj == null && parentModel && !ignoreParent) {
		                obj = parentModel.get(path);
		            }
		            return obj;
		        },

		        /**
		         * @param {string} key
		         * @param {boolean} [ignoreParent=false]
		         * @return {*}
		         */
		        getShallow: function (key, ignoreParent) {
		            var option = this.option;
		            var val = option && option[key];
		            var parentModel = this.parentModel;
		            if (val == null && parentModel && !ignoreParent) {
		                val = parentModel.getShallow(key);
		            }
		            return val;
		        },

		        /**
		         * @param {string} path
		         * @param {module:echarts/model/Model} [parentModel]
		         * @return {module:echarts/model/Model}
		         */
		        getModel: function (path, parentModel) {
		            var obj = this.get(path, true);
		            var thisParentModel = this.parentModel;
		            var model = new Model(
		                obj, parentModel || (thisParentModel && thisParentModel.getModel(path)),
		                this.ecModel
		            );
		            return model;
		        },

		        /**
		         * If model has option
		         */
		        isEmpty: function () {
		            return this.option == null;
		        },

		        restoreData: function () {},

		        // Pending
		        clone: function () {
		            var Ctor = this.constructor;
		            return new Ctor(zrUtil.clone(this.option));
		        },

		        setReadOnly: function (properties) {
		            clazzUtil.setReadOnly(this, properties);
		        }
		    };

		    // Enable Model.extend.
		    clazzUtil.enableClassExtend(Model);

		    var mixin = zrUtil.mixin;
		    mixin(Model, __webpack_require__(10));
		    mixin(Model, __webpack_require__(12));
		    mixin(Model, __webpack_require__(13));
		    mixin(Model, __webpack_require__(18));

		    module.exports = Model;


	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    var clazz = {};

		    var TYPE_DELIMITER = '.';
		    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
		    /**
		     * @public
		     */
		    var parseClassType = clazz.parseClassType = function (componentType) {
		        var ret = {main: '', sub: ''};
		        if (componentType) {
		            componentType = componentType.split(TYPE_DELIMITER);
		            ret.main = componentType[0] || '';
		            ret.sub = componentType[1] || '';
		        }
		        return ret;
		    };
		    /**
		     * @public
		     */
		    clazz.enableClassExtend = function (RootClass, preConstruct) {
		        RootClass.extend = function (proto) {
		            var ExtendedClass = function () {
		                preConstruct && preConstruct.apply(this, arguments);
		                RootClass.apply(this, arguments);
		            };

		            zrUtil.extend(ExtendedClass.prototype, proto);

		            ExtendedClass.extend = this.extend;
		            ExtendedClass.superCall = superCall;
		            ExtendedClass.superApply = superApply;
		            zrUtil.inherits(ExtendedClass, this);
		            ExtendedClass.superClass = this;

		            return ExtendedClass;
		        };
		    };

		    // superCall should have class info, which can not be fetch from 'this'.
		    // Consider this case:
		    // class A has method f,
		    // class B inherits class A, overrides method f, f call superApply('f'),
		    // class C inherits class B, do not overrides method f,
		    // then when method of class C is called, dead loop occured.
		    function superCall(context, methodName) {
		        var args = zrUtil.slice(arguments, 2);
		        return this.superClass.prototype[methodName].apply(context, args);
		    }

		    function superApply(context, methodName, args) {
		        return this.superClass.prototype[methodName].apply(context, args);
		    }

		    /**
		     * @param {Object} entity
		     * @param {Object} options
		     * @param {boolean} [options.registerWhenExtend]
		     * @public
		     */
		    clazz.enableClassManagement = function (entity, options) {
		        options = options || {};

		        /**
		         * Component model classes
		         * key: componentType,
		         * value:
		         *     componentClass, when componentType is 'xxx'
		         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
		         * @type {Object}
		         */
		        var storage = {};

		        entity.registerClass = function (Clazz, componentType) {
		            if (componentType) {
		                componentType = parseClassType(componentType);

		                if (!componentType.sub) {
		                    if (storage[componentType.main]) {
		                        throw new Error(componentType.main + 'exists.');
		                    }
		                    storage[componentType.main] = Clazz;
		                }
		                else if (componentType.sub !== IS_CONTAINER) {
		                    var container = makeContainer(componentType);
		                    container[componentType.sub] = Clazz;
		                }
		            }
		            return Clazz;
		        };

		        entity.getClass = function (componentTypeMain, subType, throwWhenNotFound) {
		            var Clazz = storage[componentTypeMain];

		            if (Clazz && Clazz[IS_CONTAINER]) {
		                Clazz = subType ? Clazz[subType] : null;
		            }

		            if (throwWhenNotFound && !Clazz) {
		                throw new Error(
		                    'Component ' + componentTypeMain + '.' + (subType || '') + ' not exists. Load it first.'
		                );
		            }

		            return Clazz;
		        };

		        entity.getClassesByMainType = function (componentType) {
		            componentType = parseClassType(componentType);

		            var result = [];
		            var obj = storage[componentType.main];

		            if (obj && obj[IS_CONTAINER]) {
		                zrUtil.each(obj, function (o, type) {
		                    type !== IS_CONTAINER && result.push(o);
		                });
		            }
		            else {
		                result.push(obj);
		            }

		            return result;
		        };

		        entity.hasClass = function (componentType) {
		            // Just consider componentType.main.
		            componentType = parseClassType(componentType);
		            return !!storage[componentType.main];
		        };

		        /**
		         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
		         */
		        entity.getAllClassMainTypes = function () {
		            var types = [];
		            zrUtil.each(storage, function (obj, type) {
		                types.push(type);
		            });
		            return types;
		        };

		        /**
		         * If a main type is container and has sub types
		         * @param  {string}  mainType
		         * @return {boolean}
		         */
		        entity.hasSubTypes = function (componentType) {
		            componentType = parseClassType(componentType);
		            var obj = storage[componentType.main];
		            return obj && obj[IS_CONTAINER];
		        };

		        entity.parseClassType = parseClassType;

		        function makeContainer(componentType) {
		            var container = storage[componentType.main];
		            if (!container || !container[IS_CONTAINER]) {
		                container = storage[componentType.main] = {};
		                container[IS_CONTAINER] = true;
		            }
		            return container;
		        }

		        if (options.registerWhenExtend) {
		            var originalExtend = entity.extend;
		            if (originalExtend) {
		                entity.extend = function (proto) {
		                    var ExtendedClass = originalExtend.call(this, proto);
		                    return entity.registerClass(ExtendedClass, proto.type);
		                };
		            }
		        }

		        return entity;
		    };

		    /**
		     * @param {string|Array.<string>} properties
		     */
		    clazz.setReadOnly = function (obj, properties) {
		        // FIXME It seems broken in IE8 simulation of IE11
		        // if (!zrUtil.isArray(properties)) {
		        //     properties = properties != null ? [properties] : [];
		        // }
		        // zrUtil.each(properties, function (prop) {
		        //     var value = obj[prop];

		        //     Object.defineProperty
		        //         && Object.defineProperty(obj, prop, {
		        //             value: value, writable: false
		        //         });
		        //     zrUtil.isArray(obj[prop])
		        //         && Object.freeze
		        //         && Object.freeze(obj[prop]);
		        // });
		    };

		    module.exports = clazz;


	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		
		    var getLineStyle = __webpack_require__(11)(
		        [
		            ['lineWidth', 'width'],
		            ['stroke', 'color'],
		            ['opacity'],
		            ['shadowBlur'],
		            ['shadowOffsetX'],
		            ['shadowOffsetY'],
		            ['shadowColor']
		        ]
		    );
		    module.exports = {
		        getLineStyle: function (excludes) {
		            var style = getLineStyle.call(this, excludes);
		            var lineDash = this.getLineDash();
		            lineDash && (style.lineDash = lineDash);
		            return style;
		        },

		        getLineDash: function () {
		            var lineType = this.get('type');
		            return (lineType === 'solid' || lineType == null) ? null
		                : (lineType === 'dashed' ? [5, 5] : [1, 1]);
		        }
		    };


	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		// TODO Parse shadow style
		// TODO Only shallow path support

		    var zrUtil = __webpack_require__(3);

		    module.exports = function (properties) {
		        // Normalize
		        for (var i = 0; i < properties.length; i++) {
		            if (!properties[i][1]) {
		               properties[i][1] = properties[i][0];
		            }
		        }
		        return function (excludes) {
		            var style = {};
		            for (var i = 0; i < properties.length; i++) {
		                var propName = properties[i][1];
		                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {
		                    continue;
		                }
		                var val = this.getShallow(propName);
		                if (val != null) {
		                    style[properties[i][0]] = val;
		                }
		            }
		            return style;
		        };
		    };


	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		
		    module.exports = {
		        getAreaStyle: __webpack_require__(11)(
		            [
		                ['fill', 'color'],
		                ['shadowBlur'],
		                ['shadowOffsetX'],
		                ['shadowOffsetY'],
		                ['opacity'],
		                ['shadowColor']
		            ]
		        )
		    };


	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var textContain = __webpack_require__(14);

		    function getShallow(model, path) {
		        return model && model.getShallow(path);
		    }

		    module.exports = {
		        /**
		         * Get color property or get color from option.textStyle.color
		         * @return {string}
		         */
		        getTextColor: function () {
		            var ecModel = this.ecModel;
		            return this.getShallow('color')
		                || (ecModel && ecModel.get('textStyle.color'));
		        },

		        /**
		         * Create font string from fontStyle, fontWeight, fontSize, fontFamily
		         * @return {string}
		         */
		        getFont: function () {
		            var ecModel = this.ecModel;
		            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
		            return [
		                // FIXME in node-canvas fontWeight is before fontStyle
		                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),
		                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),
		                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',
		                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'
		            ].join(' ');
		        },

		        getTextRect: function (text) {
		            var textStyle = this.get('textStyle') || {};
		            return textContain.getBoundingRect(
		                text,
		                this.getFont(),
		                textStyle.align,
		                textStyle.baseline
		            );
		        },

		        ellipsis: function (text, containerWidth, options) {
		            return textContain.ellipsis(
		                text, this.getFont(), containerWidth, options
		            );
		        }
		    };


	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var textWidthCache = {};
		    var textWidthCacheCounter = 0;
		    var TEXT_CACHE_MAX = 5000;

		    var util = __webpack_require__(3);
		    var BoundingRect = __webpack_require__(15);

		    function getTextWidth(text, textFont) {
		        var key = text + ':' + textFont;
		        if (textWidthCache[key]) {
		            return textWidthCache[key];
		        }

		        var textLines = (text + '').split('\n');
		        var width = 0;

		        for (var i = 0, l = textLines.length; i < l; i++) {
		            // measureText 可以被覆盖以兼容不支持 Canvas 的环境
		            width =  Math.max(textContain.measureText(textLines[i], textFont).width, width);
		        }

		        if (textWidthCacheCounter > TEXT_CACHE_MAX) {
		            textWidthCacheCounter = 0;
		            textWidthCache = {};
		        }
		        textWidthCacheCounter++;
		        textWidthCache[key] = width;

		        return width;
		    }

		    function getTextRect(text, textFont, textAlign, textBaseline) {
		        var textLineLen = ((text || '') + '').split('\n').length;

		        var width = getTextWidth(text, textFont);
		        // FIXME 高度计算比较粗暴
		        var lineHeight = getTextWidth('国', textFont);
		        var height = textLineLen * lineHeight;

		        var rect = new BoundingRect(0, 0, width, height);
		        // Text has a special line height property
		        rect.lineHeight = lineHeight;

		        switch (textBaseline) {
		            case 'bottom':
		            case 'alphabetic':
		                rect.y -= lineHeight;
		                break;
		            case 'middle':
		                rect.y -= lineHeight / 2;
		                break;
		            // case 'hanging':
		            // case 'top':
		        }

		        // FIXME Right to left language
		        switch (textAlign) {
		            case 'end':
		            case 'right':
		                rect.x -= rect.width;
		                break;
		            case 'center':
		                rect.x -= rect.width / 2;
		                break;
		            // case 'start':
		            // case 'left':
		        }

		        return rect;
		    }

		    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {

		        var x = rect.x;
		        var y = rect.y;

		        var height = rect.height;
		        var width = rect.width;

		        var textHeight = textRect.height;

		        var halfHeight = height / 2 - textHeight / 2;

		        var textAlign = 'left';

		        switch (textPosition) {
		            case 'left':
		                x -= distance;
		                y += halfHeight;
		                textAlign = 'right';
		                break;
		            case 'right':
		                x += distance + width;
		                y += halfHeight;
		                textAlign = 'left';
		                break;
		            case 'top':
		                x += width / 2;
		                y -= distance + textHeight;
		                textAlign = 'center';
		                break;
		            case 'bottom':
		                x += width / 2;
		                y += height + distance;
		                textAlign = 'center';
		                break;
		            case 'inside':
		                x += width / 2;
		                y += halfHeight;
		                textAlign = 'center';
		                break;
		            case 'insideLeft':
		                x += distance;
		                y += halfHeight;
		                textAlign = 'left';
		                break;
		            case 'insideRight':
		                x += width - distance;
		                y += halfHeight;
		                textAlign = 'right';
		                break;
		            case 'insideTop':
		                x += width / 2;
		                y += distance;
		                textAlign = 'center';
		                break;
		            case 'insideBottom':
		                x += width / 2;
		                y += height - textHeight - distance;
		                textAlign = 'center';
		                break;
		            case 'insideTopLeft':
		                x += distance;
		                y += distance;
		                textAlign = 'left';
		                break;
		            case 'insideTopRight':
		                x += width - distance;
		                y += distance;
		                textAlign = 'right';
		                break;
		            case 'insideBottomLeft':
		                x += distance;
		                y += height - textHeight - distance;
		                break;
		            case 'insideBottomRight':
		                x += width - distance;
		                y += height - textHeight - distance;
		                textAlign = 'right';
		                break;
		        }

		        return {
		            x: x,
		            y: y,
		            textAlign: textAlign,
		            textBaseline: 'top'
		        };
		    }

		    /**
		     * Show ellipsis if overflow.
		     *
		     * @param  {string} text
		     * @param  {string} textFont
		     * @param  {string} containerWidth
		     * @param  {Object} [options]
		     * @param  {number} [options.ellipsis='...']
		     * @param  {number} [options.maxIterations=3]
		     * @param  {number} [options.minCharacters=3]
		     * @return {string}
		     */
		    function textEllipsis(text, textFont, containerWidth, options) {
		        if (!containerWidth) {
		            return '';
		        }

		        options = util.defaults({
		            ellipsis: '...',
		            minCharacters: 3,
		            maxIterations: 3,
		            cnCharWidth: getTextWidth('国', textFont),
		            // FIXME
		            // 未考虑非等宽字体
		            ascCharWidth: getTextWidth('a', textFont)
		        }, options, true);

		        containerWidth -= getTextWidth(options.ellipsis);

		        var textLines = (text + '').split('\n');

		        for (var i = 0, len = textLines.length; i < len; i++) {
		            textLines[i] = textLineTruncate(
		                textLines[i], textFont, containerWidth, options
		            );
		        }

		        return textLines.join('\n');
		    }

		    function textLineTruncate(text, textFont, containerWidth, options) {
		        // FIXME
		        // 粗糙得写的，尚未考虑性能和各种语言、字体的效果。
		        for (var i = 0;; i++) {
		            var lineWidth = getTextWidth(text, textFont);

		            if (lineWidth < containerWidth || i >= options.maxIterations) {
		                text += options.ellipsis;
		                break;
		            }

		            var subLength = i === 0
		                ? estimateLength(text, containerWidth, options)
		                : Math.floor(text.length * containerWidth / lineWidth);

		            if (subLength < options.minCharacters) {
		                text = '';
		                break;
		            }

		            text = text.substr(0, subLength);
		        }

		        return text;
		    }

		    function estimateLength(text, containerWidth, options) {
		        var width = 0;
		        var i = 0;
		        for (var len = text.length; i < len && width < containerWidth; i++) {
		            var charCode = text.charCodeAt(i);
		            width += (0 <= charCode && charCode <= 127)
		                ? options.ascCharWidth : options.cnCharWidth;
		        }
		        return i;
		    }

		    var textContain = {

		        getWidth: getTextWidth,

		        getBoundingRect: getTextRect,

		        adjustTextPositionOnRect: adjustTextPositionOnRect,

		        ellipsis: textEllipsis,

		        measureText: function (text, textFont) {
		            var ctx = util.getContext();
		            ctx.font = textFont;
		            return ctx.measureText(text);
		        }
		    };

		    module.exports = textContain;


	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * @module echarts/core/BoundingRect
		 */


		    var vec2 = __webpack_require__(16);
		    var matrix = __webpack_require__(17);

		    var v2ApplyTransform = vec2.applyTransform;
		    var mathMin = Math.min;
		    var mathAbs = Math.abs;
		    var mathMax = Math.max;
		    /**
		     * @alias module:echarts/core/BoundingRect
		     */
		    function BoundingRect(x, y, width, height) {
		        /**
		         * @type {number}
		         */
		        this.x = x;
		        /**
		         * @type {number}
		         */
		        this.y = y;
		        /**
		         * @type {number}
		         */
		        this.width = width;
		        /**
		         * @type {number}
		         */
		        this.height = height;
		    }

		    BoundingRect.prototype = {

		        constructor: BoundingRect,

		        /**
		         * @param {module:echarts/core/BoundingRect} other
		         */
		        union: function (other) {
		            var x = mathMin(other.x, this.x);
		            var y = mathMin(other.y, this.y);

		            this.width = mathMax(
		                    other.x + other.width,
		                    this.x + this.width
		                ) - x;
		            this.height = mathMax(
		                    other.y + other.height,
		                    this.y + this.height
		                ) - y;
		            this.x = x;
		            this.y = y;
		        },

		        /**
		         * @param {Array.<number>} m
		         * @methods
		         */
		        applyTransform: (function () {
		            var min = [];
		            var max = [];
		            return function (m) {
		                // In case usage like this
		                // el.getBoundingRect().applyTransform(el.transform)
		                // And element has no transform
		                if (!m) {
		                    return;
		                }
		                min[0] = this.x;
		                min[1] = this.y;
		                max[0] = this.x + this.width;
		                max[1] = this.y + this.height;

		                v2ApplyTransform(min, min, m);
		                v2ApplyTransform(max, max, m);

		                this.x = mathMin(min[0], max[0]);
		                this.y = mathMin(min[1], max[1]);
		                this.width = mathAbs(max[0] - min[0]);
		                this.height = mathAbs(max[1] - min[1]);
		            };
		        })(),

		        /**
		         * Calculate matrix of transforming from self to target rect
		         * @param  {module:zrender/core/BoundingRect} b
		         * @return {Array.<number>}
		         */
		        calculateTransform: function (b) {
		            var a = this;
		            var sx = b.width / a.width;
		            var sy = b.height / a.height;

		            var m = matrix.create();

		            // 矩阵右乘
		            matrix.translate(m, m, [-a.x, -a.y]);
		            matrix.scale(m, m, [sx, sy]);
		            matrix.translate(m, m, [b.x, b.y]);

		            return m;
		        },

		        /**
		         * @param {(module:echarts/core/BoundingRect|Object)} b
		         * @return {boolean}
		         */
		        intersect: function (b) {
		            var a = this;
		            var ax0 = a.x;
		            var ax1 = a.x + a.width;
		            var ay0 = a.y;
		            var ay1 = a.y + a.height;

		            var bx0 = b.x;
		            var bx1 = b.x + b.width;
		            var by0 = b.y;
		            var by1 = b.y + b.height;

		            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
		        },

		        contain: function (x, y) {
		            var rect = this;
		            return x >= rect.x
		                && x <= (rect.x + rect.width)
		                && y >= rect.y
		                && y <= (rect.y + rect.height);
		        },

		        /**
		         * @return {module:echarts/core/BoundingRect}
		         */
		        clone: function () {
		            return new BoundingRect(this.x, this.y, this.width, this.height);
		        },

		        /**
		         * Copy from another rect
		         */
		        copy: function (other) {
		            this.x = other.x;
		            this.y = other.y;
		            this.width = other.width;
		            this.height = other.height;
		        }
		    };

		    module.exports = BoundingRect;


	/***/ },
	/* 16 */
	/***/ function(module, exports) {

		
		    var ArrayCtor = typeof Float32Array === 'undefined'
		        ? Array
		        : Float32Array;

		    /**
		     * @typedef {Float32Array|Array.<number>} Vector2
		     */
		    /**
		     * 二维向量类
		     * @exports zrender/tool/vector
		     */
		    var vector = {
		        /**
		         * 创建一个向量
		         * @param {number} [x=0]
		         * @param {number} [y=0]
		         * @return {Vector2}
		         */
		        create: function (x, y) {
		            var out = new ArrayCtor(2);
		            out[0] = x || 0;
		            out[1] = y || 0;
		            return out;
		        },

		        /**
		         * 复制向量数据
		         * @param {Vector2} out
		         * @param {Vector2} v
		         * @return {Vector2}
		         */
		        copy: function (out, v) {
		            out[0] = v[0];
		            out[1] = v[1];
		            return out;
		        },

		        /**
		         * 克隆一个向量
		         * @param {Vector2} v
		         * @return {Vector2}
		         */
		        clone: function (v) {
		            var out = new ArrayCtor(2);
		            out[0] = v[0];
		            out[1] = v[1];
		            return out;
		        },

		        /**
		         * 设置向量的两个项
		         * @param {Vector2} out
		         * @param {number} a
		         * @param {number} b
		         * @return {Vector2} 结果
		         */
		        set: function (out, a, b) {
		            out[0] = a;
		            out[1] = b;
		            return out;
		        },

		        /**
		         * 向量相加
		         * @param {Vector2} out
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         */
		        add: function (out, v1, v2) {
		            out[0] = v1[0] + v2[0];
		            out[1] = v1[1] + v2[1];
		            return out;
		        },

		        /**
		         * 向量缩放后相加
		         * @param {Vector2} out
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         * @param {number} a
		         */
		        scaleAndAdd: function (out, v1, v2, a) {
		            out[0] = v1[0] + v2[0] * a;
		            out[1] = v1[1] + v2[1] * a;
		            return out;
		        },

		        /**
		         * 向量相减
		         * @param {Vector2} out
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         */
		        sub: function (out, v1, v2) {
		            out[0] = v1[0] - v2[0];
		            out[1] = v1[1] - v2[1];
		            return out;
		        },

		        /**
		         * 向量长度
		         * @param {Vector2} v
		         * @return {number}
		         */
		        len: function (v) {
		            return Math.sqrt(this.lenSquare(v));
		        },

		        /**
		         * 向量长度平方
		         * @param {Vector2} v
		         * @return {number}
		         */
		        lenSquare: function (v) {
		            return v[0] * v[0] + v[1] * v[1];
		        },

		        /**
		         * 向量乘法
		         * @param {Vector2} out
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         */
		        mul: function (out, v1, v2) {
		            out[0] = v1[0] * v2[0];
		            out[1] = v1[1] * v2[1];
		            return out;
		        },

		        /**
		         * 向量除法
		         * @param {Vector2} out
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         */
		        div: function (out, v1, v2) {
		            out[0] = v1[0] / v2[0];
		            out[1] = v1[1] / v2[1];
		            return out;
		        },

		        /**
		         * 向量点乘
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         * @return {number}
		         */
		        dot: function (v1, v2) {
		            return v1[0] * v2[0] + v1[1] * v2[1];
		        },

		        /**
		         * 向量缩放
		         * @param {Vector2} out
		         * @param {Vector2} v
		         * @param {number} s
		         */
		        scale: function (out, v, s) {
		            out[0] = v[0] * s;
		            out[1] = v[1] * s;
		            return out;
		        },

		        /**
		         * 向量归一化
		         * @param {Vector2} out
		         * @param {Vector2} v
		         */
		        normalize: function (out, v) {
		            var d = vector.len(v);
		            if (d === 0) {
		                out[0] = 0;
		                out[1] = 0;
		            }
		            else {
		                out[0] = v[0] / d;
		                out[1] = v[1] / d;
		            }
		            return out;
		        },

		        /**
		         * 计算向量间距离
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         * @return {number}
		         */
		        distance: function (v1, v2) {
		            return Math.sqrt(
		                (v1[0] - v2[0]) * (v1[0] - v2[0])
		                + (v1[1] - v2[1]) * (v1[1] - v2[1])
		            );
		        },

		        /**
		         * 向量距离平方
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         * @return {number}
		         */
		        distanceSquare: function (v1, v2) {
		            return (v1[0] - v2[0]) * (v1[0] - v2[0])
		                + (v1[1] - v2[1]) * (v1[1] - v2[1]);
		        },

		        /**
		         * 求负向量
		         * @param {Vector2} out
		         * @param {Vector2} v
		         */
		        negate: function (out, v) {
		            out[0] = -v[0];
		            out[1] = -v[1];
		            return out;
		        },

		        /**
		         * 插值两个点
		         * @param {Vector2} out
		         * @param {Vector2} v1
		         * @param {Vector2} v2
		         * @param {number} t
		         */
		        lerp: function (out, v1, v2, t) {
		            out[0] = v1[0] + t * (v2[0] - v1[0]);
		            out[1] = v1[1] + t * (v2[1] - v1[1]);
		            return out;
		        },

		        /**
		         * 矩阵左乘向量
		         * @param {Vector2} out
		         * @param {Vector2} v
		         * @param {Vector2} m
		         */
		        applyTransform: function (out, v, m) {
		            var x = v[0];
		            var y = v[1];
		            out[0] = m[0] * x + m[2] * y + m[4];
		            out[1] = m[1] * x + m[3] * y + m[5];
		            return out;
		        },
		        /**
		         * 求两个向量最小值
		         * @param  {Vector2} out
		         * @param  {Vector2} v1
		         * @param  {Vector2} v2
		         */
		        min: function (out, v1, v2) {
		            out[0] = Math.min(v1[0], v2[0]);
		            out[1] = Math.min(v1[1], v2[1]);
		            return out;
		        },
		        /**
		         * 求两个向量最大值
		         * @param  {Vector2} out
		         * @param  {Vector2} v1
		         * @param  {Vector2} v2
		         */
		        max: function (out, v1, v2) {
		            out[0] = Math.max(v1[0], v2[0]);
		            out[1] = Math.max(v1[1], v2[1]);
		            return out;
		        }
		    };

		    vector.length = vector.len;
		    vector.lengthSquare = vector.lenSquare;
		    vector.dist = vector.distance;
		    vector.distSquare = vector.distanceSquare;

		    module.exports = vector;



	/***/ },
	/* 17 */
	/***/ function(module, exports) {

		
		    var ArrayCtor = typeof Float32Array === 'undefined'
		        ? Array
		        : Float32Array;
		    /**
		     * 3x2矩阵操作类
		     * @exports zrender/tool/matrix
		     */
		    var matrix = {
		        /**
		         * 创建一个单位矩阵
		         * @return {Float32Array|Array.<number>}
		         */
		        create : function() {
		            var out = new ArrayCtor(6);
		            matrix.identity(out);

		            return out;
		        },
		        /**
		         * 设置矩阵为单位矩阵
		         * @param {Float32Array|Array.<number>} out
		         */
		        identity : function(out) {
		            out[0] = 1;
		            out[1] = 0;
		            out[2] = 0;
		            out[3] = 1;
		            out[4] = 0;
		            out[5] = 0;
		            return out;
		        },
		        /**
		         * 复制矩阵
		         * @param {Float32Array|Array.<number>} out
		         * @param {Float32Array|Array.<number>} m
		         */
		        copy: function(out, m) {
		            out[0] = m[0];
		            out[1] = m[1];
		            out[2] = m[2];
		            out[3] = m[3];
		            out[4] = m[4];
		            out[5] = m[5];
		            return out;
		        },
		        /**
		         * 矩阵相乘
		         * @param {Float32Array|Array.<number>} out
		         * @param {Float32Array|Array.<number>} m1
		         * @param {Float32Array|Array.<number>} m2
		         */
		        mul : function (out, m1, m2) {
		            // Consider matrix.mul(m, m2, m);
		            // where out is the same as m2.
		            // So use temp variable to escape error.
		            var out0 = m1[0] * m2[0] + m1[2] * m2[1];
		            var out1 = m1[1] * m2[0] + m1[3] * m2[1];
		            var out2 = m1[0] * m2[2] + m1[2] * m2[3];
		            var out3 = m1[1] * m2[2] + m1[3] * m2[3];
		            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
		            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
		            out[0] = out0;
		            out[1] = out1;
		            out[2] = out2;
		            out[3] = out3;
		            out[4] = out4;
		            out[5] = out5;
		            return out;
		        },
		        /**
		         * 平移变换
		         * @param {Float32Array|Array.<number>} out
		         * @param {Float32Array|Array.<number>} a
		         * @param {Float32Array|Array.<number>} v
		         */
		        translate : function(out, a, v) {
		            out[0] = a[0];
		            out[1] = a[1];
		            out[2] = a[2];
		            out[3] = a[3];
		            out[4] = a[4] + v[0];
		            out[5] = a[5] + v[1];
		            return out;
		        },
		        /**
		         * 旋转变换
		         * @param {Float32Array|Array.<number>} out
		         * @param {Float32Array|Array.<number>} a
		         * @param {number} rad
		         */
		        rotate : function(out, a, rad) {
		            var aa = a[0];
		            var ac = a[2];
		            var atx = a[4];
		            var ab = a[1];
		            var ad = a[3];
		            var aty = a[5];
		            var st = Math.sin(rad);
		            var ct = Math.cos(rad);

		            out[0] = aa * ct + ab * st;
		            out[1] = -aa * st + ab * ct;
		            out[2] = ac * ct + ad * st;
		            out[3] = -ac * st + ct * ad;
		            out[4] = ct * atx + st * aty;
		            out[5] = ct * aty - st * atx;
		            return out;
		        },
		        /**
		         * 缩放变换
		         * @param {Float32Array|Array.<number>} out
		         * @param {Float32Array|Array.<number>} a
		         * @param {Float32Array|Array.<number>} v
		         */
		        scale : function(out, a, v) {
		            var vx = v[0];
		            var vy = v[1];
		            out[0] = a[0] * vx;
		            out[1] = a[1] * vy;
		            out[2] = a[2] * vx;
		            out[3] = a[3] * vy;
		            out[4] = a[4] * vx;
		            out[5] = a[5] * vy;
		            return out;
		        },
		        /**
		         * 求逆矩阵
		         * @param {Float32Array|Array.<number>} out
		         * @param {Float32Array|Array.<number>} a
		         */
		        invert : function(out, a) {

		            var aa = a[0];
		            var ac = a[2];
		            var atx = a[4];
		            var ab = a[1];
		            var ad = a[3];
		            var aty = a[5];

		            var det = aa * ad - ab * ac;
		            if (!det) {
		                return null;
		            }
		            det = 1.0 / det;

		            out[0] = ad * det;
		            out[1] = -ab * det;
		            out[2] = -ac * det;
		            out[3] = aa * det;
		            out[4] = (ac * aty - ad * atx) * det;
		            out[5] = (ab * atx - aa * aty) * det;
		            return out;
		        }
		    };

		    module.exports = matrix;



	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		
		    module.exports = {
		        getItemStyle: __webpack_require__(11)(
		            [
		                ['fill', 'color'],
		                ['stroke', 'borderColor'],
		                ['lineWidth', 'borderWidth'],
		                ['opacity'],
		                ['shadowBlur'],
		                ['shadowOffsetX'],
		                ['shadowOffsetY'],
		                ['shadowColor']
		            ]
		        )
		    };


	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Component model
		 *
		 * @module echarts/model/Component
		 */


		    var Model = __webpack_require__(8);
		    var zrUtil = __webpack_require__(3);
		    var arrayPush = Array.prototype.push;
		    var componentUtil = __webpack_require__(20);
		    var clazzUtil = __webpack_require__(9);
		    var layout = __webpack_require__(21);

		    /**
		     * @alias module:echarts/model/Component
		     * @constructor
		     * @param {Object} option
		     * @param {module:echarts/model/Model} parentModel
		     * @param {module:echarts/model/Model} ecModel
		     */
		    var ComponentModel = Model.extend({

		        type: 'component',

		        /**
		         * @readOnly
		         * @type {string}
		         */
		        id: '',

		        /**
		         * @readOnly
		         */
		        name: '',

		        /**
		         * @readOnly
		         * @type {string}
		         */
		        mainType: '',

		        /**
		         * @readOnly
		         * @type {string}
		         */
		        subType: '',

		        /**
		         * @readOnly
		         * @type {number}
		         */
		        componentIndex: 0,

		        /**
		         * @type {Object}
		         * @protected
		         */
		        defaultOption: null,

		        /**
		         * @type {module:echarts/model/Global}
		         * @readOnly
		         */
		        ecModel: null,

		        /**
		         * key: componentType
		         * value:  Component model list, can not be null.
		         * @type {Object.<string, Array.<module:echarts/model/Model>>}
		         * @readOnly
		         */
		        dependentModels: [],

		        /**
		         * @type {string}
		         * @readOnly
		         */
		        uid: null,

		        /**
		         * Support merge layout params.
		         * Only support 'box' now (left/right/top/bottom/width/height).
		         * @type {string|Object} Object can be {ignoreSize: true}
		         * @readOnly
		         */
		        layoutMode: null,


		        init: function (option, parentModel, ecModel, extraOpt) {
		            this.mergeDefaultAndTheme(this.option, this.ecModel);
		        },

		        mergeDefaultAndTheme: function (option, ecModel) {
		            var layoutMode = this.layoutMode;
		            var inputPositionParams = layoutMode
		                ? layout.getLayoutParams(option) : {};

		            var themeModel = ecModel.getTheme();
		            zrUtil.merge(option, themeModel.get(this.mainType));
		            zrUtil.merge(option, this.getDefaultOption());

		            if (layoutMode) {
		                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
		            }
		        },

		        mergeOption: function (option) {
		            zrUtil.merge(this.option, option, true);

		            var layoutMode = this.layoutMode;
		            if (layoutMode) {
		                layout.mergeLayoutParam(this.option, option, layoutMode);
		            }
		        },

		        // Hooker after init or mergeOption
		        optionUpdated: function (ecModel) {},

		        getDefaultOption: function () {
		            if (!this.hasOwnProperty('__defaultOption')) {
		                var optList = [];
		                var Class = this.constructor;
		                while (Class) {
		                    var opt = Class.prototype.defaultOption;
		                    opt && optList.push(opt);
		                    Class = Class.superClass;
		                }

		                var defaultOption = {};
		                for (var i = optList.length - 1; i >= 0; i--) {
		                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);
		                }
		                this.__defaultOption = defaultOption;
		            }
		            return this.__defaultOption;
		        }

		    });

		    // Reset ComponentModel.extend, add preConstruct.
		    clazzUtil.enableClassExtend(
		        ComponentModel,
		        function (option, parentModel, ecModel, extraOpt) {
		            // Set dependentModels, componentIndex, name, id, mainType, subType.
		            zrUtil.extend(this, extraOpt);

		            this.uid = componentUtil.getUID('componentModel');

		            // this.setReadOnly([
		            //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
		            //     'dependentModels', 'componentIndex'
		            // ]);
		        }
		    );

		    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
		    clazzUtil.enableClassManagement(
		        ComponentModel, {registerWhenExtend: true}
		    );
		    componentUtil.enableSubTypeDefaulter(ComponentModel);

		    // Add capability of ComponentModel.topologicalTravel.
		    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);

		    function getDependencies(componentType) {
		        var deps = [];
		        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
		            arrayPush.apply(deps, Clazz.prototype.dependencies || []);
		        });
		        // Ensure main type
		        return zrUtil.map(deps, function (type) {
		            return clazzUtil.parseClassType(type).main;
		        });
		    }

		    zrUtil.mixin(ComponentModel, __webpack_require__(22));

		    module.exports = ComponentModel;


	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var clazz = __webpack_require__(9);

		    var parseClassType = clazz.parseClassType;

		    var base = 0;

		    var componentUtil = {};

		    var DELIMITER = '_';

		    /**
		     * @public
		     * @param {string} type
		     * @return {string}
		     */
		    componentUtil.getUID = function (type) {
		        // Considering the case of crossing js context,
		        // use Math.random to make id as unique as possible.
		        return [(type || ''), base++, Math.random()].join(DELIMITER);
		    };

		    /**
		     * @inner
		     */
		    componentUtil.enableSubTypeDefaulter = function (entity) {

		        var subTypeDefaulters = {};

		        entity.registerSubTypeDefaulter = function (componentType, defaulter) {
		            componentType = parseClassType(componentType);
		            subTypeDefaulters[componentType.main] = defaulter;
		        };

		        entity.determineSubType = function (componentType, option) {
		            var type = option.type;
		            if (!type) {
		                var componentTypeMain = parseClassType(componentType).main;
		                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
		                    type = subTypeDefaulters[componentTypeMain](option);
		                }
		            }
		            return type;
		        };

		        return entity;
		    };

		    /**
		     * Topological travel on Activity Network (Activity On Vertices).
		     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
		     *
		     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
		     *
		     * If there is circle dependencey, Error will be thrown.
		     *
		     */
		    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {

		        /**
		         * @public
		         * @param {Array.<string>} targetNameList Target Component type list.
		         *                                           Can be ['aa', 'bb', 'aa.xx']
		         * @param {Array.<string>} fullNameList By which we can build dependency graph.
		         * @param {Function} callback Params: componentType, dependencies.
		         * @param {Object} context Scope of callback.
		         */
		        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
		            if (!targetNameList.length) {
		                return;
		            }

		            var result = makeDepndencyGraph(fullNameList);
		            var graph = result.graph;
		            var stack = result.noEntryList;

		            var targetNameSet = {};
		            zrUtil.each(targetNameList, function (name) {
		                targetNameSet[name] = true;
		            });

		            while (stack.length) {
		                var currComponentType = stack.pop();
		                var currVertex = graph[currComponentType];
		                var isInTargetNameSet = !!targetNameSet[currComponentType];
		                if (isInTargetNameSet) {
		                    callback.call(context, currComponentType, currVertex.originalDeps.slice());
		                    delete targetNameSet[currComponentType];
		                }
		                zrUtil.each(
		                    currVertex.successor,
		                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge
		                );
		            }

		            zrUtil.each(targetNameSet, function () {
		                throw new Error('Circle dependency may exists');
		            });

		            function removeEdge(succComponentType) {
		                graph[succComponentType].entryCount--;
		                if (graph[succComponentType].entryCount === 0) {
		                    stack.push(succComponentType);
		                }
		            }

		            // Consider this case: legend depends on series, and we call
		            // chart.setOption({series: [...]}), where only series is in option.
		            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
		            // not be called, but only sereis.mergeOption is called. Thus legend
		            // have no chance to update its local record about series (like which
		            // name of series is available in legend).
		            function removeEdgeAndAdd(succComponentType) {
		                targetNameSet[succComponentType] = true;
		                removeEdge(succComponentType);
		            }
		        };

		        /**
		         * DepndencyGraph: {Object}
		         * key: conponentType,
		         * value: {
		         *     successor: [conponentTypes...],
		         *     originalDeps: [conponentTypes...],
		         *     entryCount: {number}
		         * }
		         */
		        function makeDepndencyGraph(fullNameList) {
		            var graph = {};
		            var noEntryList = [];

		            zrUtil.each(fullNameList, function (name) {

		                var thisItem = createDependencyGraphItem(graph, name);
		                var originalDeps = thisItem.originalDeps = dependencyGetter(name);

		                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
		                thisItem.entryCount = availableDeps.length;
		                if (thisItem.entryCount === 0) {
		                    noEntryList.push(name);
		                }

		                zrUtil.each(availableDeps, function (dependentName) {
		                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
		                        thisItem.predecessor.push(dependentName);
		                    }
		                    var thatItem = createDependencyGraphItem(graph, dependentName);
		                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
		                        thatItem.successor.push(name);
		                    }
		                });
		            });

		            return {graph: graph, noEntryList: noEntryList};
		        }

		        function createDependencyGraphItem(graph, name) {
		            if (!graph[name]) {
		                graph[name] = {predecessor: [], successor: []};
		            }
		            return graph[name];
		        }

		        function getAvailableDependencies(originalDeps, fullNameList) {
		            var availableDeps = [];
		            zrUtil.each(originalDeps, function (dep) {
		                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
		            });
		            return availableDeps;
		        }
		    };

		    module.exports = componentUtil;


	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		// Layout helpers for each component positioning


		    var zrUtil = __webpack_require__(3);
		    var BoundingRect = __webpack_require__(15);
		    var numberUtil = __webpack_require__(7);
		    var formatUtil = __webpack_require__(6);
		    var parsePercent = numberUtil.parsePercent;
		    var each = zrUtil.each;

		    var layout = {};

		    var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];

		    function boxLayout(orient, group, gap, maxWidth, maxHeight) {
		        var x = 0;
		        var y = 0;
		        if (maxWidth == null) {
		            maxWidth = Infinity;
		        }
		        if (maxHeight == null) {
		            maxHeight = Infinity;
		        }
		        var currentLineMaxSize = 0;
		        group.eachChild(function (child, idx) {
		            var position = child.position;
		            var rect = child.getBoundingRect();
		            var nextChild = group.childAt(idx + 1);
		            var nextChildRect = nextChild && nextChild.getBoundingRect();
		            var nextX;
		            var nextY;
		            if (orient === 'horizontal') {
		                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);
		                nextX = x + moveX;
		                // Wrap when width exceeds maxWidth or meet a `newline` group
		                if (nextX > maxWidth || child.newline) {
		                    x = 0;
		                    nextX = moveX;
		                    y += currentLineMaxSize + gap;
		                    currentLineMaxSize = rect.height;
		                }
		                else {
		                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
		                }
		            }
		            else {
		                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);
		                nextY = y + moveY;
		                // Wrap when width exceeds maxHeight or meet a `newline` group
		                if (nextY > maxHeight || child.newline) {
		                    x += currentLineMaxSize + gap;
		                    y = 0;
		                    nextY = moveY;
		                    currentLineMaxSize = rect.width;
		                }
		                else {
		                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
		                }
		            }

		            if (child.newline) {
		                return;
		            }

		            position[0] = x;
		            position[1] = y;

		            orient === 'horizontal'
		                ? (x = nextX + gap)
		                : (y = nextY + gap);
		        });
		    }

		    /**
		     * VBox or HBox layouting
		     * @param {string} orient
		     * @param {module:zrender/container/Group} group
		     * @param {number} gap
		     * @param {number} [width=Infinity]
		     * @param {number} [height=Infinity]
		     */
		    layout.box = boxLayout;

		    /**
		     * VBox layouting
		     * @param {module:zrender/container/Group} group
		     * @param {number} gap
		     * @param {number} [width=Infinity]
		     * @param {number} [height=Infinity]
		     */
		    layout.vbox = zrUtil.curry(boxLayout, 'vertical');

		    /**
		     * HBox layouting
		     * @param {module:zrender/container/Group} group
		     * @param {number} gap
		     * @param {number} [width=Infinity]
		     * @param {number} [height=Infinity]
		     */
		    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');

		    /**
		     * If x or x2 is not specified or 'center' 'left' 'right',
		     * the width would be as long as possible.
		     * If y or y2 is not specified or 'middle' 'top' 'bottom',
		     * the height would be as long as possible.
		     *
		     * @param {Object} positionInfo
		     * @param {number|string} [positionInfo.x]
		     * @param {number|string} [positionInfo.y]
		     * @param {number|string} [positionInfo.x2]
		     * @param {number|string} [positionInfo.y2]
		     * @param {Object} containerRect
		     * @param {string|number} margin
		     * @return {Object} {width, height}
		     */
		    layout.getAvailableSize = function (positionInfo, containerRect, margin) {
		        var containerWidth = containerRect.width;
		        var containerHeight = containerRect.height;

		        var x = parsePercent(positionInfo.x, containerWidth);
		        var y = parsePercent(positionInfo.y, containerHeight);
		        var x2 = parsePercent(positionInfo.x2, containerWidth);
		        var y2 = parsePercent(positionInfo.y2, containerHeight);

		        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
		        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
		        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
		        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);

		        margin = formatUtil.normalizeCssArray(margin || 0);

		        return {
		            width: Math.max(x2 - x - margin[1] - margin[3], 0),
		            height: Math.max(y2 - y - margin[0] - margin[2], 0)
		        };
		    };

		    /**
		     * Parse position info.
		     *
		     * @param {Object} positionInfo
		     * @param {number|string} [positionInfo.left]
		     * @param {number|string} [positionInfo.top]
		     * @param {number|string} [positionInfo.right]
		     * @param {number|string} [positionInfo.bottom]
		     * @param {number|string} [positionInfo.width]
		     * @param {number|string} [positionInfo.height]
		     * @param {number|string} [positionInfo.aspect] Aspect is width / height
		     * @param {Object} containerRect
		     * @param {string|number} [margin]
		     *
		     * @return {module:zrender/core/BoundingRect}
		     */
		    layout.getLayoutRect = function (
		        positionInfo, containerRect, margin
		    ) {
		        margin = formatUtil.normalizeCssArray(margin || 0);

		        var containerWidth = containerRect.width;
		        var containerHeight = containerRect.height;

		        var left = parsePercent(positionInfo.left, containerWidth);
		        var top = parsePercent(positionInfo.top, containerHeight);
		        var right = parsePercent(positionInfo.right, containerWidth);
		        var bottom = parsePercent(positionInfo.bottom, containerHeight);
		        var width = parsePercent(positionInfo.width, containerWidth);
		        var height = parsePercent(positionInfo.height, containerHeight);

		        var verticalMargin = margin[2] + margin[0];
		        var horizontalMargin = margin[1] + margin[3];
		        var aspect = positionInfo.aspect;

		        // If width is not specified, calculate width from left and right
		        if (isNaN(width)) {
		            width = containerWidth - right - horizontalMargin - left;
		        }
		        if (isNaN(height)) {
		            height = containerHeight - bottom - verticalMargin - top;
		        }

		        // If width and height are not given
		        // 1. Graph should not exceeds the container
		        // 2. Aspect must be keeped
		        // 3. Graph should take the space as more as possible
		        if (isNaN(width) && isNaN(height)) {
		            if (aspect > containerWidth / containerHeight) {
		                width = containerWidth * 0.8;
		            }
		            else {
		                height = containerHeight * 0.8;
		            }
		        }

		        if (aspect != null) {
		            // Calculate width or height with given aspect
		            if (isNaN(width)) {
		                width = aspect * height;
		            }
		            if (isNaN(height)) {
		                height = width / aspect;
		            }
		        }

		        // If left is not specified, calculate left from right and width
		        if (isNaN(left)) {
		            left = containerWidth - right - width - horizontalMargin;
		        }
		        if (isNaN(top)) {
		            top = containerHeight - bottom - height - verticalMargin;
		        }

		        // Align left and top
		        switch (positionInfo.left || positionInfo.right) {
		            case 'center':
		                left = containerWidth / 2 - width / 2 - margin[3];
		                break;
		            case 'right':
		                left = containerWidth - width - horizontalMargin;
		                break;
		        }
		        switch (positionInfo.top || positionInfo.bottom) {
		            case 'middle':
		            case 'center':
		                top = containerHeight / 2 - height / 2 - margin[0];
		                break;
		            case 'bottom':
		                top = containerHeight - height - verticalMargin;
		                break;
		        }
		        // If something is wrong and left, top, width, height are calculated as NaN
		        left = left || 0;
		        top = top || 0;
		        if (isNaN(width)) {
		            // Width may be NaN if only one value is given except width
		            width = containerWidth - left - (right || 0);
		        }
		        if (isNaN(height)) {
		            // Height may be NaN if only one value is given except height
		            height = containerHeight - top - (bottom || 0);
		        }

		        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
		        rect.margin = margin;
		        return rect;
		    };

		    /**
		     * Position group of component in viewport
		     *  Group position is specified by either
		     *  {left, top}, {right, bottom}
		     *  If all properties exists, right and bottom will be igonred.
		     *
		     * @param {module:zrender/container/Group} group
		     * @param {Object} positionInfo
		     * @param {number|string} [positionInfo.left]
		     * @param {number|string} [positionInfo.top]
		     * @param {number|string} [positionInfo.right]
		     * @param {number|string} [positionInfo.bottom]
		     * @param {Object} containerRect
		     * @param {string|number} margin
		     */
		    layout.positionGroup = function (
		        group, positionInfo, containerRect, margin
		    ) {
		        var groupRect = group.getBoundingRect();

		        positionInfo = zrUtil.extend(zrUtil.clone(positionInfo), {
		            width: groupRect.width,
		            height: groupRect.height
		        });

		        positionInfo = layout.getLayoutRect(
		            positionInfo, containerRect, margin
		        );

		        group.position = [
		            positionInfo.x - groupRect.x,
		            positionInfo.y - groupRect.y
		        ];
		    };

		    /**
		     * Consider Case:
		     * When defulat option has {left: 0, width: 100}, and we set {right: 0}
		     * through setOption or media query, using normal zrUtil.merge will cause
		     * {right: 0} does not take effect.
		     *
		     * @example
		     * ComponentModel.extend({
		     *     init: function () {
		     *         ...
		     *         var inputPositionParams = layout.getLayoutParams(option);
		     *         this.mergeOption(inputPositionParams);
		     *     },
		     *     mergeOption: function (newOption) {
		     *         newOption && zrUtil.merge(thisOption, newOption, true);
		     *         layout.mergeLayoutParam(thisOption, newOption);
		     *     }
		     * });
		     *
		     * @param {Object} targetOption
		     * @param {Object} newOption
		     * @param {Object|string} [opt]
		     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.
		     */
		    layout.mergeLayoutParam = function (targetOption, newOption, opt) {
		        !zrUtil.isObject(opt) && (opt = {});
		        var hNames = ['width', 'left', 'right']; // Order by priority.
		        var vNames = ['height', 'top', 'bottom']; // Order by priority.
		        var hResult = merge(hNames);
		        var vResult = merge(vNames);

		        copy(hNames, targetOption, hResult);
		        copy(vNames, targetOption, vResult);

		        function merge(names) {
		            var newParams = {};
		            var newValueCount = 0;
		            var merged = {};
		            var mergedValueCount = 0;
		            var enoughParamNumber = opt.ignoreSize ? 1 : 2;

		            each(names, function (name) {
		                merged[name] = targetOption[name];
		            });
		            each(names, function (name) {
		                // Consider case: newOption.width is null, which is
		                // set by user for removing width setting.
		                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
		                hasValue(newParams, name) && newValueCount++;
		                hasValue(merged, name) && mergedValueCount++;
		            });

		            // Case: newOption: {width: ..., right: ...},
		            // or targetOption: {right: ...} and newOption: {width: ...},
		            // There is no conflict when merged only has params count
		            // little than enoughParamNumber.
		            if (mergedValueCount === enoughParamNumber || !newValueCount) {
		                return merged;
		            }
		            // Case: newOption: {width: ..., right: ...},
		            // Than we can make sure user only want those two, and ignore
		            // all origin params in targetOption.
		            else if (newValueCount >= enoughParamNumber) {
		                return newParams;
		            }
		            else {
		                // Chose another param from targetOption by priority.
		                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.
		                for (var i = 0; i < names.length; i++) {
		                    var name = names[i];
		                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
		                        newParams[name] = targetOption[name];
		                        break;
		                    }
		                }
		                return newParams;
		            }
		        }

		        function hasProp(obj, name) {
		            return obj.hasOwnProperty(name);
		        }

		        function hasValue(obj, name) {
		            return obj[name] != null && obj[name] !== 'auto';
		        }

		        function copy(names, target, source) {
		            each(names, function (name) {
		                target[name] = source[name];
		            });
		        }
		    };

		    /**
		     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
		     * @param {Object} source
		     * @return {Object} Result contains those props.
		     */
		    layout.getLayoutParams = function (source) {
		        return layout.copyLayoutParams({}, source);
		    };

		    /**
		     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
		     * @param {Object} source
		     * @return {Object} Result contains those props.
		     */
		    layout.copyLayoutParams = function (target, source) {
		        source && target && each(LOCATION_PARAMS, function (name) {
		            source.hasOwnProperty(name) && (target[name] = source[name]);
		        });
		        return target;
		    };

		    module.exports = layout;


	/***/ },
	/* 22 */
	/***/ function(module, exports) {

		

		    module.exports = {
		        getBoxLayoutParams: function () {
		            return {
		                left: this.get('left'),
		                top: this.get('top'),
		                right: this.get('right'),
		                bottom: this.get('bottom'),
		                width: this.get('width'),
		                height: this.get('height')
		            };
		        }
		    };


	/***/ },
	/* 23 */
	/***/ function(module, exports) {

		
		    var platform = '';
		    // Navigator not exists in node
		    if (typeof navigator !== 'undefined') {
		        platform = navigator.platform || '';
		    }
		    module.exports = {
		        // 全图默认背景
		        // backgroundColor: 'rgba(0,0,0,0)',

		        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
		        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
		        // 浅色
		        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
		        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
		        // 深色
		        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],

		        // 默认需要 Grid 配置项
		        grid: {},
		        // 主题，主题
		        textStyle: {
		            // color: '#000',
		            // decoration: 'none',
		            // PENDING
		            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
		            // fontFamily: 'Arial, Verdana, sans-serif',
		            fontSize: 12,
		            fontStyle: 'normal',
		            fontWeight: 'normal'
		        },
		        // 主题，默认标志图形类型列表
		        // symbolList: [
		        //     'circle', 'rectangle', 'triangle', 'diamond',
		        //     'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'
		        // ],
		        animation: true,                // 过渡动画是否开启
		        animationThreshold: 2000,       // 动画元素阀值，产生的图形原素超过2000不出动画
		        animationDuration: 1000,        // 过渡动画参数：进入
		        animationDurationUpdate: 300,   // 过渡动画参数：更新
		        animationEasing: 'exponentialOut',    //BounceOut
		        animationEasingUpdate: 'cubicOut'
		    };


	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);

		    var echartsAPIList = [
		        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction',
		        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'
		    ];

		    function ExtensionAPI(chartInstance) {
		        zrUtil.each(echartsAPIList, function (name) {
		            this[name] = zrUtil.bind(chartInstance[name], chartInstance);
		        }, this);
		    }

		    module.exports = ExtensionAPI;


	/***/ },
	/* 25 */
	/***/ function(module, exports) {

		'use strict';


		    // var zrUtil = require('zrender/lib/core/util');
		    var coordinateSystemCreators = {};

		    function CoordinateSystemManager() {

		        this._coordinateSystems = [];
		    }

		    CoordinateSystemManager.prototype = {

		        constructor: CoordinateSystemManager,

		        create: function (ecModel, api) {
		            var coordinateSystems = [];
		            for (var type in coordinateSystemCreators) {
		                var list = coordinateSystemCreators[type].create(ecModel, api);
		                list && (coordinateSystems = coordinateSystems.concat(list));
		            }

		            this._coordinateSystems = coordinateSystems;
		        },

		        update: function (ecModel, api) {
		            var coordinateSystems = this._coordinateSystems;
		            for (var i = 0; i < coordinateSystems.length; i++) {
		                // FIXME MUST have
		                coordinateSystems[i].update && coordinateSystems[i].update(ecModel, api);
		            }
		        }
		    };

		    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
		        coordinateSystemCreators[type] = coordinateSystemCreator;
		    };

		    CoordinateSystemManager.get = function (type) {
		        return coordinateSystemCreators[type];
		    };

		    module.exports = CoordinateSystemManager;


	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * ECharts option manager
		 *
		 * @module {echarts/model/OptionManager}
		 */



		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);
		    var ComponentModel = __webpack_require__(19);
		    var each = zrUtil.each;
		    var clone = zrUtil.clone;
		    var map = zrUtil.map;
		    var merge = zrUtil.merge;

		    var QUERY_REG = /^(min|max)?(.+)$/;

		    /**
		     * TERM EXPLANATIONS:
		     *
		     * [option]:
		     *
		     *     An object that contains definitions of components. For example:
		     *     var option = {
		     *         title: {...},
		     *         legend: {...},
		     *         visualMap: {...},
		     *         series: [
		     *             {data: [...]},
		     *             {data: [...]},
		     *             ...
		     *         ]
		     *     };
		     *
		     * [rawOption]:
		     *
		     *     An object input to echarts.setOption. 'rawOption' may be an
		     *     'option', or may be an object contains multi-options. For example:
		     *     var option = {
		     *         baseOption: {
		     *             title: {...},
		     *             legend: {...},
		     *             series: [
		     *                 {data: [...]},
		     *                 {data: [...]},
		     *                 ...
		     *             ]
		     *         },
		     *         timeline: {...},
		     *         options: [
		     *             {title: {...}, series: {data: [...]}},
		     *             {title: {...}, series: {data: [...]}},
		     *             ...
		     *         ],
		     *         media: [
		     *             {
		     *                 query: {maxWidth: 320},
		     *                 option: {series: {x: 20}, visualMap: {show: false}}
		     *             },
		     *             {
		     *                 query: {minWidth: 320, maxWidth: 720},
		     *                 option: {series: {x: 500}, visualMap: {show: true}}
		     *             },
		     *             {
		     *                 option: {series: {x: 1200}, visualMap: {show: true}}
		     *             }
		     *         ]
		     *     };
		     *
		     * @alias module:echarts/model/OptionManager
		     * @param {module:echarts/ExtensionAPI} api
		     */
		    function OptionManager(api) {

		        /**
		         * @private
		         * @type {module:echarts/ExtensionAPI}
		         */
		        this._api = api;

		        /**
		         * @private
		         * @type {Array.<number>}
		         */
		        this._timelineOptions = [];

		        /**
		         * @private
		         * @type {Array.<Object>}
		         */
		        this._mediaList = [];

		        /**
		         * @private
		         * @type {Object}
		         */
		        this._mediaDefault;

		        /**
		         * -1, means default.
		         * empty means no media.
		         * @private
		         * @type {Array.<number>}
		         */
		        this._currentMediaIndices = [];

		        /**
		         * @private
		         * @type {Object}
		         */
		        this._optionBackup;

		        /**
		         * @private
		         * @type {Object}
		         */
		        this._newOptionBackup;
		    }

		    // timeline.notMerge is not supported in ec3. Firstly there is rearly
		    // case that notMerge is needed. Secondly supporting 'notMerge' requires
		    // rawOption cloned and backuped when timeline changed, which does no
		    // good to performance. What's more, that both timeline and setOption
		    // method supply 'notMerge' brings complex and some problems.
		    // Consider this case:
		    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
		    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);

		    OptionManager.prototype = {

		        constructor: OptionManager,

		        /**
		         * @public
		         * @param {Object} rawOption Raw option.
		         * @param {module:echarts/model/Global} ecModel
		         * @param {Array.<Function>} optionPreprocessorFuncs
		         * @return {Object} Init option
		         */
		        setOption: function (rawOption, optionPreprocessorFuncs) {
		            rawOption = clone(rawOption, true);

		            // FIXME
		            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

		            var oldOptionBackup = this._optionBackup;
		            var newOptionBackup = this._newOptionBackup = parseRawOption.call(
		                this, rawOption, optionPreprocessorFuncs
		            );

		            // For setOption at second time (using merge mode);
		            if (oldOptionBackup) {
		                // Only baseOption can be merged.
		                mergeOption(oldOptionBackup.baseOption, newOptionBackup.baseOption);

		                if (newOptionBackup.timelineOptions.length) {
		                    oldOptionBackup.timelineOptions = newOptionBackup.timelineOptions;
		                }
		                if (newOptionBackup.mediaList.length) {
		                    oldOptionBackup.mediaList = newOptionBackup.mediaList;
		                }
		                if (newOptionBackup.mediaDefault) {
		                    oldOptionBackup.mediaDefault = newOptionBackup.mediaDefault;
		                }
		            }
		            else {
		                this._optionBackup = newOptionBackup;
		            }
		        },

		        /**
		         * @param {boolean} isRecreate
		         * @return {Object}
		         */
		        mountOption: function (isRecreate) {
		            var optionBackup = isRecreate
		                // this._optionBackup can be only used when recreate.
		                // In other cases we use model.mergeOption to handle merge.
		                ? this._optionBackup : this._newOptionBackup;

		            // FIXME
		            // 如果没有reset功能则不clone。

		            this._timelineOptions = map(optionBackup.timelineOptions, clone);
		            this._mediaList = map(optionBackup.mediaList, clone);
		            this._mediaDefault = clone(optionBackup.mediaDefault);
		            this._currentMediaIndices = [];

		            return clone(optionBackup.baseOption);
		        },

		        /**
		         * @param {module:echarts/model/Global} ecModel
		         * @return {Object}
		         */
		        getTimelineOption: function (ecModel) {
		            var option;
		            var timelineOptions = this._timelineOptions;

		            if (timelineOptions.length) {
		                // getTimelineOption can only be called after ecModel inited,
		                // so we can get currentIndex from timelineModel.
		                var timelineModel = ecModel.getComponent('timeline');
		                if (timelineModel) {
		                    option = clone(
		                        timelineOptions[timelineModel.getCurrentIndex()],
		                        true
		                    );
		                }
		            }

		            return option;
		        },

		        /**
		         * @param {module:echarts/model/Global} ecModel
		         * @return {Array.<Object>}
		         */
		        getMediaOption: function (ecModel) {
		            var ecWidth = this._api.getWidth();
		            var ecHeight = this._api.getHeight();
		            var mediaList = this._mediaList;
		            var mediaDefault = this._mediaDefault;
		            var indices = [];
		            var result = [];

		            // No media defined.
		            if (!mediaList.length && !mediaDefault) {
		                return result;
		            }

		            // Multi media may be applied, the latter defined media has higher priority.
		            for (var i = 0, len = mediaList.length; i < len; i++) {
		                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
		                    indices.push(i);
		                }
		            }

		            // FIXME
		            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
		            if (!indices.length && mediaDefault) {
		                indices = [-1];
		            }

		            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
		                result = map(indices, function (index) {
		                    return clone(
		                        index === -1 ? mediaDefault.option : mediaList[index].option
		                    );
		                });
		            }
		            // Otherwise return nothing.

		            this._currentMediaIndices = indices;

		            return result;
		        }
		    };

		    function parseRawOption(rawOption, optionPreprocessorFuncs) {
		        var timelineOptions = [];
		        var mediaList = [];
		        var mediaDefault;
		        var baseOption;

		        // Compatible with ec2.
		        var timelineOpt = rawOption.timeline;

		        if (rawOption.baseOption) {
		            baseOption = rawOption.baseOption;
		        }

		        // For timeline
		        if (timelineOpt || rawOption.options) {
		            baseOption = baseOption || {};
		            timelineOptions = (rawOption.options || []).slice();
		        }
		        // For media query
		        if (rawOption.media) {
		            baseOption = baseOption || {};
		            var media = rawOption.media;
		            each(media, function (singleMedia) {
		                if (singleMedia && singleMedia.option) {
		                    if (singleMedia.query) {
		                        mediaList.push(singleMedia);
		                    }
		                    else if (!mediaDefault) {
		                        // Use the first media default.
		                        mediaDefault = singleMedia;
		                    }
		                }
		            });
		        }

		        // For normal option
		        if (!baseOption) {
		            baseOption = rawOption;
		        }

		        // Set timelineOpt to baseOption in ec3,
		        // which is convenient for merge option.
		        if (!baseOption.timeline) {
		            baseOption.timeline = timelineOpt;
		        }

		        // Preprocess.
		        each([baseOption].concat(timelineOptions)
		            .concat(zrUtil.map(mediaList, function (media) {
		                return media.option;
		            })),
		            function (option) {
		                each(optionPreprocessorFuncs, function (preProcess) {
		                    preProcess(option);
		                });
		            }
		        );

		        return {
		            baseOption: baseOption,
		            timelineOptions: timelineOptions,
		            mediaDefault: mediaDefault,
		            mediaList: mediaList
		        };
		    }

		    /**
		     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
		     * Support: width, height, aspectRatio
		     * Can use max or min as prefix.
		     */
		    function applyMediaQuery(query, ecWidth, ecHeight) {
		        var realMap = {
		            width: ecWidth,
		            height: ecHeight,
		            aspectratio: ecWidth / ecHeight // lowser case for convenientce.
		        };

		        var applicatable = true;

		        zrUtil.each(query, function (value, attr) {
		            var matched = attr.match(QUERY_REG);

		            if (!matched || !matched[1] || !matched[2]) {
		                return;
		            }

		            var operator = matched[1];
		            var realAttr = matched[2].toLowerCase();

		            if (!compare(realMap[realAttr], value, operator)) {
		                applicatable = false;
		            }
		        });

		        return applicatable;
		    }

		    function compare(real, expect, operator) {
		        if (operator === 'min') {
		            return real >= expect;
		        }
		        else if (operator === 'max') {
		            return real <= expect;
		        }
		        else { // Equals
		            return real === expect;
		        }
		    }

		    function indicesEquals(indices1, indices2) {
		        // indices is always order by asc and has only finite number.
		        return indices1.join(',') === indices2.join(',');
		    }

		    /**
		     * Consider case:
		     * `chart.setOption(opt1);`
		     * Then user do some interaction like dataZoom, dataView changing.
		     * `chart.setOption(opt2);`
		     * Then user press 'reset button' in toolbox.
		     *
		     * After doing that all of the interaction effects should be reset, the
		     * chart should be the same as the result of invoke
		     * `chart.setOption(opt1); chart.setOption(opt2);`.
		     *
		     * Although it is not able ensure that
		     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
		     * `chart.setOption(merge(opt1, opt2));` exactly,
		     * this might be the only simple way to implement that feature.
		     *
		     * MEMO: We've considered some other approaches:
		     * 1. Each model handle its self restoration but not uniform treatment.
		     *     (Too complex in logic and error-prone)
		     * 2. Use a shadow ecModel. (Performace expensive)
		     */
		    function mergeOption(oldOption, newOption) {
		        newOption = newOption || {};

		        each(newOption, function (newCptOpt, mainType) {
		            if (newCptOpt == null) {
		                return;
		            }

		            var oldCptOpt = oldOption[mainType];

		            if (!ComponentModel.hasClass(mainType)) {
		                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
		            }
		            else {
		                newCptOpt = modelUtil.normalizeToArray(newCptOpt);
		                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);

		                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);

		                oldOption[mainType] = map(mapResult, function (item) {
		                    return (item.option && item.exist)
		                        ? merge(item.exist, item.option, true)
		                        : (item.exist || item.option);
		                });
		            }
		        });
		    }

		    module.exports = OptionManager;


	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var formatUtil = __webpack_require__(6);
		    var modelUtil = __webpack_require__(5);
		    var ComponentModel = __webpack_require__(19);

		    var encodeHTML = formatUtil.encodeHTML;
		    var addCommas = formatUtil.addCommas;

		    var SeriesModel = ComponentModel.extend({

		        type: 'series.__base__',

		        /**
		         * @readOnly
		         */
		        seriesIndex: 0,

		        // coodinateSystem will be injected in the echarts/CoordinateSystem
		        coordinateSystem: null,

		        /**
		         * @type {Object}
		         * @protected
		         */
		        defaultOption: null,

		        /**
		         * Data provided for legend
		         * @type {Function}
		         */
		        // PENDING
		        legendDataProvider: null,

		        init: function (option, parentModel, ecModel, extraOpt) {

		            /**
		             * @type {number}
		             * @readOnly
		             */
		            this.seriesIndex = this.componentIndex;

		            this.mergeDefaultAndTheme(option, ecModel);

		            /**
		             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
		             * @private
		             */
		            this._dataBeforeProcessed = this.getInitialData(option, ecModel);

		            // When using module:echarts/data/Tree or module:echarts/data/Graph,
		            // cloneShallow will cause this._data.graph.data pointing to new data list.
		            // Wo we make this._dataBeforeProcessed first, and then make this._data.
		            this._data = this._dataBeforeProcessed.cloneShallow();
		        },

		        /**
		         * Util for merge default and theme to option
		         * @param  {Object} option
		         * @param  {module:echarts/model/Global} ecModel
		         */
		        mergeDefaultAndTheme: function (option, ecModel) {
		            zrUtil.merge(
		                option,
		                ecModel.getTheme().get(this.subType)
		            );
		            zrUtil.merge(option, this.getDefaultOption());

		            // Default label emphasis `position` and `show`
		            modelUtil.defaultEmphasis(
		                option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']
		            );

		            // Default data label emphasis `position` and `show`
		            // FIXME Tree structure data ?
		            var data = option.data || [];
		            for (var i = 0; i < data.length; i++) {
		                if (data[i] && data[i].label) {
		                    modelUtil.defaultEmphasis(
		                        data[i].label, ['position', 'show', 'textStyle', 'distance', 'formatter']
		                    );
		                }
		            }
		        },

		        mergeOption: function (newSeriesOption, ecModel) {
		            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);

		            var data = this.getInitialData(newSeriesOption, ecModel);
		            // TODO Merge data?
		            if (data) {
		                this._data = data;
		                this._dataBeforeProcessed = data.cloneShallow();
		            }
		        },

		        /**
		         * Init a data structure from data related option in series
		         * Must be overwritten
		         */
		        getInitialData: function () {},

		        /**
		         * @return {module:echarts/data/List}
		         */
		        getData: function () {
		            return this._data;
		        },

		        /**
		         * @param {module:echarts/data/List} data
		         */
		        setData: function (data) {
		            this._data = data;
		        },

		        /**
		         * Get data before processed
		         * @return {module:echarts/data/List}
		         */
		        getRawData: function () {
		            return this._dataBeforeProcessed;
		        },

		        /**
		         * Get raw data array given by user
		         * @return {Array.<Object>}
		         */
		        getRawDataArray: function () {
		            return this.option.data;
		        },

		        /**
		         * Coord dimension to data dimension.
		         *
		         * By default the result is the same as dimensions of series data.
		         * But some series dimensions are different from coord dimensions (i.e.
		         * candlestick and boxplot). Override this method to handle those cases.
		         *
		         * Coord dimension to data dimension can be one-to-many
		         *
		         * @param {string} coordDim
		         * @return {Array.<string>} dimensions on the axis.
		         */
		        coordDimToDataDim: function (coordDim) {
		            return [coordDim];
		        },

		        /**
		         * Convert data dimension to coord dimension.
		         *
		         * @param {string|number} dataDim
		         * @return {string}
		         */
		        dataDimToCoordDim: function (dataDim) {
		            return dataDim;
		        },

		        /**
		         * Get base axis if has coordinate system and has axis.
		         * By default use coordSys.getBaseAxis();
		         * Can be overrided for some chart.
		         * @return {type} description
		         */
		        getBaseAxis: function () {
		            var coordSys = this.coordinateSystem;
		            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
		        },

		        // FIXME
		        /**
		         * Default tooltip formatter
		         *
		         * @param {number} dataIndex
		         * @param {boolean} [multipleSeries=false]
		         */
		        formatTooltip: function (dataIndex, multipleSeries) {
		            var data = this._data;
		            var value = this.getRawValue(dataIndex);
		            var formattedValue = zrUtil.isArray(value)
		                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
		            var name = data.getName(dataIndex);
		            var color = data.getItemVisual(dataIndex, 'color');
		            var colorEl = '<span style="display:inline-block;margin-right:5px;'
		                + 'border-radius:10px;width:9px;height:9px;background-color:' + color + '"></span>';

		            return !multipleSeries
		                ? (encodeHTML(this.name) + '<br />' + colorEl
		                    + (name
		                        ? encodeHTML(name) + ' : ' + formattedValue
		                        : formattedValue)
		                  )
		                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);
		        },

		        restoreData: function () {
		            this._data = this._dataBeforeProcessed.cloneShallow();
		        }
		    });

		    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);

		    module.exports = SeriesModel;


	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var Group = __webpack_require__(29);
		    var componentUtil = __webpack_require__(20);
		    var clazzUtil = __webpack_require__(9);

		    var Component = function () {
		        /**
		         * @type {module:zrender/container/Group}
		         * @readOnly
		         */
		        this.group = new Group();

		        /**
		         * @type {string}
		         * @readOnly
		         */
		        this.uid = componentUtil.getUID('viewComponent');
		    };

		    Component.prototype = {

		        constructor: Component,

		        init: function (ecModel, api) {},

		        render: function (componentModel, ecModel, api, payload) {},

		        dispose: function () {}
		    };

		    var componentProto = Component.prototype;
		    componentProto.updateView
		        = componentProto.updateLayout
		        = componentProto.updateVisual
		        = function (seriesModel, ecModel, api, payload) {
		            // Do nothing;
		        };
		    // Enable Component.extend.
		    clazzUtil.enableClassExtend(Component);

		    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
		    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});

		    module.exports = Component;


	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
		 * @module zrender/graphic/Group
		 * @example
		 *     var Group = require('zrender/lib/container/Group');
		 *     var Circle = require('zrender/lib/graphic/shape/Circle');
		 *     var g = new Group();
		 *     g.position[0] = 100;
		 *     g.position[1] = 100;
		 *     g.add(new Circle({
		 *         style: {
		 *             x: 100,
		 *             y: 100,
		 *             r: 20,
		 *         }
		 *     }));
		 *     zr.add(g);
		 */


		    var zrUtil = __webpack_require__(3);
		    var Element = __webpack_require__(30);
		    var BoundingRect = __webpack_require__(15);

		    /**
		     * @alias module:zrender/graphic/Group
		     * @constructor
		     * @extends module:zrender/mixin/Transformable
		     * @extends module:zrender/mixin/Eventful
		     */
		    var Group = function (opts) {

		        opts = opts || {};

		        Element.call(this, opts);

		        for (var key in opts) {
		            this[key] = opts[key];
		        }

		        this._children = [];

		        this.__storage = null;

		        this.__dirty = true;
		    };

		    Group.prototype = {

		        constructor: Group,

		        /**
		         * @type {string}
		         */
		        type: 'group',

		        /**
		         * @return {Array.<module:zrender/Element>}
		         */
		        children: function () {
		            return this._children.slice();
		        },

		        /**
		         * 获取指定 index 的儿子节点
		         * @param  {number} idx
		         * @return {module:zrender/Element}
		         */
		        childAt: function (idx) {
		            return this._children[idx];
		        },

		        /**
		         * 获取指定名字的儿子节点
		         * @param  {string} name
		         * @return {module:zrender/Element}
		         */
		        childOfName: function (name) {
		            var children = this._children;
		            for (var i = 0; i < children.length; i++) {
		                if (children[i].name === name) {
		                    return children[i];
		                }
		             }
		        },

		        /**
		         * @return {number}
		         */
		        childCount: function () {
		            return this._children.length;
		        },

		        /**
		         * 添加子节点到最后
		         * @param {module:zrender/Element} child
		         */
		        add: function (child) {
		            if (child && child !== this && child.parent !== this) {

		                this._children.push(child);

		                this._doAdd(child);
		            }

		            return this;
		        },

		        /**
		         * 添加子节点在 nextSibling 之前
		         * @param {module:zrender/Element} child
		         * @param {module:zrender/Element} nextSibling
		         */
		        addBefore: function (child, nextSibling) {
		            if (child && child !== this && child.parent !== this
		                && nextSibling && nextSibling.parent === this) {

		                var children = this._children;
		                var idx = children.indexOf(nextSibling);

		                if (idx >= 0) {
		                    children.splice(idx, 0, child);
		                    this._doAdd(child);
		                }
		            }

		            return this;
		        },

		        _doAdd: function (child) {
		            if (child.parent) {
		                child.parent.remove(child);
		            }

		            child.parent = this;

		            var storage = this.__storage;
		            var zr = this.__zr;
		            if (storage && storage !== child.__storage) {

		                storage.addToMap(child);

		                if (child instanceof Group) {
		                    child.addChildrenToStorage(storage);
		                }
		            }

		            zr && zr.refresh();
		        },

		        /**
		         * 移除子节点
		         * @param {module:zrender/Element} child
		         */
		        remove: function (child) {
		            var zr = this.__zr;
		            var storage = this.__storage;
		            var children = this._children;

		            var idx = zrUtil.indexOf(children, child);
		            if (idx < 0) {
		                return this;
		            }
		            children.splice(idx, 1);

		            child.parent = null;

		            if (storage) {

		                storage.delFromMap(child.id);

		                if (child instanceof Group) {
		                    child.delChildrenFromStorage(storage);
		                }
		            }

		            zr && zr.refresh();

		            return this;
		        },

		        /**
		         * 移除所有子节点
		         */
		        removeAll: function () {
		            var children = this._children;
		            var storage = this.__storage;
		            var child;
		            var i;
		            for (i = 0; i < children.length; i++) {
		                child = children[i];
		                if (storage) {
		                    storage.delFromMap(child.id);
		                    if (child instanceof Group) {
		                        child.delChildrenFromStorage(storage);
		                    }
		                }
		                child.parent = null;
		            }
		            children.length = 0;

		            return this;
		        },

		        /**
		         * 遍历所有子节点
		         * @param  {Function} cb
		         * @param  {}   context
		         */
		        eachChild: function (cb, context) {
		            var children = this._children;
		            for (var i = 0; i < children.length; i++) {
		                var child = children[i];
		                cb.call(context, child, i);
		            }
		            return this;
		        },

		        /**
		         * 深度优先遍历所有子孙节点
		         * @param  {Function} cb
		         * @param  {}   context
		         */
		        traverse: function (cb, context) {
		            for (var i = 0; i < this._children.length; i++) {
		                var child = this._children[i];
		                cb.call(context, child);

		                if (child.type === 'group') {
		                    child.traverse(cb, context);
		                }
		            }
		            return this;
		        },

		        addChildrenToStorage: function (storage) {
		            for (var i = 0; i < this._children.length; i++) {
		                var child = this._children[i];
		                storage.addToMap(child);
		                if (child instanceof Group) {
		                    child.addChildrenToStorage(storage);
		                }
		            }
		        },

		        delChildrenFromStorage: function (storage) {
		            for (var i = 0; i < this._children.length; i++) {
		                var child = this._children[i];
		                storage.delFromMap(child.id);
		                if (child instanceof Group) {
		                    child.delChildrenFromStorage(storage);
		                }
		            }
		        },

		        dirty: function () {
		            this.__dirty = true;
		            this.__zr && this.__zr.refresh();
		            return this;
		        },

		        /**
		         * @return {module:zrender/core/BoundingRect}
		         */
		        getBoundingRect: function (includeChildren) {
		            // TODO Caching
		            // TODO Transform
		            var rect = null;
		            var tmpRect = new BoundingRect(0, 0, 0, 0);
		            var children = includeChildren || this._children;
		            var tmpMat = [];

		            for (var i = 0; i < children.length; i++) {
		                var child = children[i];
		                if (child.ignore || child.invisible) {
		                    continue;
		                }

		                var childRect = child.getBoundingRect();
		                var transform = child.getLocalTransform(tmpMat);
		                if (transform) {
		                    tmpRect.copy(childRect);
		                    tmpRect.applyTransform(transform);
		                    rect = rect || tmpRect.clone();
		                    rect.union(tmpRect);
		                }
		                else {
		                    rect = rect || childRect.clone();
		                    rect.union(childRect);
		                }
		            }
		            return rect || tmpRect;
		        }
		    };

		    zrUtil.inherits(Group, Element);

		    module.exports = Group;


	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * @module zrender/Element
		 */


		    var guid = __webpack_require__(31);
		    var Eventful = __webpack_require__(32);
		    var Transformable = __webpack_require__(33);
		    var Animatable = __webpack_require__(34);
		    var zrUtil = __webpack_require__(3);

		    /**
		     * @alias module:zrender/Element
		     * @constructor
		     * @extends {module:zrender/mixin/Animatable}
		     * @extends {module:zrender/mixin/Transformable}
		     * @extends {module:zrender/mixin/Eventful}
		     */
		    var Element = function (opts) {

		        Transformable.call(this, opts);
		        Eventful.call(this, opts);
		        Animatable.call(this, opts);

		        /**
		         * 画布元素ID
		         * @type {string}
		         */
		        this.id = opts.id || guid();
		    };

		    Element.prototype = {

		        /**
		         * 元素类型
		         * Element type
		         * @type {string}
		         */
		        type: 'element',

		        /**
		         * 元素名字
		         * Element name
		         * @type {string}
		         */
		        name: '',

		        /**
		         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
		         * ZRender instance will be assigned when element is associated with zrender
		         * @name module:/zrender/Element#__zr
		         * @type {module:zrender/ZRender}
		         */
		        __zr: null,

		        /**
		         * 图形是否忽略，为true时忽略图形的绘制以及事件触发
		         * If ignore drawing and events of the element object
		         * @name module:/zrender/Element#ignore
		         * @type {boolean}
		         * @default false
		         */
		        ignore: false,

		        /**
		         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
		         * 该路径会继承被裁减对象的变换
		         * @type {module:zrender/graphic/Path}
		         * @see http://www.w3.org/TR/2dcontext/#clipping-region
		         * @readOnly
		         */
		        clipPath: null,

		        /**
		         * Drift element
		         * @param  {number} dx dx on the global space
		         * @param  {number} dy dy on the global space
		         */
		        drift: function (dx, dy) {
		            switch (this.draggable) {
		                case 'horizontal':
		                    dy = 0;
		                    break;
		                case 'vertical':
		                    dx = 0;
		                    break;
		            }

		            var m = this.transform;
		            if (!m) {
		                m = this.transform = [1, 0, 0, 1, 0, 0];
		            }
		            m[4] += dx;
		            m[5] += dy;

		            this.decomposeTransform();
		            this.dirty();
		        },

		        /**
		         * Hook before update
		         */
		        beforeUpdate: function () {},
		        /**
		         * Hook after update
		         */
		        afterUpdate: function () {},
		        /**
		         * Update each frame
		         */
		        update: function () {
		            this.updateTransform();
		        },

		        /**
		         * @param  {Function} cb
		         * @param  {}   context
		         */
		        traverse: function (cb, context) {},

		        /**
		         * @protected
		         */
		        attrKV: function (key, value) {
		            if (key === 'position' || key === 'scale' || key === 'origin') {
		                // Copy the array
		                if (value) {
		                    var target = this[key];
		                    if (!target) {
		                        target = this[key] = [];
		                    }
		                    target[0] = value[0];
		                    target[1] = value[1];
		                }
		            }
		            else {
		                this[key] = value;
		            }
		        },

		        /**
		         * Hide the element
		         */
		        hide: function () {
		            this.ignore = true;
		            this.__zr && this.__zr.refresh();
		        },

		        /**
		         * Show the element
		         */
		        show: function () {
		            this.ignore = false;
		            this.__zr && this.__zr.refresh();
		        },

		        /**
		         * @param {string|Object} key
		         * @param {*} value
		         */
		        attr: function (key, value) {
		            if (typeof key === 'string') {
		                this.attrKV(key, value);
		            }
		            else if (zrUtil.isObject(key)) {
		                for (var name in key) {
		                    if (key.hasOwnProperty(name)) {
		                        this.attrKV(name, key[name]);
		                    }
		                }
		            }
		            this.dirty();

		            return this;
		        },

		        /**
		         * @param {module:zrender/graphic/Path} clipPath
		         */
		        setClipPath: function (clipPath) {
		            var zr = this.__zr;
		            if (zr) {
		                clipPath.addSelfToZr(zr);
		            }

		            // Remove previous clip path
		            if (this.clipPath && this.clipPath !== clipPath) {
		                this.removeClipPath();
		            }

		            this.clipPath = clipPath;
		            clipPath.__zr = zr;
		            clipPath.__clipTarget = this;

		            this.dirty();
		        },

		        /**
		         */
		        removeClipPath: function () {
		            var clipPath = this.clipPath;
		            if (clipPath) {
		                if (clipPath.__zr) {
		                    clipPath.removeSelfFromZr(clipPath.__zr);
		                }

		                clipPath.__zr = null;
		                clipPath.__clipTarget = null;
		                this.clipPath = null;

		                this.dirty();
		            }
		        },

		        /**
		         * Add self from zrender instance.
		         * Not recursively because it will be invoked when element added to storage.
		         * @param {module:zrender/ZRender} zr
		         */
		        addSelfToZr: function (zr) {
		            this.__zr = zr;
		            // 添加动画
		            var animators = this.animators;
		            if (animators) {
		                for (var i = 0; i < animators.length; i++) {
		                    zr.animation.addAnimator(animators[i]);
		                }
		            }

		            if (this.clipPath) {
		                this.clipPath.addSelfToZr(zr);
		            }
		        },

		        /**
		         * Remove self from zrender instance.
		         * Not recursively because it will be invoked when element added to storage.
		         * @param {module:zrender/ZRender} zr
		         */
		        removeSelfFromZr: function (zr) {
		            this.__zr = null;
		            // 移除动画
		            var animators = this.animators;
		            if (animators) {
		                for (var i = 0; i < animators.length; i++) {
		                    zr.animation.removeAnimator(animators[i]);
		                }
		            }

		            if (this.clipPath) {
		                this.clipPath.removeSelfFromZr(zr);
		            }
		        }
		    };

		    zrUtil.mixin(Element, Animatable);
		    zrUtil.mixin(Element, Transformable);
		    zrUtil.mixin(Element, Eventful);

		    module.exports = Element;


	/***/ },
	/* 31 */
	/***/ function(module, exports) {

		/**
		 * zrender: 生成唯一id
		 *
		 * @author errorrik (errorrik@gmail.com)
		 */


		        var idStart = 0x0907;

		        module.exports = function () {
		            return 'zr_' + (idStart++);
		        };
		    


	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 事件扩展
		 * @module zrender/mixin/Eventful
		 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
		 *         pissang (https://www.github.com/pissang)
		 */


		    var arrySlice = Array.prototype.slice;
		    var zrUtil = __webpack_require__(3);
		    var indexOf = zrUtil.indexOf;

		    /**
		     * 事件分发器
		     * @alias module:zrender/mixin/Eventful
		     * @constructor
		     */
		    var Eventful = function () {
		        this._$handlers = {};
		    };

		    Eventful.prototype = {

		        constructor: Eventful,

		        /**
		         * 单次触发绑定，trigger后销毁
		         *
		         * @param {string} event 事件名
		         * @param {Function} handler 响应函数
		         * @param {Object} context
		         */
		        one: function (event, handler, context) {
		            var _h = this._$handlers;

		            if (!handler || !event) {
		                return this;
		            }

		            if (!_h[event]) {
		                _h[event] = [];
		            }

		            if (indexOf(_h[event], event) >= 0) {
		                return this;
		            }

		            _h[event].push({
		                h: handler,
		                one: true,
		                ctx: context || this
		            });

		            return this;
		        },

		        /**
		         * 绑定事件
		         * @param {string} event 事件名
		         * @param {Function} handler 事件处理函数
		         * @param {Object} [context]
		         */
		        on: function (event, handler, context) {
		            var _h = this._$handlers;

		            if (!handler || !event) {
		                return this;
		            }

		            if (!_h[event]) {
		                _h[event] = [];
		            }

		            _h[event].push({
		                h: handler,
		                one: false,
		                ctx: context || this
		            });

		            return this;
		        },

		        /**
		         * 是否绑定了事件
		         * @param  {string}  event
		         * @return {boolean}
		         */
		        isSilent: function (event) {
		            var _h = this._$handlers;
		            return _h[event] && _h[event].length;
		        },

		        /**
		         * 解绑事件
		         * @param {string} event 事件名
		         * @param {Function} [handler] 事件处理函数
		         */
		        off: function (event, handler) {
		            var _h = this._$handlers;

		            if (!event) {
		                this._$handlers = {};
		                return this;
		            }

		            if (handler) {
		                if (_h[event]) {
		                    var newList = [];
		                    for (var i = 0, l = _h[event].length; i < l; i++) {
		                        if (_h[event][i]['h'] != handler) {
		                            newList.push(_h[event][i]);
		                        }
		                    }
		                    _h[event] = newList;
		                }

		                if (_h[event] && _h[event].length === 0) {
		                    delete _h[event];
		                }
		            }
		            else {
		                delete _h[event];
		            }

		            return this;
		        },

		        /**
		         * 事件分发
		         *
		         * @param {string} type 事件类型
		         */
		        trigger: function (type) {
		            if (this._$handlers[type]) {
		                var args = arguments;
		                var argLen = args.length;

		                if (argLen > 3) {
		                    args = arrySlice.call(args, 1);
		                }

		                var _h = this._$handlers[type];
		                var len = _h.length;
		                for (var i = 0; i < len;) {
		                    // Optimize advise from backbone
		                    switch (argLen) {
		                        case 1:
		                            _h[i]['h'].call(_h[i]['ctx']);
		                            break;
		                        case 2:
		                            _h[i]['h'].call(_h[i]['ctx'], args[1]);
		                            break;
		                        case 3:
		                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
		                            break;
		                        default:
		                            // have more than 2 given arguments
		                            _h[i]['h'].apply(_h[i]['ctx'], args);
		                            break;
		                    }

		                    if (_h[i]['one']) {
		                        _h.splice(i, 1);
		                        len--;
		                    }
		                    else {
		                        i++;
		                    }
		                }
		            }

		            return this;
		        },

		        /**
		         * 带有context的事件分发, 最后一个参数是事件回调的context
		         * @param {string} type 事件类型
		         */
		        triggerWithContext: function (type) {
		            if (this._$handlers[type]) {
		                var args = arguments;
		                var argLen = args.length;

		                if (argLen > 4) {
		                    args = arrySlice.call(args, 1, args.length - 1);
		                }
		                var ctx = args[args.length - 1];

		                var _h = this._$handlers[type];
		                var len = _h.length;
		                for (var i = 0; i < len;) {
		                    // Optimize advise from backbone
		                    switch (argLen) {
		                        case 1:
		                            _h[i]['h'].call(ctx);
		                            break;
		                        case 2:
		                            _h[i]['h'].call(ctx, args[1]);
		                            break;
		                        case 3:
		                            _h[i]['h'].call(ctx, args[1], args[2]);
		                            break;
		                        default:
		                            // have more than 2 given arguments
		                            _h[i]['h'].apply(ctx, args);
		                            break;
		                    }

		                    if (_h[i]['one']) {
		                        _h.splice(i, 1);
		                        len--;
		                    }
		                    else {
		                        i++;
		                    }
		                }
		            }

		            return this;
		        }
		    };

		    // 对象可以通过 onxxxx 绑定事件
		    /**
		     * @event module:zrender/mixin/Eventful#onclick
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#onmouseover
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#onmouseout
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#onmousemove
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#onmousewheel
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#onmousedown
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#onmouseup
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#ondragstart
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#ondragend
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#ondragenter
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#ondragleave
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#ondragover
		     * @type {Function}
		     * @default null
		     */
		    /**
		     * @event module:zrender/mixin/Eventful#ondrop
		     * @type {Function}
		     * @default null
		     */

		    module.exports = Eventful;



	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * 提供变换扩展
		 * @module zrender/mixin/Transformable
		 * @author pissang (https://www.github.com/pissang)
		 */


		    var matrix = __webpack_require__(17);
		    var vector = __webpack_require__(16);
		    var mIdentity = matrix.identity;

		    var EPSILON = 5e-5;

		    function isNotAroundZero(val) {
		        return val > EPSILON || val < -EPSILON;
		    }

		    /**
		     * @alias module:zrender/mixin/Transformable
		     * @constructor
		     */
		    var Transformable = function (opts) {
		        opts = opts || {};
		        // If there are no given position, rotation, scale
		        if (!opts.position) {
		            /**
		             * 平移
		             * @type {Array.<number>}
		             * @default [0, 0]
		             */
		            this.position = [0, 0];
		        }
		        if (opts.rotation == null) {
		            /**
		             * 旋转
		             * @type {Array.<number>}
		             * @default 0
		             */
		            this.rotation = 0;
		        }
		        if (!opts.scale) {
		            /**
		             * 缩放
		             * @type {Array.<number>}
		             * @default [1, 1]
		             */
		            this.scale = [1, 1];
		        }
		        /**
		         * 旋转和缩放的原点
		         * @type {Array.<number>}
		         * @default null
		         */
		        this.origin = this.origin || null;
		    };

		    var transformableProto = Transformable.prototype;
		    transformableProto.transform = null;

		    /**
		     * 判断是否需要有坐标变换
		     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
		     */
		    transformableProto.needLocalTransform = function () {
		        return isNotAroundZero(this.rotation)
		            || isNotAroundZero(this.position[0])
		            || isNotAroundZero(this.position[1])
		            || isNotAroundZero(this.scale[0] - 1)
		            || isNotAroundZero(this.scale[1] - 1);
		    };

		    transformableProto.updateTransform = function () {
		        var parent = this.parent;
		        var parentHasTransform = parent && parent.transform;
		        var needLocalTransform = this.needLocalTransform();

		        var m = this.transform;
		        if (!(needLocalTransform || parentHasTransform)) {
		            m && mIdentity(m);
		            return;
		        }

		        m = m || matrix.create();

		        if (needLocalTransform) {
		            this.getLocalTransform(m);
		        }
		        else {
		            mIdentity(m);
		        }

		        // 应用父节点变换
		        if (parentHasTransform) {
		            if (needLocalTransform) {
		                matrix.mul(m, parent.transform, m);
		            }
		            else {
		                matrix.copy(m, parent.transform);
		            }
		        }
		        // 保存这个变换矩阵
		        this.transform = m;

		        this.invTransform = this.invTransform || matrix.create();
		        matrix.invert(this.invTransform, m);
		    };

		    transformableProto.getLocalTransform = function (m) {
		        m = m || [];
		        mIdentity(m);

		        var origin = this.origin;

		        var scale = this.scale;
		        var rotation = this.rotation;
		        var position = this.position;
		        if (origin) {
		            // Translate to origin
		            m[4] -= origin[0];
		            m[5] -= origin[1];
		        }
		        matrix.scale(m, m, scale);
		        if (rotation) {
		            matrix.rotate(m, m, rotation);
		        }
		        if (origin) {
		            // Translate back from origin
		            m[4] += origin[0];
		            m[5] += origin[1];
		        }

		        m[4] += position[0];
		        m[5] += position[1];

		        return m;
		    };
		    /**
		     * 将自己的transform应用到context上
		     * @param {Context2D} ctx
		     */
		    transformableProto.setTransform = function (ctx) {
		        var m = this.transform;
		        if (m) {
		            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
		        }
		    };

		    var tmpTransform = [];

		    /**
		     * 分解`transform`矩阵到`position`, `rotation`, `scale`
		     */
		    transformableProto.decomposeTransform = function () {
		        if (!this.transform) {
		            return;
		        }
		        var parent = this.parent;
		        var m = this.transform;
		        if (parent && parent.transform) {
		            // Get local transform and decompose them to position, scale, rotation
		            matrix.mul(tmpTransform, parent.invTransform, m);
		            m = tmpTransform;
		        }
		        var sx = m[0] * m[0] + m[1] * m[1];
		        var sy = m[2] * m[2] + m[3] * m[3];
		        var position = this.position;
		        var scale = this.scale;
		        if (isNotAroundZero(sx - 1)) {
		            sx = Math.sqrt(sx);
		        }
		        if (isNotAroundZero(sy - 1)) {
		            sy = Math.sqrt(sy);
		        }
		        if (m[0] < 0) {
		            sx = -sx;
		        }
		        if (m[3] < 0) {
		            sy = -sy;
		        }
		        position[0] = m[4];
		        position[1] = m[5];
		        scale[0] = sx;
		        scale[1] = sy;
		        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
		    };

		    /**
		     * 变换坐标位置到 shape 的局部坐标空间
		     * @method
		     * @param {number} x
		     * @param {number} y
		     * @return {Array.<number>}
		     */
		    transformableProto.transformCoordToLocal = function (x, y) {
		        var v2 = [x, y];
		        var invTransform = this.invTransform;
		        if (invTransform) {
		            vector.applyTransform(v2, v2, invTransform);
		        }
		        return v2;
		    };

		    /**
		     * 变换局部坐标位置到全局坐标空间
		     * @method
		     * @param {number} x
		     * @param {number} y
		     * @return {Array.<number>}
		     */
		    transformableProto.transformCoordToGlobal = function (x, y) {
		        var v2 = [x, y];
		        var transform = this.transform;
		        if (transform) {
		            vector.applyTransform(v2, v2, transform);
		        }
		        return v2;
		    };

		    module.exports = Transformable;



	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * @module zrender/mixin/Animatable
		 */


		    var Animator = __webpack_require__(35);
		    var util = __webpack_require__(3);
		    var isString = util.isString;
		    var isFunction = util.isFunction;
		    var isObject = util.isObject;
		    var log = __webpack_require__(39);

		    /**
		     * @alias modue:zrender/mixin/Animatable
		     * @constructor
		     */
		    var Animatable = function () {

		        /**
		         * @type {Array.<module:zrender/animation/Animator>}
		         * @readOnly
		         */
		        this.animators = [];
		    };

		    Animatable.prototype = {

		        constructor: Animatable,

		        /**
		         * 动画
		         *
		         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
		         * @param {boolean} [loop] 动画是否循环
		         * @return {module:zrender/animation/Animator}
		         * @example:
		         *     el.animate('style', false)
		         *         .when(1000, {x: 10} )
		         *         .done(function(){ // Animation done })
		         *         .start()
		         */
		        animate: function (path, loop) {
		            var target;
		            var animatingShape = false;
		            var el = this;
		            var zr = this.__zr;
		            if (path) {
		                var pathSplitted = path.split('.');
		                var prop = el;
		                // If animating shape
		                animatingShape = pathSplitted[0] === 'shape';
		                for (var i = 0, l = pathSplitted.length; i < l; i++) {
		                    if (!prop) {
		                        continue;
		                    }
		                    prop = prop[pathSplitted[i]];
		                }
		                if (prop) {
		                    target = prop;
		                }
		            }
		            else {
		                target = el;
		            }

		            if (!target) {
		                log(
		                    'Property "'
		                    + path
		                    + '" is not existed in element '
		                    + el.id
		                );
		                return;
		            }

		            var animators = el.animators;

		            var animator = new Animator(target, loop);

		            animator.during(function (target) {
		                el.dirty(animatingShape);
		            })
		            .done(function () {
		                // FIXME Animator will not be removed if use `Animator#stop` to stop animation
		                animators.splice(util.indexOf(animators, animator), 1);
		            });

		            animators.push(animator);

		            // If animate after added to the zrender
		            if (zr) {
		                zr.animation.addAnimator(animator);
		            }

		            return animator;
		        },

		        /**
		         * 停止动画
		         * @param {boolean} forwardToLast If move to last frame before stop
		         */
		        stopAnimation: function (forwardToLast) {
		            var animators = this.animators;
		            var len = animators.length;
		            for (var i = 0; i < len; i++) {
		                animators[i].stop(forwardToLast);
		            }
		            animators.length = 0;

		            return this;
		        },

		        /**
		         * @param {Object} target
		         * @param {number} [time=500] Time in ms
		         * @param {string} [easing='linear']
		         * @param {number} [delay=0]
		         * @param {Function} [callback]
		         *
		         * @example
		         *  // Animate position
		         *  el.animateTo({
		         *      position: [10, 10]
		         *  }, function () { // done })
		         *
		         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
		         *  el.animateTo({
		         *      shape: {
		         *          width: 500
		         *      },
		         *      style: {
		         *          fill: 'red'
		         *      }
		         *      position: [10, 10]
		         *  }, 100, 100, 'cubicOut', function () { // done })
		         */
		         // TODO Return animation key
		        animateTo: function (target, time, delay, easing, callback) {
		            // animateTo(target, time, easing, callback);
		            if (isString(delay)) {
		                callback = easing;
		                easing = delay;
		                delay = 0;
		            }
		            // animateTo(target, time, delay, callback);
		            else if (isFunction(easing)) {
		                callback = easing;
		                easing = 'linear';
		                delay = 0;
		            }
		            // animateTo(target, time, callback);
		            else if (isFunction(delay)) {
		                callback = delay;
		                delay = 0;
		            }
		            // animateTo(target, callback)
		            else if (isFunction(time)) {
		                callback = time;
		                time = 500;
		            }
		            // animateTo(target)
		            else if (!time) {
		                time = 500;
		            }
		            // Stop all previous animations
		            this.stopAnimation();
		            this._animateToShallow('', this, target, time, delay, easing, callback);

		            // Animators may be removed immediately after start
		            // if there is nothing to animate
		            var animators = this.animators.slice();
		            var count = animators.length;
		            function done() {
		                count--;
		                if (!count) {
		                    callback && callback();
		                }
		            }

		            // No animators. This should be checked before animators[i].start(),
		            // because 'done' may be executed immediately if no need to animate.
		            if (!count) {
		                callback && callback();
		            }
		            // Start after all animators created
		            // Incase any animator is done immediately when all animation properties are not changed
		            for (var i = 0; i < animators.length; i++) {
		                animators[i]
		                    .done(done)
		                    .start(easing);
		            }
		        },

		        /**
		         * @private
		         * @param {string} path=''
		         * @param {Object} source=this
		         * @param {Object} target
		         * @param {number} [time=500]
		         * @param {number} [delay=0]
		         *
		         * @example
		         *  // Animate position
		         *  el._animateToShallow({
		         *      position: [10, 10]
		         *  })
		         *
		         *  // Animate shape, style and position in 100ms, delayed 100ms
		         *  el._animateToShallow({
		         *      shape: {
		         *          width: 500
		         *      },
		         *      style: {
		         *          fill: 'red'
		         *      }
		         *      position: [10, 10]
		         *  }, 100, 100)
		         */
		        _animateToShallow: function (path, source, target, time, delay) {
		            var objShallow = {};
		            var propertyCount = 0;
		            for (var name in target) {
		                if (source[name] != null) {
		                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {
		                        this._animateToShallow(
		                            path ? path + '.' + name : name,
		                            source[name],
		                            target[name],
		                            time,
		                            delay
		                        );
		                    }
		                    else {
		                        objShallow[name] = target[name];
		                        propertyCount++;
		                    }
		                }
		                else if (target[name] != null) {
		                    // Attr directly if not has property
		                    // FIXME, if some property not needed for element ?
		                    if (!path) {
		                        this.attr(name, target[name]);
		                    }
		                    else {  // Shape or style
		                        var props = {};
		                        props[path] = {};
		                        props[path][name] = target[name];
		                        this.attr(props);
		                    }
		                }
		            }

		            if (propertyCount > 0) {
		                this.animate(path, false)
		                    .when(time == null ? 500 : time, objShallow)
		                    .delay(delay || 0);
		            }

		            return this;
		        }
		    };

		    module.exports = Animatable;


	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/animation/Animator
		 */


		    var Clip = __webpack_require__(36);
		    var color = __webpack_require__(38);
		    var util = __webpack_require__(3);
		    var isArrayLike = util.isArrayLike;

		    var arraySlice = Array.prototype.slice;

		    function defaultGetter(target, key) {
		        return target[key];
		    }

		    function defaultSetter(target, key, value) {
		        target[key] = value;
		    }

		    /**
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} percent
		     * @return {number}
		     */
		    function interpolateNumber(p0, p1, percent) {
		        return (p1 - p0) * percent + p0;
		    }

		    /**
		     * @param  {string} p0
		     * @param  {string} p1
		     * @param  {number} percent
		     * @return {string}
		     */
		    function interpolateString(p0, p1, percent) {
		        return percent > 0.5 ? p1 : p0;
		    }

		    /**
		     * @param  {Array} p0
		     * @param  {Array} p1
		     * @param  {number} percent
		     * @param  {Array} out
		     * @param  {number} arrDim
		     */
		    function interpolateArray(p0, p1, percent, out, arrDim) {
		        var len = p0.length;
		        if (arrDim == 1) {
		            for (var i = 0; i < len; i++) {
		                out[i] = interpolateNumber(p0[i], p1[i], percent);
		            }
		        }
		        else {
		            var len2 = p0[0].length;
		            for (var i = 0; i < len; i++) {
		                for (var j = 0; j < len2; j++) {
		                    out[i][j] = interpolateNumber(
		                        p0[i][j], p1[i][j], percent
		                    );
		                }
		            }
		        }
		    }

		    function fillArr(arr0, arr1, arrDim) {
		        var arr0Len = arr0.length;
		        var arr1Len = arr1.length;
		        if (arr0Len === arr1Len) {
		            return;
		        }
		        // FIXME Not work for TypedArray
		        var isPreviousLarger = arr0Len > arr1Len;
		        if (isPreviousLarger) {
		            // Cut the previous
		            arr0.length = arr1Len;
		        }
		        else {
		            // Fill the previous
		            for (var i = arr0Len; i < arr1Len; i++) {
		                arr0.push(
		                    arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])
		                );
		            }
		        }
		    }

		    /**
		     * @param  {Array} arr0
		     * @param  {Array} arr1
		     * @param  {number} arrDim
		     * @return {boolean}
		     */
		    function isArraySame(arr0, arr1, arrDim) {
		        if (arr0 === arr1) {
		            return true;
		        }
		        var len = arr0.length;
		        if (len !== arr1.length) {
		            return false;
		        }
		        if (arrDim === 1) {
		            for (var i = 0; i < len; i++) {
		                if (arr0[i] !== arr1[i]) {
		                    return false;
		                }
		            }
		        }
		        else {
		            var len2 = arr0[0].length;
		            for (var i = 0; i < len; i++) {
		                for (var j = 0; j < len2; j++) {
		                    if (arr0[i][j] !== arr1[i][j]) {
		                        return false;
		                    }
		                }
		            }
		        }
		        return true;
		    }

		    /**
		     * Catmull Rom interpolate array
		     * @param  {Array} p0
		     * @param  {Array} p1
		     * @param  {Array} p2
		     * @param  {Array} p3
		     * @param  {number} t
		     * @param  {number} t2
		     * @param  {number} t3
		     * @param  {Array} out
		     * @param  {number} arrDim
		     */
		    function catmullRomInterpolateArray(
		        p0, p1, p2, p3, t, t2, t3, out, arrDim
		    ) {
		        var len = p0.length;
		        if (arrDim == 1) {
		            for (var i = 0; i < len; i++) {
		                out[i] = catmullRomInterpolate(
		                    p0[i], p1[i], p2[i], p3[i], t, t2, t3
		                );
		            }
		        }
		        else {
		            var len2 = p0[0].length;
		            for (var i = 0; i < len; i++) {
		                for (var j = 0; j < len2; j++) {
		                    out[i][j] = catmullRomInterpolate(
		                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],
		                        t, t2, t3
		                    );
		                }
		            }
		        }
		    }

		    /**
		     * Catmull Rom interpolate number
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} p3
		     * @param  {number} t
		     * @param  {number} t2
		     * @param  {number} t3
		     * @return {number}
		     */
		    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
		        var v0 = (p2 - p0) * 0.5;
		        var v1 = (p3 - p1) * 0.5;
		        return (2 * (p1 - p2) + v0 + v1) * t3
		                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
		                + v0 * t + p1;
		    }

		    function cloneValue(value) {
		        if (isArrayLike(value)) {
		            var len = value.length;
		            if (isArrayLike(value[0])) {
		                var ret = [];
		                for (var i = 0; i < len; i++) {
		                    ret.push(arraySlice.call(value[i]));
		                }
		                return ret;
		            }

		            return arraySlice.call(value);
		        }

		        return value;
		    }

		    function rgba2String(rgba) {
		        rgba[0] = Math.floor(rgba[0]);
		        rgba[1] = Math.floor(rgba[1]);
		        rgba[2] = Math.floor(rgba[2]);

		        return 'rgba(' + rgba.join(',') + ')';
		    }

		    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {
		        var getter = animator._getter;
		        var setter = animator._setter;
		        var useSpline = easing === 'spline';

		        var trackLen = keyframes.length;
		        if (!trackLen) {
		            return;
		        }
		        // Guess data type
		        var firstVal = keyframes[0].value;
		        var isValueArray = isArrayLike(firstVal);
		        var isValueColor = false;
		        var isValueString = false;

		        // For vertices morphing
		        var arrDim = (
		                isValueArray
		                && isArrayLike(firstVal[0])
		            )
		            ? 2 : 1;
		        var trackMaxTime;
		        // Sort keyframe as ascending
		        keyframes.sort(function(a, b) {
		            return a.time - b.time;
		        });

		        trackMaxTime = keyframes[trackLen - 1].time;
		        // Percents of each keyframe
		        var kfPercents = [];
		        // Value of each keyframe
		        var kfValues = [];
		        var prevValue = keyframes[0].value;
		        var isAllValueEqual = true;
		        for (var i = 0; i < trackLen; i++) {
		            kfPercents.push(keyframes[i].time / trackMaxTime);
		            // Assume value is a color when it is a string
		            var value = keyframes[i].value;

		            // Check if value is equal, deep check if value is array
		            if (!((isValueArray && isArraySame(value, prevValue, arrDim))
		                || (!isValueArray && value === prevValue))) {
		                isAllValueEqual = false;
		            }
		            prevValue = value;

		            // Try converting a string to a color array
		            if (typeof value == 'string') {
		                var colorArray = color.parse(value);
		                if (colorArray) {
		                    value = colorArray;
		                    isValueColor = true;
		                }
		                else {
		                    isValueString = true;
		                }
		            }
		            kfValues.push(value);
		        }
		        if (isAllValueEqual) {
		            return;
		        }

		        if (isValueArray) {
		            var lastValue = kfValues[trackLen - 1];
		            // Polyfill array
		            for (var i = 0; i < trackLen - 1; i++) {
		                fillArr(kfValues[i], lastValue, arrDim);
		            }
		            fillArr(getter(animator._target, propName), lastValue, arrDim);
		        }

		        // Cache the key of last frame to speed up when
		        // animation playback is sequency
		        var lastFrame = 0;
		        var lastFramePercent = 0;
		        var start;
		        var w;
		        var p0;
		        var p1;
		        var p2;
		        var p3;

		        if (isValueColor) {
		            var rgba = [0, 0, 0, 0];
		        }

		        var onframe = function (target, percent) {
		            // Find the range keyframes
		            // kf1-----kf2---------current--------kf3
		            // find kf2 and kf3 and do interpolation
		            var frame;
		            if (percent < lastFramePercent) {
		                // Start from next key
		                start = Math.min(lastFrame + 1, trackLen - 1);
		                for (frame = start; frame >= 0; frame--) {
		                    if (kfPercents[frame] <= percent) {
		                        break;
		                    }
		                }
		                frame = Math.min(frame, trackLen - 2);
		            }
		            else {
		                for (frame = lastFrame; frame < trackLen; frame++) {
		                    if (kfPercents[frame] > percent) {
		                        break;
		                    }
		                }
		                frame = Math.min(frame - 1, trackLen - 2);
		            }
		            lastFrame = frame;
		            lastFramePercent = percent;

		            var range = (kfPercents[frame + 1] - kfPercents[frame]);
		            if (range === 0) {
		                return;
		            }
		            else {
		                w = (percent - kfPercents[frame]) / range;
		            }
		            if (useSpline) {
		                p1 = kfValues[frame];
		                p0 = kfValues[frame === 0 ? frame : frame - 1];
		                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
		                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
		                if (isValueArray) {
		                    catmullRomInterpolateArray(
		                        p0, p1, p2, p3, w, w * w, w * w * w,
		                        getter(target, propName),
		                        arrDim
		                    );
		                }
		                else {
		                    var value;
		                    if (isValueColor) {
		                        value = catmullRomInterpolateArray(
		                            p0, p1, p2, p3, w, w * w, w * w * w,
		                            rgba, 1
		                        );
		                        value = rgba2String(rgba);
		                    }
		                    else if (isValueString) {
		                        // String is step(0.5)
		                        return interpolateString(p1, p2, w);
		                    }
		                    else {
		                        value = catmullRomInterpolate(
		                            p0, p1, p2, p3, w, w * w, w * w * w
		                        );
		                    }
		                    setter(
		                        target,
		                        propName,
		                        value
		                    );
		                }
		            }
		            else {
		                if (isValueArray) {
		                    interpolateArray(
		                        kfValues[frame], kfValues[frame + 1], w,
		                        getter(target, propName),
		                        arrDim
		                    );
		                }
		                else {
		                    var value;
		                    if (isValueColor) {
		                        interpolateArray(
		                            kfValues[frame], kfValues[frame + 1], w,
		                            rgba, 1
		                        );
		                        value = rgba2String(rgba);
		                    }
		                    else if (isValueString) {
		                        // String is step(0.5)
		                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);
		                    }
		                    else {
		                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
		                    }
		                    setter(
		                        target,
		                        propName,
		                        value
		                    );
		                }
		            }
		        };

		        var clip = new Clip({
		            target: animator._target,
		            life: trackMaxTime,
		            loop: animator._loop,
		            delay: animator._delay,
		            onframe: onframe,
		            ondestroy: oneTrackDone
		        });

		        if (easing && easing !== 'spline') {
		            clip.easing = easing;
		        }

		        return clip;
		    }

		    /**
		     * @alias module:zrender/animation/Animator
		     * @constructor
		     * @param {Object} target
		     * @param {boolean} loop
		     * @param {Function} getter
		     * @param {Function} setter
		     */
		    var Animator = function(target, loop, getter, setter) {
		        this._tracks = {};
		        this._target = target;

		        this._loop = loop || false;

		        this._getter = getter || defaultGetter;
		        this._setter = setter || defaultSetter;

		        this._clipCount = 0;

		        this._delay = 0;

		        this._doneList = [];

		        this._onframeList = [];

		        this._clipList = [];
		    };

		    Animator.prototype = {
		        /**
		         * 设置动画关键帧
		         * @param  {number} time 关键帧时间，单位是ms
		         * @param  {Object} props 关键帧的属性值，key-value表示
		         * @return {module:zrender/animation/Animator}
		         */
		        when: function(time /* ms */, props) {
		            var tracks = this._tracks;
		            for (var propName in props) {
		                if (!tracks[propName]) {
		                    tracks[propName] = [];
		                    // Invalid value
		                    var value = this._getter(this._target, propName);
		                    if (value == null) {
		                        // zrLog('Invalid property ' + propName);
		                        continue;
		                    }
		                    // If time is 0
		                    //  Then props is given initialize value
		                    // Else
		                    //  Initialize value from current prop value
		                    if (time !== 0) {
		                        tracks[propName].push({
		                            time: 0,
		                            value: cloneValue(value)
		                        });
		                    }
		                }
		                tracks[propName].push({
		                    time: time,
		                    value: props[propName]
		                });
		            }
		            return this;
		        },
		        /**
		         * 添加动画每一帧的回调函数
		         * @param  {Function} callback
		         * @return {module:zrender/animation/Animator}
		         */
		        during: function (callback) {
		            this._onframeList.push(callback);
		            return this;
		        },

		        _doneCallback: function () {
		            // Clear all tracks
		            this._tracks = {};
		            // Clear all clips
		            this._clipList.length = 0;

		            var doneList = this._doneList;
		            var len = doneList.length;
		            for (var i = 0; i < len; i++) {
		                doneList[i].call(this);
		            }
		        },
		        /**
		         * 开始执行动画
		         * @param  {string|Function} easing
		         *         动画缓动函数，详见{@link module:zrender/animation/easing}
		         * @return {module:zrender/animation/Animator}
		         */
		        start: function (easing) {

		            var self = this;
		            var clipCount = 0;

		            var oneTrackDone = function() {
		                clipCount--;
		                if (!clipCount) {
		                    self._doneCallback();
		                }
		            };

		            var lastClip;
		            for (var propName in this._tracks) {
		                var clip = createTrackClip(
		                    this, easing, oneTrackDone,
		                    this._tracks[propName], propName
		                );
		                if (clip) {
		                    this._clipList.push(clip);
		                    clipCount++;

		                    // If start after added to animation
		                    if (this.animation) {
		                        this.animation.addClip(clip);
		                    }

		                    lastClip = clip;
		                }
		            }

		            // Add during callback on the last clip
		            if (lastClip) {
		                var oldOnFrame = lastClip.onframe;
		                lastClip.onframe = function (target, percent) {
		                    oldOnFrame(target, percent);

		                    for (var i = 0; i < self._onframeList.length; i++) {
		                        self._onframeList[i](target, percent);
		                    }
		                };
		            }

		            if (!clipCount) {
		                this._doneCallback();
		            }
		            return this;
		        },
		        /**
		         * 停止动画
		         * @param {boolean} forwardToLast If move to last frame before stop
		         */
		        stop: function (forwardToLast) {
		            var clipList = this._clipList;
		            var animation = this.animation;
		            for (var i = 0; i < clipList.length; i++) {
		                var clip = clipList[i];
		                if (forwardToLast) {
		                    // Move to last frame before stop
		                    clip.onframe(this._target, 1);
		                }
		                animation && animation.removeClip(clip);
		            }
		            clipList.length = 0;
		        },
		        /**
		         * 设置动画延迟开始的时间
		         * @param  {number} time 单位ms
		         * @return {module:zrender/animation/Animator}
		         */
		        delay: function (time) {
		            this._delay = time;
		            return this;
		        },
		        /**
		         * 添加动画结束的回调
		         * @param  {Function} cb
		         * @return {module:zrender/animation/Animator}
		         */
		        done: function(cb) {
		            if (cb) {
		                this._doneList.push(cb);
		            }
		            return this;
		        },

		        /**
		         * @return {Array.<module:zrender/animation/Clip>}
		         */
		        getClips: function () {
		            return this._clipList;
		        }
		    };

		    module.exports = Animator;


	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 动画主控制器
		 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
		 * @config life(1000) 动画时长
		 * @config delay(0) 动画延迟时间
		 * @config loop(true)
		 * @config gap(0) 循环的间隔时间
		 * @config onframe
		 * @config easing(optional)
		 * @config ondestroy(optional)
		 * @config onrestart(optional)
		 *
		 * TODO pause
		 */


		    var easingFuncs = __webpack_require__(37);

		    function Clip(options) {

		        this._target = options.target;

		        // 生命周期
		        this._life = options.life || 1000;
		        // 延时
		        this._delay = options.delay || 0;
		        // 开始时间
		        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
		        this._initialized = false;

		        // 是否循环
		        this.loop = options.loop == null ? false : options.loop;

		        this.gap = options.gap || 0;

		        this.easing = options.easing || 'Linear';

		        this.onframe = options.onframe;
		        this.ondestroy = options.ondestroy;
		        this.onrestart = options.onrestart;
		    }

		    Clip.prototype = {

		        constructor: Clip,

		        step: function (time) {
		            // Set startTime on first step, or _startTime may has milleseconds different between clips
		            // PENDING
		            if (!this._initialized) {
		                this._startTime = new Date().getTime() + this._delay;
		                this._initialized = true;
		            }

		            var percent = (time - this._startTime) / this._life;

		            // 还没开始
		            if (percent < 0) {
		                return;
		            }

		            percent = Math.min(percent, 1);

		            var easing = this.easing;
		            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
		            var schedule = typeof easingFunc === 'function'
		                ? easingFunc(percent)
		                : percent;

		            this.fire('frame', schedule);

		            // 结束
		            if (percent == 1) {
		                if (this.loop) {
		                    this.restart();
		                    // 重新开始周期
		                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
		                    return 'restart';
		                }

		                // 动画完成将这个控制器标识为待删除
		                // 在Animation.update中进行批量删除
		                this._needsRemove = true;
		                return 'destroy';
		            }

		            return null;
		        },

		        restart: function() {
		            var time = new Date().getTime();
		            var remainder = (time - this._startTime) % this._life;
		            this._startTime = new Date().getTime() - remainder + this.gap;

		            this._needsRemove = false;
		        },

		        fire: function(eventType, arg) {
		            eventType = 'on' + eventType;
		            if (this[eventType]) {
		                this[eventType](this._target, arg);
		            }
		        }
		    };

		    module.exports = Clip;



	/***/ },
	/* 37 */
	/***/ function(module, exports) {

		/**
		 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
		 * @see http://sole.github.io/tween.js/examples/03_graphs.html
		 * @exports zrender/animation/easing
		 */

		    var easing = {
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        linear: function (k) {
		            return k;
		        },

		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quadraticIn: function (k) {
		            return k * k;
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quadraticOut: function (k) {
		            return k * (2 - k);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quadraticInOut: function (k) {
		            if ((k *= 2) < 1) {
		                return 0.5 * k * k;
		            }
		            return -0.5 * (--k * (k - 2) - 1);
		        },

		        // 三次方的缓动（t^3）
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        cubicIn: function (k) {
		            return k * k * k;
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        cubicOut: function (k) {
		            return --k * k * k + 1;
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        cubicInOut: function (k) {
		            if ((k *= 2) < 1) {
		                return 0.5 * k * k * k;
		            }
		            return 0.5 * ((k -= 2) * k * k + 2);
		        },

		        // 四次方的缓动（t^4）
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quarticIn: function (k) {
		            return k * k * k * k;
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quarticOut: function (k) {
		            return 1 - (--k * k * k * k);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quarticInOut: function (k) {
		            if ((k *= 2) < 1) {
		                return 0.5 * k * k * k * k;
		            }
		            return -0.5 * ((k -= 2) * k * k * k - 2);
		        },

		        // 五次方的缓动（t^5）
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quinticIn: function (k) {
		            return k * k * k * k * k;
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quinticOut: function (k) {
		            return --k * k * k * k * k + 1;
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        quinticInOut: function (k) {
		            if ((k *= 2) < 1) {
		                return 0.5 * k * k * k * k * k;
		            }
		            return 0.5 * ((k -= 2) * k * k * k * k + 2);
		        },

		        // 正弦曲线的缓动（sin(t)）
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        sinusoidalIn: function (k) {
		            return 1 - Math.cos(k * Math.PI / 2);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        sinusoidalOut: function (k) {
		            return Math.sin(k * Math.PI / 2);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        sinusoidalInOut: function (k) {
		            return 0.5 * (1 - Math.cos(Math.PI * k));
		        },

		        // 指数曲线的缓动（2^t）
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        exponentialIn: function (k) {
		            return k === 0 ? 0 : Math.pow(1024, k - 1);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        exponentialOut: function (k) {
		            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        exponentialInOut: function (k) {
		            if (k === 0) {
		                return 0;
		            }
		            if (k === 1) {
		                return 1;
		            }
		            if ((k *= 2) < 1) {
		                return 0.5 * Math.pow(1024, k - 1);
		            }
		            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
		        },

		        // 圆形曲线的缓动（sqrt(1-t^2)）
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        circularIn: function (k) {
		            return 1 - Math.sqrt(1 - k * k);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        circularOut: function (k) {
		            return Math.sqrt(1 - (--k * k));
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        circularInOut: function (k) {
		            if ((k *= 2) < 1) {
		                return -0.5 * (Math.sqrt(1 - k * k) - 1);
		            }
		            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
		        },

		        // 创建类似于弹簧在停止前来回振荡的动画
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        elasticIn: function (k) {
		            var s;
		            var a = 0.1;
		            var p = 0.4;
		            if (k === 0) {
		                return 0;
		            }
		            if (k === 1) {
		                return 1;
		            }
		            if (!a || a < 1) {
		                a = 1; s = p / 4;
		            }
		            else {
		                s = p * Math.asin(1 / a) / (2 * Math.PI);
		            }
		            return -(a * Math.pow(2, 10 * (k -= 1)) *
		                        Math.sin((k - s) * (2 * Math.PI) / p));
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        elasticOut: function (k) {
		            var s;
		            var a = 0.1;
		            var p = 0.4;
		            if (k === 0) {
		                return 0;
		            }
		            if (k === 1) {
		                return 1;
		            }
		            if (!a || a < 1) {
		                a = 1; s = p / 4;
		            }
		            else {
		                s = p * Math.asin(1 / a) / (2 * Math.PI);
		            }
		            return (a * Math.pow(2, -10 * k) *
		                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        elasticInOut: function (k) {
		            var s;
		            var a = 0.1;
		            var p = 0.4;
		            if (k === 0) {
		                return 0;
		            }
		            if (k === 1) {
		                return 1;
		            }
		            if (!a || a < 1) {
		                a = 1; s = p / 4;
		            }
		            else {
		                s = p * Math.asin(1 / a) / (2 * Math.PI);
		            }
		            if ((k *= 2) < 1) {
		                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))
		                    * Math.sin((k - s) * (2 * Math.PI) / p));
		            }
		            return a * Math.pow(2, -10 * (k -= 1))
		                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;

		        },

		        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        backIn: function (k) {
		            var s = 1.70158;
		            return k * k * ((s + 1) * k - s);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        backOut: function (k) {
		            var s = 1.70158;
		            return --k * k * ((s + 1) * k + s) + 1;
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        backInOut: function (k) {
		            var s = 1.70158 * 1.525;
		            if ((k *= 2) < 1) {
		                return 0.5 * (k * k * ((s + 1) * k - s));
		            }
		            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
		        },

		        // 创建弹跳效果
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        bounceIn: function (k) {
		            return 1 - easing.bounceOut(1 - k);
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        bounceOut: function (k) {
		            if (k < (1 / 2.75)) {
		                return 7.5625 * k * k;
		            }
		            else if (k < (2 / 2.75)) {
		                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
		            }
		            else if (k < (2.5 / 2.75)) {
		                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
		            }
		            else {
		                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
		            }
		        },
		        /**
		        * @param {number} k
		        * @return {number}
		        */
		        bounceInOut: function (k) {
		            if (k < 0.5) {
		                return easing.bounceIn(k * 2) * 0.5;
		            }
		            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
		        }
		    };

		    module.exports = easing;




	/***/ },
	/* 38 */
	/***/ function(module, exports) {

		/**
		 * @module zrender/tool/color
		 */


		    var kCSSColorTable = {
		        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],
		        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],
		        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],
		        'beige': [245,245,220,1], 'bisque': [255,228,196,1],
		        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],
		        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],
		        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],
		        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],
		        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],
		        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],
		        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],
		        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],
		        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],
		        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],
		        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],
		        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],
		        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],
		        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],
		        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],
		        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],
		        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],
		        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],
		        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],
		        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],
		        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],
		        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],
		        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],
		        'gray': [128,128,128,1], 'green': [0,128,0,1],
		        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],
		        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],
		        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],
		        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],
		        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],
		        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],
		        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],
		        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],
		        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],
		        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],
		        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],
		        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],
		        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],
		        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],
		        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],
		        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],
		        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],
		        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],
		        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],
		        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],
		        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],
		        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],
		        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],
		        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],
		        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],
		        'orange': [255,165,0,1], 'orangered': [255,69,0,1],
		        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],
		        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],
		        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],
		        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],
		        'pink': [255,192,203,1], 'plum': [221,160,221,1],
		        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],
		        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],
		        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],
		        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],
		        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],
		        'sienna': [160,82,45,1], 'silver': [192,192,192,1],
		        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],
		        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],
		        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],
		        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],
		        'teal': [0,128,128,1], 'thistle': [216,191,216,1],
		        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],
		        'violet': [238,130,238,1], 'wheat': [245,222,179,1],
		        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],
		        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]
		    };

		    function clampCssByte(i) {  // Clamp to integer 0 .. 255.
		        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
		        return i < 0 ? 0 : i > 255 ? 255 : i;
		    }

		    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.
		        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
		        return i < 0 ? 0 : i > 360 ? 360 : i;
		    }

		    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.
		        return f < 0 ? 0 : f > 1 ? 1 : f;
		    }

		    function parseCssInt(str) {  // int or percentage.
		        if (str.length && str.charAt(str.length - 1) === '%') {
		            return clampCssByte(parseFloat(str) / 100 * 255);
		        }
		        return clampCssByte(parseInt(str, 10));
		    }

		    function parseCssFloat(str) {  // float or percentage.
		        if (str.length && str.charAt(str.length - 1) === '%') {
		            return clampCssFloat(parseFloat(str) / 100);
		        }
		        return clampCssFloat(parseFloat(str));
		    }

		    function cssHueToRgb(m1, m2, h) {
		        if (h < 0) {
		            h += 1;
		        }
		        else if (h > 1) {
		            h -= 1;
		        }

		        if (h * 6 < 1) {
		            return m1 + (m2 - m1) * h * 6;
		        }
		        if (h * 2 < 1) {
		            return m2;
		        }
		        if (h * 3 < 2) {
		            return m1 + (m2 - m1) * (2/3 - h) * 6;
		        }
		        return m1;
		    }

		    function lerp(a, b, p) {
		        return a + (b - a) * p;
		    }

		    /**
		     * @param {string} colorStr
		     * @return {Array.<number>}
		     * @memberOf module:zrender/util/color
		     */
		    function parse(colorStr) {
		        if (!colorStr) {
		            return;
		        }
		        // colorStr may be not string
		        colorStr = colorStr + '';
		        // Remove all whitespace, not compliant, but should just be more accepting.
		        var str = colorStr.replace(/ /g, '').toLowerCase();

		        // Color keywords (and transparent) lookup.
		        if (str in kCSSColorTable) {
		            return kCSSColorTable[str].slice();  // dup.
		        }

		        // #abc and #abc123 syntax.
		        if (str.charAt(0) === '#') {
		            if (str.length === 4) {
		                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
		                if (!(iv >= 0 && iv <= 0xfff)) {
		                    return;  // Covers NaN.
		                }
		                return [
		                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
		                    (iv & 0xf0) | ((iv & 0xf0) >> 4),
		                    (iv & 0xf) | ((iv & 0xf) << 4),
		                    1
		                ];
		            }
		            else if (str.length === 7) {
		                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
		                if (!(iv >= 0 && iv <= 0xffffff)) {
		                    return;  // Covers NaN.
		                }
		                return [
		                    (iv & 0xff0000) >> 16,
		                    (iv & 0xff00) >> 8,
		                    iv & 0xff,
		                    1
		                ];
		            }

		            return;
		        }
		        var op = str.indexOf('('), ep = str.indexOf(')');
		        if (op !== -1 && ep + 1 === str.length) {
		            var fname = str.substr(0, op);
		            var params = str.substr(op + 1, ep - (op + 1)).split(',');
		            var alpha = 1;  // To allow case fallthrough.
		            switch (fname) {
		                case 'rgba':
		                    if (params.length !== 4) {
		                        return;
		                    }
		                    alpha = parseCssFloat(params.pop()); // jshint ignore:line
		                // Fall through.
		                case 'rgb':
		                    if (params.length !== 3) {
		                        return;
		                    }
		                    return [
		                        parseCssInt(params[0]),
		                        parseCssInt(params[1]),
		                        parseCssInt(params[2]),
		                        alpha
		                    ];
		                case 'hsla':
		                    if (params.length !== 4) {
		                        return;
		                    }
		                    params[3] = parseCssFloat(params[3]);
		                    return hsla2rgba(params);
		                case 'hsl':
		                    if (params.length !== 3) {
		                        return;
		                    }
		                    return hsla2rgba(params);
		                default:
		                    return;
		            }
		        }

		        return;
		    }

		    /**
		     * @param {Array.<number>} hsla
		     * @return {Array.<number>} rgba
		     */
		    function hsla2rgba(hsla) {
		        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
		        // NOTE(deanm): According to the CSS spec s/l should only be
		        // percentages, but we don't bother and let float or percentage.
		        var s = parseCssFloat(hsla[1]);
		        var l = parseCssFloat(hsla[2]);
		        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
		        var m1 = l * 2 - m2;

		        var rgba = [
		            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),
		            clampCssByte(cssHueToRgb(m1, m2, h) * 255),
		            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)
		        ];

		        if (hsla.length === 4) {
		            rgba[3] = hsla[3];
		        }

		        return rgba;
		    }

		    /**
		     * @param {Array.<number>} rgba
		     * @return {Array.<number>} hsla
		     */
		    function rgba2hsla(rgba) {
		        if (!rgba) {
		            return;
		        }

		        // RGB from 0 to 255
		        var R = rgba[0] / 255;
		        var G = rgba[1] / 255;
		        var B = rgba[2] / 255;

		        var vMin = Math.min(R, G, B); // Min. value of RGB
		        var vMax = Math.max(R, G, B); // Max. value of RGB
		        var delta = vMax - vMin; // Delta RGB value

		        var L = (vMax + vMin) / 2;
		        var H;
		        var S;
		        // HSL results from 0 to 1
		        if (delta === 0) {
		            H = 0;
		            S = 0;
		        }
		        else {
		            if (L < 0.5) {
		                S = delta / (vMax + vMin);
		            }
		            else {
		                S = delta / (2 - vMax - vMin);
		            }

		            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
		            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
		            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;

		            if (R === vMax) {
		                H = deltaB - deltaG;
		            }
		            else if (G === vMax) {
		                H = (1 / 3) + deltaR - deltaB;
		            }
		            else if (B === vMax) {
		                H = (2 / 3) + deltaG - deltaR;
		            }

		            if (H < 0) {
		                H += 1;
		            }

		            if (H > 1) {
		                H -= 1;
		            }
		        }

		        var hsla = [H * 360, S, L];

		        if (rgba[3] != null) {
		            hsla.push(rgba[3]);
		        }

		        return hsla;
		    }

		    /**
		     * @param {string} color
		     * @param {number} level
		     * @return {string}
		     * @memberOf module:zrender/util/color
		     */
		    function lift(color, level) {
		        var colorArr = parse(color);
		        if (colorArr) {
		            for (var i = 0; i < 3; i++) {
		                if (level < 0) {
		                    colorArr[i] = colorArr[i] * (1 - level) | 0;
		                }
		                else {
		                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;
		                }
		            }
		            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
		        }
		    }

		    /**
		     * @param {string} color
		     * @return {string}
		     * @memberOf module:zrender/util/color
		     */
		    function toHex(color, level) {
		        var colorArr = parse(color);
		        if (colorArr) {
		            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);
		        }
		    }

		    /**
		     * Map value to color. Faster than mapToColor methods because color is represented by rgba array
		     * @param {number} normalizedValue A float between 0 and 1.
		     * @param {Array.<Array.<number>>} colors List of rgba color array
		     * @param {Array.<number>} [out] Mapped gba color array
		     * @return {Array.<number>}
		     */
		    function fastMapToColor(normalizedValue, colors, out) {
		        if (!(colors && colors.length)
		            || !(normalizedValue >= 0 && normalizedValue <= 1)
		        ) {
		            return;
		        }
		        out = out || [0, 0, 0, 0];
		        var value = normalizedValue * (colors.length - 1);
		        var leftIndex = Math.floor(value);
		        var rightIndex = Math.ceil(value);
		        var leftColor = colors[leftIndex];
		        var rightColor = colors[rightIndex];
		        var dv = value - leftIndex;
		        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
		        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
		        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
		        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
		        return out;
		    }
		    /**
		     * @param {number} normalizedValue A float between 0 and 1.
		     * @param {Array.<string>} colors Color list.
		     * @param {boolean=} fullOutput Default false.
		     * @return {(string|Object)} Result color. If fullOutput,
		     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
		     * @memberOf module:zrender/util/color
		     */
		    function mapToColor(normalizedValue, colors, fullOutput) {
		        if (!(colors && colors.length)
		            || !(normalizedValue >= 0 && normalizedValue <= 1)
		        ) {
		            return;
		        }

		        var value = normalizedValue * (colors.length - 1);
		        var leftIndex = Math.floor(value);
		        var rightIndex = Math.ceil(value);
		        var leftColor = parse(colors[leftIndex]);
		        var rightColor = parse(colors[rightIndex]);
		        var dv = value - leftIndex;

		        var color = stringify(
		            [
		                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),
		                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),
		                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),
		                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))
		            ],
		            'rgba'
		        );

		        return fullOutput
		            ? {
		                color: color,
		                leftIndex: leftIndex,
		                rightIndex: rightIndex,
		                value: value
		            }
		            : color;
		    }

		    /**
		     * @param {Array<number>} interval  Array length === 2,
		     *                                  each item is normalized value ([0, 1]).
		     * @param {Array.<string>} colors Color list.
		     * @return {Array.<Object>} colors corresponding to the interval,
		     *                          each item is {color: 'xxx', offset: ...}
		     *                          where offset is between 0 and 1.
		     * @memberOf module:zrender/util/color
		     */
		    function mapIntervalToColor(interval, colors) {
		        if (interval.length !== 2 || interval[1] < interval[0]) {
		            return;
		        }

		        var info0 = mapToColor(interval[0], colors, true);
		        var info1 = mapToColor(interval[1], colors, true);

		        var result = [{color: info0.color, offset: 0}];

		        var during = info1.value - info0.value;
		        var start = Math.max(info0.value, info0.rightIndex);
		        var end = Math.min(info1.value, info1.leftIndex);

		        for (var i = start; during > 0 && i <= end; i++) {
		            result.push({
		                color: colors[i],
		                offset: (i - info0.value) / during
		            });
		        }
		        result.push({color: info1.color, offset: 1});

		        return result;
		    }

		    /**
		     * @param {string} color
		     * @param {number=} h 0 ~ 360, ignore when null.
		     * @param {number=} s 0 ~ 1, ignore when null.
		     * @param {number=} l 0 ~ 1, ignore when null.
		     * @return {string} Color string in rgba format.
		     * @memberOf module:zrender/util/color
		     */
		    function modifyHSL(color, h, s, l) {
		        color = parse(color);

		        if (color) {
		            color = rgba2hsla(color);
		            h != null && (color[0] = clampCssAngle(h));
		            s != null && (color[1] = parseCssFloat(s));
		            l != null && (color[2] = parseCssFloat(l));

		            return stringify(hsla2rgba(color), 'rgba');
		        }
		    }

		    /**
		     * @param {string} color
		     * @param {number=} alpha 0 ~ 1
		     * @return {string} Color string in rgba format.
		     * @memberOf module:zrender/util/color
		     */
		    function modifyAlpha(color, alpha) {
		        color = parse(color);

		        if (color && alpha != null) {
		            color[3] = clampCssFloat(alpha);
		            return stringify(color, 'rgba');
		        }
		    }

		    /**
		     * @param {Array.<string>} colors Color list.
		     * @param {string} type 'rgba', 'hsva', ...
		     * @return {string} Result color.
		     */
		    function stringify(arrColor, type) {
		        if (type === 'rgb' || type === 'hsv' || type === 'hsl') {
		            arrColor = arrColor.slice(0, 3);
		        }
		        return type + '(' + arrColor.join(',') + ')';
		    }

		    module.exports = {
		        parse: parse,
		        lift: lift,
		        toHex: toHex,
		        fastMapToColor: fastMapToColor,
		        mapToColor: mapToColor,
		        mapIntervalToColor: mapIntervalToColor,
		        modifyHSL: modifyHSL,
		        modifyAlpha: modifyAlpha,
		        stringify: stringify
		    };




	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

		
		        var config = __webpack_require__(40);

		        /**
		         * @exports zrender/tool/log
		         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
		         */
		        module.exports = function() {
		            if (config.debugMode === 0) {
		                return;
		            }
		            else if (config.debugMode == 1) {
		                for (var k in arguments) {
		                    throw new Error(arguments[k]);
		                }
		            }
		            else if (config.debugMode > 1) {
		                for (var k in arguments) {
		                    console.log(arguments[k]);
		                }
		            }
		        };

		        /* for debug
		        return function(mes) {
		            document.getElementById('wrong-message').innerHTML =
		                mes + ' ' + (new Date() - 0)
		                + '<br/>' 
		                + document.getElementById('wrong-message').innerHTML;
		        };
		        */
		    


	/***/ },
	/* 40 */
	/***/ function(module, exports) {

		
		    var dpr = 1;
		    // If in browser environment
		    if (typeof window !== 'undefined') {
		        dpr = Math.max(window.devicePixelRatio || 1, 1);
		    }
		    /**
		     * config默认配置项
		     * @exports zrender/config
		     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
		     */
		    var config = {
		        /**
		         * debug日志选项：catchBrushException为true下有效
		         * 0 : 不生成debug数据，发布用
		         * 1 : 异常抛出，调试用
		         * 2 : 控制台输出，调试用
		         */
		        debugMode: 0,

		        // retina 屏幕优化
		        devicePixelRatio: dpr
		    };
		    module.exports = config;




	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var Group = __webpack_require__(29);
		    var componentUtil = __webpack_require__(20);
		    var clazzUtil = __webpack_require__(9);

		    function Chart() {

		        /**
		         * @type {module:zrender/container/Group}
		         * @readOnly
		         */
		        this.group = new Group();

		        /**
		         * @type {string}
		         * @readOnly
		         */
		        this.uid = componentUtil.getUID('viewChart');
		    }

		    Chart.prototype = {

		        type: 'chart',

		        /**
		         * Init the chart
		         * @param  {module:echarts/model/Global} ecModel
		         * @param  {module:echarts/ExtensionAPI} api
		         */
		        init: function (ecModel, api) {},

		        /**
		         * Render the chart
		         * @param  {module:echarts/model/Series} seriesModel
		         * @param  {module:echarts/model/Global} ecModel
		         * @param  {module:echarts/ExtensionAPI} api
		         * @param  {Object} payload
		         */
		        render: function (seriesModel, ecModel, api, payload) {},

		        /**
		         * Highlight series or specified data item
		         * @param  {module:echarts/model/Series} seriesModel
		         * @param  {module:echarts/model/Global} ecModel
		         * @param  {module:echarts/ExtensionAPI} api
		         * @param  {Object} payload
		         */
		        highlight: function (seriesModel, ecModel, api, payload) {
		            toggleHighlight(seriesModel.getData(), payload, 'emphasis');
		        },

		        /**
		         * Downplay series or specified data item
		         * @param  {module:echarts/model/Series} seriesModel
		         * @param  {module:echarts/model/Global} ecModel
		         * @param  {module:echarts/ExtensionAPI} api
		         * @param  {Object} payload
		         */
		        downplay: function (seriesModel, ecModel, api, payload) {
		            toggleHighlight(seriesModel.getData(), payload, 'normal');
		        },

		        /**
		         * Remove self
		         * @param  {module:echarts/model/Global} ecModel
		         * @param  {module:echarts/ExtensionAPI} api
		         */
		        remove: function (ecModel, api) {
		            this.group.removeAll();
		        },

		        /**
		         * Dispose self
		         * @param  {module:echarts/model/Global} ecModel
		         * @param  {module:echarts/ExtensionAPI} api
		         */
		        dispose: function () {}
		    };

		    var chartProto = Chart.prototype;
		    chartProto.updateView
		        = chartProto.updateLayout
		        = chartProto.updateVisual
		        = function (seriesModel, ecModel, api, payload) {
		            this.render(seriesModel, ecModel, api, payload);
		        };

		    /**
		     * Set state of single element
		     * @param  {module:zrender/Element} el
		     * @param  {string} state
		     */
		    function elSetState(el, state) {
		        if (el) {
		            el.trigger(state);
		            if (el.type === 'group') {
		                for (var i = 0; i < el.childCount(); i++) {
		                    elSetState(el.childAt(i), state);
		                }
		            }
		        }
		    }
		    /**
		     * @param  {module:echarts/data/List} data
		     * @param  {Object} payload
		     * @param  {string} state 'normal'|'emphasis'
		     * @inner
		     */
		    function toggleHighlight(data, payload, state) {
		        if (payload.dataIndex != null) {
		            var el = data.getItemGraphicEl(payload.dataIndex);
		            elSetState(el, state);
		        }
		        else if (payload.name) {
		            var dataIndex = data.indexOfName(payload.name);
		            var el = data.getItemGraphicEl(dataIndex);
		            elSetState(el, state);
		        }
		        else {
		            data.eachItemGraphicEl(function (el) {
		                elSetState(el, state);
		            });
		        }
		    }

		    // Enable Chart.extend.
		    clazzUtil.enableClassExtend(Chart);

		    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
		    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});

		    module.exports = Chart;


	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);

		    var pathTool = __webpack_require__(43);
		    var round = Math.round;
		    var Path = __webpack_require__(44);
		    var colorTool = __webpack_require__(38);
		    var matrix = __webpack_require__(17);
		    var vector = __webpack_require__(16);
		    var Gradient = __webpack_require__(4);

		    var graphic = {};

		    graphic.Group = __webpack_require__(29);

		    graphic.Image = __webpack_require__(59);

		    graphic.Text = __webpack_require__(62);

		    graphic.Circle = __webpack_require__(63);

		    graphic.Sector = __webpack_require__(64);

		    graphic.Ring = __webpack_require__(65);

		    graphic.Polygon = __webpack_require__(66);

		    graphic.Polyline = __webpack_require__(70);

		    graphic.Rect = __webpack_require__(71);

		    graphic.Line = __webpack_require__(72);

		    graphic.BezierCurve = __webpack_require__(73);

		    graphic.Arc = __webpack_require__(74);

		    graphic.LinearGradient = __webpack_require__(75);

		    graphic.RadialGradient = __webpack_require__(76);

		    graphic.BoundingRect = __webpack_require__(15);

		    /**
		     * Extend shape with parameters
		     */
		    graphic.extendShape = function (opts) {
		        return Path.extend(opts);
		    };

		    /**
		     * Extend path
		     */
		    graphic.extendPath = function (pathData, opts) {
		        return pathTool.extendFromString(pathData, opts);
		    };

		    /**
		     * Create a path element from path data string
		     * @param {string} pathData
		     * @param {Object} opts
		     * @param {module:zrender/core/BoundingRect} rect
		     * @param {string} [layout=cover] 'center' or 'cover'
		     */
		    graphic.makePath = function (pathData, opts, rect, layout) {
		        var path = pathTool.createFromString(pathData, opts);
		        var boundingRect = path.getBoundingRect();
		        if (rect) {
		            var aspect = boundingRect.width / boundingRect.height;

		            if (layout === 'center') {
		                // Set rect to center, keep width / height ratio.
		                var width = rect.height * aspect;
		                var height;
		                if (width <= rect.width) {
		                    height = rect.height;
		                }
		                else {
		                    width = rect.width;
		                    height = width / aspect;
		                }
		                var cx = rect.x + rect.width / 2;
		                var cy = rect.y + rect.height / 2;

		                rect.x = cx - width / 2;
		                rect.y = cy - height / 2;
		                rect.width = width;
		                rect.height = height;
		            }

		            this.resizePath(path, rect);
		        }
		        return path;
		    };

		    graphic.mergePath = pathTool.mergePath,

		    /**
		     * Resize a path to fit the rect
		     * @param {module:zrender/graphic/Path} path
		     * @param {Object} rect
		     */
		    graphic.resizePath = function (path, rect) {
		        if (!path.applyTransform) {
		            return;
		        }

		        var pathRect = path.getBoundingRect();

		        var m = pathRect.calculateTransform(rect);

		        path.applyTransform(m);
		    };

		    /**
		     * Sub pixel optimize line for canvas
		     *
		     * @param {Object} param
		     * @param {Object} [param.shape]
		     * @param {number} [param.shape.x1]
		     * @param {number} [param.shape.y1]
		     * @param {number} [param.shape.x2]
		     * @param {number} [param.shape.y2]
		     * @param {Object} [param.style]
		     * @param {number} [param.style.lineWidth]
		     * @return {Object} Modified param
		     */
		    graphic.subPixelOptimizeLine = function (param) {
		        var subPixelOptimize = graphic.subPixelOptimize;
		        var shape = param.shape;
		        var lineWidth = param.style.lineWidth;

		        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
		            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
		        }
		        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
		            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
		        }
		        return param;
		    };

		    /**
		     * Sub pixel optimize rect for canvas
		     *
		     * @param {Object} param
		     * @param {Object} [param.shape]
		     * @param {number} [param.shape.x]
		     * @param {number} [param.shape.y]
		     * @param {number} [param.shape.width]
		     * @param {number} [param.shape.height]
		     * @param {Object} [param.style]
		     * @param {number} [param.style.lineWidth]
		     * @return {Object} Modified param
		     */
		    graphic.subPixelOptimizeRect = function (param) {
		        var subPixelOptimize = graphic.subPixelOptimize;
		        var shape = param.shape;
		        var lineWidth = param.style.lineWidth;
		        var originX = shape.x;
		        var originY = shape.y;
		        var originWidth = shape.width;
		        var originHeight = shape.height;
		        shape.x = subPixelOptimize(shape.x, lineWidth, true);
		        shape.y = subPixelOptimize(shape.y, lineWidth, true);
		        shape.width = Math.max(
		            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,
		            originWidth === 0 ? 0 : 1
		        );
		        shape.height = Math.max(
		            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,
		            originHeight === 0 ? 0 : 1
		        );
		        return param;
		    };

		    /**
		     * Sub pixel optimize for canvas
		     *
		     * @param {number} position Coordinate, such as x, y
		     * @param {number} lineWidth Should be nonnegative integer.
		     * @param {boolean=} positiveOrNegative Default false (negative).
		     * @return {number} Optimized position.
		     */
		    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {
		        // Assure that (position + lineWidth / 2) is near integer edge,
		        // otherwise line will be fuzzy in canvas.
		        var doubledPosition = round(position * 2);
		        return (doubledPosition + round(lineWidth)) % 2 === 0
		            ? doubledPosition / 2
		            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
		    };

		    /**
		     * @private
		     */
		    function doSingleEnterHover(el) {
		        if (el.__isHover) {
		            return;
		        }
		        if (el.__hoverStlDirty) {
		            var stroke = el.style.stroke;
		            var fill = el.style.fill;

		            // Create hoverStyle on mouseover
		            var hoverStyle = el.__hoverStl;
		            var lift = colorTool.lift;
		            hoverStyle.fill = hoverStyle.fill
		                || (fill && (fill instanceof Gradient ? fill : lift(fill, -0.1)));
		            hoverStyle.stroke = hoverStyle.stroke
		                || (stroke && (stroke instanceof Gradient ? stroke : lift(stroke, -0.1)));

		            var normalStyle = {};
		            for (var name in hoverStyle) {
		                if (hoverStyle.hasOwnProperty(name)) {
		                    normalStyle[name] = el.style[name];
		                }
		            }

		            el.__normalStl = normalStyle;

		            el.__hoverStlDirty = false;
		        }
		        el.setStyle(el.__hoverStl);
		        el.z2 += 1;

		        el.__isHover = true;
		    }

		    /**
		     * @inner
		     */
		    function doSingleLeaveHover(el) {
		        if (!el.__isHover) {
		            return;
		        }

		        var normalStl = el.__normalStl;
		        normalStl && el.setStyle(normalStl);
		        el.z2 -= 1;

		        el.__isHover = false;
		    }

		    /**
		     * @inner
		     */
		    function doEnterHover(el) {
		        el.type === 'group'
		            ? el.traverse(function (child) {
		                if (child.type !== 'group') {
		                    doSingleEnterHover(child);
		                }
		            })
		            : doSingleEnterHover(el);
		    }

		    function doLeaveHover(el) {
		        el.type === 'group'
		            ? el.traverse(function (child) {
		                if (child.type !== 'group') {
		                    doSingleLeaveHover(child);
		                }
		            })
		            : doSingleLeaveHover(el);
		    }

		    /**
		     * @inner
		     */
		    function setElementHoverStl(el, hoverStl) {
		        // If element has sepcified hoverStyle, then use it instead of given hoverStyle
		        // Often used when item group has a label element and it's hoverStyle is different
		        el.__hoverStl = el.hoverStyle || hoverStl || {};
		        el.__hoverStlDirty = true;
		    }

		    /**
		     * @inner
		     */
		    function onElementMouseOver() {
		        // Only if element is not in emphasis status
		        !this.__isEmphasis && doEnterHover(this);
		    }

		    /**
		     * @inner
		     */
		    function onElementMouseOut() {
		        // Only if element is not in emphasis status
		        !this.__isEmphasis && doLeaveHover(this);
		    }

		    /**
		     * @inner
		     */
		    function enterEmphasis() {
		        this.__isEmphasis = true;
		        doEnterHover(this);
		    }

		    /**
		     * @inner
		     */
		    function leaveEmphasis() {
		        this.__isEmphasis = false;
		        doLeaveHover(this);
		    }

		    /**
		     * Set hover style of element
		     * @param {module:zrender/Element} el
		     * @param {Object} [hoverStyle]
		     */
		    graphic.setHoverStyle = function (el, hoverStyle) {
		        el.type === 'group'
		            ? el.traverse(function (child) {
		                if (child.type !== 'group') {
		                    setElementHoverStl(child, hoverStyle);
		                }
		            })
		            : setElementHoverStl(el, hoverStyle);
		        // Remove previous bound handlers
		        el.on('mouseover', onElementMouseOver)
		          .on('mouseout', onElementMouseOut);

		        // Emphasis, normal can be triggered manually
		        el.on('emphasis', enterEmphasis)
		          .on('normal', leaveEmphasis);
		    };

		    /**
		     * Set text option in the style
		     * @param {Object} textStyle
		     * @param {module:echarts/model/Model} labelModel
		     * @param {string} color
		     */
		    graphic.setText = function (textStyle, labelModel, color) {
		        var labelPosition = labelModel.getShallow('position') || 'inside';
		        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;
		        var textStyleModel = labelModel.getModel('textStyle');
		        zrUtil.extend(textStyle, {
		            textDistance: labelModel.getShallow('distance') || 5,
		            textFont: textStyleModel.getFont(),
		            textPosition: labelPosition,
		            textFill: textStyleModel.getTextColor() || labelColor
		        });
		    };

		    function animateOrSetProps(isUpdate, el, props, animatableModel, cb) {
		        var postfix = isUpdate ? 'Update' : '';
		        var duration = animatableModel
		            && animatableModel.getShallow('animationDuration' + postfix);
		        var animationEasing = animatableModel
		            && animatableModel.getShallow('animationEasing' + postfix);

		        animatableModel && animatableModel.getShallow('animation')
		            ? el.animateTo(props, duration, animationEasing, cb)
		            : (el.attr(props), cb && cb());
		    }
		    /**
		     * Update graphic element properties with or without animation according to the configuration in series
		     * @param {module:zrender/Element} el
		     * @param {Object} props
		     * @param {module:echarts/model/Model} [animatableModel]
		     * @param {Function} cb
		     */
		    graphic.updateProps = zrUtil.curry(animateOrSetProps, true);

		    /**
		     * Init graphic element properties with or without animation according to the configuration in series
		     * @param {module:zrender/Element} el
		     * @param {Object} props
		     * @param {module:echarts/model/Model} [animatableModel]
		     * @param {Function} cb
		     */
		    graphic.initProps = zrUtil.curry(animateOrSetProps, false);

		    /**
		     * Get transform matrix of target (param target),
		     * in coordinate of its ancestor (param ancestor)
		     *
		     * @param {module:zrender/mixin/Transformable} target
		     * @param {module:zrender/mixin/Transformable} ancestor
		     */
		    graphic.getTransform = function (target, ancestor) {
		        var mat = matrix.identity([]);

		        while (target && target !== ancestor) {
		            matrix.mul(mat, target.getLocalTransform(), mat);
		            target = target.parent;
		        }

		        return mat;
		    };

		    /**
		     * Apply transform to an vertex.
		     * @param {Array.<number>} vertex [x, y]
		     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
		     * @param {boolean=} invert Whether use invert matrix.
		     * @return {Array.<number>} [x, y]
		     */
		    graphic.applyTransform = function (vertex, transform, invert) {
		        if (invert) {
		            transform = matrix.invert([], transform);
		        }
		        return vector.applyTransform([], vertex, transform);
		    };

		    /**
		     * @param {string} direction 'left' 'right' 'top' 'bottom'
		     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
		     * @param {boolean=} invert Whether use invert matrix.
		     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
		     */
		    graphic.transformDirection = function (direction, transform, invert) {

		        // Pick a base, ensure that transform result will not be (0, 0).
		        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)
		            ? 1 : Math.abs(2 * transform[4] / transform[0]);
		        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)
		            ? 1 : Math.abs(2 * transform[4] / transform[2]);

		        var vertex = [
		            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,
		            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0
		        ];

		        vertex = graphic.applyTransform(vertex, transform, invert);

		        return Math.abs(vertex[0]) > Math.abs(vertex[1])
		            ? (vertex[0] > 0 ? 'right' : 'left')
		            : (vertex[1] > 0 ? 'bottom' : 'top');
		    };

		    module.exports = graphic;


	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var Path = __webpack_require__(44);
		    var PathProxy = __webpack_require__(48);
		    var transformPath = __webpack_require__(58);
		    var matrix = __webpack_require__(17);

		    // command chars
		    var cc = [
		        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',
		        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'
		    ];

		    var mathSqrt = Math.sqrt;
		    var mathSin = Math.sin;
		    var mathCos = Math.cos;
		    var PI = Math.PI;

		    var vMag = function(v) {
		        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
		    };
		    var vRatio = function(u, v) {
		        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
		    };
		    var vAngle = function(u, v) {
		        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)
		                * Math.acos(vRatio(u, v));
		    };

		    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
		        var psi = psiDeg * (PI / 180.0);
		        var xp = mathCos(psi) * (x1 - x2) / 2.0
		                 + mathSin(psi) * (y1 - y2) / 2.0;
		        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0
		                 + mathCos(psi) * (y1 - y2) / 2.0;

		        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);

		        if (lambda > 1) {
		            rx *= mathSqrt(lambda);
		            ry *= mathSqrt(lambda);
		        }

		        var f = (fa === fs ? -1 : 1)
		            * mathSqrt((((rx * rx) * (ry * ry))
		                    - ((rx * rx) * (yp * yp))
		                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)
		                    + (ry * ry) * (xp * xp))
		                ) || 0;

		        var cxp = f * rx * yp / ry;
		        var cyp = f * -ry * xp / rx;

		        var cx = (x1 + x2) / 2.0
		                 + mathCos(psi) * cxp
		                 - mathSin(psi) * cyp;
		        var cy = (y1 + y2) / 2.0
		                + mathSin(psi) * cxp
		                + mathCos(psi) * cyp;

		        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);
		        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];
		        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];
		        var dTheta = vAngle(u, v);

		        if (vRatio(u, v) <= -1) {
		            dTheta = PI;
		        }
		        if (vRatio(u, v) >= 1) {
		            dTheta = 0;
		        }
		        if (fs === 0 && dTheta > 0) {
		            dTheta = dTheta - 2 * PI;
		        }
		        if (fs === 1 && dTheta < 0) {
		            dTheta = dTheta + 2 * PI;
		        }

		        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
		    }

		    function createPathProxyFromString(data) {
		        if (!data) {
		            return [];
		        }

		        // command string
		        var cs = data.replace(/-/g, ' -')
		            .replace(/  /g, ' ')
		            .replace(/ /g, ',')
		            .replace(/,,/g, ',');

		        var n;
		        // create pipes so that we can split the data
		        for (n = 0; n < cc.length; n++) {
		            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
		        }

		        // create array
		        var arr = cs.split('|');
		        // init context point
		        var cpx = 0;
		        var cpy = 0;

		        var path = new PathProxy();
		        var CMD = PathProxy.CMD;

		        var prevCmd;
		        for (n = 1; n < arr.length; n++) {
		            var str = arr[n];
		            var c = str.charAt(0);
		            var off = 0;
		            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
		            var cmd;

		            if (p.length > 0 && p[0] === '') {
		                p.shift();
		            }

		            for (var i = 0; i < p.length; i++) {
		                p[i] = parseFloat(p[i]);
		            }
		            while (off < p.length && !isNaN(p[off])) {
		                if (isNaN(p[0])) {
		                    break;
		                }
		                var ctlPtx;
		                var ctlPty;

		                var rx;
		                var ry;
		                var psi;
		                var fa;
		                var fs;

		                var x1 = cpx;
		                var y1 = cpy;

		                // convert l, H, h, V, and v to L
		                switch (c) {
		                    case 'l':
		                        cpx += p[off++];
		                        cpy += p[off++];
		                        cmd = CMD.L;
		                        path.addData(cmd, cpx, cpy);
		                        break;
		                    case 'L':
		                        cpx = p[off++];
		                        cpy = p[off++];
		                        cmd = CMD.L;
		                        path.addData(cmd, cpx, cpy);
		                        break;
		                    case 'm':
		                        cpx += p[off++];
		                        cpy += p[off++];
		                        cmd = CMD.M;
		                        path.addData(cmd, cpx, cpy);
		                        c = 'l';
		                        break;
		                    case 'M':
		                        cpx = p[off++];
		                        cpy = p[off++];
		                        cmd = CMD.M;
		                        path.addData(cmd, cpx, cpy);
		                        c = 'L';
		                        break;
		                    case 'h':
		                        cpx += p[off++];
		                        cmd = CMD.L;
		                        path.addData(cmd, cpx, cpy);
		                        break;
		                    case 'H':
		                        cpx = p[off++];
		                        cmd = CMD.L;
		                        path.addData(cmd, cpx, cpy);
		                        break;
		                    case 'v':
		                        cpy += p[off++];
		                        cmd = CMD.L;
		                        path.addData(cmd, cpx, cpy);
		                        break;
		                    case 'V':
		                        cpy = p[off++];
		                        cmd = CMD.L;
		                        path.addData(cmd, cpx, cpy);
		                        break;
		                    case 'C':
		                        cmd = CMD.C;
		                        path.addData(
		                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]
		                        );
		                        cpx = p[off - 2];
		                        cpy = p[off - 1];
		                        break;
		                    case 'c':
		                        cmd = CMD.C;
		                        path.addData(
		                            cmd,
		                            p[off++] + cpx, p[off++] + cpy,
		                            p[off++] + cpx, p[off++] + cpy,
		                            p[off++] + cpx, p[off++] + cpy
		                        );
		                        cpx += p[off - 2];
		                        cpy += p[off - 1];
		                        break;
		                    case 'S':
		                        ctlPtx = cpx;
		                        ctlPty = cpy;
		                        var len = path.len();
		                        var pathData = path.data;
		                        if (prevCmd === CMD.C) {
		                            ctlPtx += cpx - pathData[len - 4];
		                            ctlPty += cpy - pathData[len - 3];
		                        }
		                        cmd = CMD.C;
		                        x1 = p[off++];
		                        y1 = p[off++];
		                        cpx = p[off++];
		                        cpy = p[off++];
		                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
		                        break;
		                    case 's':
		                        ctlPtx = cpx;
		                        ctlPty = cpy;
		                        var len = path.len();
		                        var pathData = path.data;
		                        if (prevCmd === CMD.C) {
		                            ctlPtx += cpx - pathData[len - 4];
		                            ctlPty += cpy - pathData[len - 3];
		                        }
		                        cmd = CMD.C;
		                        x1 = cpx + p[off++];
		                        y1 = cpy + p[off++];
		                        cpx += p[off++];
		                        cpy += p[off++];
		                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
		                        break;
		                    case 'Q':
		                        x1 = p[off++];
		                        y1 = p[off++];
		                        cpx = p[off++];
		                        cpy = p[off++];
		                        cmd = CMD.Q;
		                        path.addData(cmd, x1, y1, cpx, cpy);
		                        break;
		                    case 'q':
		                        x1 = p[off++] + cpx;
		                        y1 = p[off++] + cpy;
		                        cpx += p[off++];
		                        cpy += p[off++];
		                        cmd = CMD.Q;
		                        path.addData(cmd, x1, y1, cpx, cpy);
		                        break;
		                    case 'T':
		                        ctlPtx = cpx;
		                        ctlPty = cpy;
		                        var len = path.len();
		                        var pathData = path.data;
		                        if (prevCmd === CMD.Q) {
		                            ctlPtx += cpx - pathData[len - 4];
		                            ctlPty += cpy - pathData[len - 3];
		                        }
		                        cpx = p[off++];
		                        cpy = p[off++];
		                        cmd = CMD.Q;
		                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
		                        break;
		                    case 't':
		                        ctlPtx = cpx;
		                        ctlPty = cpy;
		                        var len = path.len();
		                        var pathData = path.data;
		                        if (prevCmd === CMD.Q) {
		                            ctlPtx += cpx - pathData[len - 4];
		                            ctlPty += cpy - pathData[len - 3];
		                        }
		                        cpx += p[off++];
		                        cpy += p[off++];
		                        cmd = CMD.Q;
		                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
		                        break;
		                    case 'A':
		                        rx = p[off++];
		                        ry = p[off++];
		                        psi = p[off++];
		                        fa = p[off++];
		                        fs = p[off++];

		                        x1 = cpx, y1 = cpy;
		                        cpx = p[off++];
		                        cpy = p[off++];
		                        cmd = CMD.A;
		                        processArc(
		                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
		                        );
		                        break;
		                    case 'a':
		                        rx = p[off++];
		                        ry = p[off++];
		                        psi = p[off++];
		                        fa = p[off++];
		                        fs = p[off++];

		                        x1 = cpx, y1 = cpy;
		                        cpx += p[off++];
		                        cpy += p[off++];
		                        cmd = CMD.A;
		                        processArc(
		                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
		                        );
		                        break;
		                }
		            }

		            if (c === 'z' || c === 'Z') {
		                cmd = CMD.Z;
		                path.addData(cmd);
		            }

		            prevCmd = cmd;
		        }

		        path.toStatic();

		        return path;
		    }

		    // TODO Optimize double memory cost problem
		    function createPathOptions(str, opts) {
		        var pathProxy = createPathProxyFromString(str);
		        var transform;
		        opts = opts || {};
		        opts.buildPath = function (path) {
		            path.setData(pathProxy.data);
		            transform && transformPath(path, transform);
		            // Svg and vml renderer don't have context
		            var ctx = path.getContext();
		            if (ctx) {
		                path.rebuildPath(ctx);
		            }
		        };

		        opts.applyTransform = function (m) {
		            if (!transform) {
		                transform = matrix.create();
		            }
		            matrix.mul(transform, m, transform);
		        };

		        return opts;
		    }

		    module.exports = {
		        /**
		         * Create a Path object from path string data
		         * http://www.w3.org/TR/SVG/paths.html#PathData
		         * @param  {Object} opts Other options
		         */
		        createFromString: function (str, opts) {
		            return new Path(createPathOptions(str, opts));
		        },

		        /**
		         * Create a Path class from path string data
		         * @param  {string} str
		         * @param  {Object} opts Other options
		         */
		        extendFromString: function (str, opts) {
		            return Path.extend(createPathOptions(str, opts));
		        },

		        /**
		         * Merge multiple paths
		         */
		        // TODO Apply transform
		        // TODO stroke dash
		        // TODO Optimize double memory cost problem
		        mergePath: function (pathEls, opts) {
		            var pathList = [];
		            var len = pathEls.length;
		            var pathEl;
		            var i;
		            for (i = 0; i < len; i++) {
		                pathEl = pathEls[i];
		                if (pathEl.__dirty) {
		                    pathEl.buildPath(pathEl.path, pathEl.shape);
		                }
		                pathList.push(pathEl.path);
		            }

		            var pathBundle = new Path(opts);
		            pathBundle.buildPath = function (path) {
		                path.appendPath(pathList);
		                // Svg and vml renderer don't have context
		                var ctx = path.getContext();
		                if (ctx) {
		                    path.rebuildPath(ctx);
		                }
		            };

		            return pathBundle;
		        }
		    };


	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Path element
		 * @module zrender/graphic/Path
		 */



		    var Displayable = __webpack_require__(45);
		    var zrUtil = __webpack_require__(3);
		    var PathProxy = __webpack_require__(48);
		    var pathContain = __webpack_require__(51);

		    var Gradient = __webpack_require__(4);

		    function pathHasFill(style) {
		        var fill = style.fill;
		        return fill != null && fill !== 'none';
		    }

		    function pathHasStroke(style) {
		        var stroke = style.stroke;
		        return stroke != null && stroke !== 'none' && style.lineWidth > 0;
		    }

		    var abs = Math.abs;

		    /**
		     * @alias module:zrender/graphic/Path
		     * @extends module:zrender/graphic/Displayable
		     * @constructor
		     * @param {Object} opts
		     */
		    function Path(opts) {
		        Displayable.call(this, opts);

		        /**
		         * @type {module:zrender/core/PathProxy}
		         * @readOnly
		         */
		        this.path = new PathProxy();
		    }

		    Path.prototype = {

		        constructor: Path,

		        type: 'path',

		        __dirtyPath: true,

		        strokeContainThreshold: 5,

		        brush: function (ctx) {
		            ctx.save();

		            var style = this.style;
		            var path = this.path;
		            var hasStroke = pathHasStroke(style);
		            var hasFill = pathHasFill(style);

		            if (this.__dirtyPath) {
		                // Update gradient because bounding rect may changed
		                if (hasFill && (style.fill instanceof Gradient)) {
		                    style.fill.updateCanvasGradient(this, ctx);
		                }
		                if (hasStroke && (style.stroke instanceof Gradient)) {
		                    style.stroke.updateCanvasGradient(this, ctx);
		                }
		            }

		            style.bind(ctx, this);
		            this.setTransform(ctx);

		            var lineDash = style.lineDash;
		            var lineDashOffset = style.lineDashOffset;

		            var ctxLineDash = !!ctx.setLineDash;

		            // Proxy context
		            // Rebuild path in following 2 cases
		            // 1. Path is dirty
		            // 2. Path needs javascript implemented lineDash stroking.
		            //    In this case, lineDash information will not be saved in PathProxy
		            if (this.__dirtyPath || (
		                lineDash && !ctxLineDash && hasStroke
		            )) {
		                path = this.path.beginPath(ctx);

		                // Setting line dash before build path
		                if (lineDash && !ctxLineDash) {
		                    path.setLineDash(lineDash);
		                    path.setLineDashOffset(lineDashOffset);
		                }

		                this.buildPath(path, this.shape);

		                // Clear path dirty flag
		                this.__dirtyPath = false;
		            }
		            else {
		                // Replay path building
		                ctx.beginPath();
		                this.path.rebuildPath(ctx);
		            }

		            hasFill && path.fill(ctx);

		            if (lineDash && ctxLineDash) {
		                ctx.setLineDash(lineDash);
		                ctx.lineDashOffset = lineDashOffset;
		            }

		            hasStroke && path.stroke(ctx);

		            // Draw rect text
		            if (style.text != null) {
		                // var rect = this.getBoundingRect();
		                this.drawRectText(ctx, this.getBoundingRect());
		            }

		            ctx.restore();
		        },

		        buildPath: function (ctx, shapeCfg) {},

		        getBoundingRect: function () {
		            var rect = this._rect;
		            var style = this.style;
		            var needsUpdateRect = !rect;
		            if (needsUpdateRect) {
		                var path = this.path;
		                if (this.__dirtyPath) {
		                    path.beginPath();
		                    this.buildPath(path, this.shape);
		                }
		                rect = path.getBoundingRect();
		            }
		            this._rect = rect;

		            if (pathHasStroke(style)) {
		                // Needs update rect with stroke lineWidth when
		                // 1. Element changes scale or lineWidth
		                // 2. Shape is changed
		                var rectWithStroke = this._rectWithStroke;
		                if (this.__dirty || needsUpdateRect) {
		                    var rectWithStroke = this._rectWithStroke
		                        || (this._rectWithStroke = rect.clone());
		                    rectWithStroke.copy(rect);
		                    // FIXME Must after updateTransform
		                    var w = style.lineWidth;
		                    // PENDING, Min line width is needed when line is horizontal or vertical
		                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;

		                    // Only add extra hover lineWidth when there are no fill
		                    if (!pathHasFill(style)) {
		                        w = Math.max(w, this.strokeContainThreshold);
		                    }
		                    // Consider line width
		                    // Line scale can't be 0;
		                    if (lineScale > 1e-10) {
		                        rectWithStroke.width += w / lineScale;
		                        rectWithStroke.height += w / lineScale;
		                        rectWithStroke.x -= w / lineScale / 2;
		                        rectWithStroke.y -= w / lineScale / 2;
		                    }
		                }

		                // Return rect with stroke
		                return rectWithStroke;
		            }

		            return rect;
		        },

		        contain: function (x, y) {
		            var localPos = this.transformCoordToLocal(x, y);
		            var rect = this.getBoundingRect();
		            var style = this.style;
		            x = localPos[0];
		            y = localPos[1];

		            if (rect.contain(x, y)) {
		                var pathData = this.path.data;
		                if (pathHasStroke(style)) {
		                    var lineWidth = style.lineWidth;
		                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
		                    // Line scale can't be 0;
		                    if (lineScale > 1e-10) {
		                        // Only add extra hover lineWidth when there are no fill
		                        if (!pathHasFill(style)) {
		                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
		                        }
		                        if (pathContain.containStroke(
		                            pathData, lineWidth / lineScale, x, y
		                        )) {
		                            return true;
		                        }
		                    }
		                }
		                if (pathHasFill(style)) {
		                    return pathContain.contain(pathData, x, y);
		                }
		            }
		            return false;
		        },

		        /**
		         * @param  {boolean} dirtyPath
		         */
		        dirty: function (dirtyPath) {
		            if (arguments.length ===0) {
		                dirtyPath = true;
		            }
		            // Only mark dirty, not mark clean
		            if (dirtyPath) {
		                this.__dirtyPath = dirtyPath;
		                this._rect = null;
		            }

		            this.__dirty = true;

		            this.__zr && this.__zr.refresh();

		            // Used as a clipping path
		            if (this.__clipTarget) {
		                this.__clipTarget.dirty();
		            }
		        },

		        /**
		         * Alias for animate('shape')
		         * @param {boolean} loop
		         */
		        animateShape: function (loop) {
		            return this.animate('shape', loop);
		        },

		        // Overwrite attrKV
		        attrKV: function (key, value) {
		            // FIXME
		            if (key === 'shape') {
		                this.setShape(value);
		            }
		            else {
		                Displayable.prototype.attrKV.call(this, key, value);
		            }
		        },

		        /**
		         * @param {Object|string} key
		         * @param {*} value
		         */
		        setShape: function (key, value) {
		            var shape = this.shape;
		            // Path from string may not have shape
		            if (shape) {
		                if (zrUtil.isObject(key)) {
		                    for (var name in key) {
		                        shape[name] = key[name];
		                    }
		                }
		                else {
		                    shape[key] = value;
		                }
		                this.dirty(true);
		            }
		            return this;
		        },

		        getLineScale: function () {
		            var m = this.transform;
		            // Get the line scale.
		            // Determinant of `m` means how much the area is enlarged by the
		            // transformation. So its square root can be used as a scale factor
		            // for width.
		            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10
		                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))
		                : 1;
		        }
		    };

		    /**
		     * 扩展一个 Path element, 比如星形，圆等。
		     * Extend a path element
		     * @param {Object} props
		     * @param {string} props.type Path type
		     * @param {Function} props.init Initialize
		     * @param {Function} props.buildPath Overwrite buildPath method
		     * @param {Object} [props.style] Extended default style config
		     * @param {Object} [props.shape] Extended default shape config
		     */
		    Path.extend = function (defaults) {
		        var Sub = function (opts) {
		            Path.call(this, opts);

		            if (defaults.style) {
		                // Extend default style
		                this.style.extendFrom(defaults.style, false);
		            }

		            // Extend default shape
		            var defaultShape = defaults.shape;
		            if (defaultShape) {
		                this.shape = this.shape || {};
		                var thisShape = this.shape;
		                for (var name in defaultShape) {
		                    if (
		                        ! thisShape.hasOwnProperty(name)
		                        && defaultShape.hasOwnProperty(name)
		                    ) {
		                        thisShape[name] = defaultShape[name];
		                    }
		                }
		            }

		            defaults.init && defaults.init.call(this, opts);
		        };

		        zrUtil.inherits(Sub, Path);

		        // FIXME 不能 extend position, rotation 等引用对象
		        for (var name in defaults) {
		            // Extending prototype values and methods
		            if (name !== 'style' && name !== 'shape') {
		                Sub.prototype[name] = defaults[name];
		            }
		        }

		        return Sub;
		    };

		    zrUtil.inherits(Path, Displayable);

		    module.exports = Path;


	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 可绘制的图形基类
		 * Base class of all displayable graphic objects
		 * @module zrender/graphic/Displayable
		 */



		    var zrUtil = __webpack_require__(3);

		    var Style = __webpack_require__(46);

		    var Element = __webpack_require__(30);
		    var RectText = __webpack_require__(47);
		    // var Stateful = require('./mixin/Stateful');

		    /**
		     * @alias module:zrender/graphic/Displayable
		     * @extends module:zrender/Element
		     * @extends module:zrender/graphic/mixin/RectText
		     */
		    function Displayable(opts) {

		        opts = opts || {};

		        Element.call(this, opts);

		        // Extend properties
		        for (var name in opts) {
		            if (
		                opts.hasOwnProperty(name) &&
		                name !== 'style'
		            ) {
		                this[name] = opts[name];
		            }
		        }

		        /**
		         * @type {module:zrender/graphic/Style}
		         */
		        this.style = new Style(opts.style);

		        this._rect = null;
		        // Shapes for cascade clipping.
		        this.__clipPaths = [];

		        // FIXME Stateful must be mixined after style is setted
		        // Stateful.call(this, opts);
		    }

		    Displayable.prototype = {

		        constructor: Displayable,

		        type: 'displayable',

		        /**
		         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
		         * Dirty flag. From which painter will determine if this displayable object needs brush
		         * @name module:zrender/graphic/Displayable#__dirty
		         * @type {boolean}
		         */
		        __dirty: true,

		        /**
		         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
		         * If ignore drawing of the displayable object. Mouse event will still be triggered
		         * @name module:/zrender/graphic/Displayable#invisible
		         * @type {boolean}
		         * @default false
		         */
		        invisible: false,

		        /**
		         * @name module:/zrender/graphic/Displayable#z
		         * @type {number}
		         * @default 0
		         */
		        z: 0,

		        /**
		         * @name module:/zrender/graphic/Displayable#z
		         * @type {number}
		         * @default 0
		         */
		        z2: 0,

		        /**
		         * z层level，决定绘画在哪层canvas中
		         * @name module:/zrender/graphic/Displayable#zlevel
		         * @type {number}
		         * @default 0
		         */
		        zlevel: 0,

		        /**
		         * 是否可拖拽
		         * @name module:/zrender/graphic/Displayable#draggable
		         * @type {boolean}
		         * @default false
		         */
		        draggable: false,

		        /**
		         * 是否正在拖拽
		         * @name module:/zrender/graphic/Displayable#draggable
		         * @type {boolean}
		         * @default false
		         */
		        dragging: false,

		        /**
		         * 是否相应鼠标事件
		         * @name module:/zrender/graphic/Displayable#silent
		         * @type {boolean}
		         * @default false
		         */
		        silent: false,

		        /**
		         * If enable culling
		         * @type {boolean}
		         * @default false
		         */
		        culling: false,

		        /**
		         * Mouse cursor when hovered
		         * @name module:/zrender/graphic/Displayable#cursor
		         * @type {string}
		         */
		        cursor: 'pointer',

		        /**
		         * If hover area is bounding rect
		         * @name module:/zrender/graphic/Displayable#rectHover
		         * @type {string}
		         */
		        rectHover: false,

		        beforeBrush: function (ctx) {},

		        afterBrush: function (ctx) {},

		        /**
		         * 图形绘制方法
		         * @param {Canvas2DRenderingContext} ctx
		         */
		        // Interface
		        brush: function (ctx) {},

		        /**
		         * 获取最小包围盒
		         * @return {module:zrender/core/BoundingRect}
		         */
		        // Interface
		        getBoundingRect: function () {},

		        /**
		         * 判断坐标 x, y 是否在图形上
		         * If displayable element contain coord x, y
		         * @param  {number} x
		         * @param  {number} y
		         * @return {boolean}
		         */
		        contain: function (x, y) {
		            return this.rectContain(x, y);
		        },

		        /**
		         * @param  {Function} cb
		         * @param  {}   context
		         */
		        traverse: function (cb, context) {
		            cb.call(context, this);
		        },

		        /**
		         * 判断坐标 x, y 是否在图形的包围盒上
		         * If bounding rect of element contain coord x, y
		         * @param  {number} x
		         * @param  {number} y
		         * @return {boolean}
		         */
		        rectContain: function (x, y) {
		            var coord = this.transformCoordToLocal(x, y);
		            var rect = this.getBoundingRect();
		            return rect.contain(coord[0], coord[1]);
		        },

		        /**
		         * 标记图形元素为脏，并且在下一帧重绘
		         * Mark displayable element dirty and refresh next frame
		         */
		        dirty: function () {
		            this.__dirty = true;

		            this._rect = null;

		            this.__zr && this.__zr.refresh();
		        },

		        /**
		         * 图形是否会触发事件
		         * If displayable object binded any event
		         * @return {boolean}
		         */
		        // TODO, 通过 bind 绑定的事件
		        // isSilent: function () {
		        //     return !(
		        //         this.hoverable || this.draggable
		        //         || this.onmousemove || this.onmouseover || this.onmouseout
		        //         || this.onmousedown || this.onmouseup || this.onclick
		        //         || this.ondragenter || this.ondragover || this.ondragleave
		        //         || this.ondrop
		        //     );
		        // },
		        /**
		         * Alias for animate('style')
		         * @param {boolean} loop
		         */
		        animateStyle: function (loop) {
		            return this.animate('style', loop);
		        },

		        attrKV: function (key, value) {
		            if (key !== 'style') {
		                Element.prototype.attrKV.call(this, key, value);
		            }
		            else {
		                this.style.set(value);
		            }
		        },

		        /**
		         * @param {Object|string} key
		         * @param {*} value
		         */
		        setStyle: function (key, value) {
		            this.style.set(key, value);
		            this.dirty(false);
		            return this;
		        }
		    };

		    zrUtil.inherits(Displayable, Element);

		    zrUtil.mixin(Displayable, RectText);
		    // zrUtil.mixin(Displayable, Stateful);

		    module.exports = Displayable;


	/***/ },
	/* 46 */
	/***/ function(module, exports) {

		/**
		 * @module zrender/graphic/Style
		 */



		    var STYLE_LIST_COMMON = [
		        'lineCap', 'lineJoin', 'miterLimit',
		        'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'shadowColor'
		    ];

		    var Style = function (opts) {
		        this.extendFrom(opts);
		    };

		    Style.prototype = {

		        constructor: Style,

		        /**
		         * @type {string}
		         */
		        fill: '#000000',

		        /**
		         * @type {string}
		         */
		        stroke: null,

		        /**
		         * @type {number}
		         */
		        opacity: 1,

		        /**
		         * @type {Array.<number>}
		         */
		        lineDash: null,

		        /**
		         * @type {number}
		         */
		        lineDashOffset: 0,

		        /**
		         * @type {number}
		         */
		        shadowBlur: 0,

		        /**
		         * @type {number}
		         */
		        shadowOffsetX: 0,

		        /**
		         * @type {number}
		         */
		        shadowOffsetY: 0,

		        /**
		         * @type {number}
		         */
		        lineWidth: 1,

		        /**
		         * If stroke ignore scale
		         * @type {Boolean}
		         */
		        strokeNoScale: false,

		        // Bounding rect text configuration
		        // Not affected by element transform
		        /**
		         * @type {string}
		         */
		        text: null,

		        /**
		         * @type {string}
		         */
		        textFill: '#000',

		        /**
		         * @type {string}
		         */
		        textStroke: null,

		        /**
		         * 'inside', 'left', 'right', 'top', 'bottom'
		         * [x, y]
		         * @type {string|Array.<number>}
		         * @default 'inside'
		         */
		        textPosition: 'inside',

		        /**
		         * @type {string}
		         */
		        textBaseline: null,

		        /**
		         * @type {string}
		         */
		        textAlign: null,

		        /**
		         * @type {string}
		         */
		        textVerticalAlign: null,

		        /**
		         * @type {number}
		         */
		        textDistance: 5,

		        /**
		         * @type {number}
		         */
		        textShadowBlur: 0,

		        /**
		         * @type {number}
		         */
		        textShadowOffsetX: 0,

		        /**
		         * @type {number}
		         */
		        textShadowOffsetY: 0,

		        /**
		         * @param {CanvasRenderingContext2D} ctx
		         */
		        bind: function (ctx, el) {
		            var fill = this.fill;
		            var stroke = this.stroke;
		            for (var i = 0; i < STYLE_LIST_COMMON.length; i++) {
		                var styleName = STYLE_LIST_COMMON[i];

		                if (this[styleName] != null) {
		                    ctx[styleName] = this[styleName];
		                }
		            }
		            if (stroke != null) {
		                var lineWidth = this.lineWidth;
		                ctx.lineWidth = lineWidth / (
		                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1
		                );
		            }
		            if (fill != null) {
		                 // Use canvas gradient if has
		                ctx.fillStyle = fill.canvasGradient ? fill.canvasGradient : fill;
		            }
		            if (stroke != null) {
		                 // Use canvas gradient if has
		                ctx.strokeStyle = stroke.canvasGradient ? stroke.canvasGradient : stroke;
		            }
		            this.opacity != null && (ctx.globalAlpha = this.opacity);
		        },

		        /**
		         * Extend from other style
		         * @param {zrender/graphic/Style} otherStyle
		         * @param {boolean} overwrite
		         */
		        extendFrom: function (otherStyle, overwrite) {
		            if (otherStyle) {
		                var target = this;
		                for (var name in otherStyle) {
		                    if (otherStyle.hasOwnProperty(name)
		                        && (overwrite || ! target.hasOwnProperty(name))
		                    ) {
		                        target[name] = otherStyle[name];
		                    }
		                }
		            }
		        },

		        /**
		         * Batch setting style with a given object
		         * @param {Object|string} obj
		         * @param {*} [obj]
		         */
		        set: function (obj, value) {
		            if (typeof obj === 'string') {
		                this[obj] = value;
		            }
		            else {
		                this.extendFrom(obj, true);
		            }
		        },

		        /**
		         * Clone
		         * @return {zrender/graphic/Style} [description]
		         */
		        clone: function () {
		            var newStyle = new this.constructor();
		            newStyle.extendFrom(this, true);
		            return newStyle;
		        }
		    };

		    var styleProto = Style.prototype;
		    var name;
		    var i;
		    for (i = 0; i < STYLE_LIST_COMMON.length; i++) {
		        name = STYLE_LIST_COMMON[i];
		        if (!(name in styleProto)) {
		            styleProto[name] = null;
		        }
		    }

		    module.exports = Style;


	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Mixin for drawing text in a element bounding rect
		 * @module zrender/mixin/RectText
		 */



		    var textContain = __webpack_require__(14);
		    var BoundingRect = __webpack_require__(15);

		    var tmpRect = new BoundingRect();

		    var RectText = function () {};

		    function parsePercent(value, maxValue) {
		        if (typeof value === 'string') {
		            if (value.lastIndexOf('%') >= 0) {
		                return parseFloat(value) / 100 * maxValue;
		            }
		            return parseFloat(value);
		        }
		        return value;
		    }

		    function setTransform(ctx, m) {
		        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
		    }

		    RectText.prototype = {

		        constructor: RectText,

		        /**
		         * Draw text in a rect with specified position.
		         * @param  {CanvasRenderingContext} ctx
		         * @param  {Object} rect Displayable rect
		         * @return {Object} textRect Alternative precalculated text bounding rect
		         */
		        drawRectText: function (ctx, rect, textRect) {
		            var style = this.style;
		            var text = style.text;
		            // Convert to string
		            text != null && (text += '');
		            if (!text) {
		                return;
		            }
		            var x;
		            var y;
		            var textPosition = style.textPosition;
		            var distance = style.textDistance;
		            var align = style.textAlign;
		            var font = style.textFont || style.font;
		            var baseline = style.textBaseline;
		            var verticalAlign = style.textVerticalAlign;

		            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);

		            // Transform rect to view space
		            var transform = this.transform;
		            var invTransform = this.invTransform;
		            if (transform) {
		                tmpRect.copy(rect);
		                tmpRect.applyTransform(transform);
		                rect = tmpRect;
		                // Transform back
		                setTransform(ctx, invTransform);
		            }

		            // Text position represented by coord
		            if (textPosition instanceof Array) {
		                // Percent
		                x = rect.x + parsePercent(textPosition[0], rect.width);
		                y = rect.y + parsePercent(textPosition[1], rect.height);
		                align = align || 'left';
		                baseline = baseline || 'top';
		            }
		            else {
		                var res = textContain.adjustTextPositionOnRect(
		                    textPosition, rect, textRect, distance
		                );
		                x = res.x;
		                y = res.y;
		                // Default align and baseline when has textPosition
		                align = align || res.textAlign;
		                baseline = baseline || res.textBaseline;
		            }

		            ctx.textAlign = align;
		            if (verticalAlign) {
		                switch (verticalAlign) {
		                    case 'middle':
		                        y -= textRect.height / 2;
		                        break;
		                    case 'bottom':
		                        y -= textRect.height;
		                        break;
		                    // 'top'
		                }
		                // Ignore baseline
		                ctx.textBaseline = 'top';
		            }
		            else {
		                ctx.textBaseline = baseline;
		            }

		            var textFill = style.textFill;
		            var textStroke = style.textStroke;
		            textFill && (ctx.fillStyle = textFill);
		            textStroke && (ctx.strokeStyle = textStroke);
		            ctx.font = font;

		            // Text shadow
		            ctx.shadowColor = style.textShadowColor;
		            ctx.shadowBlur = style.textShadowBlur;
		            ctx.shadowOffsetX = style.textShadowOffsetX;
		            ctx.shadowOffsetY = style.textShadowOffsetY;

		            var textLines = text.split('\n');
		            for (var i = 0; i < textLines.length; i++) {
		                textFill && ctx.fillText(textLines[i], x, y);
		                textStroke && ctx.strokeText(textLines[i], x, y);
		                y += textRect.lineHeight;
		            }

		            // Transform again
		            transform && setTransform(ctx, transform);
		        }
		    };

		    module.exports = RectText;


	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
		 * 可以用于 isInsidePath 判断以及获取boundingRect
		 *
		 * @module zrender/core/PathProxy
		 * @author Yi Shen (http://www.github.com/pissang)
		 */

		 // TODO getTotalLength, getPointAtLength


		    var curve = __webpack_require__(49);
		    var vec2 = __webpack_require__(16);
		    var bbox = __webpack_require__(50);
		    var BoundingRect = __webpack_require__(15);

		    var CMD = {
		        M: 1,
		        L: 2,
		        C: 3,
		        Q: 4,
		        A: 5,
		        Z: 6,
		        // Rect
		        R: 7
		    };

		    var min = [];
		    var max = [];
		    var min2 = [];
		    var max2 = [];
		    var mathMin = Math.min;
		    var mathMax = Math.max;
		    var mathCos = Math.cos;
		    var mathSin = Math.sin;
		    var mathSqrt = Math.sqrt;

		    var hasTypedArray = typeof Float32Array != 'undefined';

		    /**
		     * @alias module:zrender/core/PathProxy
		     * @constructor
		     */
		    var PathProxy = function () {

		        /**
		         * Path data. Stored as flat array
		         * @type {Array.<Object>}
		         */
		        this.data = [];

		        this._len = 0;

		        this._ctx = null;

		        this._xi = 0;
		        this._yi = 0;

		        this._x0 = 0;
		        this._y0 = 0;
		    };

		    /**
		     * 快速计算Path包围盒（并不是最小包围盒）
		     * @return {Object}
		     */
		    PathProxy.prototype = {

		        constructor: PathProxy,

		        _lineDash: null,

		        _dashOffset: 0,

		        _dashIdx: 0,

		        _dashSum: 0,

		        getContext: function () {
		            return this._ctx;
		        },

		        /**
		         * @param  {CanvasRenderingContext2D} ctx
		         * @return {module:zrender/core/PathProxy}
		         */
		        beginPath: function (ctx) {
		            this._ctx = ctx;

		            ctx && ctx.beginPath();

		            // Reset
		            this._len = 0;

		            if (this._lineDash) {
		                this._lineDash = null;

		                this._dashOffset = 0;
		            }

		            return this;
		        },

		        /**
		         * @param  {number} x
		         * @param  {number} y
		         * @return {module:zrender/core/PathProxy}
		         */
		        moveTo: function (x, y) {
		            this.addData(CMD.M, x, y);
		            this._ctx && this._ctx.moveTo(x, y);

		            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
		            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
		            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
		            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
		            this._x0 = x;
		            this._y0 = y;

		            this._xi = x;
		            this._yi = y;

		            return this;
		        },

		        /**
		         * @param  {number} x
		         * @param  {number} y
		         * @return {module:zrender/core/PathProxy}
		         */
		        lineTo: function (x, y) {
		            this.addData(CMD.L, x, y);
		            if (this._ctx) {
		                this._needsDash() ? this._dashedLineTo(x, y)
		                    : this._ctx.lineTo(x, y);
		            }
		            this._xi = x;
		            this._yi = y;
		            return this;
		        },

		        /**
		         * @param  {number} x1
		         * @param  {number} y1
		         * @param  {number} x2
		         * @param  {number} y2
		         * @param  {number} x3
		         * @param  {number} y3
		         * @return {module:zrender/core/PathProxy}
		         */
		        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
		            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
		            if (this._ctx) {
		                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)
		                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
		            }
		            this._xi = x3;
		            this._yi = y3;
		            return this;
		        },

		        /**
		         * @param  {number} x1
		         * @param  {number} y1
		         * @param  {number} x2
		         * @param  {number} y2
		         * @return {module:zrender/core/PathProxy}
		         */
		        quadraticCurveTo: function (x1, y1, x2, y2) {
		            this.addData(CMD.Q, x1, y1, x2, y2);
		            if (this._ctx) {
		                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)
		                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
		            }
		            this._xi = x2;
		            this._yi = y2;
		            return this;
		        },

		        /**
		         * @param  {number} cx
		         * @param  {number} cy
		         * @param  {number} r
		         * @param  {number} startAngle
		         * @param  {number} endAngle
		         * @param  {boolean} anticlockwise
		         * @return {module:zrender/core/PathProxy}
		         */
		        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
		            this.addData(
		                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1
		            );
		            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);

		            this._xi = mathCos(endAngle) * r + cx;
		            this._xi = mathSin(endAngle) * r + cx;
		            return this;
		        },

		        // TODO
		        arcTo: function (x1, y1, x2, y2, radius) {
		            if (this._ctx) {
		                this._ctx.arcTo(x1, y1, x2, y2, radius);
		            }
		            return this;
		        },

		        // TODO
		        rect: function (x, y, w, h) {
		            this._ctx && this._ctx.rect(x, y, w, h);
		            this.addData(CMD.R, x, y, w, h);
		            return this;
		        },

		        /**
		         * @return {module:zrender/core/PathProxy}
		         */
		        closePath: function () {
		            this.addData(CMD.Z);

		            var ctx = this._ctx;
		            var x0 = this._x0;
		            var y0 = this._y0;
		            if (ctx) {
		                this._needsDash() && this._dashedLineTo(x0, y0);
		                ctx.closePath();
		            }

		            this._xi = x0;
		            this._yi = y0;
		            return this;
		        },

		        /**
		         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
		         * stroke 同样
		         * @param {CanvasRenderingContext2D} ctx
		         * @return {module:zrender/core/PathProxy}
		         */
		        fill: function (ctx) {
		            ctx && ctx.fill();
		            this.toStatic();
		        },

		        /**
		         * @param {CanvasRenderingContext2D} ctx
		         * @return {module:zrender/core/PathProxy}
		         */
		        stroke: function (ctx) {
		            ctx && ctx.stroke();
		            this.toStatic();
		        },

		        /**
		         * 必须在其它绘制命令前调用
		         * Must be invoked before all other path drawing methods
		         * @return {module:zrender/core/PathProxy}
		         */
		        setLineDash: function (lineDash) {
		            if (lineDash instanceof Array) {
		                this._lineDash = lineDash;

		                this._dashIdx = 0;

		                var lineDashSum = 0;
		                for (var i = 0; i < lineDash.length; i++) {
		                    lineDashSum += lineDash[i];
		                }
		                this._dashSum = lineDashSum;
		            }
		            return this;
		        },

		        /**
		         * 必须在其它绘制命令前调用
		         * Must be invoked before all other path drawing methods
		         * @return {module:zrender/core/PathProxy}
		         */
		        setLineDashOffset: function (offset) {
		            this._dashOffset = offset;
		            return this;
		        },

		        /**
		         *
		         * @return {boolean}
		         */
		        len: function () {
		            return this._len;
		        },

		        /**
		         * 直接设置 Path 数据
		         */
		        setData: function (data) {

		            var len = data.length;

		            if (! (this.data && this.data.length == len) && hasTypedArray) {
		                this.data = new Float32Array(len);
		            }

		            for (var i = 0; i < len; i++) {
		                this.data[i] = data[i];
		            }

		            this._len = len;
		        },

		        /**
		         * 添加子路径
		         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
		         */
		        appendPath: function (path) {
		            if (!(path instanceof Array)) {
		                path = [path];
		            }
		            var len = path.length;
		            var appendSize = 0;
		            var offset = this._len;
		            for (var i = 0; i < len; i++) {
		                appendSize += path[i].len();
		            }
		            if (hasTypedArray && (this.data instanceof Float32Array)) {
		                this.data = new Float32Array(offset + appendSize);
		            }
		            for (var i = 0; i < len; i++) {
		                var appendPathData = path[i].data;
		                for (var k = 0; k < appendPathData.length; k++) {
		                    this.data[offset++] = appendPathData[k];
		                }
		            }
		            this._len = offset;
		        },

		        /**
		         * 填充 Path 数据。
		         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
		         */
		        addData: function (cmd) {
		            var data = this.data;
		            if (this._len + arguments.length > data.length) {
		                // 因为之前的数组已经转换成静态的 Float32Array
		                // 所以不够用时需要扩展一个新的动态数组
		                this._expandData();
		                data = this.data;
		            }
		            for (var i = 0; i < arguments.length; i++) {
		                data[this._len++] = arguments[i];
		            }

		            this._prevCmd = cmd;
		        },

		        _expandData: function () {
		            // Only if data is Float32Array
		            if (!(this.data instanceof Array)) {
		                var newData = [];
		                for (var i = 0; i < this._len; i++) {
		                    newData[i] = this.data[i];
		                }
		                this.data = newData;
		            }
		        },

		        /**
		         * If needs js implemented dashed line
		         * @return {boolean}
		         * @private
		         */
		        _needsDash: function () {
		            return this._lineDash;
		        },

		        _dashedLineTo: function (x1, y1) {
		            var dashSum = this._dashSum;
		            var offset = this._dashOffset;
		            var lineDash = this._lineDash;
		            var ctx = this._ctx;

		            var x0 = this._xi;
		            var y0 = this._yi;
		            var dx = x1 - x0;
		            var dy = y1 - y0;
		            var dist = mathSqrt(dx * dx + dy * dy);
		            var x = x0;
		            var y = y0;
		            var dash;
		            var nDash = lineDash.length;
		            var idx;
		            dx /= dist;
		            dy /= dist;

		            if (offset < 0) {
		                // Convert to positive offset
		                offset = dashSum + offset;
		            }
		            offset %= dashSum;
		            x -= offset * dx;
		            y -= offset * dy;

		            while ((dx >= 0 && x <= x1) || (dx < 0 && x > x1)) {
		                idx = this._dashIdx;
		                dash = lineDash[idx];
		                x += dx * dash;
		                y += dy * dash;
		                this._dashIdx = (idx + 1) % nDash;
		                // Skip positive offset
		                if ((dx > 0 && x < x0) || (dx < 0 && x > x0)) {
		                    continue;
		                }
		                ctx[idx % 2 ? 'moveTo' : 'lineTo'](
		                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),
		                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)
		                );
		            }
		            // Offset for next lineTo
		            dx = x - x1;
		            dy = y - y1;
		            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
		        },

		        // Not accurate dashed line to
		        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
		            var dashSum = this._dashSum;
		            var offset = this._dashOffset;
		            var lineDash = this._lineDash;
		            var ctx = this._ctx;

		            var x0 = this._xi;
		            var y0 = this._yi;
		            var t;
		            var dx;
		            var dy;
		            var cubicAt = curve.cubicAt;
		            var bezierLen = 0;
		            var idx = this._dashIdx;
		            var nDash = lineDash.length;

		            var x;
		            var y;

		            var tmpLen = 0;

		            if (offset < 0) {
		                // Convert to positive offset
		                offset = dashSum + offset;
		            }
		            offset %= dashSum;
		            // Bezier approx length
		            for (t = 0; t < 1; t += 0.1) {
		                dx = cubicAt(x0, x1, x2, x3, t + 0.1)
		                    - cubicAt(x0, x1, x2, x3, t);
		                dy = cubicAt(y0, y1, y2, y3, t + 0.1)
		                    - cubicAt(y0, y1, y2, y3, t);
		                bezierLen += mathSqrt(dx * dx + dy * dy);
		            }

		            // Find idx after add offset
		            for (; idx < nDash; idx++) {
		                tmpLen += lineDash[idx];
		                if (tmpLen > offset) {
		                    break;
		                }
		            }
		            t = (tmpLen - offset) / bezierLen;

		            while (t <= 1) {

		                x = cubicAt(x0, x1, x2, x3, t);
		                y = cubicAt(y0, y1, y2, y3, t);

		                // Use line to approximate dashed bezier
		                // Bad result if dash is long
		                idx % 2 ? ctx.moveTo(x, y)
		                    : ctx.lineTo(x, y);

		                t += lineDash[idx] / bezierLen;

		                idx = (idx + 1) % nDash;
		            }

		            // Finish the last segment and calculate the new offset
		            (idx % 2 !== 0) && ctx.lineTo(x3, y3);
		            dx = x3 - x;
		            dy = y3 - y;
		            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
		        },

		        _dashedQuadraticTo: function (x1, y1, x2, y2) {
		            // Convert quadratic to cubic using degree elevation
		            var x3 = x2;
		            var y3 = y2;
		            x2 = (x2 + 2 * x1) / 3;
		            y2 = (y2 + 2 * y1) / 3;
		            x1 = (this._xi + 2 * x1) / 3;
		            y1 = (this._yi + 2 * y1) / 3;

		            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
		        },

		        /**
		         * 转成静态的 Float32Array 减少堆内存占用
		         * Convert dynamic array to static Float32Array
		         */
		        toStatic: function () {
		            var data = this.data;
		            if (data instanceof Array) {
		                data.length = this._len;
		                if (hasTypedArray) {
		                    this.data = new Float32Array(data);
		                }
		            }
		        },

		        /**
		         * @return {module:zrender/core/BoundingRect}
		         */
		        getBoundingRect: function () {
		            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
		            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;

		            var data = this.data;
		            var xi = 0;
		            var yi = 0;
		            var x0 = 0;
		            var y0 = 0;

		            for (var i = 0; i < data.length;) {
		                var cmd = data[i++];

		                if (i == 1) {
		                    // 如果第一个命令是 L, C, Q
		                    // 则 previous point 同绘制命令的第一个 point
		                    //
		                    // 第一个命令为 Arc 的情况下会在后面特殊处理
		                    xi = data[i];
		                    yi = data[i + 1];

		                    x0 = xi;
		                    y0 = yi;
		                }

		                switch (cmd) {
		                    case CMD.M:
		                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
		                        // 在 closePath 的时候使用
		                        x0 = data[i++];
		                        y0 = data[i++];
		                        xi = x0;
		                        yi = y0;
		                        min2[0] = x0;
		                        min2[1] = y0;
		                        max2[0] = x0;
		                        max2[1] = y0;
		                        break;
		                    case CMD.L:
		                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
		                        xi = data[i++];
		                        yi = data[i++];
		                        break;
		                    case CMD.C:
		                        bbox.fromCubic(
		                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
		                            min2, max2
		                        );
		                        xi = data[i++];
		                        yi = data[i++];
		                        break;
		                    case CMD.Q:
		                        bbox.fromQuadratic(
		                            xi, yi, data[i++], data[i++], data[i], data[i + 1],
		                            min2, max2
		                        );
		                        xi = data[i++];
		                        yi = data[i++];
		                        break;
		                    case CMD.A:
		                        // TODO Arc 判断的开销比较大
		                        var cx = data[i++];
		                        var cy = data[i++];
		                        var rx = data[i++];
		                        var ry = data[i++];
		                        var startAngle = data[i++];
		                        var endAngle = data[i++] + startAngle;
		                        // TODO Arc 旋转
		                        var psi = data[i++];
		                        var anticlockwise = 1 - data[i++];

		                        if (i == 1) {
		                            // 直接使用 arc 命令
		                            // 第一个命令起点还未定义
		                            x0 = mathCos(startAngle) * rx + cx;
		                            y0 = mathSin(startAngle) * ry + cy;
		                        }

		                        bbox.fromArc(
		                            cx, cy, rx, ry, startAngle, endAngle,
		                            anticlockwise, min2, max2
		                        );

		                        xi = mathCos(endAngle) * rx + cx;
		                        yi = mathSin(endAngle) * ry + cy;
		                        break;
		                    case CMD.R:
		                        x0 = xi = data[i++];
		                        y0 = yi = data[i++];
		                        var width = data[i++];
		                        var height = data[i++];
		                        // Use fromLine
		                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
		                        break;
		                    case CMD.Z:
		                        xi = x0;
		                        yi = y0;
		                        break;
		                }

		                // Union
		                vec2.min(min, min, min2);
		                vec2.max(max, max, max2);
		            }

		            // No data
		            if (i === 0) {
		                min[0] = min[1] = max[0] = max[1] = 0;
		            }

		            return new BoundingRect(
		                min[0], min[1], max[0] - min[0], max[1] - min[1]
		            );
		        },

		        /**
		         * Rebuild path from current data
		         * Rebuild path will not consider javascript implemented line dash.
		         * @param {CanvasRenderingContext} ctx
		         */
		        rebuildPath: function (ctx) {
		            var d = this.data;
		            for (var i = 0; i < this._len;) {
		                var cmd = d[i++];
		                switch (cmd) {
		                    case CMD.M:
		                        ctx.moveTo(d[i++], d[i++]);
		                        break;
		                    case CMD.L:
		                        ctx.lineTo(d[i++], d[i++]);
		                        break;
		                    case CMD.C:
		                        ctx.bezierCurveTo(
		                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]
		                        );
		                        break;
		                    case CMD.Q:
		                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
		                        break;
		                    case CMD.A:
		                        var cx = d[i++];
		                        var cy = d[i++];
		                        var rx = d[i++];
		                        var ry = d[i++];
		                        var theta = d[i++];
		                        var dTheta = d[i++];
		                        var psi = d[i++];
		                        var fs = d[i++];
		                        var r = (rx > ry) ? rx : ry;
		                        var scaleX = (rx > ry) ? 1 : rx / ry;
		                        var scaleY = (rx > ry) ? ry / rx : 1;
		                        var isEllipse = Math.abs(rx - ry) > 1e-3;
		                        if (isEllipse) {
		                            ctx.translate(cx, cy);
		                            ctx.rotate(psi);
		                            ctx.scale(scaleX, scaleY);
		                            ctx.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
		                            ctx.scale(1 / scaleX, 1 / scaleY);
		                            ctx.rotate(-psi);
		                            ctx.translate(-cx, -cy);
		                        }
		                        else {
		                            ctx.arc(cx, cy, r, theta, theta + dTheta, 1 - fs);
		                        }
		                        break;
		                    case CMD.R:
		                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);
		                        break;
		                    case CMD.Z:
		                        ctx.closePath();
		                }
		            }
		        }
		    };

		    PathProxy.CMD = CMD;

		    module.exports = PathProxy;


	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * 曲线辅助模块
		 * @module zrender/core/curve
		 * @author pissang(https://www.github.com/pissang)
		 */


		    var vec2 = __webpack_require__(16);
		    var v2Create = vec2.create;
		    var v2DistSquare = vec2.distSquare;
		    var mathPow = Math.pow;
		    var mathSqrt = Math.sqrt;

		    var EPSILON = 1e-8;
		    var EPSILON_NUMERIC = 1e-4;

		    var THREE_SQRT = mathSqrt(3);
		    var ONE_THIRD = 1 / 3;

		    // 临时变量
		    var _v0 = v2Create();
		    var _v1 = v2Create();
		    var _v2 = v2Create();
		    // var _v3 = vec2.create();

		    function isAroundZero(val) {
		        return val > -EPSILON && val < EPSILON;
		    }
		    function isNotAroundZero(val) {
		        return val > EPSILON || val < -EPSILON;
		    }
		    /**
		     * 计算三次贝塞尔值
		     * @memberOf module:zrender/core/curve
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} p3
		     * @param  {number} t
		     * @return {number}
		     */
		    function cubicAt(p0, p1, p2, p3, t) {
		        var onet = 1 - t;
		        return onet * onet * (onet * p0 + 3 * t * p1)
		             + t * t * (t * p3 + 3 * onet * p2);
		    }

		    /**
		     * 计算三次贝塞尔导数值
		     * @memberOf module:zrender/core/curve
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} p3
		     * @param  {number} t
		     * @return {number}
		     */
		    function cubicDerivativeAt(p0, p1, p2, p3, t) {
		        var onet = 1 - t;
		        return 3 * (
		            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet
		            + (p3 - p2) * t * t
		        );
		    }

		    /**
		     * 计算三次贝塞尔方程根，使用盛金公式
		     * @memberOf module:zrender/core/curve
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} p3
		     * @param  {number} val
		     * @param  {Array.<number>} roots
		     * @return {number} 有效根数目
		     */
		    function cubicRootAt(p0, p1, p2, p3, val, roots) {
		        // Evaluate roots of cubic functions
		        var a = p3 + 3 * (p1 - p2) - p0;
		        var b = 3 * (p2 - p1 * 2 + p0);
		        var c = 3 * (p1  - p0);
		        var d = p0 - val;

		        var A = b * b - 3 * a * c;
		        var B = b * c - 9 * a * d;
		        var C = c * c - 3 * b * d;

		        var n = 0;

		        if (isAroundZero(A) && isAroundZero(B)) {
		            if (isAroundZero(b)) {
		                roots[0] = 0;
		            }
		            else {
		                var t1 = -c / b;  //t1, t2, t3, b is not zero
		                if (t1 >= 0 && t1 <= 1) {
		                    roots[n++] = t1;
		                }
		            }
		        }
		        else {
		            var disc = B * B - 4 * A * C;

		            if (isAroundZero(disc)) {
		                var K = B / A;
		                var t1 = -b / a + K;  // t1, a is not zero
		                var t2 = -K / 2;  // t2, t3
		                if (t1 >= 0 && t1 <= 1) {
		                    roots[n++] = t1;
		                }
		                if (t2 >= 0 && t2 <= 1) {
		                    roots[n++] = t2;
		                }
		            }
		            else if (disc > 0) {
		                var discSqrt = mathSqrt(disc);
		                var Y1 = A * b + 1.5 * a * (-B + discSqrt);
		                var Y2 = A * b + 1.5 * a * (-B - discSqrt);
		                if (Y1 < 0) {
		                    Y1 = -mathPow(-Y1, ONE_THIRD);
		                }
		                else {
		                    Y1 = mathPow(Y1, ONE_THIRD);
		                }
		                if (Y2 < 0) {
		                    Y2 = -mathPow(-Y2, ONE_THIRD);
		                }
		                else {
		                    Y2 = mathPow(Y2, ONE_THIRD);
		                }
		                var t1 = (-b - (Y1 + Y2)) / (3 * a);
		                if (t1 >= 0 && t1 <= 1) {
		                    roots[n++] = t1;
		                }
		            }
		            else {
		                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
		                var theta = Math.acos(T) / 3;
		                var ASqrt = mathSqrt(A);
		                var tmp = Math.cos(theta);

		                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
		                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
		                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
		                if (t1 >= 0 && t1 <= 1) {
		                    roots[n++] = t1;
		                }
		                if (t2 >= 0 && t2 <= 1) {
		                    roots[n++] = t2;
		                }
		                if (t3 >= 0 && t3 <= 1) {
		                    roots[n++] = t3;
		                }
		            }
		        }
		        return n;
		    }

		    /**
		     * 计算三次贝塞尔方程极限值的位置
		     * @memberOf module:zrender/core/curve
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} p3
		     * @param  {Array.<number>} extrema
		     * @return {number} 有效数目
		     */
		    function cubicExtrema(p0, p1, p2, p3, extrema) {
		        var b = 6 * p2 - 12 * p1 + 6 * p0;
		        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
		        var c = 3 * p1 - 3 * p0;

		        var n = 0;
		        if (isAroundZero(a)) {
		            if (isNotAroundZero(b)) {
		                var t1 = -c / b;
		                if (t1 >= 0 && t1 <=1) {
		                    extrema[n++] = t1;
		                }
		            }
		        }
		        else {
		            var disc = b * b - 4 * a * c;
		            if (isAroundZero(disc)) {
		                extrema[0] = -b / (2 * a);
		            }
		            else if (disc > 0) {
		                var discSqrt = mathSqrt(disc);
		                var t1 = (-b + discSqrt) / (2 * a);
		                var t2 = (-b - discSqrt) / (2 * a);
		                if (t1 >= 0 && t1 <= 1) {
		                    extrema[n++] = t1;
		                }
		                if (t2 >= 0 && t2 <= 1) {
		                    extrema[n++] = t2;
		                }
		            }
		        }
		        return n;
		    }

		    /**
		     * 细分三次贝塞尔曲线
		     * @memberOf module:zrender/core/curve
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} p3
		     * @param  {number} t
		     * @param  {Array.<number>} out
		     */
		    function cubicSubdivide(p0, p1, p2, p3, t, out) {
		        var p01 = (p1 - p0) * t + p0;
		        var p12 = (p2 - p1) * t + p1;
		        var p23 = (p3 - p2) * t + p2;

		        var p012 = (p12 - p01) * t + p01;
		        var p123 = (p23 - p12) * t + p12;

		        var p0123 = (p123 - p012) * t + p012;
		        // Seg0
		        out[0] = p0;
		        out[1] = p01;
		        out[2] = p012;
		        out[3] = p0123;
		        // Seg1
		        out[4] = p0123;
		        out[5] = p123;
		        out[6] = p23;
		        out[7] = p3;
		    }

		    /**
		     * 投射点到三次贝塞尔曲线上，返回投射距离。
		     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
		     * @param {number} x0
		     * @param {number} y0
		     * @param {number} x1
		     * @param {number} y1
		     * @param {number} x2
		     * @param {number} y2
		     * @param {number} x3
		     * @param {number} y3
		     * @param {number} x
		     * @param {number} y
		     * @param {Array.<number>} [out] 投射点
		     * @return {number}
		     */
		    function cubicProjectPoint(
		        x0, y0, x1, y1, x2, y2, x3, y3,
		        x, y, out
		    ) {
		        // http://pomax.github.io/bezierinfo/#projections
		        var t;
		        var interval = 0.005;
		        var d = Infinity;
		        var prev;
		        var next;
		        var d1;
		        var d2;

		        _v0[0] = x;
		        _v0[1] = y;

		        // 先粗略估计一下可能的最小距离的 t 值
		        // PENDING
		        for (var _t = 0; _t < 1; _t += 0.05) {
		            _v1[0] = cubicAt(x0, x1, x2, x3, _t);
		            _v1[1] = cubicAt(y0, y1, y2, y3, _t);
		            d1 = v2DistSquare(_v0, _v1);
		            if (d1 < d) {
		                t = _t;
		                d = d1;
		            }
		        }
		        d = Infinity;

		        // At most 32 iteration
		        for (var i = 0; i < 32; i++) {
		            if (interval < EPSILON_NUMERIC) {
		                break;
		            }
		            prev = t - interval;
		            next = t + interval;
		            // t - interval
		            _v1[0] = cubicAt(x0, x1, x2, x3, prev);
		            _v1[1] = cubicAt(y0, y1, y2, y3, prev);

		            d1 = v2DistSquare(_v1, _v0);

		            if (prev >= 0 && d1 < d) {
		                t = prev;
		                d = d1;
		            }
		            else {
		                // t + interval
		                _v2[0] = cubicAt(x0, x1, x2, x3, next);
		                _v2[1] = cubicAt(y0, y1, y2, y3, next);
		                d2 = v2DistSquare(_v2, _v0);

		                if (next <= 1 && d2 < d) {
		                    t = next;
		                    d = d2;
		                }
		                else {
		                    interval *= 0.5;
		                }
		            }
		        }
		        // t
		        if (out) {
		            out[0] = cubicAt(x0, x1, x2, x3, t);
		            out[1] = cubicAt(y0, y1, y2, y3, t);
		        }
		        // console.log(interval, i);
		        return mathSqrt(d);
		    }

		    /**
		     * 计算二次方贝塞尔值
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} t
		     * @return {number}
		     */
		    function quadraticAt(p0, p1, p2, t) {
		        var onet = 1 - t;
		        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
		    }

		    /**
		     * 计算二次方贝塞尔导数值
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} t
		     * @return {number}
		     */
		    function quadraticDerivativeAt(p0, p1, p2, t) {
		        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
		    }

		    /**
		     * 计算二次方贝塞尔方程根
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} t
		     * @param  {Array.<number>} roots
		     * @return {number} 有效根数目
		     */
		    function quadraticRootAt(p0, p1, p2, val, roots) {
		        var a = p0 - 2 * p1 + p2;
		        var b = 2 * (p1 - p0);
		        var c = p0 - val;

		        var n = 0;
		        if (isAroundZero(a)) {
		            if (isNotAroundZero(b)) {
		                var t1 = -c / b;
		                if (t1 >= 0 && t1 <= 1) {
		                    roots[n++] = t1;
		                }
		            }
		        }
		        else {
		            var disc = b * b - 4 * a * c;
		            if (isAroundZero(disc)) {
		                var t1 = -b / (2 * a);
		                if (t1 >= 0 && t1 <= 1) {
		                    roots[n++] = t1;
		                }
		            }
		            else if (disc > 0) {
		                var discSqrt = mathSqrt(disc);
		                var t1 = (-b + discSqrt) / (2 * a);
		                var t2 = (-b - discSqrt) / (2 * a);
		                if (t1 >= 0 && t1 <= 1) {
		                    roots[n++] = t1;
		                }
		                if (t2 >= 0 && t2 <= 1) {
		                    roots[n++] = t2;
		                }
		            }
		        }
		        return n;
		    }

		    /**
		     * 计算二次贝塞尔方程极限值
		     * @memberOf module:zrender/core/curve
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @return {number}
		     */
		    function quadraticExtremum(p0, p1, p2) {
		        var divider = p0 + p2 - 2 * p1;
		        if (divider === 0) {
		            // p1 is center of p0 and p2
		            return 0.5;
		        }
		        else {
		            return (p0 - p1) / divider;
		        }
		    }

		    /**
		     * 细分二次贝塞尔曲线
		     * @memberOf module:zrender/core/curve
		     * @param  {number} p0
		     * @param  {number} p1
		     * @param  {number} p2
		     * @param  {number} t
		     * @param  {Array.<number>} out
		     */
		    function quadraticSubdivide(p0, p1, p2, t, out) {
		        var p01 = (p1 - p0) * t + p0;
		        var p12 = (p2 - p1) * t + p1;
		        var p012 = (p12 - p01) * t + p01;

		        // Seg0
		        out[0] = p0;
		        out[1] = p01;
		        out[2] = p012;

		        // Seg1
		        out[3] = p012;
		        out[4] = p12;
		        out[5] = p2;
		    }

		    /**
		     * 投射点到二次贝塞尔曲线上，返回投射距离。
		     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
		     * @param {number} x0
		     * @param {number} y0
		     * @param {number} x1
		     * @param {number} y1
		     * @param {number} x2
		     * @param {number} y2
		     * @param {number} x
		     * @param {number} y
		     * @param {Array.<number>} out 投射点
		     * @return {number}
		     */
		    function quadraticProjectPoint(
		        x0, y0, x1, y1, x2, y2,
		        x, y, out
		    ) {
		        // http://pomax.github.io/bezierinfo/#projections
		        var t;
		        var interval = 0.005;
		        var d = Infinity;

		        _v0[0] = x;
		        _v0[1] = y;

		        // 先粗略估计一下可能的最小距离的 t 值
		        // PENDING
		        for (var _t = 0; _t < 1; _t += 0.05) {
		            _v1[0] = quadraticAt(x0, x1, x2, _t);
		            _v1[1] = quadraticAt(y0, y1, y2, _t);
		            var d1 = v2DistSquare(_v0, _v1);
		            if (d1 < d) {
		                t = _t;
		                d = d1;
		            }
		        }
		        d = Infinity;

		        // At most 32 iteration
		        for (var i = 0; i < 32; i++) {
		            if (interval < EPSILON_NUMERIC) {
		                break;
		            }
		            var prev = t - interval;
		            var next = t + interval;
		            // t - interval
		            _v1[0] = quadraticAt(x0, x1, x2, prev);
		            _v1[1] = quadraticAt(y0, y1, y2, prev);

		            var d1 = v2DistSquare(_v1, _v0);

		            if (prev >= 0 && d1 < d) {
		                t = prev;
		                d = d1;
		            }
		            else {
		                // t + interval
		                _v2[0] = quadraticAt(x0, x1, x2, next);
		                _v2[1] = quadraticAt(y0, y1, y2, next);
		                var d2 = v2DistSquare(_v2, _v0);
		                if (next <= 1 && d2 < d) {
		                    t = next;
		                    d = d2;
		                }
		                else {
		                    interval *= 0.5;
		                }
		            }
		        }
		        // t
		        if (out) {
		            out[0] = quadraticAt(x0, x1, x2, t);
		            out[1] = quadraticAt(y0, y1, y2, t);
		        }
		        // console.log(interval, i);
		        return mathSqrt(d);
		    }

		    module.exports = {

		        cubicAt: cubicAt,

		        cubicDerivativeAt: cubicDerivativeAt,

		        cubicRootAt: cubicRootAt,

		        cubicExtrema: cubicExtrema,

		        cubicSubdivide: cubicSubdivide,

		        cubicProjectPoint: cubicProjectPoint,

		        quadraticAt: quadraticAt,

		        quadraticDerivativeAt: quadraticDerivativeAt,

		        quadraticRootAt: quadraticRootAt,

		        quadraticExtremum: quadraticExtremum,

		        quadraticSubdivide: quadraticSubdivide,

		        quadraticProjectPoint: quadraticProjectPoint
		    };


	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @author Yi Shen(https://github.com/pissang)
		 */


		    var vec2 = __webpack_require__(16);
		    var curve = __webpack_require__(49);

		    var bbox = {};
		    var mathMin = Math.min;
		    var mathMax = Math.max;
		    var mathSin = Math.sin;
		    var mathCos = Math.cos;

		    var start = vec2.create();
		    var end = vec2.create();
		    var extremity = vec2.create();

		    var PI2 = Math.PI * 2;
		    /**
		     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
		     * @module zrender/core/bbox
		     * @param {Array<Object>} points 顶点数组
		     * @param {number} min
		     * @param {number} max
		     */
		    bbox.fromPoints = function(points, min, max) {
		        if (points.length === 0) {
		            return;
		        }
		        var p = points[0];
		        var left = p[0];
		        var right = p[0];
		        var top = p[1];
		        var bottom = p[1];
		        var i;

		        for (i = 1; i < points.length; i++) {
		            p = points[i];
		            left = mathMin(left, p[0]);
		            right = mathMax(right, p[0]);
		            top = mathMin(top, p[1]);
		            bottom = mathMax(bottom, p[1]);
		        }

		        min[0] = left;
		        min[1] = top;
		        max[0] = right;
		        max[1] = bottom;
		    };

		    /**
		     * @memberOf module:zrender/core/bbox
		     * @param {number} x0
		     * @param {number} y0
		     * @param {number} x1
		     * @param {number} y1
		     * @param {Array.<number>} min
		     * @param {Array.<number>} max
		     */
		    bbox.fromLine = function (x0, y0, x1, y1, min, max) {
		        min[0] = mathMin(x0, x1);
		        min[1] = mathMin(y0, y1);
		        max[0] = mathMax(x0, x1);
		        max[1] = mathMax(y0, y1);
		    };

		    var xDim = [];
		    var yDim = [];
		    /**
		     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
		     * @memberOf module:zrender/core/bbox
		     * @param {number} x0
		     * @param {number} y0
		     * @param {number} x1
		     * @param {number} y1
		     * @param {number} x2
		     * @param {number} y2
		     * @param {number} x3
		     * @param {number} y3
		     * @param {Array.<number>} min
		     * @param {Array.<number>} max
		     */
		    bbox.fromCubic = function(
		        x0, y0, x1, y1, x2, y2, x3, y3, min, max
		    ) {
		        var cubicExtrema = curve.cubicExtrema;
		        var cubicAt = curve.cubicAt;
		        var i;
		        var n = cubicExtrema(x0, x1, x2, x3, xDim);
		        min[0] = Infinity;
		        min[1] = Infinity;
		        max[0] = -Infinity;
		        max[1] = -Infinity;

		        for (i = 0; i < n; i++) {
		            var x = cubicAt(x0, x1, x2, x3, xDim[i]);
		            min[0] = mathMin(x, min[0]);
		            max[0] = mathMax(x, max[0]);
		        }
		        n = cubicExtrema(y0, y1, y2, y3, yDim);
		        for (i = 0; i < n; i++) {
		            var y = cubicAt(y0, y1, y2, y3, yDim[i]);
		            min[1] = mathMin(y, min[1]);
		            max[1] = mathMax(y, max[1]);
		        }

		        min[0] = mathMin(x0, min[0]);
		        max[0] = mathMax(x0, max[0]);
		        min[0] = mathMin(x3, min[0]);
		        max[0] = mathMax(x3, max[0]);

		        min[1] = mathMin(y0, min[1]);
		        max[1] = mathMax(y0, max[1]);
		        min[1] = mathMin(y3, min[1]);
		        max[1] = mathMax(y3, max[1]);
		    };

		    /**
		     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
		     * @memberOf module:zrender/core/bbox
		     * @param {number} x0
		     * @param {number} y0
		     * @param {number} x1
		     * @param {number} y1
		     * @param {number} x2
		     * @param {number} y2
		     * @param {Array.<number>} min
		     * @param {Array.<number>} max
		     */
		    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {
		        var quadraticExtremum = curve.quadraticExtremum;
		        var quadraticAt = curve.quadraticAt;
		        // Find extremities, where derivative in x dim or y dim is zero
		        var tx =
		            mathMax(
		                mathMin(quadraticExtremum(x0, x1, x2), 1), 0
		            );
		        var ty =
		            mathMax(
		                mathMin(quadraticExtremum(y0, y1, y2), 1), 0
		            );

		        var x = quadraticAt(x0, x1, x2, tx);
		        var y = quadraticAt(y0, y1, y2, ty);

		        min[0] = mathMin(x0, x2, x);
		        min[1] = mathMin(y0, y2, y);
		        max[0] = mathMax(x0, x2, x);
		        max[1] = mathMax(y0, y2, y);
		    };

		    /**
		     * 从圆弧中计算出最小包围盒，写入`min`和`max`中
		     * @method
		     * @memberOf module:zrender/core/bbox
		     * @param {number} x
		     * @param {number} y
		     * @param {number} rx
		     * @param {number} ry
		     * @param {number} startAngle
		     * @param {number} endAngle
		     * @param {number} anticlockwise
		     * @param {Array.<number>} min
		     * @param {Array.<number>} max
		     */
		    bbox.fromArc = function (
		        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max
		    ) {
		        var vec2Min = vec2.min;
		        var vec2Max = vec2.max;

		        var diff = Math.abs(startAngle - endAngle);


		        if (diff % PI2 < 1e-4 && diff > 1e-4) {
		            // Is a circle
		            min[0] = x - rx;
		            min[1] = y - ry;
		            max[0] = x + rx;
		            max[1] = y + ry;
		            return;
		        }

		        start[0] = mathCos(startAngle) * rx + x;
		        start[1] = mathSin(startAngle) * ry + y;

		        end[0] = mathCos(endAngle) * rx + x;
		        end[1] = mathSin(endAngle) * ry + y;

		        vec2Min(min, start, end);
		        vec2Max(max, start, end);

		        // Thresh to [0, Math.PI * 2]
		        startAngle = startAngle % (PI2);
		        if (startAngle < 0) {
		            startAngle = startAngle + PI2;
		        }
		        endAngle = endAngle % (PI2);
		        if (endAngle < 0) {
		            endAngle = endAngle + PI2;
		        }

		        if (startAngle > endAngle && !anticlockwise) {
		            endAngle += PI2;
		        }
		        else if (startAngle < endAngle && anticlockwise) {
		            startAngle += PI2;
		        }
		        if (anticlockwise) {
		            var tmp = endAngle;
		            endAngle = startAngle;
		            startAngle = tmp;
		        }

		        // var number = 0;
		        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
		        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
		            if (angle > startAngle) {
		                extremity[0] = mathCos(angle) * rx + x;
		                extremity[1] = mathSin(angle) * ry + y;

		                vec2Min(min, extremity, min);
		                vec2Max(max, extremity, max);
		            }
		        }
		    };

		    module.exports = bbox;



	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var CMD = __webpack_require__(48).CMD;
		    var line = __webpack_require__(52);
		    var cubic = __webpack_require__(53);
		    var quadratic = __webpack_require__(54);
		    var arc = __webpack_require__(55);
		    var normalizeRadian = __webpack_require__(56).normalizeRadian;
		    var curve = __webpack_require__(49);

		    var windingLine = __webpack_require__(57);

		    var containStroke = line.containStroke;

		    var PI2 = Math.PI * 2;

		    var EPSILON = 1e-4;

		    function isAroundEqual(a, b) {
		        return Math.abs(a - b) < EPSILON;
		    }

		    // 临时数组
		    var roots = [-1, -1, -1];
		    var extrema = [-1, -1];

		    function swapExtrema() {
		        var tmp = extrema[0];
		        extrema[0] = extrema[1];
		        extrema[1] = tmp;
		    }

		    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
		        // Quick reject
		        if (
		            (y > y0 && y > y1 && y > y2 && y > y3)
		            || (y < y0 && y < y1 && y < y2 && y < y3)
		        ) {
		            return 0;
		        }
		        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
		        if (nRoots === 0) {
		            return 0;
		        }
		        else {
		            var w = 0;
		            var nExtrema = -1;
		            var y0_, y1_;
		            for (var i = 0; i < nRoots; i++) {
		                var t = roots[i];
		                var x_ = curve.cubicAt(x0, x1, x2, x3, t);
		                if (x_ < x) { // Quick reject
		                    continue;
		                }
		                if (nExtrema < 0) {
		                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
		                    if (extrema[1] < extrema[0] && nExtrema > 1) {
		                        swapExtrema();
		                    }
		                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
		                    if (nExtrema > 1) {
		                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
		                    }
		                }
		                if (nExtrema == 2) {
		                    // 分成三段单调函数
		                    if (t < extrema[0]) {
		                        w += y0_ < y0 ? 1 : -1;
		                    }
		                    else if (t < extrema[1]) {
		                        w += y1_ < y0_ ? 1 : -1;
		                    }
		                    else {
		                        w += y3 < y1_ ? 1 : -1;
		                    }
		                }
		                else {
		                    // 分成两段单调函数
		                    if (t < extrema[0]) {
		                        w += y0_ < y0 ? 1 : -1;
		                    }
		                    else {
		                        w += y3 < y0_ ? 1 : -1;
		                    }
		                }
		            }
		            return w;
		        }
		    }

		    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
		        // Quick reject
		        if (
		            (y > y0 && y > y1 && y > y2)
		            || (y < y0 && y < y1 && y < y2)
		        ) {
		            return 0;
		        }
		        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
		        if (nRoots === 0) {
		            return 0;
		        }
		        else {
		            var t = curve.quadraticExtremum(y0, y1, y2);
		            if (t >= 0 && t <= 1) {
		                var w = 0;
		                var y_ = curve.quadraticAt(y0, y1, y2, t);
		                for (var i = 0; i < nRoots; i++) {
		                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
		                    if (x_ < x) {   // Quick reject
		                        continue;
		                    }
		                    if (roots[i] < t) {
		                        w += y_ < y0 ? 1 : -1;
		                    }
		                    else {
		                        w += y2 < y_ ? 1 : -1;
		                    }
		                }
		                return w;
		            }
		            else {
		                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
		                if (x_ < x) {   // Quick reject
		                    return 0;
		                }
		                return y2 < y0 ? 1 : -1;
		            }
		        }
		    }

		    // TODO
		    // Arc 旋转
		    function windingArc(
		        cx, cy, r, startAngle, endAngle, anticlockwise, x, y
		    ) {
		        y -= cy;
		        if (y > r || y < -r) {
		            return 0;
		        }
		        var tmp = Math.sqrt(r * r - y * y);
		        roots[0] = -tmp;
		        roots[1] = tmp;

		        var diff = Math.abs(startAngle - endAngle);
		        if (diff < 1e-4) {
		            return 0;
		        }
		        if (diff % PI2 < 1e-4) {
		            // Is a circle
		            startAngle = 0;
		            endAngle = PI2;
		            var dir = anticlockwise ? 1 : -1;
		            if (x >= roots[0] + cx && x <= roots[1] + cx) {
		                return dir;
		            } else {
		                return 0;
		            }
		        }

		        if (anticlockwise) {
		            var tmp = startAngle;
		            startAngle = normalizeRadian(endAngle);
		            endAngle = normalizeRadian(tmp);
		        }
		        else {
		            startAngle = normalizeRadian(startAngle);
		            endAngle = normalizeRadian(endAngle);
		        }
		        if (startAngle > endAngle) {
		            endAngle += PI2;
		        }

		        var w = 0;
		        for (var i = 0; i < 2; i++) {
		            var x_ = roots[i];
		            if (x_ + cx > x) {
		                var angle = Math.atan2(y, x_);
		                var dir = anticlockwise ? 1 : -1;
		                if (angle < 0) {
		                    angle = PI2 + angle;
		                }
		                if (
		                    (angle >= startAngle && angle <= endAngle)
		                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)
		                ) {
		                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
		                        dir = -dir;
		                    }
		                    w += dir;
		                }
		            }
		        }
		        return w;
		    }

		    function containPath(data, lineWidth, isStroke, x, y) {
		        var w = 0;
		        var xi = 0;
		        var yi = 0;
		        var x0 = 0;
		        var y0 = 0;

		        for (var i = 0; i < data.length;) {
		            var cmd = data[i++];
		            // Begin a new subpath
		            if (cmd === CMD.M && i > 1) {
		                // Close previous subpath
		                if (!isStroke) {
		                    w += windingLine(xi, yi, x0, y0, x, y);
		                }
		                // 如果被任何一个 subpath 包含
		                if (w !== 0) {
		                    return true;
		                }
		            }

		            if (i == 1) {
		                // 如果第一个命令是 L, C, Q
		                // 则 previous point 同绘制命令的第一个 point
		                //
		                // 第一个命令为 Arc 的情况下会在后面特殊处理
		                xi = data[i];
		                yi = data[i + 1];

		                x0 = xi;
		                y0 = yi;
		            }

		            switch (cmd) {
		                case CMD.M:
		                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
		                    // 在 closePath 的时候使用
		                    x0 = data[i++];
		                    y0 = data[i++];
		                    xi = x0;
		                    yi = y0;
		                    break;
		                case CMD.L:
		                    if (isStroke) {
		                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
		                            return true;
		                        }
		                    }
		                    else {
		                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
		                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
		                    }
		                    xi = data[i++];
		                    yi = data[i++];
		                    break;
		                case CMD.C:
		                    if (isStroke) {
		                        if (cubic.containStroke(xi, yi,
		                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
		                            lineWidth, x, y
		                        )) {
		                            return true;
		                        }
		                    }
		                    else {
		                        w += windingCubic(
		                            xi, yi,
		                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
		                            x, y
		                        ) || 0;
		                    }
		                    xi = data[i++];
		                    yi = data[i++];
		                    break;
		                case CMD.Q:
		                    if (isStroke) {
		                        if (quadratic.containStroke(xi, yi,
		                            data[i++], data[i++], data[i], data[i + 1],
		                            lineWidth, x, y
		                        )) {
		                            return true;
		                        }
		                    }
		                    else {
		                        w += windingQuadratic(
		                            xi, yi,
		                            data[i++], data[i++], data[i], data[i + 1],
		                            x, y
		                        ) || 0;
		                    }
		                    xi = data[i++];
		                    yi = data[i++];
		                    break;
		                case CMD.A:
		                    // TODO Arc 判断的开销比较大
		                    var cx = data[i++];
		                    var cy = data[i++];
		                    var rx = data[i++];
		                    var ry = data[i++];
		                    var theta = data[i++];
		                    var dTheta = data[i++];
		                    // TODO Arc 旋转
		                    var psi = data[i++];
		                    var anticlockwise = 1 - data[i++];
		                    var x1 = Math.cos(theta) * rx + cx;
		                    var y1 = Math.sin(theta) * ry + cy;
		                    // 不是直接使用 arc 命令
		                    if (i > 1) {
		                        w += windingLine(xi, yi, x1, y1, x, y);
		                    }
		                    else {
		                        // 第一个命令起点还未定义
		                        x0 = x1;
		                        y0 = y1;
		                    }
		                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
		                    var _x = (x - cx) * ry / rx + cx;
		                    if (isStroke) {
		                        if (arc.containStroke(
		                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
		                            lineWidth, _x, y
		                        )) {
		                            return true;
		                        }
		                    }
		                    else {
		                        w += windingArc(
		                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
		                            _x, y
		                        );
		                    }
		                    xi = Math.cos(theta + dTheta) * rx + cx;
		                    yi = Math.sin(theta + dTheta) * ry + cy;
		                    break;
		                case CMD.R:
		                    x0 = xi = data[i++];
		                    y0 = yi = data[i++];
		                    var width = data[i++];
		                    var height = data[i++];
		                    var x1 = x0 + width;
		                    var y1 = y0 + height;
		                    if (isStroke) {
		                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)
		                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)
		                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)
		                          || containStroke(x0, y1, x1, y1, lineWidth, x, y)
		                        ) {
		                            return true;
		                        }
		                    }
		                    else {
		                        // FIXME Clockwise ?
		                        w += windingLine(x1, y0, x1, y1, x, y);
		                        w += windingLine(x0, y1, x0, y0, x, y);
		                    }
		                    break;
		                case CMD.Z:
		                    if (isStroke) {
		                        if (containStroke(
		                            xi, yi, x0, y0, lineWidth, x, y
		                        )) {
		                            return true;
		                        }
		                    }
		                    else {
		                        // Close a subpath
		                        w += windingLine(xi, yi, x0, y0, x, y);
		                        // 如果被任何一个 subpath 包含
		                        if (w !== 0) {
		                            return true;
		                        }
		                    }
		                    xi = x0;
		                    yi = y0;
		                    break;
		            }
		        }
		        if (!isStroke && !isAroundEqual(yi, y0)) {
		            w += windingLine(xi, yi, x0, y0, x, y) || 0;
		        }
		        return w !== 0;
		    }

		    module.exports = {
		        contain: function (pathData, x, y) {
		            return containPath(pathData, 0, false, x, y);
		        },

		        containStroke: function (pathData, lineWidth, x, y) {
		            return containPath(pathData, lineWidth, true, x, y);
		        }
		    };


	/***/ },
	/* 52 */
	/***/ function(module, exports) {

		
		    module.exports = {
		        /**
		         * 线段包含判断
		         * @param  {number}  x0
		         * @param  {number}  y0
		         * @param  {number}  x1
		         * @param  {number}  y1
		         * @param  {number}  lineWidth
		         * @param  {number}  x
		         * @param  {number}  y
		         * @return {boolean}
		         */
		        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {
		            if (lineWidth === 0) {
		                return false;
		            }
		            var _l = lineWidth;
		            var _a = 0;
		            var _b = x0;
		            // Quick reject
		            if (
		                (y > y0 + _l && y > y1 + _l)
		                || (y < y0 - _l && y < y1 - _l)
		                || (x > x0 + _l && x > x1 + _l)
		                || (x < x0 - _l && x < x1 - _l)
		            ) {
		                return false;
		            }

		            if (x0 !== x1) {
		                _a = (y0 - y1) / (x0 - x1);
		                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;
		            }
		            else {
		                return Math.abs(x - x0) <= _l / 2;
		            }
		            var tmp = _a * x - y + _b;
		            var _s = tmp * tmp / (_a * _a + 1);
		            return _s <= _l / 2 * _l / 2;
		        }
		    };


	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var curve = __webpack_require__(49);

		    module.exports = {
		        /**
		         * 三次贝塞尔曲线描边包含判断
		         * @param  {number}  x0
		         * @param  {number}  y0
		         * @param  {number}  x1
		         * @param  {number}  y1
		         * @param  {number}  x2
		         * @param  {number}  y2
		         * @param  {number}  x3
		         * @param  {number}  y3
		         * @param  {number}  lineWidth
		         * @param  {number}  x
		         * @param  {number}  y
		         * @return {boolean}
		         */
		        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
		            if (lineWidth === 0) {
		                return false;
		            }
		            var _l = lineWidth;
		            // Quick reject
		            if (
		                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)
		                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)
		                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)
		                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)
		            ) {
		                return false;
		            }
		            var d = curve.cubicProjectPoint(
		                x0, y0, x1, y1, x2, y2, x3, y3,
		                x, y, null
		            );
		            return d <= _l / 2;
		        }
		    };


	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var curve = __webpack_require__(49);

		    module.exports = {
		        /**
		         * 二次贝塞尔曲线描边包含判断
		         * @param  {number}  x0
		         * @param  {number}  y0
		         * @param  {number}  x1
		         * @param  {number}  y1
		         * @param  {number}  x2
		         * @param  {number}  y2
		         * @param  {number}  lineWidth
		         * @param  {number}  x
		         * @param  {number}  y
		         * @return {boolean}
		         */
		        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
		            if (lineWidth === 0) {
		                return false;
		            }
		            var _l = lineWidth;
		            // Quick reject
		            if (
		                (y > y0 + _l && y > y1 + _l && y > y2 + _l)
		                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)
		                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)
		                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)
		            ) {
		                return false;
		            }
		            var d = curve.quadraticProjectPoint(
		                x0, y0, x1, y1, x2, y2,
		                x, y, null
		            );
		            return d <= _l / 2;
		        }
		    };


	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var normalizeRadian = __webpack_require__(56).normalizeRadian;
		    var PI2 = Math.PI * 2;

		    module.exports = {
		        /**
		         * 圆弧描边包含判断
		         * @param  {number}  cx
		         * @param  {number}  cy
		         * @param  {number}  r
		         * @param  {number}  startAngle
		         * @param  {number}  endAngle
		         * @param  {boolean}  anticlockwise
		         * @param  {number} lineWidth
		         * @param  {number}  x
		         * @param  {number}  y
		         * @return {Boolean}
		         */
		        containStroke: function (
		            cx, cy, r, startAngle, endAngle, anticlockwise,
		            lineWidth, x, y
		        ) {

		            if (lineWidth === 0) {
		                return false;
		            }
		            var _l = lineWidth;

		            x -= cx;
		            y -= cy;
		            var d = Math.sqrt(x * x + y * y);

		            if ((d - _l > r) || (d + _l < r)) {
		                return false;
		            }
		            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
		                // Is a circle
		                return true;
		            }
		            if (anticlockwise) {
		                var tmp = startAngle;
		                startAngle = normalizeRadian(endAngle);
		                endAngle = normalizeRadian(tmp);
		            } else {
		                startAngle = normalizeRadian(startAngle);
		                endAngle = normalizeRadian(endAngle);
		            }
		            if (startAngle > endAngle) {
		                endAngle += PI2;
		            }

		            var angle = Math.atan2(y, x);
		            if (angle < 0) {
		                angle += PI2;
		            }
		            return (angle >= startAngle && angle <= endAngle)
		                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);
		        }
		    };


	/***/ },
	/* 56 */
	/***/ function(module, exports) {

		

		    var PI2 = Math.PI * 2;
		    module.exports = {
		        normalizeRadian: function(angle) {
		            angle %= PI2;
		            if (angle < 0) {
		                angle += PI2;
		            }
		            return angle;
		        }
		    };


	/***/ },
	/* 57 */
	/***/ function(module, exports) {

		
		    module.exports = function windingLine(x0, y0, x1, y1, x, y) {
		        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {
		            return 0;
		        }
		        if (y1 === y0) {
		            return 0;
		        }
		        var dir = y1 < y0 ? 1 : -1;
		        var t = (y - y0) / (y1 - y0);
		        var x_ = t * (x1 - x0) + x0;

		        return x_ > x ? dir : 0;
		    };


	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var CMD = __webpack_require__(48).CMD;
		    var vec2 = __webpack_require__(16);
		    var v2ApplyTransform = vec2.applyTransform;

		    var points = [[], [], []];
		    var mathSqrt = Math.sqrt;
		    var mathAtan2 = Math.atan2;
		    function transformPath(path, m) {
		        var data = path.data;
		        var cmd;
		        var nPoint;
		        var i;
		        var j;
		        var k;
		        var p;

		        var M = CMD.M;
		        var C = CMD.C;
		        var L = CMD.L;
		        var R = CMD.R;
		        var A = CMD.A;
		        var Q = CMD.Q;

		        for (i = 0, j = 0; i < data.length;) {
		            cmd = data[i++];
		            j = i;
		            nPoint = 0;

		            switch (cmd) {
		                case M:
		                    nPoint = 1;
		                    break;
		                case L:
		                    nPoint = 1;
		                    break;
		                case C:
		                    nPoint = 3;
		                    break;
		                case Q:
		                    nPoint = 2;
		                    break;
		                case A:
		                    var x = m[4];
		                    var y = m[5];
		                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
		                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
		                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);
		                    // cx
		                    data[i++] += x;
		                    // cy
		                    data[i++] += y;
		                    // Scale rx and ry
		                    // FIXME Assume psi is 0 here
		                    data[i++] *= sx;
		                    data[i++] *= sy;

		                    // Start angle
		                    data[i++] += angle;
		                    // end angle
		                    data[i++] += angle;
		                    // FIXME psi
		                    i += 2;
		                    j = i;
		                    break;
		                case R:
		                    // x0, y0
		                    p[0] = data[i++];
		                    p[1] = data[i++];
		                    v2ApplyTransform(p, p, m);
		                    data[j++] = p[0];
		                    data[j++] = p[1];
		                    // x1, y1
		                    p[0] += data[i++];
		                    p[1] += data[i++];
		                    v2ApplyTransform(p, p, m);
		                    data[j++] = p[0];
		                    data[j++] = p[1];
		            }

		            for (k = 0; k < nPoint; k++) {
		                var p = points[k];
		                p[0] = data[i++];
		                p[1] = data[i++];

		                v2ApplyTransform(p, p, m);
		                // Write back
		                data[j++] = p[0];
		                data[j++] = p[1];
		            }
		        }
		    }

		    module.exports = transformPath;


	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Image element
		 * @module zrender/graphic/Image
		 */



		    var Displayable = __webpack_require__(45);
		    var BoundingRect = __webpack_require__(15);
		    var zrUtil = __webpack_require__(3);
		    var roundRectHelper = __webpack_require__(60);

		    var LRU = __webpack_require__(61);
		    var globalImageCache = new LRU(50);
		    /**
		     * @alias zrender/graphic/Image
		     * @extends module:zrender/graphic/Displayable
		     * @constructor
		     * @param {Object} opts
		     */
		    function ZImage(opts) {
		        Displayable.call(this, opts);
		    }

		    ZImage.prototype = {

		        constructor: ZImage,

		        type: 'image',

		        brush: function (ctx) {
		            var style = this.style;
		            var src = style.image;
		            var image;
		            // style.image is a url string
		            if (typeof src === 'string') {
		                image = this._image;
		            }
		            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas
		            else {
		                image = src;
		            }
		            // FIXME Case create many images with src
		            if (!image && src) {
		                // Try get from global image cache
		                var cachedImgObj = globalImageCache.get(src);
		                if (!cachedImgObj) {
		                    // Create a new image
		                    image = new Image();
		                    image.onload = function () {
		                        image.onload = null;
		                        for (var i = 0; i < cachedImgObj.pending.length; i++) {
		                            cachedImgObj.pending[i].dirty();
		                        }
		                    };
		                    cachedImgObj = {
		                        image: image,
		                        pending: [this]
		                    };
		                    image.src = src;
		                    globalImageCache.put(src, cachedImgObj);
		                    this._image = image;
		                    return;
		                }
		                else {
		                    image = cachedImgObj.image;
		                    this._image = image;
		                    // Image is not complete finish, add to pending list
		                    if (!image.width || !image.height) {
		                        cachedImgObj.pending.push(this);
		                        return;
		                    }
		                }
		            }

		            if (image) {
		                // 图片已经加载完成
		                // if (image.nodeName.toUpperCase() == 'IMG') {
		                //     if (!image.complete) {
		                //         return;
		                //     }
		                // }
		                // Else is canvas

		                var width = style.width || image.width;
		                var height = style.height || image.height;
		                var x = style.x || 0;
		                var y = style.y || 0;
		                // 图片加载失败
		                if (!image.width || !image.height) {
		                    return;
		                }

		                ctx.save();

		                style.bind(ctx);

		                // 设置transform
		                this.setTransform(ctx);

		                if (style.r) {
		                    // Border radius clipping
		                    // FIXME
		                    ctx.beginPath();
		                    roundRectHelper.buildPath(ctx, style);
		                    ctx.clip();
		                }

		                if (style.sWidth && style.sHeight) {
		                    var sx = style.sx || 0;
		                    var sy = style.sy || 0;
		                    ctx.drawImage(
		                        image,
		                        sx, sy, style.sWidth, style.sHeight,
		                        x, y, width, height
		                    );
		                }
		                else if (style.sx && style.sy) {
		                    var sx = style.sx;
		                    var sy = style.sy;
		                    var sWidth = width - sx;
		                    var sHeight = height - sy;
		                    ctx.drawImage(
		                        image,
		                        sx, sy, sWidth, sHeight,
		                        x, y, width, height
		                    );
		                }
		                else {
		                    ctx.drawImage(image, x, y, width, height);
		                }

		                // 如果没设置宽和高的话自动根据图片宽高设置
		                if (style.width == null) {
		                    style.width = width;
		                }
		                if (style.height == null) {
		                    style.height = height;
		                }

		                // Draw rect text
		                if (style.text != null) {
		                    this.drawRectText(ctx, this.getBoundingRect());
		                }

		                ctx.restore();
		            }
		        },

		        getBoundingRect: function () {
		            var style = this.style;
		            if (! this._rect) {
		                this._rect = new BoundingRect(
		                    style.x || 0, style.y || 0, style.width || 0, style.height || 0
		                );
		            }
		            return this._rect;
		        }
		    };

		    zrUtil.inherits(ZImage, Displayable);

		    module.exports = ZImage;


	/***/ },
	/* 60 */
	/***/ function(module, exports) {

		

		    module.exports = {
		        buildPath: function (ctx, shape) {
		            var x = shape.x;
		            var y = shape.y;
		            var width = shape.width;
		            var height = shape.height;
		            var r = shape.r;
		            var r1;
		            var r2;
		            var r3;
		            var r4;

		            // Convert width and height to positive for better borderRadius
		            if (width < 0) {
		                x = x + width;
		                width = -width;
		            }
		            if (height < 0) {
		                y = y + height;
		                height = -height;
		            }

		            if (typeof r === 'number') {
		                r1 = r2 = r3 = r4 = r;
		            }
		            else if (r instanceof Array) {
		                if (r.length === 1) {
		                    r1 = r2 = r3 = r4 = r[0];
		                }
		                else if (r.length === 2) {
		                    r1 = r3 = r[0];
		                    r2 = r4 = r[1];
		                }
		                else if (r.length === 3) {
		                    r1 = r[0];
		                    r2 = r4 = r[1];
		                    r3 = r[2];
		                }
		                else {
		                    r1 = r[0];
		                    r2 = r[1];
		                    r3 = r[2];
		                    r4 = r[3];
		                }
		            }
		            else {
		                r1 = r2 = r3 = r4 = 0;
		            }

		            var total;
		            if (r1 + r2 > width) {
		                total = r1 + r2;
		                r1 *= width / total;
		                r2 *= width / total;
		            }
		            if (r3 + r4 > width) {
		                total = r3 + r4;
		                r3 *= width / total;
		                r4 *= width / total;
		            }
		            if (r2 + r3 > height) {
		                total = r2 + r3;
		                r2 *= height / total;
		                r3 *= height / total;
		            }
		            if (r1 + r4 > height) {
		                total = r1 + r4;
		                r1 *= height / total;
		                r4 *= height / total;
		            }
		            ctx.moveTo(x + r1, y);
		            ctx.lineTo(x + width - r2, y);
		            r2 !== 0 && ctx.quadraticCurveTo(
		                x + width, y, x + width, y + r2
		            );
		            ctx.lineTo(x + width, y + height - r3);
		            r3 !== 0 && ctx.quadraticCurveTo(
		                x + width, y + height, x + width - r3, y + height
		            );
		            ctx.lineTo(x + r4, y + height);
		            r4 !== 0 && ctx.quadraticCurveTo(
		                x, y + height, x, y + height - r4
		            );
		            ctx.lineTo(x, y + r1);
		            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
		        }
		    };


	/***/ },
	/* 61 */
	/***/ function(module, exports) {

		// Simple LRU cache use doubly linked list
		// @module zrender/core/LRU


		    /**
		     * Simple double linked list. Compared with array, it has O(1) remove operation.
		     * @constructor
		     */
		    var LinkedList = function() {

		        /**
		         * @type {module:zrender/core/LRU~Entry}
		         */
		        this.head = null;

		        /**
		         * @type {module:zrender/core/LRU~Entry}
		         */
		        this.tail = null;

		        this._len = 0;
		    };

		    var linkedListProto = LinkedList.prototype;
		    /**
		     * Insert a new value at the tail
		     * @param  {} val
		     * @return {module:zrender/core/LRU~Entry}
		     */
		    linkedListProto.insert = function(val) {
		        var entry = new Entry(val);
		        this.insertEntry(entry);
		        return entry;
		    };

		    /**
		     * Insert an entry at the tail
		     * @param  {module:zrender/core/LRU~Entry} entry
		     */
		    linkedListProto.insertEntry = function(entry) {
		        if (!this.head) {
		            this.head = this.tail = entry;
		        }
		        else {
		            this.tail.next = entry;
		            entry.prev = this.tail;
		            this.tail = entry;
		        }
		        this._len++;
		    };

		    /**
		     * Remove entry.
		     * @param  {module:zrender/core/LRU~Entry} entry
		     */
		    linkedListProto.remove = function(entry) {
		        var prev = entry.prev;
		        var next = entry.next;
		        if (prev) {
		            prev.next = next;
		        }
		        else {
		            // Is head
		            this.head = next;
		        }
		        if (next) {
		            next.prev = prev;
		        }
		        else {
		            // Is tail
		            this.tail = prev;
		        }
		        entry.next = entry.prev = null;
		        this._len--;
		    };

		    /**
		     * @return {number}
		     */
		    linkedListProto.len = function() {
		        return this._len;
		    };

		    /**
		     * @constructor
		     * @param {} val
		     */
		    var Entry = function(val) {
		        /**
		         * @type {}
		         */
		        this.value = val;

		        /**
		         * @type {module:zrender/core/LRU~Entry}
		         */
		        this.next;

		        /**
		         * @type {module:zrender/core/LRU~Entry}
		         */
		        this.prev;
		    };

		    /**
		     * LRU Cache
		     * @constructor
		     * @alias module:zrender/core/LRU
		     */
		    var LRU = function(maxSize) {

		        this._list = new LinkedList();

		        this._map = {};

		        this._maxSize = maxSize || 10;
		    };

		    var LRUProto = LRU.prototype;

		    /**
		     * @param  {string} key
		     * @param  {} value
		     */
		    LRUProto.put = function(key, value) {
		        var list = this._list;
		        var map = this._map;
		        if (map[key] == null) {
		            var len = list.len();
		            if (len >= this._maxSize && len > 0) {
		                // Remove the least recently used
		                var leastUsedEntry = list.head;
		                list.remove(leastUsedEntry);
		                delete map[leastUsedEntry.key];
		            }

		            var entry = list.insert(value);
		            entry.key = key;
		            map[key] = entry;
		        }
		    };

		    /**
		     * @param  {string} key
		     * @return {}
		     */
		    LRUProto.get = function(key) {
		        var entry = this._map[key];
		        var list = this._list;
		        if (entry != null) {
		            // Put the latest used entry in the tail
		            if (entry !== list.tail) {
		                list.remove(entry);
		                list.insertEntry(entry);
		            }

		            return entry.value;
		        }
		    };

		    /**
		     * Clear the cache
		     */
		    LRUProto.clear = function() {
		        this._list.clear();
		        this._map = {};
		    };

		    module.exports = LRU;


	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Text element
		 * @module zrender/graphic/Text
		 *
		 * TODO Wrapping
		 */



		    var Displayable = __webpack_require__(45);
		    var zrUtil = __webpack_require__(3);
		    var textContain = __webpack_require__(14);

		    /**
		     * @alias zrender/graphic/Text
		     * @extends module:zrender/graphic/Displayable
		     * @constructor
		     * @param {Object} opts
		     */
		    var Text = function (opts) {
		        Displayable.call(this, opts);
		    };

		    Text.prototype = {

		        constructor: Text,

		        type: 'text',

		        brush: function (ctx) {
		            var style = this.style;
		            var x = style.x || 0;
		            var y = style.y || 0;
		            // Convert to string
		            var text = style.text;
		            var textFill = style.fill;
		            var textStroke = style.stroke;

		            // Convert to string
		            text != null && (text += '');

		            if (text) {
		                ctx.save();

		                this.style.bind(ctx);
		                this.setTransform(ctx);

		                textFill && (ctx.fillStyle = textFill);
		                textStroke && (ctx.strokeStyle = textStroke);

		                ctx.font = style.textFont || style.font;
		                ctx.textAlign = style.textAlign;

		                if (style.textVerticalAlign) {
		                    var rect = textContain.getBoundingRect(
		                        text, ctx.font, style.textAlign, 'top'
		                    );
		                    // Ignore textBaseline
		                    ctx.textBaseline = 'top';
		                    switch (style.textVerticalAlign) {
		                        case 'middle':
		                            y -= rect.height / 2;
		                            break;
		                        case 'bottom':
		                            y -= rect.height;
		                            break;
		                        // 'top'
		                    }
		                }
		                else {
		                    ctx.textBaseline = style.textBaseline;
		                }
		                var lineHeight = textContain.measureText('国', ctx.font).width;

		                var textLines = text.split('\n');
		                for (var i = 0; i < textLines.length; i++) {
		                    textFill && ctx.fillText(textLines[i], x, y);
		                    textStroke && ctx.strokeText(textLines[i], x, y);
		                    y += lineHeight;
		                }

		                ctx.restore();
		            }
		        },

		        getBoundingRect: function () {
		            if (!this._rect) {
		                var style = this.style;
		                var textVerticalAlign = style.textVerticalAlign;
		                var rect = textContain.getBoundingRect(
		                    style.text + '', style.textFont || style.font, style.textAlign,
		                    textVerticalAlign ? 'top' : style.textBaseline
		                );
		                switch (textVerticalAlign) {
		                    case 'middle':
		                        rect.y -= rect.height / 2;
		                        break;
		                    case 'bottom':
		                        rect.y -= rect.height;
		                        break;
		                }
		                rect.x += style.x || 0;
		                rect.y += style.y || 0;
		                this._rect = rect;
		            }
		            return this._rect;
		        }
		    };

		    zrUtil.inherits(Text, Displayable);

		    module.exports = Text;


	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * 圆形
		 * @module zrender/shape/Circle
		 */



		    module.exports = __webpack_require__(44).extend({
		        
		        type: 'circle',

		        shape: {
		            cx: 0,
		            cy: 0,
		            r: 0
		        },

		        buildPath : function (ctx, shape) {
		            // Better stroking in ShapeBundle
		            ctx.moveTo(shape.cx + shape.r, shape.cy);
		            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
		            return;
		        }
		    });



	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 扇形
		 * @module zrender/graphic/shape/Sector
		 */

		// FIXME clockwise seems wrong


		    module.exports = __webpack_require__(44).extend({

		        type: 'sector',

		        shape: {

		            cx: 0,

		            cy: 0,

		            r0: 0,

		            r: 0,

		            startAngle: 0,

		            endAngle: Math.PI * 2,

		            clockwise: true
		        },

		        buildPath: function (ctx, shape) {

		            var x = shape.cx;
		            var y = shape.cy;
		            var r0 = Math.max(shape.r0 || 0, 0);
		            var r = Math.max(shape.r, 0);
		            var startAngle = shape.startAngle;
		            var endAngle = shape.endAngle;
		            var clockwise = shape.clockwise;

		            var unitX = Math.cos(startAngle);
		            var unitY = Math.sin(startAngle);

		            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);

		            ctx.lineTo(unitX * r + x, unitY * r + y);

		            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);

		            ctx.lineTo(
		                Math.cos(endAngle) * r0 + x,
		                Math.sin(endAngle) * r0 + y
		            );

		            if (r0 !== 0) {
		                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
		            }

		            ctx.closePath();
		        }
		    });



	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 圆环
		 * @module zrender/graphic/shape/Ring
		 */


		    module.exports = __webpack_require__(44).extend({

		        type: 'ring',

		        shape: {
		            cx: 0,
		            cy: 0,
		            r: 0,
		            r0: 0
		        },

		        buildPath: function (ctx, shape) {
		            var x = shape.cx;
		            var y = shape.cy;
		            var PI2 = Math.PI * 2;
		            ctx.moveTo(x + shape.r, y);
		            ctx.arc(x, y, shape.r, 0, PI2, false);
		            ctx.moveTo(x + shape.r0, y);
		            ctx.arc(x, y, shape.r0, 0, PI2, true);
		        }
		    });



	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 多边形
		 * @module zrender/shape/Polygon
		 */


		    var polyHelper = __webpack_require__(67);

		    module.exports = __webpack_require__(44).extend({
		        
		        type: 'polygon',

		        shape: {
		            points: null,

		            smooth: false,

		            smoothConstraint: null
		        },

		        buildPath: function (ctx, shape) {
		            polyHelper.buildPath(ctx, shape, true);
		        }
		    });


	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var smoothSpline = __webpack_require__(68);
		    var smoothBezier = __webpack_require__(69);

		    module.exports = {
		        buildPath: function (ctx, shape, closePath) {
		            var points = shape.points;
		            var smooth = shape.smooth;
		            if (points && points.length >= 2) {
		                if (smooth && smooth !== 'spline') {
		                    var controlPoints = smoothBezier(
		                        points, smooth, closePath, shape.smoothConstraint
		                    );

		                    ctx.moveTo(points[0][0], points[0][1]);
		                    var len = points.length;
		                    for (var i = 0; i < (closePath ? len : len - 1); i++) {
		                        var cp1 = controlPoints[i * 2];
		                        var cp2 = controlPoints[i * 2 + 1];
		                        var p = points[(i + 1) % len];
		                        ctx.bezierCurveTo(
		                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
		                        );
		                    }
		                }
		                else {
		                    if (smooth === 'spline') {
		                        points = smoothSpline(points, closePath);
		                    }

		                    ctx.moveTo(points[0][0], points[0][1]);
		                    for (var i = 1, l = points.length; i < l; i++) {
		                        ctx.lineTo(points[i][0], points[i][1]);
		                    }
		                }

		                closePath && ctx.closePath();
		            }
		        }
		    };


	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Catmull-Rom spline 插值折线
		 * @module zrender/shape/util/smoothSpline
		 * @author pissang (https://www.github.com/pissang)
		 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
		 *         errorrik (errorrik@gmail.com)
		 */

		    var vec2 = __webpack_require__(16);

		    /**
		     * @inner
		     */
		    function interpolate(p0, p1, p2, p3, t, t2, t3) {
		        var v0 = (p2 - p0) * 0.5;
		        var v1 = (p3 - p1) * 0.5;
		        return (2 * (p1 - p2) + v0 + v1) * t3
		                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
		                + v0 * t + p1;
		    }

		    /**
		     * @alias module:zrender/shape/util/smoothSpline
		     * @param {Array} points 线段顶点数组
		     * @param {boolean} isLoop
		     * @return {Array}
		     */
		    module.exports = function (points, isLoop) {
		        var len = points.length;
		        var ret = [];

		        var distance = 0;
		        for (var i = 1; i < len; i++) {
		            distance += vec2.distance(points[i - 1], points[i]);
		        }

		        var segs = distance / 2;
		        segs = segs < len ? len : segs;
		        for (var i = 0; i < segs; i++) {
		            var pos = i / (segs - 1) * (isLoop ? len : len - 1);
		            var idx = Math.floor(pos);

		            var w = pos - idx;

		            var p0;
		            var p1 = points[idx % len];
		            var p2;
		            var p3;
		            if (!isLoop) {
		                p0 = points[idx === 0 ? idx : idx - 1];
		                p2 = points[idx > len - 2 ? len - 1 : idx + 1];
		                p3 = points[idx > len - 3 ? len - 1 : idx + 2];
		            }
		            else {
		                p0 = points[(idx - 1 + len) % len];
		                p2 = points[(idx + 1) % len];
		                p3 = points[(idx + 2) % len];
		            }

		            var w2 = w * w;
		            var w3 = w * w2;

		            ret.push([
		                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),
		                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)
		            ]);
		        }
		        return ret;
		    };



	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 贝塞尔平滑曲线
		 * @module zrender/shape/util/smoothBezier
		 * @author pissang (https://www.github.com/pissang)
		 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
		 *         errorrik (errorrik@gmail.com)
		 */


		    var vec2 = __webpack_require__(16);
		    var v2Min = vec2.min;
		    var v2Max = vec2.max;
		    var v2Scale = vec2.scale;
		    var v2Distance = vec2.distance;
		    var v2Add = vec2.add;

		    /**
		     * 贝塞尔平滑曲线
		     * @alias module:zrender/shape/util/smoothBezier
		     * @param {Array} points 线段顶点数组
		     * @param {number} smooth 平滑等级, 0-1
		     * @param {boolean} isLoop
		     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
		     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
		     *                           整个折线的包围盒做一个并集用来约束控制点。
		     * @param {Array} 计算出来的控制点数组
		     */
		    module.exports = function (points, smooth, isLoop, constraint) {
		        var cps = [];

		        var v = [];
		        var v1 = [];
		        var v2 = [];
		        var prevPoint;
		        var nextPoint;

		        var min, max;
		        if (constraint) {
		            min = [Infinity, Infinity];
		            max = [-Infinity, -Infinity];
		            for (var i = 0, len = points.length; i < len; i++) {
		                v2Min(min, min, points[i]);
		                v2Max(max, max, points[i]);
		            }
		            // 与指定的包围盒做并集
		            v2Min(min, min, constraint[0]);
		            v2Max(max, max, constraint[1]);
		        }

		        for (var i = 0, len = points.length; i < len; i++) {
		            var point = points[i];

		            if (isLoop) {
		                prevPoint = points[i ? i - 1 : len - 1];
		                nextPoint = points[(i + 1) % len];
		            }
		            else {
		                if (i === 0 || i === len - 1) {
		                    cps.push(vec2.clone(points[i]));
		                    continue;
		                }
		                else {
		                    prevPoint = points[i - 1];
		                    nextPoint = points[i + 1];
		                }
		            }

		            vec2.sub(v, nextPoint, prevPoint);

		            // use degree to scale the handle length
		            v2Scale(v, v, smooth);

		            var d0 = v2Distance(point, prevPoint);
		            var d1 = v2Distance(point, nextPoint);
		            var sum = d0 + d1;
		            if (sum !== 0) {
		                d0 /= sum;
		                d1 /= sum;
		            }

		            v2Scale(v1, v, -d0);
		            v2Scale(v2, v, d1);
		            var cp0 = v2Add([], point, v1);
		            var cp1 = v2Add([], point, v2);
		            if (constraint) {
		                v2Max(cp0, cp0, min);
		                v2Min(cp0, cp0, max);
		                v2Max(cp1, cp1, min);
		                v2Min(cp1, cp1, max);
		            }
		            cps.push(cp0);
		            cps.push(cp1);
		        }

		        if (isLoop) {
		            cps.push(cps.shift());
		        }

		        return cps;
		    };



	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module zrender/graphic/shape/Polyline
		 */


		    var polyHelper = __webpack_require__(67);

		    module.exports = __webpack_require__(44).extend({
		        
		        type: 'polyline',

		        shape: {
		            points: null,

		            smooth: false,

		            smoothConstraint: null
		        },

		        style: {
		            stroke: '#000',

		            fill: null
		        },

		        buildPath: function (ctx, shape) {
		            polyHelper.buildPath(ctx, shape, false);
		        }
		    });


	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 矩形
		 * @module zrender/graphic/shape/Rect
		 */


		    var roundRectHelper = __webpack_require__(60);

		    module.exports = __webpack_require__(44).extend({

		        type: 'rect',

		        shape: {
		            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
		            // r缩写为1         相当于 [1, 1, 1, 1]
		            // r缩写为[1]       相当于 [1, 1, 1, 1]
		            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
		            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
		            r: 0,

		            x: 0,
		            y: 0,
		            width: 0,
		            height: 0
		        },

		        buildPath: function (ctx, shape) {
		            var x = shape.x;
		            var y = shape.y;
		            var width = shape.width;
		            var height = shape.height;
		            if (!shape.r) {
		                ctx.rect(x, y, width, height);
		            }
		            else {
		                roundRectHelper.buildPath(ctx, shape);
		            }
		            ctx.closePath();
		            return;
		        }
		    });



	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 直线
		 * @module zrender/graphic/shape/Line
		 */

		    module.exports = __webpack_require__(44).extend({

		        type: 'line',

		        shape: {
		            // Start point
		            x1: 0,
		            y1: 0,
		            // End point
		            x2: 0,
		            y2: 0,

		            percent: 1
		        },

		        style: {
		            stroke: '#000',
		            fill: null
		        },

		        buildPath: function (ctx, shape) {
		            var x1 = shape.x1;
		            var y1 = shape.y1;
		            var x2 = shape.x2;
		            var y2 = shape.y2;
		            var percent = shape.percent;

		            if (percent === 0) {
		                return;
		            }

		            ctx.moveTo(x1, y1);

		            if (percent < 1) {
		                x2 = x1 * (1 - percent) + x2 * percent;
		                y2 = y1 * (1 - percent) + y2 * percent;
		            }
		            ctx.lineTo(x2, y2);
		        },

		        /**
		         * Get point at percent
		         * @param  {number} percent
		         * @return {Array.<number>}
		         */
		        pointAt: function (p) {
		            var shape = this.shape;
		            return [
		                shape.x1 * (1 - p) + shape.x2 * p,
		                shape.y1 * (1 - p) + shape.y2 * p
		            ];
		        }
		    });



	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * 贝塞尔曲线
		 * @module zrender/shape/BezierCurve
		 */


		    var curveTool = __webpack_require__(49);
		    var quadraticSubdivide = curveTool.quadraticSubdivide;
		    var cubicSubdivide = curveTool.cubicSubdivide;
		    var quadraticAt = curveTool.quadraticAt;
		    var cubicAt = curveTool.cubicAt;

		    var out = [];
		    module.exports = __webpack_require__(44).extend({

		        type: 'bezier-curve',

		        shape: {
		            x1: 0,
		            y1: 0,
		            x2: 0,
		            y2: 0,
		            cpx1: 0,
		            cpy1: 0,
		            // cpx2: 0,
		            // cpy2: 0

		            // Curve show percent, for animating
		            percent: 1
		        },

		        style: {
		            stroke: '#000',
		            fill: null
		        },

		        buildPath: function (ctx, shape) {
		            var x1 = shape.x1;
		            var y1 = shape.y1;
		            var x2 = shape.x2;
		            var y2 = shape.y2;
		            var cpx1 = shape.cpx1;
		            var cpy1 = shape.cpy1;
		            var cpx2 = shape.cpx2;
		            var cpy2 = shape.cpy2;
		            var percent = shape.percent;
		            if (percent === 0) {
		                return;
		            }

		            ctx.moveTo(x1, y1);

		            if (cpx2 == null || cpy2 == null) {
		                if (percent < 1) {
		                    quadraticSubdivide(
		                        x1, cpx1, x2, percent, out
		                    );
		                    cpx1 = out[1];
		                    x2 = out[2];
		                    quadraticSubdivide(
		                        y1, cpy1, y2, percent, out
		                    );
		                    cpy1 = out[1];
		                    y2 = out[2];
		                }

		                ctx.quadraticCurveTo(
		                    cpx1, cpy1,
		                    x2, y2
		                );
		            }
		            else {
		                if (percent < 1) {
		                    cubicSubdivide(
		                        x1, cpx1, cpx2, x2, percent, out
		                    );
		                    cpx1 = out[1];
		                    cpx2 = out[2];
		                    x2 = out[3];
		                    cubicSubdivide(
		                        y1, cpy1, cpy2, y2, percent, out
		                    );
		                    cpy1 = out[1];
		                    cpy2 = out[2];
		                    y2 = out[3];
		                }
		                ctx.bezierCurveTo(
		                    cpx1, cpy1,
		                    cpx2, cpy2,
		                    x2, y2
		                );
		            }
		        },

		        /**
		         * Get point at percent
		         * @param  {number} percent
		         * @return {Array.<number>}
		         */
		        pointAt: function (p) {
		            var shape = this.shape;
		            var cpx2 = shape.cpx2;
		            var cpy2 = shape.cpy2;
		            if (cpx2 === null || cpy2 === null) {
		                return [
		                    quadraticAt(shape.x1, shape.cpx1, shape.x2, p),
		                    quadraticAt(shape.y1, shape.cpy1, shape.y2, p)
		                ];
		            }
		            else {
		                return [
		                    cubicAt(shape.x1, shape.cpx1, shape.cpx1, shape.x2, p),
		                    cubicAt(shape.y1, shape.cpy1, shape.cpy1, shape.y2, p)
		                ];
		            }
		        }
		    });



	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * 圆弧
		 * @module zrender/graphic/shape/Arc
		 */
		 

		    module.exports = __webpack_require__(44).extend({

		        type: 'arc',

		        shape: {

		            cx: 0,

		            cy: 0,

		            r: 0,

		            startAngle: 0,

		            endAngle: Math.PI * 2,

		            clockwise: true
		        },

		        style: {

		            stroke: '#000',

		            fill: null
		        },

		        buildPath: function (ctx, shape) {

		            var x = shape.cx;
		            var y = shape.cy;
		            var r = Math.max(shape.r, 0);
		            var startAngle = shape.startAngle;
		            var endAngle = shape.endAngle;
		            var clockwise = shape.clockwise;

		            var unitX = Math.cos(startAngle);
		            var unitY = Math.sin(startAngle);

		            ctx.moveTo(unitX * r + x, unitY * r + y);
		            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
		        }
		    });


	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);

		    var Gradient = __webpack_require__(4);

		    /**
		     * x, y, x2, y2 are all percent from 0 to 1
		     * @param {number} [x=0]
		     * @param {number} [y=0]
		     * @param {number} [x2=1]
		     * @param {number} [y2=0]
		     * @param {Array.<Object>} colorStops
		     */
		    var LinearGradient = function (x, y, x2, y2, colorStops) {
		        this.x = x == null ? 0 : x;

		        this.y = y == null ? 0 : y;

		        this.x2 = x2 == null ? 1 : x2;

		        this.y2 = y2 == null ? 0 : y2;

		        Gradient.call(this, colorStops);
		    };

		    LinearGradient.prototype = {

		        constructor: LinearGradient,

		        type: 'linear',

		        updateCanvasGradient: function (shape, ctx) {
		            var rect = shape.getBoundingRect();
		            // var size =
		            var x = this.x * rect.width + rect.x;
		            var x2 = this.x2 * rect.width + rect.x;
		            var y = this.y * rect.height + rect.y;
		            var y2 = this.y2 * rect.height + rect.y;

		            var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);

		            var colorStops = this.colorStops;
		            for (var i = 0; i < colorStops.length; i++) {
		                canvasGradient.addColorStop(
		                    colorStops[i].offset, colorStops[i].color
		                );
		            }

		            this.canvasGradient = canvasGradient;
		        }

		    };

		    zrUtil.inherits(LinearGradient, Gradient);

		    module.exports = LinearGradient;


	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);

		    var Gradient = __webpack_require__(4);

		    /**
		     * x, y, r are all percent from 0 to 1
		     * @param {number} [x=0.5]
		     * @param {number} [y=0.5]
		     * @param {number} [r=0.5]
		     * @param {Array.<Object>} [colorStops]
		     */
		    var RadialGradient = function (x, y, r, colorStops) {
		        this.x = x == null ? 0.5 : x;

		        this.y = y == null ? 0.5 : y;

		        this.r = r == null ? 0.5 : r;

		        Gradient.call(this, colorStops);
		    };

		    RadialGradient.prototype = {

		        constructor: RadialGradient,

		        type: 'radial',

		        updateCanvasGradient: function (shape, ctx) {
		            var rect = shape.getBoundingRect();

		            var width = rect.width;
		            var height = rect.height;
		            var min = Math.min(width, height);
		            // var max = Math.max(width, height);

		            var x = this.x * width + rect.x;
		            var y = this.y * height + rect.y;
		            var r = this.r * min;

		            var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);

		            var colorStops = this.colorStops;
		            for (var i = 0; i < colorStops.length; i++) {
		                canvasGradient.addColorStop(
		                    colorStops[i].offset, colorStops[i].color
		                );
		            }

		            this.canvasGradient = canvasGradient;
		        }
		    };

		    zrUtil.inherits(RadialGradient, Gradient);

		    module.exports = RadialGradient;


	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

		/*!
		 * ZRender, a high performance 2d drawing library.
		 *
		 * Copyright (c) 2013, Baidu Inc.
		 * All rights reserved.
		 *
		 * LICENSE
		 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
		 */
		// Global defines

		    var guid = __webpack_require__(31);
		    var env = __webpack_require__(78);

		    var Handler = __webpack_require__(79);
		    var Storage = __webpack_require__(83);
		    var Animation = __webpack_require__(84);

		    var useVML = !env.canvasSupported;

		    var painterCtors = {
		        canvas: __webpack_require__(85)
		    };

		    var instances = {};    // ZRender实例map索引

		    var zrender = {};
		    /**
		     * @type {string}
		     */
		    zrender.version = '3.0.7';

		    /**
		     * Initializing a zrender instance
		     * @param {HTMLElement} dom
		     * @param {Object} opts
		     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
		     * @param {number} [opts.devicePixelRatio]
		     * @return {module:zrender/ZRender}
		     */
		    zrender.init = function(dom, opts) {
		        var zr = new ZRender(guid(), dom, opts);
		        instances[zr.id] = zr;
		        return zr;
		    };

		    /**
		     * Dispose zrender instance
		     * @param {module:zrender/ZRender} zr
		     */
		    zrender.dispose = function (zr) {
		        if (zr) {
		            zr.dispose();
		        }
		        else {
		            for (var key in instances) {
		                instances[key].dispose();
		            }
		            instances = {};
		        }

		        return zrender;
		    };

		    /**
		     * Get zrender instance by id
		     * @param {string} id zrender instance id
		     * @return {module:zrender/ZRender}
		     */
		    zrender.getInstance = function (id) {
		        return instances[id];
		    };

		    zrender.registerPainter = function (name, Ctor) {
		        painterCtors[name] = Ctor;
		    };

		    function delInstance(id) {
		        delete instances[id];
		    }

		    /**
		     * @module zrender/ZRender
		     */
		    /**
		     * @constructor
		     * @alias module:zrender/ZRender
		     * @param {string} id
		     * @param {HTMLDomElement} dom
		     * @param {Object} opts
		     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
		     * @param {number} [opts.devicePixelRatio]
		     */
		    var ZRender = function(id, dom, opts) {

		        opts = opts || {};

		        /**
		         * @type {HTMLDomElement}
		         */
		        this.dom = dom;

		        /**
		         * @type {string}
		         */
		        this.id = id;

		        var self = this;
		        var storage = new Storage();

		        var rendererType = opts.renderer;
		        if (useVML) {
		            if (!painterCtors.vml) {
		                throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
		            }
		            rendererType = 'vml';
		        }
		        else if (!rendererType || !painterCtors[rendererType]) {
		            rendererType = 'canvas';
		        }
		        var painter = new painterCtors[rendererType](dom, storage, opts);

		        this.storage = storage;
		        this.painter = painter;
		        if (!env.node) {
		            this.handler = new Handler(painter.getViewportRoot(), storage, painter);
		        }

		        /**
		         * @type {module:zrender/animation/Animation}
		         */
		        this.animation = new Animation({
		            stage: {
		                update: function () {
		                    if (self._needsRefresh) {
		                        self.refreshImmediately();
		                    }
		                }
		            }
		        });
		        this.animation.start();

		        /**
		         * @type {boolean}
		         * @private
		         */
		        this._needsRefresh;

		        // 修改 storage.delFromMap, 每次删除元素之前删除动画
		        // FIXME 有点ugly
		        var oldDelFromMap = storage.delFromMap;
		        var oldAddToMap = storage.addToMap;

		        storage.delFromMap = function (elId) {
		            var el = storage.get(elId);

		            oldDelFromMap.call(storage, elId);

		            el && el.removeSelfFromZr(self);
		        };

		        storage.addToMap = function (el) {
		            oldAddToMap.call(storage, el);

		            el.addSelfToZr(self);
		        };
		    };

		    ZRender.prototype = {

		        constructor: ZRender,
		        /**
		         * 获取实例唯一标识
		         * @return {string}
		         */
		        getId: function () {
		            return this.id;
		        },

		        /**
		         * 添加元素
		         * @param  {string|module:zrender/Element} el
		         */
		        add: function (el) {
		            this.storage.addRoot(el);
		            this._needsRefresh = true;
		        },

		        /**
		         * 删除元素
		         * @param  {string|module:zrender/Element} el
		         */
		        remove: function (el) {
		            this.storage.delRoot(el);
		            this._needsRefresh = true;
		        },

		        /**
		         * Change configuration of layer
		         * @param {string} zLevel
		         * @param {Object} config
		         * @param {string} [config.clearColor=0] Clear color
		         * @param {string} [config.motionBlur=false] If enable motion blur
		         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
		        */
		        configLayer: function (zLevel, config) {
		            this.painter.configLayer(zLevel, config);
		            this._needsRefresh = true;
		        },

		        /**
		         * Repaint the canvas immediately
		         */
		        refreshImmediately: function () {
		            // Clear needsRefresh ahead to avoid something wrong happens in refresh
		            // Or it will cause zrender refreshes again and again.
		            this._needsRefresh = false;
		            this.painter.refresh();
		            /**
		             * Avoid trigger zr.refresh in Element#beforeUpdate hook
		             */
		            this._needsRefresh = false;
		        },

		        /**
		         * Mark and repaint the canvas in the next frame of browser
		         */
		        refresh: function() {
		            this._needsRefresh = true;
		        },

		        /**
		         * Resize the canvas.
		         * Should be invoked when container size is changed
		         */
		        resize: function() {
		            this.painter.resize();
		            this.handler && this.handler.resize();
		        },

		        /**
		         * Stop and clear all animation immediately
		         */
		        clearAnimation: function () {
		            this.animation.clear();
		        },

		        /**
		         * Get container width
		         */
		        getWidth: function() {
		            return this.painter.getWidth();
		        },

		        /**
		         * Get container height
		         */
		        getHeight: function() {
		            return this.painter.getHeight();
		        },

		        /**
		         * Export the canvas as Base64 URL
		         * @param {string} type
		         * @param {string} [backgroundColor='#fff']
		         * @return {string} Base64 URL
		         */
		        toDataURL: function(type, backgroundColor, args) {
		            return this.painter.toDataURL(type, backgroundColor, args);
		        },

		        /**
		         * Converting a path to image.
		         * It has much better performance of drawing image rather than drawing a vector path.
		         * @param {module:zrender/graphic/Path} e
		         * @param {number} width
		         * @param {number} height
		         */
		        pathToImage: function(e, width, height) {
		            var id = guid();
		            return this.painter.pathToImage(id, e, width, height);
		        },

		        /**
		         * Set default cursor
		         * @param {string} cursorStyle 例如 crosshair
		         */
		        setDefaultCursorStyle: function (cursorStyle) {
		            this.handler.setDefaultCursorStyle(cursorStyle);
		        },

		        /**
		         * Bind event
		         *
		         * @param {string} eventName Event name
		         * @param {Function} eventHandler Handler function
		         * @param {Object} [context] Context object
		         */
		        on: function(eventName, eventHandler, context) {
		            this.handler && this.handler.on(eventName, eventHandler, context);
		        },

		        /**
		         * Unbind event
		         * @param {string} eventName Event name
		         * @param {Function} [eventHandler] Handler function
		         */
		        off: function(eventName, eventHandler) {
		            this.handler && this.handler.off(eventName, eventHandler);
		        },

		        /**
		         * Trigger event manually
		         *
		         * @param {string} eventName Event name
		         * @param {event=} event Event object
		         */
		        trigger: function (eventName, event) {
		            this.handler && this.handler.trigger(eventName, event);
		        },


		        /**
		         * Clear all objects and the canvas.
		         */
		        clear: function () {
		            this.storage.delRoot();
		            this.painter.clear();
		        },

		        /**
		         * Dispose self.
		         */
		        dispose: function () {
		            this.animation.stop();

		            this.clear();
		            this.storage.dispose();
		            this.painter.dispose();
		            this.handler && this.handler.dispose();

		            this.animation =
		            this.storage =
		            this.painter =
		            this.handler = null;

		            delInstance(this.id);
		        }
		    };

		    module.exports = zrender;



	/***/ },
	/* 78 */
	/***/ function(module, exports) {

		/**
		 * echarts设备环境识别
		 *
		 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
		 * @author firede[firede@firede.us]
		 * @desc thanks zepto.
		 */

		    var env = {};
		    if (typeof navigator === 'undefined') {
		        // In node
		        env = {
		            browser: {},
		            os: {},
		            node: true,
		            // Assume canvas is supported
		            canvasSupported: true
		        };
		    }
		    else {
		        env = detect(navigator.userAgent);
		    }

		    module.exports = env;

		    // Zepto.js
		    // (c) 2010-2013 Thomas Fuchs
		    // Zepto.js may be freely distributed under the MIT license.

		    function detect(ua) {
		        var os = {};
		        var browser = {};
		        var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
		        var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
		        var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
		        var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
		        var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
		        var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
		        var touchpad = webos && ua.match(/TouchPad/);
		        var kindle = ua.match(/Kindle\/([\d.]+)/);
		        var silk = ua.match(/Silk\/([\d._]+)/);
		        var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
		        var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
		        var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
		        var playbook = ua.match(/PlayBook/);
		        var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
		        var firefox = ua.match(/Firefox\/([\d.]+)/);
		        var safari = webkit && ua.match(/Mobile\//) && !chrome;
		        var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
		        var ie = ua.match(/MSIE\s([\d.]+)/)
		            // IE 11 Trident/7.0; rv:11.0
		            || ua.match(/Trident\/.+?rv:(([\d.]+))/);
		        var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

		        // Todo: clean this up with a better OS/browser seperation:
		        // - discern (more) between multiple browsers on android
		        // - decide if kindle fire in silk mode is android or not
		        // - Firefox on Android doesn't specify the Android version
		        // - possibly devide in os, device and browser hashes

		        if (browser.webkit = !!webkit) browser.version = webkit[1];

		        if (android) os.android = true, os.version = android[2];
		        if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
		        if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
		        if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
		        if (webos) os.webos = true, os.version = webos[2];
		        if (touchpad) os.touchpad = true;
		        if (blackberry) os.blackberry = true, os.version = blackberry[2];
		        if (bb10) os.bb10 = true, os.version = bb10[2];
		        if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
		        if (playbook) browser.playbook = true;
		        if (kindle) os.kindle = true, os.version = kindle[1];
		        if (silk) browser.silk = true, browser.version = silk[1];
		        if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
		        if (chrome) browser.chrome = true, browser.version = chrome[1];
		        if (firefox) browser.firefox = true, browser.version = firefox[1];
		        if (ie) browser.ie = true, browser.version = ie[1];
		        if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
		        if (webview) browser.webview = true;
		        if (ie) browser.ie = true, browser.version = ie[1];
		        if (edge) browser.edge = true, browser.version = edge[1];

		        os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
		            (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
		        os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 ||
		            (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
		            (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));

		        return {
		            browser: browser,
		            os: os,
		            node: false,
		            // 原生canvas支持，改极端点了
		            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
		            canvasSupported : document.createElement('canvas').getContext ? true : false,
		            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>
		            // works on most browsers
		            // IE10/11 does not support touch event, and MS Edge supports them but not by
		            // default, so we dont check navigator.maxTouchPoints for them here.
		            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
		            // <http://caniuse.com/#search=pointer%20event>.
		            pointerEventsSupported: 'onpointerdown' in window
		                // Firefox supports pointer but not by default,
		                // only MS browsers are reliable on pointer events currently.
		                && (browser.edge || (browser.ie && browser.version >= 10))
		        };
		    }


	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * Handler
		 * @module zrender/Handler
		 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
		 *         errorrik (errorrik@gmail.com)
		 *         pissang (shenyi.914@gmail.com)
		 */


		    var env = __webpack_require__(78);
		    var eventTool = __webpack_require__(80);
		    var util = __webpack_require__(3);
		    var Draggable = __webpack_require__(81);
		    var GestureMgr = __webpack_require__(82);

		    var Eventful = __webpack_require__(32);

		    var mouseHandlerNames = [
		        'click', 'dblclick', 'mousewheel', 'mouseout'
		    ];
		    !usePointerEvent() && mouseHandlerNames.push(
		        'mouseup', 'mousedown', 'mousemove'
		    );

		    var touchHandlerNames = [
		        'touchstart', 'touchend', 'touchmove'
		    ];

		    var pointerHandlerNames = [
		        'pointerdown', 'pointerup', 'pointermove'
		    ];

		    var TOUCH_CLICK_DELAY = 300;

		    // touch指尖错觉的尝试偏移量配置
		    // var MOBILE_TOUCH_OFFSETS = [
		    //     { x: 10 },
		    //     { x: -20 },
		    //     { x: 10, y: 10 },
		    //     { y: -20 }
		    // ];

		    var addEventListener = eventTool.addEventListener;
		    var removeEventListener = eventTool.removeEventListener;
		    var normalizeEvent = eventTool.normalizeEvent;

		    function makeEventPacket(eveType, target, event) {
		        return {
		            type: eveType,
		            event: event,
		            target: target,
		            cancelBubble: false,
		            offsetX: event.zrX,
		            offsetY: event.zrY,
		            gestureEvent: event.gestureEvent,
		            pinchX: event.pinchX,
		            pinchY: event.pinchY,
		            pinchScale: event.pinchScale,
		            wheelDelta: event.zrDelta
		        };
		    }

		    var domHandlers = {
		        /**
		         * Mouse move handler
		         * @inner
		         * @param {Event} event
		         */
		        mousemove: function (event) {
		            event = normalizeEvent(this.root, event);

		            var x = event.zrX;
		            var y = event.zrY;

		            var hovered = this.findHover(x, y, null);
		            var lastHovered = this._hovered;

		            this._hovered = hovered;

		            this.root.style.cursor = hovered ? hovered.cursor : this._defaultCursorStyle;
		            // Mouse out on previous hovered element
		            if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {
		                this._dispatchProxy(lastHovered, 'mouseout', event);
		            }

		            // Mouse moving on one element
		            this._dispatchProxy(hovered, 'mousemove', event);

		            // Mouse over on a new element
		            if (hovered && hovered !== lastHovered) {
		                this._dispatchProxy(hovered, 'mouseover', event);
		            }
		        },

		        /**
		         * Mouse out handler
		         * @inner
		         * @param {Event} event
		         */
		        mouseout: function (event) {
		            event = normalizeEvent(this.root, event);

		            var element = event.toElement || event.relatedTarget;
		            if (element != this.root) {
		                while (element && element.nodeType != 9) {
		                    // 忽略包含在root中的dom引起的mouseOut
		                    if (element === this.root) {
		                        return;
		                    }

		                    element = element.parentNode;
		                }
		            }

		            this._dispatchProxy(this._hovered, 'mouseout', event);

		            this.trigger('globalout', {
		                event: event
		            });
		        },

		        /**
		         * Touch开始响应函数
		         * @inner
		         * @param {Event} event
		         */
		        touchstart: function (event) {
		            // FIXME
		            // 移动端可能需要default行为，例如静态图表时。
		            // eventTool.stop(event);// 阻止浏览器默认事件，重要
		            event = normalizeEvent(this.root, event);

		            this._lastTouchMoment = new Date();

		            processGesture(this, event, 'start');

		            // 平板补充一次findHover
		            // this._mobileFindFixed(event);
		            // Trigger mousemove and mousedown
		            domHandlers.mousemove.call(this, event);

		            domHandlers.mousedown.call(this, event);

		            setTouchTimer(this);
		        },

		        /**
		         * Touch移动响应函数
		         * @inner
		         * @param {Event} event
		         */
		        touchmove: function (event) {
		            // eventTool.stop(event);// 阻止浏览器默认事件，重要
		            event = normalizeEvent(this.root, event);

		            processGesture(this, event, 'change');

		            // Mouse move should always be triggered no matter whether
		            // there is gestrue event, because mouse move and pinch may
		            // be used at the same time.
		            domHandlers.mousemove.call(this, event);

		            setTouchTimer(this);
		        },

		        /**
		         * Touch结束响应函数
		         * @inner
		         * @param {Event} event
		         */
		        touchend: function (event) {
		            // eventTool.stop(event);// 阻止浏览器默认事件，重要
		            event = normalizeEvent(this.root, event);

		            processGesture(this, event, 'end');

		            domHandlers.mouseup.call(this, event);

		            // click event should always be triggered no matter whether
		            // there is gestrue event. System click can not be prevented.
		            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
		                // this._mobileFindFixed(event);
		                domHandlers.click.call(this, event);
		            }

		            setTouchTimer(this);
		        }
		    };

		    // Common handlers
		    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick'], function (name) {
		        domHandlers[name] = function (event) {
		            event = normalizeEvent(this.root, event);
		            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
		            var hovered = this.findHover(event.zrX, event.zrY, null);
		            this._dispatchProxy(hovered, name, event);
		        };
		    });

		    // Pointer event handlers
		    // util.each(['pointerdown', 'pointermove', 'pointerup'], function (name) {
		    //     domHandlers[name] = function (event) {
		    //         var mouseName = name.replace('pointer', 'mouse');
		    //         domHandlers[mouseName].call(this, event);
		    //     };
		    // });

		    function processGesture(zrHandler, event, stage) {
		        var gestureMgr = zrHandler._gestureMgr;

		        stage === 'start' && gestureMgr.clear();

		        var gestureInfo = gestureMgr.recognize(
		            event,
		            zrHandler.findHover(event.zrX, event.zrY, null)
		        );

		        stage === 'end' && gestureMgr.clear();

		        if (gestureInfo) {
		            // eventTool.stop(event);
		            var type = gestureInfo.type;
		            event.gestureEvent = type;

		            zrHandler._dispatchProxy(gestureInfo.target, type, gestureInfo.event);
		        }
		    }

		    /**
		     * 为控制类实例初始化dom 事件处理函数
		     *
		     * @inner
		     * @param {module:zrender/Handler} instance 控制类实例
		     */
		    function initDomHandler(instance) {
		        var handlerNames = touchHandlerNames.concat(pointerHandlerNames);
		        for (var i = 0; i < handlerNames.length; i++) {
		            var name = handlerNames[i];
		            instance._handlers[name] = util.bind(domHandlers[name], instance);
		        }

		        for (var i = 0; i < mouseHandlerNames.length; i++) {
		            var name = mouseHandlerNames[i];
		            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
		        }

		        function makeMouseHandler(fn, instance) {
		            return function () {
		                if (instance._touching) {
		                    return;
		                }
		                return fn.apply(instance, arguments);
		            };
		        }
		    }

		    /**
		     * @alias module:zrender/Handler
		     * @constructor
		     * @extends module:zrender/mixin/Eventful
		     * @param {HTMLElement} root Main HTML element for painting.
		     * @param {module:zrender/Storage} storage Storage instance.
		     * @param {module:zrender/Painter} painter Painter instance.
		     */
		    var Handler = function(root, storage, painter) {
		        Eventful.call(this);

		        this.root = root;
		        this.storage = storage;
		        this.painter = painter;

		        /**
		         * @private
		         * @type {boolean}
		         */
		        this._hovered;

		        /**
		         * @private
		         * @type {Date}
		         */
		        this._lastTouchMoment;

		        /**
		         * @private
		         * @type {number}
		         */
		        this._lastX;

		        /**
		         * @private
		         * @type {number}
		         */
		        this._lastY;

		        /**
		         * @private
		         * @type {string}
		         */
		        this._defaultCursorStyle = 'default';

		        /**
		         * @private
		         * @type {module:zrender/core/GestureMgr}
		         */
		        this._gestureMgr = new GestureMgr();

		        /**
		         * @private
		         * @type {Array.<Function>}
		         */
		        this._handlers = [];

		        /**
		         * @private
		         * @type {boolean}
		         */
		        this._touching = false;

		        /**
		         * @private
		         * @type {number}
		         */
		        this._touchTimer;

		        initDomHandler(this);

		        if (usePointerEvent()) {
		            mountHandlers(pointerHandlerNames, this);
		        }
		        else if (useTouchEvent()) {
		            mountHandlers(touchHandlerNames, this);

		            // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
		            // addEventListener(root, 'mouseout', this._mouseoutHandler);
		        }

		        // Considering some devices that both enable touch and mouse event (like MS Surface
		        // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
		        // mouse event can not be handle in those devices.
		        mountHandlers(mouseHandlerNames, this);

		        Draggable.call(this);

		        function mountHandlers(handlerNames, instance) {
		            util.each(handlerNames, function (name) {
		                addEventListener(root, eventNameFix(name), instance._handlers[name]);
		            }, instance);
		        }
		    };

		    Handler.prototype = {

		        constructor: Handler,

		        /**
		         * Resize
		         */
		        resize: function (event) {
		            this._hovered = null;
		        },

		        /**
		         * Dispatch event
		         * @param {string} eventName
		         * @param {event=} eventArgs
		         */
		        dispatch: function (eventName, eventArgs) {
		            var handler = this._handlers[eventName];
		            handler && handler.call(this, eventArgs);
		        },

		        /**
		         * Dispose
		         */
		        dispose: function () {
		            var root = this.root;

		            var handlerNames = mouseHandlerNames.concat(touchHandlerNames);

		            for (var i = 0; i < handlerNames.length; i++) {
		                var name = handlerNames[i];
		                removeEventListener(root, eventNameFix(name), this._handlers[name]);
		            }

		            this.root =
		            this.storage =
		            this.painter = null;
		        },

		        /**
		         * 设置默认的cursor style
		         * @param {string} cursorStyle 例如 crosshair
		         */
		        setDefaultCursorStyle: function (cursorStyle) {
		            this._defaultCursorStyle = cursorStyle;
		        },

		        /**
		         * 事件分发代理
		         *
		         * @private
		         * @param {Object} targetEl 目标图形元素
		         * @param {string} eventName 事件名称
		         * @param {Object} event 事件对象
		         */
		        _dispatchProxy: function (targetEl, eventName, event) {
		            var eventHandler = 'on' + eventName;
		            var eventPacket = makeEventPacket(eventName, targetEl, event);

		            var el = targetEl;

		            while (el) {
		                el[eventHandler]
		                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));

		                el.trigger(eventName, eventPacket);

		                el = el.parent;

		                if (eventPacket.cancelBubble) {
		                    break;
		                }
		            }

		            if (!eventPacket.cancelBubble) {
		                // 冒泡到顶级 zrender 对象
		                this.trigger(eventName, eventPacket);
		                // 分发事件到用户自定义层
		                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
		                this.painter && this.painter.eachOtherLayer(function (layer) {
		                    if (typeof(layer[eventHandler]) == 'function') {
		                        layer[eventHandler].call(layer, eventPacket);
		                    }
		                    if (layer.trigger) {
		                        layer.trigger(eventName, eventPacket);
		                    }
		                });
		            }
		        },

		        /**
		         * @private
		         * @param {number} x
		         * @param {number} y
		         * @param {module:zrender/graphic/Displayable} exclude
		         * @method
		         */
		        findHover: function(x, y, exclude) {
		            var list = this.storage.getDisplayList();
		            for (var i = list.length - 1; i >= 0 ; i--) {
		                if (!list[i].silent
		                 && list[i] !== exclude
		                 // getDisplayList may include ignored item in VML mode
		                 && !list[i].ignore
		                 && isHover(list[i], x, y)) {
		                    return list[i];
		                }
		            }
		        }
		    };

		    function isHover(displayable, x, y) {
		        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
		            var p = displayable.parent;
		            while (p) {
		                if (p.clipPath && !p.clipPath.contain(x, y))  {
		                    // Clipped by parents
		                    return false;
		                }
		                p = p.parent;
		            }
		            return true;
		        }

		        return false;
		    }

		    /**
		     * Prevent mouse event from being dispatched after Touch Events action
		     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
		     * 1. Mobile browsers dispatch mouse events 300ms after touchend.
		     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
		     * Result: Blocking Mouse Events for 700ms.
		     */
		    function setTouchTimer(instance) {
		        instance._touching = true;
		        clearTimeout(instance._touchTimer);
		        instance._touchTimer = setTimeout(function () {
		            instance._touching = false;
		        }, 700);
		    }

		    /**
		     * Althought MS Surface support screen touch, IE10/11 do not support
		     * touch event and MS Edge supported them but not by default (but chrome
		     * and firefox do). Thus we use Pointer event on MS browsers to handle touch.
		     */
		    function usePointerEvent() {
		        // TODO
		        // pointermove event dont trigger when using finger.
		        // We may figger it out latter.
		        return false;
		        // return env.pointerEventsSupported
		            // In no-touch device we dont use pointer evnets but just
		            // use mouse event for avoiding problems.
		            // && window.navigator.maxTouchPoints;
		    }

		    function useTouchEvent() {
		        return env.touchEventsSupported;
		    }

		    function eventNameFix(name) {
		        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;
		    }

		    util.mixin(Handler, Eventful);
		    util.mixin(Handler, Draggable);

		    module.exports = Handler;


	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * 事件辅助类
		 * @module zrender/core/event
		 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
		 */


		    var Eventful = __webpack_require__(32);

		    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;

		    function getBoundingClientRect(el) {
		        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
		        return el.getBoundingClientRect ? el.getBoundingClientRect() : { left: 0, top: 0};
		    }
		    /**
		     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标
		     */
		    function normalizeEvent(el, e) {

		        e = e || window.event;

		        if (e.zrX != null) {
		            return e;
		        }

		        var eventType = e.type;
		        var isTouch = eventType && eventType.indexOf('touch') >= 0;

		        if (!isTouch) {
		            var box = getBoundingClientRect(el);
		            e.zrX = e.clientX - box.left;
		            e.zrY = e.clientY - box.top;
		            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
		        }
		        else {
		            var touch = eventType != 'touchend'
		                            ? e.targetTouches[0]
		                            : e.changedTouches[0];
		            if (touch) {
		                var rBounding = getBoundingClientRect(el);
		                // touch事件坐标是全屏的~
		                e.zrX = touch.clientX - rBounding.left;
		                e.zrY = touch.clientY - rBounding.top;
		            }
		        }

		        return e;
		    }

		    function addEventListener(el, name, handler) {
		        if (isDomLevel2) {
		            el.addEventListener(name, handler);
		        }
		        else {
		            el.attachEvent('on' + name, handler);
		        }
		    }

		    function removeEventListener(el, name, handler) {
		        if (isDomLevel2) {
		            el.removeEventListener(name, handler);
		        }
		        else {
		            el.detachEvent('on' + name, handler);
		        }
		    }

		    /**
		     * 停止冒泡和阻止默认行为
		     * @memberOf module:zrender/core/event
		     * @method
		     * @param {Event} e : event对象
		     */
		    var stop = isDomLevel2
		        ? function (e) {
		            e.preventDefault();
		            e.stopPropagation();
		            e.cancelBubble = true;
		        }
		        : function (e) {
		            e.returnValue = false;
		            e.cancelBubble = true;
		        };

		    module.exports = {
		        normalizeEvent: normalizeEvent,
		        addEventListener: addEventListener,
		        removeEventListener: removeEventListener,

		        stop: stop,
		        // 做向上兼容
		        Dispatcher: Eventful
		    };



	/***/ },
	/* 81 */
	/***/ function(module, exports) {

		// TODO Draggable for group
		// FIXME Draggable on element which has parent rotation or scale

		    function Draggable() {

		        this.on('mousedown', this._dragStart, this);
		        this.on('mousemove', this._drag, this);
		        this.on('mouseup', this._dragEnd, this);
		        this.on('globalout', this._dragEnd, this);
		        // this._dropTarget = null;
		        // this._draggingTarget = null;

		        // this._x = 0;
		        // this._y = 0;
		    }

		    Draggable.prototype = {

		        constructor: Draggable,

		        _dragStart: function (e) {
		            var draggingTarget = e.target;
		            if (draggingTarget && draggingTarget.draggable) {
		                this._draggingTarget = draggingTarget;
		                draggingTarget.dragging = true;
		                this._x = e.offsetX;
		                this._y = e.offsetY;

		                this._dispatchProxy(draggingTarget, 'dragstart', e.event);
		            }
		        },

		        _drag: function (e) {
		            var draggingTarget = this._draggingTarget;
		            if (draggingTarget) {

		                var x = e.offsetX;
		                var y = e.offsetY;

		                var dx = x - this._x;
		                var dy = y - this._y;
		                this._x = x;
		                this._y = y;

		                draggingTarget.drift(dx, dy, e);
		                this._dispatchProxy(draggingTarget, 'drag', e.event);

		                var dropTarget = this.findHover(x, y, draggingTarget);
		                var lastDropTarget = this._dropTarget;
		                this._dropTarget = dropTarget;

		                if (draggingTarget !== dropTarget) {
		                    if (lastDropTarget && dropTarget !== lastDropTarget) {
		                        this._dispatchProxy(lastDropTarget, 'dragleave', e.event);
		                    }
		                    if (dropTarget && dropTarget !== lastDropTarget) {
		                        this._dispatchProxy(dropTarget, 'dragenter', e.event);
		                    }
		                }
		            }
		        },

		        _dragEnd: function (e) {
		            var draggingTarget = this._draggingTarget;

		            if (draggingTarget) {
		                draggingTarget.dragging = false;
		            }

		            this._dispatchProxy(draggingTarget, 'dragend', e.event);

		            if (this._dropTarget) {
		                this._dispatchProxy(this._dropTarget, 'drop', e.event);
		            }

		            this._draggingTarget = null;
		            this._dropTarget = null;
		        }

		    };

		    module.exports = Draggable;


	/***/ },
	/* 82 */
	/***/ function(module, exports) {

		'use strict';
		/**
		 * Only implements needed gestures for mobile.
		 */


		    var GestureMgr = function () {

		        /**
		         * @private
		         * @type {Array.<Object>}
		         */
		        this._track = [];
		    };

		    GestureMgr.prototype = {

		        constructor: GestureMgr,

		        recognize: function (event, target) {
		            this._doTrack(event, target);
		            return this._recognize(event);
		        },

		        clear: function () {
		            this._track.length = 0;
		            return this;
		        },

		        _doTrack: function (event, target) {
		            var touches = event.touches;

		            if (!touches) {
		                return;
		            }

		            var trackItem = {
		                points: [],
		                touches: [],
		                target: target,
		                event: event
		            };

		            for (var i = 0, len = touches.length; i < len; i++) {
		                var touch = touches[i];
		                trackItem.points.push([touch.clientX, touch.clientY]);
		                trackItem.touches.push(touch);
		            }

		            this._track.push(trackItem);
		        },

		        _recognize: function (event) {
		            for (var eventName in recognizers) {
		                if (recognizers.hasOwnProperty(eventName)) {
		                    var gestureInfo = recognizers[eventName](this._track, event);
		                    if (gestureInfo) {
		                        return gestureInfo;
		                    }
		                }
		            }
		        }
		    };

		    function dist(pointPair) {
		        var dx = pointPair[1][0] - pointPair[0][0];
		        var dy = pointPair[1][1] - pointPair[0][1];

		        return Math.sqrt(dx * dx + dy * dy);
		    }

		    function center(pointPair) {
		        return [
		            (pointPair[0][0] + pointPair[1][0]) / 2,
		            (pointPair[0][1] + pointPair[1][1]) / 2
		        ];
		    }

		    var recognizers = {

		        pinch: function (track, event) {
		            var trackLen = track.length;

		            if (!trackLen) {
		                return;
		            }

		            var pinchEnd = (track[trackLen - 1] || {}).points;
		            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

		            if (pinchPre
		                && pinchPre.length > 1
		                && pinchEnd
		                && pinchEnd.length > 1
		            ) {
		                var pinchScale = dist(pinchEnd) / dist(pinchPre);
		                !isFinite(pinchScale) && (pinchScale = 1);

		                event.pinchScale = pinchScale;

		                var pinchCenter = center(pinchEnd);
		                event.pinchX = pinchCenter[0];
		                event.pinchY = pinchCenter[1];

		                return {
		                    type: 'pinch',
		                    target: track[0].target,
		                    event: event
		                };
		            }
		        }

		        // Only pinch currently.
		    };

		    module.exports = GestureMgr;



	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * Storage内容仓库模块
		 * @module zrender/Storage
		 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
		 * @author errorrik (errorrik@gmail.com)
		 * @author pissang (https://github.com/pissang/)
		 */


		    var util = __webpack_require__(3);

		    var Group = __webpack_require__(29);

		    function shapeCompareFunc(a, b) {
		        if (a.zlevel === b.zlevel) {
		            if (a.z === b.z) {
		                if (a.z2 === b.z2) {
		                    return a.__renderidx - b.__renderidx;
		                }
		                return a.z2 - b.z2;
		            }
		            return a.z - b.z;
		        }
		        return a.zlevel - b.zlevel;
		    }
		    /**
		     * 内容仓库 (M)
		     * @alias module:zrender/Storage
		     * @constructor
		     */
		    var Storage = function () {
		        // 所有常规形状，id索引的map
		        this._elements = {};

		        this._roots = [];

		        this._displayList = [];

		        this._displayListLen = 0;
		    };

		    Storage.prototype = {

		        constructor: Storage,

		        /**
		         * 返回所有图形的绘制队列
		         * @param {boolean} [update=false] 是否在返回前更新该数组
		         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
		         *
		         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
		         * @return {Array.<module:zrender/graphic/Displayable>}
		         */
		        getDisplayList: function (update, includeIgnore) {
		            includeIgnore = includeIgnore || false;
		            if (update) {
		                this.updateDisplayList(includeIgnore);
		            }
		            return this._displayList;
		        },

		        /**
		         * 更新图形的绘制队列。
		         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
		         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
		         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
		         */
		        updateDisplayList: function (includeIgnore) {
		            this._displayListLen = 0;
		            var roots = this._roots;
		            var displayList = this._displayList;
		            for (var i = 0, len = roots.length; i < len; i++) {
		                this._updateAndAddDisplayable(roots[i], null, includeIgnore);
		            }
		            displayList.length = this._displayListLen;

		            for (var i = 0, len = displayList.length; i < len; i++) {
		                displayList[i].__renderidx = i;
		            }

		            displayList.sort(shapeCompareFunc);
		        },

		        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {

		            if (el.ignore && !includeIgnore) {
		                return;
		            }

		            el.beforeUpdate();

		            el.update();

		            el.afterUpdate();

		            var clipPath = el.clipPath;
		            if (clipPath) {
		                // clipPath 的变换是基于 group 的变换
		                clipPath.parent = el;
		                clipPath.updateTransform();

		                // FIXME 效率影响
		                if (clipPaths) {
		                    clipPaths = clipPaths.slice();
		                    clipPaths.push(clipPath);
		                }
		                else {
		                    clipPaths = [clipPath];
		                }
		            }

		            if (el.type == 'group') {
		                var children = el._children;

		                for (var i = 0; i < children.length; i++) {
		                    var child = children[i];

		                    // Force to mark as dirty if group is dirty
		                    // FIXME __dirtyPath ?
		                    child.__dirty = el.__dirty || child.__dirty;

		                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
		                }

		                // Mark group clean here
		                el.__dirty = false;

		            }
		            else {
		                el.__clipPaths = clipPaths;

		                this._displayList[this._displayListLen++] = el;
		            }
		        },

		        /**
		         * 添加图形(Shape)或者组(Group)到根节点
		         * @param {module:zrender/Element} el
		         */
		        addRoot: function (el) {
		            // Element has been added
		            if (this._elements[el.id]) {
		                return;
		            }

		            if (el instanceof Group) {
		                el.addChildrenToStorage(this);
		            }

		            this.addToMap(el);
		            this._roots.push(el);
		        },

		        /**
		         * 删除指定的图形(Shape)或者组(Group)
		         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
		         */
		        delRoot: function (elId) {
		            if (elId == null) {
		                // 不指定elId清空
		                for (var i = 0; i < this._roots.length; i++) {
		                    var root = this._roots[i];
		                    if (root instanceof Group) {
		                        root.delChildrenFromStorage(this);
		                    }
		                }

		                this._elements = {};
		                this._roots = [];
		                this._displayList = [];
		                this._displayListLen = 0;

		                return;
		            }

		            if (elId instanceof Array) {
		                for (var i = 0, l = elId.length; i < l; i++) {
		                    this.delRoot(elId[i]);
		                }
		                return;
		            }

		            var el;
		            if (typeof(elId) == 'string') {
		                el = this._elements[elId];
		            }
		            else {
		                el = elId;
		            }

		            var idx = util.indexOf(this._roots, el);
		            if (idx >= 0) {
		                this.delFromMap(el.id);
		                this._roots.splice(idx, 1);
		                if (el instanceof Group) {
		                    el.delChildrenFromStorage(this);
		                }
		            }
		        },

		        addToMap: function (el) {
		            if (el instanceof Group) {
		                el.__storage = this;
		            }
		            el.dirty();

		            this._elements[el.id] = el;

		            return this;
		        },

		        get: function (elId) {
		            return this._elements[elId];
		        },

		        delFromMap: function (elId) {
		            var elements = this._elements;
		            var el = elements[elId];
		            if (el) {
		                delete elements[elId];
		                if (el instanceof Group) {
		                    el.__storage = null;
		                }
		            }

		            return this;
		        },

		        /**
		         * 清空并且释放Storage
		         */
		        dispose: function () {
		            this._elements =
		            this._renderList =
		            this._roots = null;
		        }
		    };

		    module.exports = Storage;



	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * 动画主类, 调度和管理所有动画控制器
		 *
		 * @module zrender/animation/Animation
		 * @author pissang(https://github.com/pissang)
		 */
		// TODO Additive animation
		// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
		// https://developer.apple.com/videos/wwdc2014/#236


		    var util = __webpack_require__(3);
		    var Dispatcher = __webpack_require__(80).Dispatcher;

		    var requestAnimationFrame = (typeof window !== 'undefined' &&
		                                    (window.requestAnimationFrame
		                                    || window.msRequestAnimationFrame
		                                    || window.mozRequestAnimationFrame
		                                    || window.webkitRequestAnimationFrame))
		                                || function (func) {
		                                    setTimeout(func, 16);
		                                };

		    var Animator = __webpack_require__(35);
		    /**
		     * @typedef {Object} IZRenderStage
		     * @property {Function} update
		     */

		    /**
		     * @alias module:zrender/animation/Animation
		     * @constructor
		     * @param {Object} [options]
		     * @param {Function} [options.onframe]
		     * @param {IZRenderStage} [options.stage]
		     * @example
		     *     var animation = new Animation();
		     *     var obj = {
		     *         x: 100,
		     *         y: 100
		     *     };
		     *     animation.animate(node.position)
		     *         .when(1000, {
		     *             x: 500,
		     *             y: 500
		     *         })
		     *         .when(2000, {
		     *             x: 100,
		     *             y: 100
		     *         })
		     *         .start('spline');
		     */
		    var Animation = function (options) {

		        options = options || {};

		        this.stage = options.stage || {};

		        this.onframe = options.onframe || function() {};

		        // private properties
		        this._clips = [];

		        this._running = false;

		        this._time = 0;

		        Dispatcher.call(this);
		    };

		    Animation.prototype = {

		        constructor: Animation,
		        /**
		         * 添加 clip
		         * @param {module:zrender/animation/Clip} clip
		         */
		        addClip: function (clip) {
		            this._clips.push(clip);
		        },
		        /**
		         * 添加 animator
		         * @param {module:zrender/animation/Animator} animator
		         */
		        addAnimator: function (animator) {
		            animator.animation = this;
		            var clips = animator.getClips();
		            for (var i = 0; i < clips.length; i++) {
		                this.addClip(clips[i]);
		            }
		        },
		        /**
		         * 删除动画片段
		         * @param {module:zrender/animation/Clip} clip
		         */
		        removeClip: function(clip) {
		            var idx = util.indexOf(this._clips, clip);
		            if (idx >= 0) {
		                this._clips.splice(idx, 1);
		            }
		        },

		        /**
		         * 删除动画片段
		         * @param {module:zrender/animation/Animator} animator
		         */
		        removeAnimator: function (animator) {
		            var clips = animator.getClips();
		            for (var i = 0; i < clips.length; i++) {
		                this.removeClip(clips[i]);
		            }
		            animator.animation = null;
		        },

		        _update: function() {

		            var time = new Date().getTime();
		            var delta = time - this._time;
		            var clips = this._clips;
		            var len = clips.length;

		            var deferredEvents = [];
		            var deferredClips = [];
		            for (var i = 0; i < len; i++) {
		                var clip = clips[i];
		                var e = clip.step(time);
		                // Throw out the events need to be called after
		                // stage.update, like destroy
		                if (e) {
		                    deferredEvents.push(e);
		                    deferredClips.push(clip);
		                }
		            }

		            // Remove the finished clip
		            for (var i = 0; i < len;) {
		                if (clips[i]._needsRemove) {
		                    clips[i] = clips[len - 1];
		                    clips.pop();
		                    len--;
		                }
		                else {
		                    i++;
		                }
		            }

		            len = deferredEvents.length;
		            for (var i = 0; i < len; i++) {
		                deferredClips[i].fire(deferredEvents[i]);
		            }

		            this._time = time;

		            this.onframe(delta);

		            this.trigger('frame', delta);

		            if (this.stage.update) {
		                this.stage.update();
		            }
		        },
		        /**
		         * 开始运行动画
		         */
		        start: function () {
		            var self = this;

		            this._running = true;

		            function step() {
		                if (self._running) {

		                    requestAnimationFrame(step);

		                    self._update();
		                }
		            }

		            this._time = new Date().getTime();
		            requestAnimationFrame(step);
		        },
		        /**
		         * 停止运行动画
		         */
		        stop: function () {
		            this._running = false;
		        },
		        /**
		         * 清除所有动画片段
		         */
		        clear: function () {
		            this._clips = [];
		        },
		        /**
		         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
		         * @param  {Object} target
		         * @param  {Object} options
		         * @param  {boolean} [options.loop=false] 是否循环播放动画
		         * @param  {Function} [options.getter=null]
		         *         如果指定getter函数，会通过getter函数取属性值
		         * @param  {Function} [options.setter=null]
		         *         如果指定setter函数，会通过setter函数设置属性值
		         * @return {module:zrender/animation/Animation~Animator}
		         */
		        animate: function (target, options) {
		            options = options || {};
		            var animator = new Animator(
		                target,
		                options.loop,
		                options.getter,
		                options.setter
		            );

		            return animator;
		        }
		    };

		    util.mixin(Animation, Dispatcher);

		    module.exports = Animation;



	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * Default canvas painter
		 * @module zrender/Painter
		 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
		 *         errorrik (errorrik@gmail.com)
		 *         pissang (https://www.github.com/pissang)
		 */
		 

		    var config = __webpack_require__(40);
		    var util = __webpack_require__(3);
		    var log = __webpack_require__(39);
		    var BoundingRect = __webpack_require__(15);

		    var Layer = __webpack_require__(86);

		    function parseInt10(val) {
		        return parseInt(val, 10);
		    }

		    function isLayerValid(layer) {
		        if (!layer) {
		            return false;
		        }

		        if (layer.isBuildin) {
		            return true;
		        }

		        if (typeof(layer.resize) !== 'function'
		            || typeof(layer.refresh) !== 'function'
		        ) {
		            return false;
		        }

		        return true;
		    }

		    function preProcessLayer(layer) {
		        layer.__unusedCount++;
		    }

		    function postProcessLayer(layer) {
		        layer.__dirty = false;
		        if (layer.__unusedCount == 1) {
		            layer.clear();
		        }
		    }

		    var tmpRect = new BoundingRect(0, 0, 0, 0);
		    var viewRect = new BoundingRect(0, 0, 0, 0);
		    function isDisplayableCulled(el, width, height) {
		        tmpRect.copy(el.getBoundingRect());
		        if (el.transform) {
		            tmpRect.applyTransform(el.transform);
		        }
		        viewRect.width = width;
		        viewRect.height = height;
		        return !tmpRect.intersect(viewRect);
		    }

		    function isClipPathChanged(clipPaths, prevClipPaths) {
		        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {
		            return true;
		        }
		        for (var i = 0; i < clipPaths.length; i++) {
		            if (clipPaths[i] !== prevClipPaths[i]) {
		                return true;
		            }
		        }
		    }

		    function doClip(clipPaths, ctx) {
		        for (var i = 0; i < clipPaths.length; i++) {
		            var clipPath = clipPaths[i];
		            var m;
		            if (clipPath.transform) {
		                m = clipPath.transform;
		                ctx.transform(
		                    m[0], m[1],
		                    m[2], m[3],
		                    m[4], m[5]
		                );
		            }
		            var path = clipPath.path;
		            path.beginPath(ctx);
		            clipPath.buildPath(path, clipPath.shape);
		            ctx.clip();
		            // Transform back
		            if (clipPath.transform) {
		                m = clipPath.invTransform;
		                ctx.transform(
		                    m[0], m[1],
		                    m[2], m[3],
		                    m[4], m[5]
		                );
		            }
		        }
		    }

		    /**
		     * @alias module:zrender/Painter
		     * @constructor
		     * @param {HTMLElement} root 绘图容器
		     * @param {module:zrender/Storage} storage
		     * @param {Ojbect} opts
		     */
		    var Painter = function (root, storage, opts) {
		        var singleCanvas = !root.nodeName // In node ?
		            || root.nodeName.toUpperCase() === 'CANVAS';

		        opts = opts || {};

		        /**
		         * @type {number}
		         */
		        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;
		        /**
		         * @type {boolean}
		         * @private
		         */
		        this._singleCanvas = singleCanvas;
		        /**
		         * 绘图容器
		         * @type {HTMLElement}
		         */
		        this.root = root;

		        var rootStyle = root.style;

		        // In node environment using node-canvas
		        if (rootStyle) {
		            rootStyle['-webkit-tap-highlight-color'] = 'transparent';
		            rootStyle['-webkit-user-select'] = 'none';
		            rootStyle['user-select'] = 'none';
		            rootStyle['-webkit-touch-callout'] = 'none';

		            root.innerHTML = '';
		        }

		        /**
		         * @type {module:zrender/Storage}
		         */
		        this.storage = storage;

		        if (!singleCanvas) {
		            var width = this._getWidth();
		            var height = this._getHeight();
		            this._width = width;
		            this._height = height;

		            var domRoot = document.createElement('div');
		            this._domRoot = domRoot;
		            var domRootStyle = domRoot.style;

		            // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
		            domRootStyle.position = 'relative';
		            domRootStyle.overflow = 'hidden';
		            domRootStyle.width = this._width + 'px';
		            domRootStyle.height = this._height + 'px';
		            root.appendChild(domRoot);

		            /**
		             * @type {Object.<key, module:zrender/Layer>}
		             * @private
		             */
		            this._layers = {};
		            /**
		             * @type {Array.<number>}
		             * @private
		             */
		            this._zlevelList = [];
		        }
		        else {
		            // Use canvas width and height directly
		            var width = root.width;
		            var height = root.height;
		            this._width = width;
		            this._height = height;

		            // Create layer if only one given canvas
		            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height
		            var mainLayer = new Layer(root, this, 1);
		            mainLayer.initContext();
		            // FIXME Use canvas width and height
		            // mainLayer.resize(width, height);
		            this._layers = {
		                0: mainLayer
		            };
		            this._zlevelList = [0];
		        }

		        this._layerConfig = {};

		        this.pathToImage = this._createPathToImage();
		    };

		    Painter.prototype = {

		        constructor: Painter,

		        /**
		         * If painter use a single canvas
		         * @return {boolean}
		         */
		        isSingleCanvas: function () {
		            return this._singleCanvas;
		        },
		        /**
		         * @return {HTMLDivElement}
		         */
		        getViewportRoot: function () {
		            return this._singleCanvas ? this._layers[0].dom : this._domRoot;
		        },

		        /**
		         * 刷新
		         * @param {boolean} [paintAll=false] 强制绘制所有displayable
		         */
		        refresh: function (paintAll) {
		            var list = this.storage.getDisplayList(true);
		            var zlevelList = this._zlevelList;

		            this._paintList(list, paintAll);

		            // Paint custum layers
		            for (var i = 0; i < zlevelList.length; i++) {
		                var z = zlevelList[i];
		                var layer = this._layers[z];
		                if (!layer.isBuildin && layer.refresh) {
		                    layer.refresh();
		                }
		            }

		            return this;
		        },

		        _paintList: function (list, paintAll) {

		            if (paintAll == null) {
		                paintAll = false;
		            }

		            this._updateLayerStatus(list);

		            var currentLayer;
		            var currentZLevel;
		            var ctx;

		            var viewWidth = this._width;
		            var viewHeight = this._height;

		            this.eachBuildinLayer(preProcessLayer);

		            // var invTransform = [];
		            var prevElClipPaths = null;

		            for (var i = 0, l = list.length; i < l; i++) {
		                var el = list[i];
		                var elZLevel = this._singleCanvas ? 0 : el.zlevel;
		                // Change draw layer
		                if (currentZLevel !== elZLevel) {
		                    // Only 0 zlevel if only has one canvas
		                    currentZLevel = elZLevel;
		                    currentLayer = this.getLayer(currentZLevel);

		                    if (!currentLayer.isBuildin) {
		                        log(
		                            'ZLevel ' + currentZLevel
		                            + ' has been used by unkown layer ' + currentLayer.id
		                        );
		                    }

		                    ctx = currentLayer.ctx;

		                    // Reset the count
		                    currentLayer.__unusedCount = 0;

		                    if (currentLayer.__dirty || paintAll) {
		                        currentLayer.clear();
		                    }
		                }

		                if (
		                    (currentLayer.__dirty || paintAll)
		                    // Ignore invisible element
		                    && !el.invisible
		                    // Ignore transparent element
		                    && el.style.opacity !== 0
		                    // Ignore scale 0 element, in some environment like node-canvas
		                    // Draw a scale 0 element can cause all following draw wrong
		                    && el.scale[0] && el.scale[1]
		                    // Ignore culled element
		                    && !(el.culling && isDisplayableCulled(el, viewWidth, viewHeight))
		                ) {
		                    var clipPaths = el.__clipPaths;

		                    // Optimize when clipping on group with several elements
		                    if (isClipPathChanged(clipPaths, prevElClipPaths)) {
		                        // If has previous clipping state, restore from it
		                        if (prevElClipPaths) {
		                            ctx.restore();
		                        }
		                        // New clipping state
		                        if (clipPaths) {
		                            ctx.save();
		                            doClip(clipPaths, ctx);
		                        }
		                        prevElClipPaths = clipPaths;
		                    }
		                    el.beforeBrush && el.beforeBrush(ctx);
		                    el.brush(ctx, false);
		                    el.afterBrush && el.afterBrush(ctx);
		                }

		                el.__dirty = false;
		            }

		            // If still has clipping state
		            if (prevElClipPaths) {
		                ctx.restore();
		            }

		            this.eachBuildinLayer(postProcessLayer);
		        },

		        /**
		         * 获取 zlevel 所在层，如果不存在则会创建一个新的层
		         * @param {number} zlevel
		         * @return {module:zrender/Layer}
		         */
		        getLayer: function (zlevel) {
		            if (this._singleCanvas) {
		                return this._layers[0];
		            }

		            var layer = this._layers[zlevel];
		            if (!layer) {
		                // Create a new layer
		                layer = new Layer('zr_' + zlevel, this, this.dpr);
		                layer.isBuildin = true;

		                if (this._layerConfig[zlevel]) {
		                    util.merge(layer, this._layerConfig[zlevel], true);
		                }

		                this.insertLayer(zlevel, layer);

		                // Context is created after dom inserted to document
		                // Or excanvas will get 0px clientWidth and clientHeight
		                layer.initContext();
		            }

		            return layer;
		        },

		        insertLayer: function (zlevel, layer) {

		            var layersMap = this._layers;
		            var zlevelList = this._zlevelList;
		            var len = zlevelList.length;
		            var prevLayer = null;
		            var i = -1;
		            var domRoot = this._domRoot;

		            if (layersMap[zlevel]) {
		                log('ZLevel ' + zlevel + ' has been used already');
		                return;
		            }
		            // Check if is a valid layer
		            if (!isLayerValid(layer)) {
		                log('Layer of zlevel ' + zlevel + ' is not valid');
		                return;
		            }

		            if (len > 0 && zlevel > zlevelList[0]) {
		                for (i = 0; i < len - 1; i++) {
		                    if (
		                        zlevelList[i] < zlevel
		                        && zlevelList[i + 1] > zlevel
		                    ) {
		                        break;
		                    }
		                }
		                prevLayer = layersMap[zlevelList[i]];
		            }
		            zlevelList.splice(i + 1, 0, zlevel);

		            if (prevLayer) {
		                var prevDom = prevLayer.dom;
		                if (prevDom.nextSibling) {
		                    domRoot.insertBefore(
		                        layer.dom,
		                        prevDom.nextSibling
		                    );
		                }
		                else {
		                    domRoot.appendChild(layer.dom);
		                }
		            }
		            else {
		                if (domRoot.firstChild) {
		                    domRoot.insertBefore(layer.dom, domRoot.firstChild);
		                }
		                else {
		                    domRoot.appendChild(layer.dom);
		                }
		            }

		            layersMap[zlevel] = layer;
		        },

		        // Iterate each layer
		        eachLayer: function (cb, context) {
		            var zlevelList = this._zlevelList;
		            var z;
		            var i;
		            for (i = 0; i < zlevelList.length; i++) {
		                z = zlevelList[i];
		                cb.call(context, this._layers[z], z);
		            }
		        },

		        // Iterate each buildin layer
		        eachBuildinLayer: function (cb, context) {
		            var zlevelList = this._zlevelList;
		            var layer;
		            var z;
		            var i;
		            for (i = 0; i < zlevelList.length; i++) {
		                z = zlevelList[i];
		                layer = this._layers[z];
		                if (layer.isBuildin) {
		                    cb.call(context, layer, z);
		                }
		            }
		        },

		        // Iterate each other layer except buildin layer
		        eachOtherLayer: function (cb, context) {
		            var zlevelList = this._zlevelList;
		            var layer;
		            var z;
		            var i;
		            for (i = 0; i < zlevelList.length; i++) {
		                z = zlevelList[i];
		                layer = this._layers[z];
		                if (! layer.isBuildin) {
		                    cb.call(context, layer, z);
		                }
		            }
		        },

		        /**
		         * 获取所有已创建的层
		         * @param {Array.<module:zrender/Layer>} [prevLayer]
		         */
		        getLayers: function () {
		            return this._layers;
		        },

		        _updateLayerStatus: function (list) {

		            var layers = this._layers;

		            var elCounts = {};

		            this.eachBuildinLayer(function (layer, z) {
		                elCounts[z] = layer.elCount;
		                layer.elCount = 0;
		            });

		            for (var i = 0, l = list.length; i < l; i++) {
		                var el = list[i];
		                var zlevel = this._singleCanvas ? 0 : el.zlevel;
		                var layer = layers[zlevel];
		                if (layer) {
		                    layer.elCount++;
		                    // 已经被标记为需要刷新
		                    if (layer.__dirty) {
		                        continue;
		                    }
		                    layer.__dirty = el.__dirty;
		                }
		            }

		            // 层中的元素数量有发生变化
		            this.eachBuildinLayer(function (layer, z) {
		                if (elCounts[z] !== layer.elCount) {
		                    layer.__dirty = true;
		                }
		            });
		        },

		        /**
		         * 清除hover层外所有内容
		         */
		        clear: function () {
		            this.eachBuildinLayer(this._clearLayer);
		            return this;
		        },

		        _clearLayer: function (layer) {
		            layer.clear();
		        },

		        /**
		         * 修改指定zlevel的绘制参数
		         *
		         * @param {string} zlevel
		         * @param {Object} config 配置对象
		         * @param {string} [config.clearColor=0] 每次清空画布的颜色
		         * @param {string} [config.motionBlur=false] 是否开启动态模糊
		         * @param {number} [config.lastFrameAlpha=0.7]
		         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
		         */
		        configLayer: function (zlevel, config) {
		            if (config) {
		                var layerConfig = this._layerConfig;
		                if (!layerConfig[zlevel]) {
		                    layerConfig[zlevel] = config;
		                }
		                else {
		                    util.merge(layerConfig[zlevel], config, true);
		                }

		                var layer = this._layers[zlevel];

		                if (layer) {
		                    util.merge(layer, layerConfig[zlevel], true);
		                }
		            }
		        },

		        /**
		         * 删除指定层
		         * @param {number} zlevel 层所在的zlevel
		         */
		        delLayer: function (zlevel) {
		            var layers = this._layers;
		            var zlevelList = this._zlevelList;
		            var layer = layers[zlevel];
		            if (!layer) {
		                return;
		            }
		            layer.dom.parentNode.removeChild(layer.dom);
		            delete layers[zlevel];

		            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
		        },

		        /**
		         * 区域大小变化后重绘
		         */
		        resize: function (width, height) {
		            var domRoot = this._domRoot;
		            // FIXME Why ?
		            domRoot.style.display = 'none';

		            width = width || this._getWidth();
		            height = height || this._getHeight();

		            domRoot.style.display = '';

		            // 优化没有实际改变的resize
		            if (this._width != width || height != this._height) {
		                domRoot.style.width = width + 'px';
		                domRoot.style.height = height + 'px';

		                for (var id in this._layers) {
		                    this._layers[id].resize(width, height);
		                }

		                this.refresh(true);
		            }

		            this._width = width;
		            this._height = height;

		            return this;
		        },

		        /**
		         * 清除单独的一个层
		         * @param {number} zlevel
		         */
		        clearLayer: function (zlevel) {
		            var layer = this._layers[zlevel];
		            if (layer) {
		                layer.clear();
		            }
		        },

		        /**
		         * 释放
		         */
		        dispose: function () {
		            this.root.innerHTML = '';

		            this.root =
		            this.storage =

		            this._domRoot =
		            this._layers = null;
		        },

		        /**
		         * Get canvas which has all thing rendered
		         * @param {Object} opts
		         * @param {string} [opts.backgroundColor]
		         */
		        getRenderedCanvas: function (opts) {
		            opts = opts || {};
		            if (this._singleCanvas) {
		                return this._layers[0].dom;
		            }

		            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
		            imageLayer.initContext();

		            var ctx = imageLayer.ctx;
		            imageLayer.clearColor = opts.backgroundColor;
		            imageLayer.clear();

		            var displayList = this.storage.getDisplayList(true);

		            for (var i = 0; i < displayList.length; i++) {
		                var el = displayList[i];
		                if (!el.invisible) {
		                    el.beforeBrush && el.beforeBrush(ctx);
		                    // TODO Check image cross origin
		                    el.brush(ctx, false);
		                    el.afterBrush && el.afterBrush(ctx);
		                }
		            }

		            return imageLayer.dom;
		        },
		        /**
		         * 获取绘图区域宽度
		         */
		        getWidth: function () {
		            return this._width;
		        },

		        /**
		         * 获取绘图区域高度
		         */
		        getHeight: function () {
		            return this._height;
		        },

		        _getWidth: function () {
		            var root = this.root;
		            var stl = document.defaultView.getComputedStyle(root);

		            // FIXME Better way to get the width and height when element has not been append to the document
		            return ((root.clientWidth || parseInt10(stl.width) || parseInt10(root.style.width))
		                    - (parseInt10(stl.paddingLeft) || 0)
		                    - (parseInt10(stl.paddingRight) || 0)) | 0;
		        },

		        _getHeight: function () {
		            var root = this.root;
		            var stl = document.defaultView.getComputedStyle(root);

		            return ((root.clientHeight || parseInt10(stl.height) || parseInt10(root.style.height))
		                    - (parseInt10(stl.paddingTop) || 0)
		                    - (parseInt10(stl.paddingBottom) || 0)) | 0;
		        },

		        _pathToImage: function (id, path, width, height, dpr) {
		            var canvas = document.createElement('canvas');
		            var ctx = canvas.getContext('2d');

		            canvas.width = width * dpr;
		            canvas.height = height * dpr;

		            ctx.clearRect(0, 0, width * dpr, height * dpr);

		            var pathTransform = {
		                position: path.position,
		                rotation: path.rotation,
		                scale: path.scale
		            };
		            path.position = [0, 0, 0];
		            path.rotation = 0;
		            path.scale = [1, 1];
		            if (path) {
		                path.brush(ctx);
		            }

		            var ImageShape = __webpack_require__(59);
		            var imgShape = new ImageShape({
		                id: id,
		                style: {
		                    x: 0,
		                    y: 0,
		                    image: canvas
		                }
		            });

		            if (pathTransform.position != null) {
		                imgShape.position = path.position = pathTransform.position;
		            }

		            if (pathTransform.rotation != null) {
		                imgShape.rotation = path.rotation = pathTransform.rotation;
		            }

		            if (pathTransform.scale != null) {
		                imgShape.scale = path.scale = pathTransform.scale;
		            }

		            return imgShape;
		        },

		        _createPathToImage: function () {
		            var me = this;

		            return function (id, e, width, height) {
		                return me._pathToImage(
		                    id, e, width, height, me.dpr
		                );
		            };
		        }
		    };

		    module.exports = Painter;



	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module zrender/Layer
		 * @author pissang(https://www.github.com/pissang)
		 */


		    var util = __webpack_require__(3);
		    var config = __webpack_require__(40);

		    function returnFalse() {
		        return false;
		    }

		    /**
		     * 创建dom
		     *
		     * @inner
		     * @param {string} id dom id 待用
		     * @param {string} type dom type，such as canvas, div etc.
		     * @param {Painter} painter painter instance
		     * @param {number} number
		     */
		    function createDom(id, type, painter, dpr) {
		        var newDom = document.createElement(type);
		        var width = painter.getWidth();
		        var height = painter.getHeight();

		        var newDomStyle = newDom.style;
		        // 没append呢，请原谅我这样写，清晰~
		        newDomStyle.position = 'absolute';
		        newDomStyle.left = 0;
		        newDomStyle.top = 0;
		        newDomStyle.width = width + 'px';
		        newDomStyle.height = height + 'px';
		        newDom.width = width * dpr;
		        newDom.height = height * dpr;

		        // id不作为索引用，避免可能造成的重名，定义为私有属性
		        newDom.setAttribute('data-zr-dom-id', id);
		        return newDom;
		    }

		    /**
		     * @alias module:zrender/Layer
		     * @constructor
		     * @extends module:zrender/mixin/Transformable
		     * @param {string} id
		     * @param {module:zrender/Painter} painter
		     * @param {number} [dpr]
		     */
		    var Layer = function(id, painter, dpr) {
		        var dom;
		        dpr = dpr || config.devicePixelRatio;
		        if (typeof id === 'string') {
		            dom = createDom(id, 'canvas', painter, dpr);
		        }
		        // Not using isDom because in node it will return false
		        else if (util.isObject(id)) {
		            dom = id;
		            id = dom.id;
		        }
		        this.id = id;
		        this.dom = dom;

		        var domStyle = dom.style;
		        if (domStyle) { // Not in node
		            dom.onselectstart = returnFalse; // 避免页面选中的尴尬
		            domStyle['-webkit-user-select'] = 'none';
		            domStyle['user-select'] = 'none';
		            domStyle['-webkit-touch-callout'] = 'none';
		            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
		        }

		        this.domBack = null;
		        this.ctxBack = null;

		        this.painter = painter;

		        this.config = null;

		        // Configs
		        /**
		         * 每次清空画布的颜色
		         * @type {string}
		         * @default 0
		         */
		        this.clearColor = 0;
		        /**
		         * 是否开启动态模糊
		         * @type {boolean}
		         * @default false
		         */
		        this.motionBlur = false;
		        /**
		         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
		         * @type {number}
		         * @default 0.7
		         */
		        this.lastFrameAlpha = 0.7;

		        /**
		         * Layer dpr
		         * @type {number}
		         */
		        this.dpr = dpr;
		    };

		    Layer.prototype = {

		        constructor: Layer,

		        elCount: 0,

		        __dirty: true,

		        initContext: function () {
		            this.ctx = this.dom.getContext('2d');

		            var dpr = this.dpr;
		            if (dpr != 1) {
		                this.ctx.scale(dpr, dpr);
		            }
		        },

		        createBackBuffer: function () {
		            var dpr = this.dpr;

		            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);
		            this.ctxBack = this.domBack.getContext('2d');

		            if (dpr != 1) {
		                this.ctxBack.scale(dpr, dpr);
		            }
		        },

		        /**
		         * @param  {number} width
		         * @param  {number} height
		         */
		        resize: function (width, height) {
		            var dpr = this.dpr;

		            var dom = this.dom;
		            var domStyle = dom.style;
		            var domBack = this.domBack;

		            domStyle.width = width + 'px';
		            domStyle.height = height + 'px';

		            dom.width = width * dpr;
		            dom.height = height * dpr;

		            if (dpr != 1) {
		                this.ctx.scale(dpr, dpr);
		            }

		            if (domBack) {
		                domBack.width = width * dpr;
		                domBack.height = height * dpr;

		                if (dpr != 1) {
		                    this.ctxBack.scale(dpr, dpr);
		                }
		            }
		        },

		        /**
		         * 清空该层画布
		         * @param {boolean} clearAll Clear all with out motion blur
		         */
		        clear: function (clearAll) {
		            var dom = this.dom;
		            var ctx = this.ctx;
		            var width = dom.width;
		            var height = dom.height;

		            var haveClearColor = this.clearColor;
		            var haveMotionBLur = this.motionBlur && !clearAll;
		            var lastFrameAlpha = this.lastFrameAlpha;

		            var dpr = this.dpr;

		            if (haveMotionBLur) {
		                if (!this.domBack) {
		                    this.createBackBuffer();
		                }

		                this.ctxBack.globalCompositeOperation = 'copy';
		                this.ctxBack.drawImage(
		                    dom, 0, 0,
		                    width / dpr,
		                    height / dpr
		                );
		            }

		            ctx.clearRect(0, 0, width / dpr, height / dpr);
		            if (haveClearColor) {
		                ctx.save();
		                ctx.fillStyle = this.clearColor;
		                ctx.fillRect(0, 0, width / dpr, height / dpr);
		                ctx.restore();
		            }

		            if (haveMotionBLur) {
		                var domBack = this.domBack;
		                ctx.save();
		                ctx.globalAlpha = lastFrameAlpha;
		                ctx.drawImage(domBack, 0, 0, width / dpr, height / dpr);
		                ctx.restore();
		            }
		        }
		    };

		    module.exports = Layer;


	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);
		    var PI = Math.PI;
		    /**
		     * @param {module:echarts/ExtensionAPI} api
		     * @param {Object} [opts]
		     * @param {string} [opts.text]
		     * @param {string} [opts.color]
		     * @param {string} [opts.textColor]
		     * @return {module:zrender/Element}
		     */
		    module.exports = function (api, opts) {
		        opts = opts || {};
		        zrUtil.defaults(opts, {
		            text: 'loading',
		            color: '#c23531',
		            textColor: '#000',
		            maskColor: 'rgba(255, 255, 255, 0.8)',
		            zlevel: 0
		        });
		        var mask = new graphic.Rect({
		            style: {
		                fill: opts.maskColor
		            },
		            zlevel: opts.zlevel,
		            z: 10000
		        });
		        var arc = new graphic.Arc({
		            shape: {
		                startAngle: -PI / 2,
		                endAngle: -PI / 2 + 0.1,
		                r: 10
		            },
		            style: {
		                stroke: opts.color,
		                lineCap: 'round',
		                lineWidth: 5
		            },
		            zlevel: opts.zlevel,
		            z: 10001
		        });
		        var labelRect = new graphic.Rect({
		            style: {
		                fill: 'none',
		                text: opts.text,
		                textPosition: 'right',
		                textDistance: 10,
		                textFill: opts.textColor
		            },
		            zlevel: opts.zlevel,
		            z: 10001
		        });

		        arc.animateShape(true)
		            .when(1000, {
		                endAngle: PI * 3 / 2
		            })
		            .start('circularInOut');
		        arc.animateShape(true)
		            .when(1000, {
		                startAngle: PI * 3 / 2
		            })
		            .delay(300)
		            .start('circularInOut');

		        var group = new graphic.Group();
		        group.add(arc);
		        group.add(labelRect);
		        group.add(mask);
		        // Inject resize
		        group.resize = function () {
		            var cx = api.getWidth() / 2;
		            var cy = api.getHeight() / 2;
		            arc.setShape({
		                cx: cx,
		                cy: cy
		            });
		            var r = arc.shape.r;
		            labelRect.setShape({
		                x: cx - r,
		                y: cy - r,
		                width: r * 2,
		                height: r * 2
		            });

		            mask.setShape({
		                x: 0,
		                y: 0,
		                width: api.getWidth(),
		                height: api.getHeight()
		            });
		        };
		        group.resize();
		        return group;
		    };


	/***/ },
	/* 88 */
	/***/ function(module, exports, __webpack_require__) {

		
		    var Gradient = __webpack_require__(4);
		    module.exports = function (seriesType, styleType, ecModel) {
		        function encodeColor(seriesModel) {
		            var colorAccessPath = [styleType, 'normal', 'color'];
		            var colorList = ecModel.get('color');
		            var data = seriesModel.getData();
		            var color = seriesModel.get(colorAccessPath) // Set in itemStyle
		                || colorList[seriesModel.seriesIndex % colorList.length];  // Default color

		            // FIXME Set color function or use the platte color
		            data.setVisual('color', color);

		            // Only visible series has each data be visual encoded
		            if (!ecModel.isSeriesFiltered(seriesModel)) {
		                if (typeof color === 'function' && !(color instanceof Gradient)) {
		                    data.each(function (idx) {
		                        data.setItemVisual(
		                            idx, 'color', color(seriesModel.getDataParams(idx))
		                        );
		                    });
		                }

		                data.each(function (idx) {
		                    var itemModel = data.getItemModel(idx);
		                    var color = itemModel.get(colorAccessPath, true);
		                    if (color != null) {
		                        data.setItemVisual(idx, 'color', color);
		                    }
		                });
		            }
		        }
		        seriesType ? ecModel.eachSeriesByType(seriesType, encodeColor)
		            : ecModel.eachSeries(encodeColor);
		    };


	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {

		// Compatitable with 2.0


		    var zrUtil = __webpack_require__(3);
		    var compatStyle = __webpack_require__(90);

		    function get(opt, path) {
		        path = path.split(',');
		        var obj = opt;
		        for (var i = 0; i < path.length; i++) {
		            obj = obj && obj[path[i]];
		            if (obj == null) {
		                break;
		            }
		        }
		        return obj;
		    }

		    function set(opt, path, val, overwrite) {
		        path = path.split(',');
		        var obj = opt;
		        var key;
		        for (var i = 0; i < path.length - 1; i++) {
		            key = path[i];
		            if (obj[key] == null) {
		                obj[key] = {};
		            }
		            obj = obj[key];
		        }
		        if (overwrite || obj[path[i]] == null) {
		            obj[path[i]] = val;
		        }
		    }

		    function compatLayoutProperties(option) {
		        each(LAYOUT_PROPERTIES, function (prop) {
		            if (prop[0] in option && !(prop[1] in option)) {
		                option[prop[1]] = option[prop[0]];
		            }
		        });
		    }

		    var LAYOUT_PROPERTIES = [
		        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']
		    ];

		    var COMPATITABLE_COMPONENTS = [
		        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'
		    ];

		    var COMPATITABLE_SERIES = [
		        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',
		        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',
		        'pie', 'radar', 'sankey', 'scatter', 'treemap'
		    ];

		    var each = zrUtil.each;

		    module.exports = function (option) {
		        each(option.series, function (seriesOpt) {
		            if (!zrUtil.isObject(seriesOpt)) {
		                return;
		            }

		            var seriesType = seriesOpt.type;

		            compatStyle(seriesOpt);

		            if (seriesType === 'pie' || seriesType === 'gauge') {
		                if (seriesOpt.clockWise != null) {
		                    seriesOpt.clockwise = seriesOpt.clockWise;
		                }
		            }
		            if (seriesType === 'gauge') {
		                var pointerColor = get(seriesOpt, 'pointer.color');
		                pointerColor != null
		                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
		            }

		            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
		                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
		                    compatLayoutProperties(seriesOpt);
		                    break;
		                }
		            }
		        });

		        // dataRange has changed to visualMap
		        if (option.dataRange) {
		            option.visualMap = option.dataRange;
		        }

		        each(COMPATITABLE_COMPONENTS, function (componentName) {
		            var options = option[componentName];
		            if (options) {
		                if (!zrUtil.isArray(options)) {
		                    options = [options];
		                }
		                each(options, function (option) {
		                    compatLayoutProperties(option);
		                });
		            }
		        });
		    };


	/***/ },
	/* 90 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    var POSSIBLE_STYLES = [
		        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',
		        'chordStyle', 'label', 'labelLine'
		    ];

		    function compatItemStyle(opt) {
		        var itemStyleOpt = opt && opt.itemStyle;
		        if (itemStyleOpt) {
		            zrUtil.each(POSSIBLE_STYLES, function (styleName) {
		                var normalItemStyleOpt = itemStyleOpt.normal;
		                var emphasisItemStyleOpt = itemStyleOpt.emphasis;
		                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
		                    opt[styleName] = opt[styleName] || {};
		                    if (!opt[styleName].normal) {
		                        opt[styleName].normal = normalItemStyleOpt[styleName];
		                    }
		                    else {
		                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
		                    }
		                    normalItemStyleOpt[styleName] = null;
		                }
		                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
		                    opt[styleName] = opt[styleName] || {};
		                    if (!opt[styleName].emphasis) {
		                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
		                    }
		                    else {
		                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
		                    }
		                    emphasisItemStyleOpt[styleName] = null;
		                }
		            });
		        }
		    }

		    module.exports = function (seriesOpt) {
		        if (!seriesOpt) {
		            return;
		        }
		        compatItemStyle(seriesOpt);
		        compatItemStyle(seriesOpt.markPoint);
		        compatItemStyle(seriesOpt.markLine);
		        var data = seriesOpt.data;
		        if (data) {
		            for (var i = 0; i < data.length; i++) {
		                compatItemStyle(data[i]);
		            }
		            // mark point data
		            var markPoint = seriesOpt.markPoint;
		            if (markPoint && markPoint.data) {
		                var mpData = markPoint.data;
		                for (var i = 0; i < mpData.length; i++) {
		                    compatItemStyle(mpData[i]);
		                }
		            }
		            // mark line data
		            var markLine = seriesOpt.markLine;
		            if (markLine && markLine.data) {
		                var mlData = markLine.data;
		                for (var i = 0; i < mlData.length; i++) {
		                    if (zrUtil.isArray(mlData[i])) {
		                        compatItemStyle(mlData[i][0]);
		                        compatItemStyle(mlData[i][1]);
		                    }
		                    else {
		                        compatItemStyle(mlData[i]);
		                    }
		                }
		            }
		        }
		    };


	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var echarts = __webpack_require__(1);

		    __webpack_require__(92);
		    __webpack_require__(97);

		    echarts.registerVisualCoding('chart', zrUtil.curry(
		        __webpack_require__(103), 'line', 'circle', 'line'
		    ));
		    echarts.registerLayout(zrUtil.curry(
		        __webpack_require__(104), 'line'
		    ));

		    // Down sample after filter
		    echarts.registerProcessor('statistic', zrUtil.curry(
		        __webpack_require__(105), 'line'
		    ));

		    // In case developer forget to include grid component
		    __webpack_require__(106);


	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var createListFromArray = __webpack_require__(93);
		    var SeriesModel = __webpack_require__(27);

		    module.exports = SeriesModel.extend({

		        type: 'series.line',

		        dependencies: ['grid', 'polar'],

		        getInitialData: function (option, ecModel) {
		            return createListFromArray(option.data, this, ecModel);
		        },

		        defaultOption: {
		            zlevel: 0,                  // 一级层叠
		            z: 2,                       // 二级层叠
		            coordinateSystem: 'cartesian2d',
		            legendHoverLink: true,

		            hoverAnimation: true,
		            // stack: null
		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            polarIndex: 0,

		            // If clip the overflow value
		            clipOverflow: true,

		            label: {
		                normal: {
		                    // show: false,
		                    position: 'top'
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
		                    //           'inside'|'left'|'right'|'top'|'bottom'
		                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		                }
		                // emphasis: {
		                    // show: false,
		                    // position: 'top'
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
		                    //           'inside'|'left'|'right'|'top'|'bottom'
		                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		                // }
		            },
		            // itemStyle: {
		            //     normal: {
		            //         // color: 各异
		            //     },
		            //     emphasis: {
		            //         // color: 各异,
		            //     }
		            // },
		            lineStyle: {
		                normal: {
		                    width: 2,
		                    type: 'solid'
		                }
		            },
		            // areaStyle: {
		            // },
		            // smooth: false,
		            // smoothMonotone: null,
		            // 拐点图形类型
		            symbol: 'emptyCircle',
		            // 拐点图形大小
		            symbolSize: 4,
		            // 拐点图形旋转控制
		            // symbolRotate: null,

		            // 是否显示 symbol, 只有在 tooltip hover 的时候显示
		            showSymbol: true,
		            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
		            // showAllSymbol: false
		            //
		            // 大数据过滤，'average', 'max', 'min', 'sum'
		            // sampling: 'none'

		            animationEasing: 'linear'
		        }
		    });


	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var List = __webpack_require__(94);
		    var completeDimensions = __webpack_require__(96);
		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);
		    var CoordinateSystem = __webpack_require__(25);
		    var getDataItemValue = modelUtil.getDataItemValue;
		    var converDataValue = modelUtil.converDataValue;

		    function firstDataNotNull(data) {
		        var i = 0;
		        while (i < data.length && data[i] == null) {
		            i++;
		        }
		        return data[i];
		    }
		    function ifNeedCompleteOrdinalData(data) {
		        var sampleItem = firstDataNotNull(data);
		        return sampleItem != null
		            && !zrUtil.isArray(getDataItemValue(sampleItem));
		    }

		    /**
		     * Helper function to create a list from option data
		     */
		    function createListFromArray(data, seriesModel, ecModel) {
		        // If data is undefined
		        data = data || [];

		        var coordSysName = seriesModel.get('coordinateSystem');
		        var creator = creators[coordSysName];
		        var registeredCoordSys = CoordinateSystem.get(coordSysName);
		        // FIXME
		        var result = creator && creator(data, seriesModel, ecModel);
		        var dimensions = result && result.dimensions;
		        if (!dimensions) {
		            // Get dimensions from registered coordinate system
		            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];
		            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));
		        }
		        var categoryAxisModel = result && result.categoryAxisModel;

		        var categoryDimIndex = dimensions[0].type === 'ordinal'
		            ? 0 : (dimensions[1].type === 'ordinal' ? 1 : -1);

		        var list = new List(dimensions, seriesModel);

		        var nameList = createNameList(result, data);

		        var dimValueGetter = (categoryAxisModel && ifNeedCompleteOrdinalData(data))
		            ? function (itemOpt, dimName, dataIndex, dimIndex) {
		                // Use dataIndex as ordinal value in categoryAxis
		                return dimIndex === categoryDimIndex
		                    ? dataIndex
		                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
		            }
		            : function (itemOpt, dimName, dataIndex, dimIndex) {
		                var val = getDataItemValue(itemOpt);
		                return converDataValue(val && val[dimIndex], dimensions[dimIndex]);
		            };

		        list.initData(data, nameList, dimValueGetter);

		        return list;
		    }

		    function isStackable(axisType) {
		        return axisType !== 'category' && axisType !== 'time';
		    }

		    function getDimTypeByAxis(axisType) {
		        return axisType === 'category'
		            ? 'ordinal'
		            : axisType === 'time'
		            ? 'time'
		            : 'float';
		    }

		    /**
		     * Creaters for each coord system.
		     * @return {Object} {dimensions, categoryAxisModel};
		     */
		    var creators = {

		        cartesian2d: function (data, seriesModel, ecModel) {
		            var xAxisModel = ecModel.getComponent('xAxis', seriesModel.get('xAxisIndex'));
		            var yAxisModel = ecModel.getComponent('yAxis', seriesModel.get('yAxisIndex'));
		            var xAxisType = xAxisModel.get('type');
		            var yAxisType = yAxisModel.get('type');

		            var dimensions = [
		                {
		                    name: 'x',
		                    type: getDimTypeByAxis(xAxisType),
		                    stackable: isStackable(xAxisType)
		                },
		                {
		                    name: 'y',
		                    // If two category axes
		                    type: getDimTypeByAxis(yAxisType),
		                    stackable: isStackable(yAxisType)
		                }
		            ];

		            var isXAxisCateogry = xAxisType === 'category';

		            completeDimensions(dimensions, data, ['x', 'y', 'z']);

		            return {
		                dimensions: dimensions,
		                categoryIndex: isXAxisCateogry ? 0 : 1,
		                categoryAxisModel: isXAxisCateogry
		                    ? xAxisModel
		                    : (yAxisType === 'category' ? yAxisModel : null)
		            };
		        },

		        polar: function (data, seriesModel, ecModel) {
		            var polarIndex = seriesModel.get('polarIndex') || 0;

		            var axisFinder = function (axisModel) {
		                return axisModel.get('polarIndex') === polarIndex;
		            };

		            var angleAxisModel = ecModel.findComponents({
		                mainType: 'angleAxis', filter: axisFinder
		            })[0];
		            var radiusAxisModel = ecModel.findComponents({
		                mainType: 'radiusAxis', filter: axisFinder
		            })[0];

		            var radiusAxisType = radiusAxisModel.get('type');
		            var angleAxisType = angleAxisModel.get('type');

		            var dimensions = [
		                {
		                    name: 'radius',
		                    type: getDimTypeByAxis(radiusAxisType),
		                    stackable: isStackable(radiusAxisType)
		                },
		                {
		                    name: 'angle',
		                    type: getDimTypeByAxis(angleAxisType),
		                    stackable: isStackable(angleAxisType)
		                }
		            ];
		            var isAngleAxisCateogry = angleAxisType === 'category';

		            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);

		            return {
		                dimensions: dimensions,
		                categoryIndex: isAngleAxisCateogry ? 1 : 0,
		                categoryAxisModel: isAngleAxisCateogry
		                    ? angleAxisModel
		                    : (radiusAxisType === 'category' ? radiusAxisModel : null)
		            };
		        },

		        geo: function (data, seriesModel, ecModel) {
		            // TODO Region
		            // 多个散点图系列在同一个地区的时候
		            return {
		                dimensions: completeDimensions([
		                    {name: 'lng'},
		                    {name: 'lat'}
		                ], data, ['lng', 'lat', 'value'])
		            };
		        }
		    };

		    function createNameList(result, data) {
		        var nameList = [];

		        if (result && result.categoryAxisModel) {
		            // FIXME Two category axis
		            var categories = result.categoryAxisModel.getCategories();
		            if (categories) {
		                var dataLen = data.length;
		                // Ordered data is given explicitly like
		                // [[3, 0.2], [1, 0.3], [2, 0.15]]
		                // or given scatter data,
		                // pick the category
		                if (zrUtil.isArray(data[0]) && data[0].length > 1) {
		                    nameList = [];
		                    for (var i = 0; i < dataLen; i++) {
		                        nameList[i] = categories[data[i][result.categoryIndex || 0]];
		                    }
		                }
		                else {
		                    nameList = categories.slice(0);
		                }
		            }
		        }

		        return nameList;
		    }

		    module.exports = createListFromArray;



	/***/ },
	/* 94 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {/**
		 * List for data storage
		 * @module echarts/data/List
		 */


		    var UNDEFINED = 'undefined';
		    var globalObj = typeof window === 'undefined' ? global : window;
		    var Float64Array = typeof globalObj.Float64Array === UNDEFINED
		        ? Array : globalObj.Float64Array;
		    var Int32Array = typeof globalObj.Int32Array === UNDEFINED
		        ? Array : globalObj.Int32Array;

		    var dataCtors = {
		        'float': Float64Array,
		        'int': Int32Array,
		        // Ordinal data type can be string or int
		        'ordinal': Array,
		        'number': Array,
		        'time': Array
		    };

		    var Model = __webpack_require__(8);
		    var DataDiffer = __webpack_require__(95);

		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);
		    var isObject = zrUtil.isObject;

		    var IMMUTABLE_PROPERTIES = [
		        'stackedOn', '_nameList', '_idList', '_rawData'
		    ];

		    var transferImmuProperties = function (a, b, wrappedMethod) {
		        zrUtil.each(IMMUTABLE_PROPERTIES.concat(wrappedMethod || []), function (propName) {
		            if (b.hasOwnProperty(propName)) {
		                a[propName] = b[propName];
		            }
		        });
		    };

		    /**
		     * @constructor
		     * @alias module:echarts/data/List
		     *
		     * @param {Array.<string>} dimensions
		     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
		     * @param {module:echarts/model/Model} hostModel
		     */
		    var List = function (dimensions, hostModel) {

		        dimensions = dimensions || ['x', 'y'];

		        var dimensionInfos = {};
		        var dimensionNames = [];
		        for (var i = 0; i < dimensions.length; i++) {
		            var dimensionName;
		            var dimensionInfo = {};
		            if (typeof dimensions[i] === 'string') {
		                dimensionName = dimensions[i];
		                dimensionInfo = {
		                    name: dimensionName,
		                    stackable: false,
		                    // Type can be 'float', 'int', 'number'
		                    // Default is number, Precision of float may not enough
		                    type: 'number'
		                };
		            }
		            else {
		                dimensionInfo = dimensions[i];
		                dimensionName = dimensionInfo.name;
		                dimensionInfo.type = dimensionInfo.type || 'number';
		            }
		            dimensionNames.push(dimensionName);
		            dimensionInfos[dimensionName] = dimensionInfo;
		        }
		        /**
		         * @readOnly
		         * @type {Array.<string>}
		         */
		        this.dimensions = dimensionNames;

		        /**
		         * Infomation of each data dimension, like data type.
		         * @type {Object}
		         */
		        this._dimensionInfos = dimensionInfos;

		        /**
		         * @type {module:echarts/model/Model}
		         */
		        this.hostModel = hostModel;

		        /**
		         * Indices stores the indices of data subset after filtered.
		         * This data subset will be used in chart.
		         * @type {Array.<number>}
		         * @readOnly
		         */
		        this.indices = [];

		        /**
		         * Data storage
		         * @type {Object.<key, TypedArray|Array>}
		         * @private
		         */
		        this._storage = {};

		        /**
		         * @type {Array.<string>}
		         */
		        this._nameList = [];
		        /**
		         * @type {Array.<string>}
		         */
		        this._idList = [];
		        /**
		         * Models of data option is stored sparse for optimizing memory cost
		         * @type {Array.<module:echarts/model/Model>}
		         * @private
		         */
		        this._optionModels = [];

		        /**
		         * @param {module:echarts/data/List}
		         */
		        this.stackedOn = null;

		        /**
		         * Global visual properties after visual coding
		         * @type {Object}
		         * @private
		         */
		        this._visual = {};

		        /**
		         * Globel layout properties.
		         * @type {Object}
		         * @private
		         */
		        this._layout = {};

		        /**
		         * Item visual properties after visual coding
		         * @type {Array.<Object>}
		         * @private
		         */
		        this._itemVisuals = [];

		        /**
		         * Item layout properties after layout
		         * @type {Array.<Object>}
		         * @private
		         */
		        this._itemLayouts = [];

		        /**
		         * Graphic elemnents
		         * @type {Array.<module:zrender/Element>}
		         * @private
		         */
		        this._graphicEls = [];

		        /**
		         * @type {Array.<Array|Object>}
		         * @private
		         */
		        this._rawData;

		        /**
		         * @type {Object}
		         * @private
		         */
		        this._extent;
		    };

		    var listProto = List.prototype;

		    listProto.type = 'list';

		    /**
		     * Get dimension name
		     * @param {string|number} dim
		     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
		     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
		     */
		    listProto.getDimension = function (dim) {
		        if (!isNaN(dim)) {
		            dim = this.dimensions[dim] || dim;
		        }
		        return dim;
		    };
		    /**
		     * Get type and stackable info of particular dimension
		     * @param {string|number} dim
		     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
		     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
		     */
		    listProto.getDimensionInfo = function (dim) {
		        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
		    };

		    /**
		     * Initialize from data
		     * @param {Array.<Object|number|Array>} data
		     * @param {Array.<string>} [nameList]
		     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
		     */
		    listProto.initData = function (data, nameList, dimValueGetter) {
		        data = data || [];

		        this._rawData = data;

		        // Clear
		        var storage = this._storage = {};
		        var indices = this.indices = [];

		        var dimensions = this.dimensions;
		        var size = data.length;
		        var dimensionInfoMap = this._dimensionInfos;

		        var idList = [];
		        var nameRepeatCount = {};

		        nameList = nameList || [];

		        // Init storage
		        for (var i = 0; i < dimensions.length; i++) {
		            var dimInfo = dimensionInfoMap[dimensions[i]];
		            var DataCtor = dataCtors[dimInfo.type];
		            storage[dimensions[i]] = new DataCtor(size);
		        }

		        // Default dim value getter
		        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
		            var value = modelUtil.getDataItemValue(dataItem);
		            return modelUtil.converDataValue(
		                zrUtil.isArray(value)
		                    ? value[dimIndex]
		                    // If value is a single number or something else not array.
		                    : value,
		                dimensionInfoMap[dimName]
		            );
		        };

		        for (var idx = 0; idx < data.length; idx++) {
		            var dataItem = data[idx];
		            // Each data item is value
		            // [1, 2]
		            // 2
		            // Bar chart, line chart which uses category axis
		            // only gives the 'y' value. 'x' value is the indices of cateogry
		            // Use a tempValue to normalize the value to be a (x, y) value

		            // Store the data by dimensions
		            for (var k = 0; k < dimensions.length; k++) {
		                var dim = dimensions[k];
		                var dimStorage = storage[dim];
		                // PENDING NULL is empty or zero
		                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);
		            }

		            indices.push(idx);
		        }

		        // Use the name in option and create id
		        for (var i = 0; i < data.length; i++) {
		            var id = '';
		            if (!nameList[i]) {
		                nameList[i] = data[i].name;
		                // Try using the id in option
		                id = data[i].id;
		            }
		            var name = nameList[i] || '';
		            if (!id && name) {
		                // Use name as id and add counter to avoid same name
		                nameRepeatCount[name] = nameRepeatCount[name] || 0;
		                id = name;
		                if (nameRepeatCount[name] > 0) {
		                    id += '__ec__' + nameRepeatCount[name];
		                }
		                nameRepeatCount[name]++;
		            }
		            id && (idList[i] = id);
		        }

		        this._nameList = nameList;
		        this._idList = idList;
		    };

		    /**
		     * @return {number}
		     */
		    listProto.count = function () {
		        return this.indices.length;
		    };

		    /**
		     * Get value. Return NaN if idx is out of range.
		     * @param {string} dim Dim must be concrete name.
		     * @param {number} idx
		     * @param {boolean} stack
		     * @return {number}
		     */
		    listProto.get = function (dim, idx, stack) {
		        var storage = this._storage;
		        var dataIndex = this.indices[idx];

		        // If value not exists
		        if (dataIndex == null) {
		            return NaN;
		        }

		        var value = storage[dim] && storage[dim][dataIndex];
		        // FIXME ordinal data type is not stackable
		        if (stack) {
		            var dimensionInfo = this._dimensionInfos[dim];
		            if (dimensionInfo && dimensionInfo.stackable) {
		                var stackedOn = this.stackedOn;
		                while (stackedOn) {
		                    // Get no stacked data of stacked on
		                    var stackedValue = stackedOn.get(dim, idx);
		                    // Considering positive stack, negative stack and empty data
		                    if ((value >= 0 && stackedValue > 0)  // Positive stack
		                        || (value <= 0 && stackedValue < 0) // Negative stack
		                    ) {
		                        value += stackedValue;
		                    }
		                    stackedOn = stackedOn.stackedOn;
		                }
		            }
		        }
		        return value;
		    };

		    /**
		     * Get value for multi dimensions.
		     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
		     * @param {number} idx
		     * @param {boolean} stack
		     * @return {number}
		     */
		    listProto.getValues = function (dimensions, idx, stack) {
		        var values = [];

		        if (!zrUtil.isArray(dimensions)) {
		            stack = idx;
		            idx = dimensions;
		            dimensions = this.dimensions;
		        }

		        for (var i = 0, len = dimensions.length; i < len; i++) {
		            values.push(this.get(dimensions[i], idx, stack));
		        }

		        return values;
		    };

		    /**
		     * If value is NaN. Inlcuding '-'
		     * @param {string} dim
		     * @param {number} idx
		     * @return {number}
		     */
		    listProto.hasValue = function (idx) {
		        var dimensions = this.dimensions;
		        var dimensionInfos = this._dimensionInfos;
		        for (var i = 0, len = dimensions.length; i < len; i++) {
		            if (
		                // Ordinal type can be string or number
		                dimensionInfos[dimensions[i]].type !== 'ordinal'
		                && isNaN(this.get(dimensions[i], idx))
		            ) {
		                return false;
		            }
		        }
		        return true;
		    };

		    /**
		     * Get extent of data in one dimension
		     * @param {string} dim
		     * @param {boolean} stack
		     */
		    listProto.getDataExtent = function (dim, stack) {
		        var dimData = this._storage[dim];
		        var dimInfo = this.getDimensionInfo(dim);
		        stack = (dimInfo && dimInfo.stackable) && stack;
		        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];
		        var value;
		        if (dimExtent) {
		            return dimExtent;
		        }
		        // var dimInfo = this._dimensionInfos[dim];
		        if (dimData) {
		            var min = Infinity;
		            var max = -Infinity;
		            // var isOrdinal = dimInfo.type === 'ordinal';
		            for (var i = 0, len = this.count(); i < len; i++) {
		                value = this.get(dim, i, stack);
		                // FIXME
		                // if (isOrdinal && typeof value === 'string') {
		                //     value = zrUtil.indexOf(dimData, value);
		                //     console.log(value);
		                // }
		                value < min && (min = value);
		                value > max && (max = value);
		            }
		            return (this._extent[dim + stack] = [min, max]);
		        }
		        else {
		            return [Infinity, -Infinity];
		        }
		    };

		    /**
		     * Get sum of data in one dimension
		     * @param {string} dim
		     * @param {boolean} stack
		     */
		    listProto.getSum = function (dim, stack) {
		        var dimData = this._storage[dim];
		        var sum = 0;
		        if (dimData) {
		            for (var i = 0, len = this.count(); i < len; i++) {
		                var value = this.get(dim, i, stack);
		                if (!isNaN(value)) {
		                    sum += value;
		                }
		            }
		        }
		        return sum;
		    };

		    /**
		     * Retreive the index with given value
		     * @param {number} idx
		     * @param {number} value
		     * @return {number}
		     */
		    // FIXME Precision of float value
		    listProto.indexOf = function (dim, value) {
		        var storage = this._storage;
		        var dimData = storage[dim];
		        var indices = this.indices;

		        if (dimData) {
		            for (var i = 0, len = indices.length; i < len; i++) {
		                var rawIndex = indices[i];
		                if (dimData[rawIndex] === value) {
		                    return i;
		                }
		            }
		        }
		        return -1;
		    };

		    /**
		     * Retreive the index with given name
		     * @param {number} idx
		     * @param {number} name
		     * @return {number}
		     */
		    listProto.indexOfName = function (name) {
		        var indices = this.indices;
		        var nameList = this._nameList;

		        for (var i = 0, len = indices.length; i < len; i++) {
		            var rawIndex = indices[i];
		            if (nameList[rawIndex] === name) {
		                return i;
		            }
		        }

		        return -1;
		    };

		    /**
		     * Retreive the index of nearest value
		     * @param {string>} dim
		     * @param {number} value
		     * @param {boolean} stack If given value is after stacked
		     * @return {number}
		     */
		    listProto.indexOfNearest = function (dim, value, stack) {
		        var storage = this._storage;
		        var dimData = storage[dim];

		        if (dimData) {
		            var minDist = Number.MAX_VALUE;
		            var nearestIdx = -1;
		            for (var i = 0, len = this.count(); i < len; i++) {
		                var diff = value - this.get(dim, i, stack);
		                var dist = Math.abs(diff);
		                if (dist < minDist
		                    // For the case of two data are same on xAxis, which has sequence data.
		                    // Show the nearest index
		                    // https://github.com/ecomfe/echarts/issues/2869
		                    || (dist === minDist && diff > 0)
		                ) {
		                    minDist = dist;
		                    nearestIdx = i;
		                }
		            }
		            return nearestIdx;
		        }
		        return -1;
		    };

		    /**
		     * Get raw data index
		     * @param {number} idx
		     * @return {number}
		     */
		    listProto.getRawIndex = function (idx) {
		        var rawIdx = this.indices[idx];
		        return rawIdx == null ? -1 : rawIdx;
		    };

		    /**
		     * @param {number} idx
		     * @param {boolean} [notDefaultIdx=false]
		     * @return {string}
		     */
		    listProto.getName = function (idx) {
		        return this._nameList[this.indices[idx]] || '';
		    };

		    /**
		     * @param {number} idx
		     * @param {boolean} [notDefaultIdx=false]
		     * @return {string}
		     */
		    listProto.getId = function (idx) {
		        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');
		    };


		    function normalizeDimensions(dimensions) {
		        if (!zrUtil.isArray(dimensions)) {
		            dimensions = [dimensions];
		        }
		        return dimensions;
		    }

		    /**
		     * Data iteration
		     * @param {string|Array.<string>}
		     * @param {Function} cb
		     * @param {boolean} [stack=false]
		     * @param {*} [context=this]
		     *
		     * @example
		     *  list.each('x', function (x, idx) {});
		     *  list.each(['x', 'y'], function (x, y, idx) {});
		     *  list.each(function (idx) {})
		     */
		    listProto.each = function (dimensions, cb, stack, context) {
		        if (typeof dimensions === 'function') {
		            context = stack;
		            stack = cb;
		            cb = dimensions;
		            dimensions = [];
		        }

		        dimensions = zrUtil.map(
		            normalizeDimensions(dimensions), this.getDimension, this
		        );

		        var value = [];
		        var dimSize = dimensions.length;
		        var indices = this.indices;

		        context = context || this;

		        for (var i = 0; i < indices.length; i++) {
		            if (dimSize === 0) {
		                cb.call(context, i);
		            }
		            // Simple optimization
		            else if (dimSize === 1) {
		                cb.call(context, this.get(dimensions[0], i, stack), i);
		            }
		            else {
		                for (var k = 0; k < dimSize; k++) {
		                    value[k] = this.get(dimensions[k], i, stack);
		                }
		                // Index
		                value[k] = i;
		                cb.apply(context, value);
		            }
		        }
		    };

		    /**
		     * Data filter
		     * @param {string|Array.<string>}
		     * @param {Function} cb
		     * @param {boolean} [stack=false]
		     * @param {*} [context=this]
		     */
		    listProto.filterSelf = function (dimensions, cb, stack, context) {
		        if (typeof dimensions === 'function') {
		            context = stack;
		            stack = cb;
		            cb = dimensions;
		            dimensions = [];
		        }

		        dimensions = zrUtil.map(
		            normalizeDimensions(dimensions), this.getDimension, this
		        );

		        var newIndices = [];
		        var value = [];
		        var dimSize = dimensions.length;
		        var indices = this.indices;

		        context = context || this;

		        for (var i = 0; i < indices.length; i++) {
		            var keep;
		            // Simple optimization
		            if (dimSize === 1) {
		                keep = cb.call(
		                    context, this.get(dimensions[0], i, stack), i
		                );
		            }
		            else {
		                for (var k = 0; k < dimSize; k++) {
		                    value[k] = this.get(dimensions[k], i, stack);
		                }
		                value[k] = i;
		                keep = cb.apply(context, value);
		            }
		            if (keep) {
		                newIndices.push(indices[i]);
		            }
		        }

		        this.indices = newIndices;

		        // Reset data extent
		        this._extent = {};

		        return this;
		    };

		    /**
		     * Data mapping to a plain array
		     * @param {string|Array.<string>} [dimensions]
		     * @param {Function} cb
		     * @param {boolean} [stack=false]
		     * @param {*} [context=this]
		     * @return {Array}
		     */
		    listProto.mapArray = function (dimensions, cb, stack, context) {
		        if (typeof dimensions === 'function') {
		            context = stack;
		            stack = cb;
		            cb = dimensions;
		            dimensions = [];
		        }

		        var result = [];
		        this.each(dimensions, function () {
		            result.push(cb && cb.apply(this, arguments));
		        }, stack, context);
		        return result;
		    };

		    function cloneListForMapAndSample(original, excludeDimensions) {
		        var allDimensions = original.dimensions;
		        var list = new List(
		            zrUtil.map(allDimensions, original.getDimensionInfo, original),
		            original.hostModel
		        );
		        // FIXME If needs stackedOn, value may already been stacked
		        transferImmuProperties(list, original, original._wrappedMethods);

		        var storage = list._storage = {};
		        var originalStorage = original._storage;
		        // Init storage
		        for (var i = 0; i < allDimensions.length; i++) {
		            var dim = allDimensions[i];
		            var dimStore = originalStorage[dim];
		            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
		                storage[dim] = new dimStore.constructor(
		                    originalStorage[dim].length
		                );
		            }
		            else {
		                // Direct reference for other dimensions
		                storage[dim] = originalStorage[dim];
		            }
		        }
		        return list;
		    }

		    /**
		     * Data mapping to a new List with given dimensions
		     * @param {string|Array.<string>} dimensions
		     * @param {Function} cb
		     * @param {boolean} [stack=false]
		     * @param {*} [context=this]
		     * @return {Array}
		     */
		    listProto.map = function (dimensions, cb, stack, context) {
		        dimensions = zrUtil.map(
		            normalizeDimensions(dimensions), this.getDimension, this
		        );

		        var list = cloneListForMapAndSample(this, dimensions);
		        // Following properties are all immutable.
		        // So we can reference to the same value
		        var indices = list.indices = this.indices;

		        var storage = list._storage;

		        var tmpRetValue = [];
		        this.each(dimensions, function () {
		            var idx = arguments[arguments.length - 1];
		            var retValue = cb && cb.apply(this, arguments);
		            if (retValue != null) {
		                // a number
		                if (typeof retValue === 'number') {
		                    tmpRetValue[0] = retValue;
		                    retValue = tmpRetValue;
		                }
		                for (var i = 0; i < retValue.length; i++) {
		                    var dim = dimensions[i];
		                    var dimStore = storage[dim];
		                    var rawIdx = indices[idx];
		                    if (dimStore) {
		                        dimStore[rawIdx] = retValue[i];
		                    }
		                }
		            }
		        }, stack, context);

		        return list;
		    };

		    /**
		     * Large data down sampling on given dimension
		     * @param {string} dimension
		     * @param {number} rate
		     * @param {Function} sampleValue
		     * @param {Function} sampleIndex Sample index for name and id
		     */
		    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
		        var list = cloneListForMapAndSample(this, [dimension]);
		        var storage = this._storage;
		        var targetStorage = list._storage;

		        var originalIndices = this.indices;
		        var indices = list.indices = [];

		        var frameValues = [];
		        var frameIndices = [];
		        var frameSize = Math.floor(1 / rate);

		        var dimStore = targetStorage[dimension];
		        var len = this.count();
		        // Copy data from original data
		        for (var i = 0; i < storage[dimension].length; i++) {
		            targetStorage[dimension][i] = storage[dimension][i];
		        }
		        for (var i = 0; i < len; i += frameSize) {
		            // Last frame
		            if (frameSize > len - i) {
		                frameSize = len - i;
		                frameValues.length = frameSize;
		            }
		            for (var k = 0; k < frameSize; k++) {
		                var idx = originalIndices[i + k];
		                frameValues[k] = dimStore[idx];
		                frameIndices[k] = idx;
		            }
		            var value = sampleValue(frameValues);
		            var idx = frameIndices[sampleIndex(frameValues, value) || 0];
		            // Only write value on the filtered data
		            dimStore[idx] = value;
		            indices.push(idx);
		        }
		        return list;
		    };

		    /**
		     * Get model of one data item.
		     *
		     * @param {number} idx
		     */
		    // FIXME Model proxy ?
		    listProto.getItemModel = function (idx) {
		        var hostModel = this.hostModel;
		        idx = this.indices[idx];
		        return new Model(this._rawData[idx], hostModel, hostModel.ecModel);
		    };

		    /**
		     * Create a data differ
		     * @param {module:echarts/data/List} otherList
		     * @return {module:echarts/data/DataDiffer}
		     */
		    listProto.diff = function (otherList) {
		        var idList = this._idList;
		        var otherIdList = otherList && otherList._idList;
		        return new DataDiffer(
		            otherList ? otherList.indices : [], this.indices, function (idx) {
		                return otherIdList[idx] || (idx + '');
		            }, function (idx) {
		                return idList[idx] || (idx + '');
		            }
		        );
		    };
		    /**
		     * Get visual property.
		     * @param {string} key
		     */
		    listProto.getVisual = function (key) {
		        var visual = this._visual;
		        return visual && visual[key];
		    };

		    /**
		     * Set visual property
		     * @param {string|Object} key
		     * @param {*} [value]
		     *
		     * @example
		     *  setVisual('color', color);
		     *  setVisual({
		     *      'color': color
		     *  });
		     */
		    listProto.setVisual = function (key, val) {
		        if (isObject(key)) {
		            for (var name in key) {
		                if (key.hasOwnProperty(name)) {
		                    this.setVisual(name, key[name]);
		                }
		            }
		            return;
		        }
		        this._visual = this._visual || {};
		        this._visual[key] = val;
		    };

		    /**
		     * Set layout property.
		     * @param {string} key
		     * @param {*} [val]
		     */
		    listProto.setLayout = function (key, val) {
		        if (isObject(key)) {
		            for (var name in key) {
		                if (key.hasOwnProperty(name)) {
		                    this.setLayout(name, key[name]);
		                }
		            }
		            return;
		        }
		        this._layout[key] = val;
		    };

		    /**
		     * Get layout property.
		     * @param  {string} key.
		     * @return {*}
		     */
		    listProto.getLayout = function (key) {
		        return this._layout[key];
		    };

		    /**
		     * Get layout of single data item
		     * @param {number} idx
		     */
		    listProto.getItemLayout = function (idx) {
		        return this._itemLayouts[idx];
		    },

		    /**
		     * Set layout of single data item
		     * @param {number} idx
		     * @param {Object} layout
		     * @param {boolean=} [merge=false]
		     */
		    listProto.setItemLayout = function (idx, layout, merge) {
		        this._itemLayouts[idx] = merge
		            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)
		            : layout;
		    },

		    /**
		     * Get visual property of single data item
		     * @param {number} idx
		     * @param {string} key
		     * @param {boolean} ignoreParent
		     */
		    listProto.getItemVisual = function (idx, key, ignoreParent) {
		        var itemVisual = this._itemVisuals[idx];
		        var val = itemVisual && itemVisual[key];
		        if (val == null && !ignoreParent) {
		            // Use global visual property
		            return this.getVisual(key);
		        }
		        return val;
		    },

		    /**
		     * Set visual property of single data item
		     *
		     * @param {number} idx
		     * @param {string|Object} key
		     * @param {*} [value]
		     *
		     * @example
		     *  setItemVisual(0, 'color', color);
		     *  setItemVisual(0, {
		     *      'color': color
		     *  });
		     */
		    listProto.setItemVisual = function (idx, key, value) {
		        var itemVisual = this._itemVisuals[idx] || {};
		        this._itemVisuals[idx] = itemVisual;

		        if (isObject(key)) {
		            for (var name in key) {
		                if (key.hasOwnProperty(name)) {
		                    itemVisual[name] = key[name];
		                }
		            }
		            return;
		        }
		        itemVisual[key] = value;
		    };

		    var setItemDataAndSeriesIndex = function (child) {
		        child.seriesIndex = this.seriesIndex;
		        child.dataIndex = this.dataIndex;
		    };
		    /**
		     * Set graphic element relative to data. It can be set as null
		     * @param {number} idx
		     * @param {module:zrender/Element} [el]
		     */
		    listProto.setItemGraphicEl = function (idx, el) {
		        var hostModel = this.hostModel;

		        if (el) {
		            // Add data index and series index for indexing the data by element
		            // Useful in tooltip
		            el.dataIndex = idx;
		            el.seriesIndex = hostModel && hostModel.seriesIndex;
		            if (el.type === 'group') {
		                el.traverse(setItemDataAndSeriesIndex, el);
		            }
		        }

		        this._graphicEls[idx] = el;
		    };

		    /**
		     * @param {number} idx
		     * @return {module:zrender/Element}
		     */
		    listProto.getItemGraphicEl = function (idx) {
		        return this._graphicEls[idx];
		    };

		    /**
		     * @param {Function} cb
		     * @param {*} context
		     */
		    listProto.eachItemGraphicEl = function (cb, context) {
		        zrUtil.each(this._graphicEls, function (el, idx) {
		            if (el) {
		                cb && cb.call(context, el, idx);
		            }
		        });
		    };

		    /**
		     * Shallow clone a new list except visual and layout properties, and graph elements.
		     * New list only change the indices.
		     */
		    listProto.cloneShallow = function () {
		        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
		        var list = new List(dimensionInfoList, this.hostModel);

		        // FIXME
		        list._storage = this._storage;

		        transferImmuProperties(list, this, this._wrappedMethods);

		        list.indices = this.indices.slice();

		        return list;
		    };

		    /**
		     * Wrap some method to add more feature
		     * @param {string} methodName
		     * @param {Function} injectFunction
		     */
		    listProto.wrapMethod = function (methodName, injectFunction) {
		        var originalMethod = this[methodName];
		        if (typeof originalMethod !== 'function') {
		            return;
		        }
		        this._wrappedMethods = this._wrappedMethods || [];
		        this._wrappedMethods.push(methodName);
		        this[methodName] = function () {
		            var res = originalMethod.apply(this, arguments);
		            return injectFunction.call(this, res);
		        };
		    };

		    module.exports = List;

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 95 */
	/***/ function(module, exports) {

		'use strict';


		    function defaultKeyGetter(item) {
		        return item;
		    }

		    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {
		        this._old = oldArr;
		        this._new = newArr;

		        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
		        this._newKeyGetter = newKeyGetter || defaultKeyGetter;
		    }

		    DataDiffer.prototype = {

		        constructor: DataDiffer,

		        /**
		         * Callback function when add a data
		         */
		        add: function (func) {
		            this._add = func;
		            return this;
		        },

		        /**
		         * Callback function when update a data
		         */
		        update: function (func) {
		            this._update = func;
		            return this;
		        },

		        /**
		         * Callback function when remove a data
		         */
		        remove: function (func) {
		            this._remove = func;
		            return this;
		        },

		        execute: function () {
		            var oldArr = this._old;
		            var newArr = this._new;
		            var oldKeyGetter = this._oldKeyGetter;
		            var newKeyGetter = this._newKeyGetter;

		            var oldDataIndexMap = {};
		            var newDataIndexMap = {};
		            var i;

		            initIndexMap(oldArr, oldDataIndexMap, oldKeyGetter);
		            initIndexMap(newArr, newDataIndexMap, newKeyGetter);

		            // Travel by inverted order to make sure order consistency
		            // when duplicate keys exists (consider newDataIndex.pop() below).
		            // For performance consideration, these code below do not look neat.
		            for (i = 0; i < oldArr.length; i++) {
		                var key = oldKeyGetter(oldArr[i]);
		                var idx = newDataIndexMap[key];

		                // idx can never be empty array here. see 'set null' logic below.
		                if (idx != null) {
		                    // Consider there is duplicate key (for example, use dataItem.name as key).
		                    // We should make sure every item in newArr and oldArr can be visited.
		                    var len = idx.length;
		                    if (len) {
		                        len === 1 && (newDataIndexMap[key] = null);
		                        idx = idx.unshift();
		                    }
		                    else {
		                        newDataIndexMap[key] = null;
		                    }
		                    this._update && this._update(idx, i);
		                }
		                else {
		                    this._remove && this._remove(i);
		                }
		            }

		            for (var key in newDataIndexMap) {
		                if (newDataIndexMap.hasOwnProperty(key)) {
		                    var idx = newDataIndexMap[key];
		                    if (idx == null) {
		                        continue;
		                    }
		                    // idx can never be empty array here. see 'set null' logic above.
		                    if (!idx.length) {
		                        this._add && this._add(idx);
		                    }
		                    else {
		                        for (var i = 0, len = idx.length; i < len; i++) {
		                            this._add && this._add(idx[i]);
		                        }
		                    }
		                }
		            }
		        }
		    };

		    function initIndexMap(arr, map, keyGetter) {
		        for (var i = 0; i < arr.length; i++) {
		            var key = keyGetter(arr[i]);
		            var existence = map[key];
		            if (existence == null) {
		                map[key] = i;
		            }
		            else {
		                if (!existence.length) {
		                    map[key] = existence = [existence];
		                }
		                existence.push(i);
		            }
		        }
		    }

		    module.exports = DataDiffer;


	/***/ },
	/* 96 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Complete dimensions by data (guess dimension).
		 */


		    var zrUtil = __webpack_require__(3);

		    /**
		     * Complete the dimensions array guessed from the data structure.
		     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']
		     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]
		     * @param  {Array.<string>} defaultNames    Default names to fill not necessary dimensions, like ['value']
		     * @param  {string} extraPrefix             Prefix of name when filling the left dimensions.
		     * @return {Array.<string>}
		     */
		    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {
		        if (!data) {
		            return dimensions;
		        }

		        var value0 = retrieveValue(data[0]);
		        var dimSize = zrUtil.isArray(value0) && value0.length || 1;

		        defaultNames = defaultNames || [];
		        extraPrefix = extraPrefix || 'extra';
		        for (var i = 0; i < dimSize; i++) {
		            if (!dimensions[i]) {
		                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));
		                dimensions[i] = guessOrdinal(data, i)
		                    ? {type: 'ordinal', name: name}
		                    : name;
		            }
		        }

		        return dimensions;
		    }

		    // The rule should not be complex, otherwise user might not
		    // be able to known where the data is wrong.
		    function guessOrdinal(data, dimIndex) {
		        for (var i = 0, len = data.length; i < len; i++) {
		            var value = retrieveValue(data[i]);

		            if (!zrUtil.isArray(value)) {
		                return false;
		            }

		            var value = value[dimIndex];
		            if (value != null && isFinite(value)) {
		                return false;
		            }
		            else if (zrUtil.isString(value) && value !== '-') {
		                return true;
		            }
		        }
		        return false;
		    }

		    function retrieveValue(o) {
		        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;
		    }

		    module.exports = completeDimensions;



	/***/ },
	/* 97 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var SymbolDraw = __webpack_require__(98);
		    var Symbol = __webpack_require__(99);
		    var lineAnimationDiff = __webpack_require__(101);
		    var graphic = __webpack_require__(42);

		    var polyHelper = __webpack_require__(102);

		    var ChartView = __webpack_require__(41);

		    function isPointsSame(points1, points2) {
		        if (points1.length !== points2.length) {
		            return;
		        }
		        for (var i = 0; i < points1.length; i++) {
		            var p1 = points1[i];
		            var p2 = points2[i];
		            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
		                return;
		            }
		        }
		        return true;
		    }

		    function getSmooth(smooth) {
		        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);
		    }

		    function getAxisExtentWithGap(axis) {
		        var extent = axis.getGlobalExtent();
		        if (axis.onBand) {
		            // Remove extra 1px to avoid line miter in clipped edge
		            var halfBandWidth = axis.getBandWidth() / 2 - 1;
		            var dir = extent[1] > extent[0] ? 1 : -1;
		            extent[0] += dir * halfBandWidth;
		            extent[1] -= dir * halfBandWidth;
		        }
		        return extent;
		    }

		    function sign(val) {
		        return val >= 0 ? 1 : -1;
		    }
		    /**
		     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
		     * @param {module:echarts/data/List} data
		     * @param {Array.<Array.<number>>} points
		     * @private
		     */
		    function getStackedOnPoints(coordSys, data) {
		        var baseAxis = coordSys.getBaseAxis();
		        var valueAxis = coordSys.getOtherAxis(baseAxis);
		        var valueStart = baseAxis.onZero
		            ? 0 : valueAxis.scale.getExtent()[0];

		        var valueDim = valueAxis.dim;

		        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

		        return data.mapArray([valueDim], function (val, idx) {
		            var stackedOnSameSign;
		            var stackedOn = data.stackedOn;
		            // Find first stacked value with same sign
		            while (stackedOn &&
		                sign(stackedOn.get(valueDim, idx)) === sign(val)
		            ) {
		                stackedOnSameSign = stackedOn;
		                break;
		            }
		            var stackedData = [];
		            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
		            stackedData[1 - baseDataOffset] = stackedOnSameSign
		                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

		            return coordSys.dataToPoint(stackedData);
		        }, true);
		    }

		    function queryDataIndex(data, payload) {
		        if (payload.dataIndex != null) {
		            return payload.dataIndex;
		        }
		        else if (payload.name != null) {
		            return data.indexOfName(payload.name);
		        }
		    }

		    function createGridClipShape(cartesian, hasAnimation, seriesModel) {
		        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
		        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
		        var isHorizontal = cartesian.getBaseAxis().isHorizontal();

		        var x = xExtent[0];
		        var y = yExtent[0];
		        var width = xExtent[1] - x;
		        var height = yExtent[1] - y;
		        // Expand clip shape to avoid line value exceeds axis
		        if (!seriesModel.get('clipOverflow')) {
		            if (isHorizontal) {
		                y -= height;
		                height *= 3;
		            }
		            else {
		                x -= width;
		                width *= 3;
		            }
		        }
		        var clipPath = new graphic.Rect({
		            shape: {
		                x: x,
		                y: y,
		                width: width,
		                height: height
		            }
		        });

		        if (hasAnimation) {
		            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
		            graphic.initProps(clipPath, {
		                shape: {
		                    width: width,
		                    height: height
		                }
		            }, seriesModel);
		        }

		        return clipPath;
		    }

		    function createPolarClipShape(polar, hasAnimation, seriesModel) {
		        var angleAxis = polar.getAngleAxis();
		        var radiusAxis = polar.getRadiusAxis();

		        var radiusExtent = radiusAxis.getExtent();
		        var angleExtent = angleAxis.getExtent();

		        var RADIAN = Math.PI / 180;

		        var clipPath = new graphic.Sector({
		            shape: {
		                cx: polar.cx,
		                cy: polar.cy,
		                r0: radiusExtent[0],
		                r: radiusExtent[1],
		                startAngle: -angleExtent[0] * RADIAN,
		                endAngle: -angleExtent[1] * RADIAN,
		                clockwise: angleAxis.inverse
		            }
		        });

		        if (hasAnimation) {
		            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
		            graphic.initProps(clipPath, {
		                shape: {
		                    endAngle: -angleExtent[1] * RADIAN
		                }
		            }, seriesModel);
		        }

		        return clipPath;
		    }

		    function createClipShape(coordSys, hasAnimation, seriesModel) {
		        return coordSys.type === 'polar'
		            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)
		            : createGridClipShape(coordSys, hasAnimation, seriesModel);
		    }

		    module.exports = ChartView.extend({

		        type: 'line',

		        init: function () {
		            var lineGroup = new graphic.Group();

		            var symbolDraw = new SymbolDraw();
		            this.group.add(symbolDraw.group);

		            this._symbolDraw = symbolDraw;
		            this._lineGroup = lineGroup;
		        },

		        render: function (seriesModel, ecModel, api) {
		            var coordSys = seriesModel.coordinateSystem;
		            var group = this.group;
		            var data = seriesModel.getData();
		            var lineStyleModel = seriesModel.getModel('lineStyle.normal');
		            var areaStyleModel = seriesModel.getModel('areaStyle.normal');

		            var points = data.mapArray(data.getItemLayout, true);

		            var isCoordSysPolar = coordSys.type === 'polar';
		            var prevCoordSys = this._coordSys;

		            var symbolDraw = this._symbolDraw;
		            var polyline = this._polyline;
		            var polygon = this._polygon;

		            var lineGroup = this._lineGroup;

		            var hasAnimation = seriesModel.get('animation');

		            var isAreaChart = !areaStyleModel.isEmpty();
		            var stackedOnPoints = getStackedOnPoints(coordSys, data);

		            var showSymbol = seriesModel.get('showSymbol');

		            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')
		                && this._getSymbolIgnoreFunc(data, coordSys);

		            // Remove temporary symbols
		            var oldData = this._data;
		            oldData && oldData.eachItemGraphicEl(function (el, idx) {
		                if (el.__temp) {
		                    group.remove(el);
		                    oldData.setItemGraphicEl(idx, null);
		                }
		            });

		            // Remove previous created symbols if showSymbol changed to false
		            if (!showSymbol) {
		                symbolDraw.remove();
		            }

		            group.add(lineGroup);

		            // Initialization animation or coordinate system changed
		            if (
		                !(polyline && prevCoordSys.type === coordSys.type)
		            ) {
		                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

		                polyline = this._newPolyline(points, coordSys, hasAnimation);
		                if (isAreaChart) {
		                    polygon = this._newPolygon(
		                        points, stackedOnPoints,
		                        coordSys, hasAnimation
		                    );
		                }
		                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
		            }
		            else {
		                if (isAreaChart && !polygon) {
		                    // If areaStyle is added
		                    polygon = this._newPolygon(
		                        points, stackedOnPoints,
		                        coordSys, hasAnimation
		                    );
		                }
		                else if (polygon && !isAreaChart) {
		                    // If areaStyle is removed
		                    lineGroup.remove(polygon);
		                    polygon = this._polygon = null;
		                }

		                // Update clipPath
		                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));

		                // Always update, or it is wrong in the case turning on legend
		                // because points are not changed
		                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

		                // Stop symbol animation and sync with line points
		                // FIXME performance?
		                data.eachItemGraphicEl(function (el) {
		                    el.stopAnimation(true);
		                });

		                // In the case data zoom triggerred refreshing frequently
		                // Data may not change if line has a category axis. So it should animate nothing
		                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)
		                    || !isPointsSame(this._points, points)
		                ) {
		                    if (hasAnimation) {
		                        this._updateAnimation(
		                            data, stackedOnPoints, coordSys, api
		                        );
		                    }
		                    else {
		                        polyline.setShape({
		                            points: points
		                        });
		                        polygon && polygon.setShape({
		                            points: points,
		                            stackedOnPoints: stackedOnPoints
		                        });
		                    }
		                }
		            }

		            polyline.setStyle(zrUtil.defaults(
		                // Use color in lineStyle first
		                lineStyleModel.getLineStyle(),
		                {
		                    stroke: data.getVisual('color'),
		                    lineJoin: 'bevel'
		                }
		            ));

		            var smooth = seriesModel.get('smooth');
		            smooth = getSmooth(seriesModel.get('smooth'));
		            polyline.setShape({
		                smooth: smooth,
		                smoothMonotone: seriesModel.get('smoothMonotone')
		            });

		            if (polygon) {
		                var stackedOn = data.stackedOn;
		                var stackedOnSmooth = 0;

		                polygon.style.opacity = 0.7;
		                polygon.setStyle(zrUtil.defaults(
		                    areaStyleModel.getAreaStyle(),
		                    {
		                        fill: data.getVisual('color'),
		                        lineJoin: 'bevel'
		                    }
		                ));

		                if (stackedOn) {
		                    var stackedOnSeries = stackedOn.hostModel;
		                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
		                }

		                polygon.setShape({
		                    smooth: smooth,
		                    stackedOnSmooth: stackedOnSmooth,
		                    smoothMonotone: seriesModel.get('smoothMonotone')
		                });
		            }

		            this._data = data;
		            // Save the coordinate system for transition animation when data changed
		            this._coordSys = coordSys;
		            this._stackedOnPoints = stackedOnPoints;
		            this._points = points;
		        },

		        highlight: function (seriesModel, ecModel, api, payload) {
		            var data = seriesModel.getData();
		            var dataIndex = queryDataIndex(data, payload);

		            if (dataIndex != null && dataIndex >= 0) {
		                var symbol = data.getItemGraphicEl(dataIndex);
		                if (!symbol) {
		                    // Create a temporary symbol if it is not exists
		                    var pt = data.getItemLayout(dataIndex);
		                    symbol = new Symbol(data, dataIndex, api);
		                    symbol.position = pt;
		                    symbol.setZ(
		                        seriesModel.get('zlevel'),
		                        seriesModel.get('z')
		                    );
		                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
		                    symbol.__temp = true;
		                    data.setItemGraphicEl(dataIndex, symbol);

		                    // Stop scale animation
		                    symbol.stopSymbolAnimation(true);

		                    this.group.add(symbol);
		                }
		                symbol.highlight();
		            }
		            else {
		                // Highlight whole series
		                ChartView.prototype.highlight.call(
		                    this, seriesModel, ecModel, api, payload
		                );
		            }
		        },

		        downplay: function (seriesModel, ecModel, api, payload) {
		            var data = seriesModel.getData();
		            var dataIndex = queryDataIndex(data, payload);
		            if (dataIndex != null && dataIndex >= 0) {
		                var symbol = data.getItemGraphicEl(dataIndex);
		                if (symbol) {
		                    if (symbol.__temp) {
		                        data.setItemGraphicEl(dataIndex, null);
		                        this.group.remove(symbol);
		                    }
		                    else {
		                        symbol.downplay();
		                    }
		                }
		            }
		            else {
		                // Downplay whole series
		                ChartView.prototype.downplay.call(
		                    this, seriesModel, ecModel, api, payload
		                );
		            }
		        },

		        /**
		         * @param {module:zrender/container/Group} group
		         * @param {Array.<Array.<number>>} points
		         * @private
		         */
		        _newPolyline: function (points) {
		            var polyline = this._polyline;
		            // Remove previous created polyline
		            if (polyline) {
		                this._lineGroup.remove(polyline);
		            }

		            polyline = new polyHelper.Polyline({
		                shape: {
		                    points: points
		                },
		                silent: true,
		                z2: 10
		            });

		            this._lineGroup.add(polyline);

		            this._polyline = polyline;

		            return polyline;
		        },

		        /**
		         * @param {module:zrender/container/Group} group
		         * @param {Array.<Array.<number>>} stackedOnPoints
		         * @param {Array.<Array.<number>>} points
		         * @private
		         */
		        _newPolygon: function (points, stackedOnPoints) {
		            var polygon = this._polygon;
		            // Remove previous created polygon
		            if (polygon) {
		                this._lineGroup.remove(polygon);
		            }

		            polygon = new polyHelper.Polygon({
		                shape: {
		                    points: points,
		                    stackedOnPoints: stackedOnPoints
		                },
		                silent: true
		            });

		            this._lineGroup.add(polygon);

		            this._polygon = polygon;
		            return polygon;
		        },
		        /**
		         * @private
		         */
		        _getSymbolIgnoreFunc: function (data, coordSys) {
		            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
		            // `getLabelInterval` is provided by echarts/component/axis
		            if (categoryAxis && categoryAxis.isLabelIgnored) {
		                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
		            }
		        },

		        /**
		         * @private
		         */
		        // FIXME Two value axis
		        _updateAnimation: function (data, stackedOnPoints, coordSys, api) {
		            var polyline = this._polyline;
		            var polygon = this._polygon;
		            var seriesModel = data.hostModel;

		            var diff = lineAnimationDiff(
		                this._data, data,
		                this._stackedOnPoints, stackedOnPoints,
		                this._coordSys, coordSys
		            );
		            polyline.shape.points = diff.current;

		            graphic.updateProps(polyline, {
		                shape: {
		                    points: diff.next
		                }
		            }, seriesModel);

		            if (polygon) {
		                polygon.setShape({
		                    points: diff.current,
		                    stackedOnPoints: diff.stackedOnCurrent
		                });
		                graphic.updateProps(polygon, {
		                    shape: {
		                        points: diff.next,
		                        stackedOnPoints: diff.stackedOnNext
		                    }
		                }, seriesModel);
		            }

		            var updatedDataInfo = [];
		            var diffStatus = diff.status;

		            for (var i = 0; i < diffStatus.length; i++) {
		                var cmd = diffStatus[i].cmd;
		                if (cmd === '=') {
		                    var el = data.getItemGraphicEl(diffStatus[i].idx1);
		                    if (el) {
		                        updatedDataInfo.push({
		                            el: el,
		                            ptIdx: i    // Index of points
		                        });
		                    }
		                }
		            }

		            if (polyline.animators && polyline.animators.length) {
		                polyline.animators[0].during(function () {
		                    for (var i = 0; i < updatedDataInfo.length; i++) {
		                        var el = updatedDataInfo[i].el;
		                        el.attr('position', polyline.shape.points[updatedDataInfo[i].ptIdx]);
		                    }
		                });
		            }
		        },

		        remove: function (ecModel) {
		            var group = this.group;
		            var oldData = this._data;
		            this._lineGroup.removeAll();
		            this._symbolDraw.remove(true);
		            // Remove temporary created elements when highlighting
		            oldData && oldData.eachItemGraphicEl(function (el, idx) {
		                if (el.__temp) {
		                    group.remove(el);
		                    oldData.setItemGraphicEl(idx, null);
		                }
		            });

		            this._polyline =
		            this._polygon =
		            this._coordSys =
		            this._points =
		            this._stackedOnPoints =
		            this._data = null;
		        }
		    });


	/***/ },
	/* 98 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/chart/helper/SymbolDraw
		 */


		    var graphic = __webpack_require__(42);
		    var Symbol = __webpack_require__(99);

		    /**
		     * @constructor
		     * @alias module:echarts/chart/helper/SymbolDraw
		     * @param {module:zrender/graphic/Group} [symbolCtor]
		     */
		    function SymbolDraw(symbolCtor) {
		        this.group = new graphic.Group();

		        this._symbolCtor = symbolCtor || Symbol;
		    }

		    var symbolDrawProto = SymbolDraw.prototype;

		    function symbolNeedsDraw(data, idx, isIgnore) {
		        var point = data.getItemLayout(idx);
		        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))
		                    && data.getItemVisual(idx, 'symbol') !== 'none';
		    }
		    /**
		     * Update symbols draw by new data
		     * @param {module:echarts/data/List} data
		     * @param {Array.<boolean>} [isIgnore]
		     */
		    symbolDrawProto.updateData = function (data, isIgnore) {
		        var group = this.group;
		        var seriesModel = data.hostModel;
		        var oldData = this._data;

		        var SymbolCtor = this._symbolCtor;

		        data.diff(oldData)
		            .add(function (newIdx) {
		                var point = data.getItemLayout(newIdx);
		                if (symbolNeedsDraw(data, newIdx, isIgnore)) {
		                    var symbolEl = new SymbolCtor(data, newIdx);
		                    symbolEl.attr('position', point);
		                    data.setItemGraphicEl(newIdx, symbolEl);
		                    group.add(symbolEl);
		                }
		            })
		            .update(function (newIdx, oldIdx) {
		                var symbolEl = oldData.getItemGraphicEl(oldIdx);
		                var point = data.getItemLayout(newIdx);
		                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
		                    group.remove(symbolEl);
		                    return;
		                }
		                if (!symbolEl) {
		                    symbolEl = new SymbolCtor(data, newIdx);
		                    symbolEl.attr('position', point);
		                }
		                else {
		                    symbolEl.updateData(data, newIdx);
		                    graphic.updateProps(symbolEl, {
		                        position: point
		                    }, seriesModel);
		                }

		                // Add back
		                group.add(symbolEl);

		                data.setItemGraphicEl(newIdx, symbolEl);
		            })
		            .remove(function (oldIdx) {
		                var el = oldData.getItemGraphicEl(oldIdx);
		                el && el.fadeOut(function () {
		                    group.remove(el);
		                });
		            })
		            .execute();

		        this._data = data;
		    };

		    symbolDrawProto.updateLayout = function () {
		        var data = this._data;
		        if (data) {
		            // Not use animation
		            data.eachItemGraphicEl(function (el, idx) {
		                el.attr('position', data.getItemLayout(idx));
		            });
		        }
		    };

		    symbolDrawProto.remove = function (enableAnimation) {
		        var group = this.group;
		        var data = this._data;
		        if (data) {
		            if (enableAnimation) {
		                data.eachItemGraphicEl(function (el) {
		                    el.fadeOut(function () {
		                        group.remove(el);
		                    });
		                });
		            }
		            else {
		                group.removeAll();
		            }
		        }
		    };

		    module.exports = SymbolDraw;


	/***/ },
	/* 99 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/chart/helper/Symbol
		 */


		    var zrUtil = __webpack_require__(3);
		    var symbolUtil = __webpack_require__(100);
		    var graphic = __webpack_require__(42);
		    var numberUtil = __webpack_require__(7);

		    function normalizeSymbolSize(symbolSize) {
		        if (!zrUtil.isArray(symbolSize)) {
		            symbolSize = [+symbolSize, +symbolSize];
		        }
		        return symbolSize;
		    }

		    /**
		     * @constructor
		     * @alias {module:echarts/chart/helper/Symbol}
		     * @param {module:echarts/data/List} data
		     * @param {number} idx
		     * @extends {module:zrender/graphic/Group}
		     */
		    function Symbol(data, idx) {
		        graphic.Group.call(this);

		        this.updateData(data, idx);
		    }

		    var symbolProto = Symbol.prototype;

		    function driftSymbol(dx, dy) {
		        this.parent.drift(dx, dy);
		    }

		    symbolProto._createSymbol = function (symbolType, data, idx) {
		        // Remove paths created before
		        this.removeAll();

		        var seriesModel = data.hostModel;
		        var color = data.getItemVisual(idx, 'color');

		        var symbolPath = symbolUtil.createSymbol(
		            symbolType, -0.5, -0.5, 1, 1, color
		        );

		        symbolPath.attr({
		            style: {
		                strokeNoScale: true
		            },
		            z2: 100,
		            culling: true,
		            scale: [0, 0]
		        });
		        // Rewrite drift method
		        symbolPath.drift = driftSymbol;

		        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));

		        graphic.initProps(symbolPath, {
		            scale: size
		        }, seriesModel);

		        this._symbolType = symbolType;

		        this.add(symbolPath);
		    };

		    /**
		     * Stop animation
		     * @param {boolean} toLastFrame
		     */
		    symbolProto.stopSymbolAnimation = function (toLastFrame) {
		        this.childAt(0).stopAnimation(toLastFrame);
		    };

		    /**
		     * Get scale(aka, current symbol size).
		     * Including the change caused by animation
		     * @param {Array.<number>} toLastFrame
		     */
		    symbolProto.getScale = function () {
		        return this.childAt(0).scale;
		    };

		    /**
		     * Highlight symbol
		     */
		    symbolProto.highlight = function () {
		        this.childAt(0).trigger('emphasis');
		    };

		    /**
		     * Downplay symbol
		     */
		    symbolProto.downplay = function () {
		        this.childAt(0).trigger('normal');
		    };

		    /**
		     * @param {number} zlevel
		     * @param {number} z
		     */
		    symbolProto.setZ = function (zlevel, z) {
		        var symbolPath = this.childAt(0);
		        symbolPath.zlevel = zlevel;
		        symbolPath.z = z;
		    };

		    symbolProto.setDraggable = function (draggable) {
		        var symbolPath = this.childAt(0);
		        symbolPath.draggable = draggable;
		        symbolPath.cursor = draggable ? 'move' : 'pointer';
		    };
		    /**
		     * Update symbol properties
		     * @param  {module:echarts/data/List} data
		     * @param  {number} idx
		     */
		    symbolProto.updateData = function (data, idx) {
		        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
		        var seriesModel = data.hostModel;
		        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
		        if (symbolType !== this._symbolType) {
		            this._createSymbol(symbolType, data, idx);
		        }
		        else {
		            var symbolPath = this.childAt(0);
		            graphic.updateProps(symbolPath, {
		                scale: symbolSize
		            }, seriesModel);
		        }
		        this._updateCommon(data, idx, symbolSize);

		        this._seriesModel = seriesModel;
		    };

		    // Update common properties
		    var normalStyleAccessPath = ['itemStyle', 'normal'];
		    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
		    var normalLabelAccessPath = ['label', 'normal'];
		    var emphasisLabelAccessPath = ['label', 'emphasis'];

		    symbolProto._updateCommon = function (data, idx, symbolSize) {
		        var symbolPath = this.childAt(0);
		        var seriesModel = data.hostModel;
		        var itemModel = data.getItemModel(idx);
		        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
		        var color = data.getItemVisual(idx, 'color');

		        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();

		        symbolPath.rotation = itemModel.getShallow('symbolRotate') * Math.PI / 180 || 0;

		        var symbolOffset = itemModel.getShallow('symbolOffset');
		        if (symbolOffset) {
		            var pos = symbolPath.position;
		            pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
		            pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
		        }

		        symbolPath.setColor(color);

		        zrUtil.extend(
		            symbolPath.style,
		            // Color must be excluded.
		            // Because symbol provide setColor individually to set fill and stroke
		            normalItemStyleModel.getItemStyle(['color'])
		        );

		        var labelModel = itemModel.getModel(normalLabelAccessPath);
		        var hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);

		        var elStyle = symbolPath.style;

		        // Get last value dim
		        var dimensions = data.dimensions.slice();
		        var valueDim = dimensions.pop();
		        var dataType;
		        while (
		            ((dataType = data.getDimensionInfo(valueDim).type) === 'ordinal')
		            || (dataType === 'time')
		        ) {
		            valueDim = dimensions.pop();
		        }

		        if (labelModel.get('show')) {
		            graphic.setText(elStyle, labelModel, color);
		            elStyle.text = zrUtil.retrieve(
		                seriesModel.getFormattedLabel(idx, 'normal'),
		                data.get(valueDim, idx)
		            );
		        }
		        else {
		            elStyle.text = '';
		        }

		        if (hoverLabelModel.getShallow('show')) {
		            graphic.setText(hoverStyle, hoverLabelModel, color);
		            hoverStyle.text = zrUtil.retrieve(
		                seriesModel.getFormattedLabel(idx, 'emphasis'),
		                data.get(valueDim, idx)
		            );
		        }
		        else {
		            hoverStyle.text = '';
		        }

		        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));

		        symbolPath.off('mouseover')
		            .off('mouseout')
		            .off('emphasis')
		            .off('normal');

		        graphic.setHoverStyle(symbolPath, hoverStyle);

		        if (itemModel.getShallow('hoverAnimation')) {
		            var onEmphasis = function() {
		                var ratio = size[1] / size[0];
		                this.animateTo({
		                    scale: [
		                        Math.max(size[0] * 1.1, size[0] + 3),
		                        Math.max(size[1] * 1.1, size[1] + 3 * ratio)
		                    ]
		                }, 400, 'elasticOut');
		            };
		            var onNormal = function() {
		                this.animateTo({
		                    scale: size
		                }, 400, 'elasticOut');
		            };
		            symbolPath.on('mouseover', onEmphasis)
		                .on('mouseout', onNormal)
		                .on('emphasis', onEmphasis)
		                .on('normal', onNormal);
		        }
		    };

		    symbolProto.fadeOut = function (cb) {
		        var symbolPath = this.childAt(0);
		        // Not show text when animating
		        symbolPath.style.text = '';
		        graphic.updateProps(symbolPath, {
		            scale: [0, 0]
		        }, this._seriesModel, cb);
		    };

		    zrUtil.inherits(Symbol, graphic.Group);

		    module.exports = Symbol;


	/***/ },
	/* 100 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		// Symbol factory


		    var graphic = __webpack_require__(42);
		    var BoundingRect = __webpack_require__(15);

		    /**
		     * Triangle shape
		     * @inner
		     */
		    var Triangle = graphic.extendShape({
		        type: 'triangle',
		        shape: {
		            cx: 0,
		            cy: 0,
		            width: 0,
		            height: 0
		        },
		        buildPath: function (path, shape) {
		            var cx = shape.cx;
		            var cy = shape.cy;
		            var width = shape.width / 2;
		            var height = shape.height / 2;
		            path.moveTo(cx, cy - height);
		            path.lineTo(cx + width, cy + height);
		            path.lineTo(cx - width, cy + height);
		            path.closePath();
		        }
		    });
		    /**
		     * Diamond shape
		     * @inner
		     */
		    var Diamond = graphic.extendShape({
		        type: 'diamond',
		        shape: {
		            cx: 0,
		            cy: 0,
		            width: 0,
		            height: 0
		        },
		        buildPath: function (path, shape) {
		            var cx = shape.cx;
		            var cy = shape.cy;
		            var width = shape.width / 2;
		            var height = shape.height / 2;
		            path.moveTo(cx, cy - height);
		            path.lineTo(cx + width, cy);
		            path.lineTo(cx, cy + height);
		            path.lineTo(cx - width, cy);
		            path.closePath();
		        }
		    });

		    /**
		     * Pin shape
		     * @inner
		     */
		    var Pin = graphic.extendShape({
		        type: 'pin',
		        shape: {
		            // x, y on the cusp
		            x: 0,
		            y: 0,
		            width: 0,
		            height: 0
		        },

		        buildPath: function (path, shape) {
		            var x = shape.x;
		            var y = shape.y;
		            var w = shape.width / 5 * 3;
		            // Height must be larger than width
		            var h = Math.max(w, shape.height);
		            var r = w / 2;

		            // Dist on y with tangent point and circle center
		            var dy = r * r / (h - r);
		            var cy = y - h + r + dy;
		            var angle = Math.asin(dy / r);
		            // Dist on x with tangent point and circle center
		            var dx = Math.cos(angle) * r;

		            var tanX = Math.sin(angle);
		            var tanY = Math.cos(angle);

		            path.arc(
		                x, cy, r,
		                Math.PI - angle,
		                Math.PI * 2 + angle
		            );

		            var cpLen = r * 0.6;
		            var cpLen2 = r * 0.7;
		            path.bezierCurveTo(
		                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,
		                x, y - cpLen2,
		                x, y
		            );
		            path.bezierCurveTo(
		                x, y - cpLen2,
		                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,
		                x - dx, cy + dy
		            );
		            path.closePath();
		        }
		    });

		    /**
		     * Arrow shape
		     * @inner
		     */
		    var Arrow = graphic.extendShape({

		        type: 'arrow',

		        shape: {
		            x: 0,
		            y: 0,
		            width: 0,
		            height: 0
		        },

		        buildPath: function (ctx, shape) {
		            var height = shape.height;
		            var width = shape.width;
		            var x = shape.x;
		            var y = shape.y;
		            var dx = width / 3 * 2;
		            ctx.moveTo(x, y);
		            ctx.lineTo(x + dx, y + height);
		            ctx.lineTo(x, y + height / 4 * 3);
		            ctx.lineTo(x - dx, y + height);
		            ctx.lineTo(x, y);
		            ctx.closePath();
		        }
		    });

		    /**
		     * Map of path contructors
		     * @type {Object.<string, module:zrender/graphic/Path>}
		     */
		    var symbolCtors = {
		        line: graphic.Line,

		        rect: graphic.Rect,

		        roundRect: graphic.Rect,

		        square: graphic.Rect,

		        circle: graphic.Circle,

		        diamond: Diamond,

		        pin: Pin,

		        arrow: Arrow,

		        triangle: Triangle
		    };

		    var symbolShapeMakers = {

		        line: function (x, y, w, h, shape) {
		            // FIXME
		            shape.x1 = x;
		            shape.y1 = y + h / 2;
		            shape.x2 = x + w;
		            shape.y2 = y + h / 2;
		        },

		        rect: function (x, y, w, h, shape) {
		            shape.x = x;
		            shape.y = y;
		            shape.width = w;
		            shape.height = h;
		        },

		        roundRect: function (x, y, w, h, shape) {
		            shape.x = x;
		            shape.y = y;
		            shape.width = w;
		            shape.height = h;
		            shape.r = Math.min(w, h) / 4;
		        },

		        square: function (x, y, w, h, shape) {
		            var size = Math.min(w, h);
		            shape.x = x;
		            shape.y = y;
		            shape.width = size;
		            shape.height = size;
		        },

		        circle: function (x, y, w, h, shape) {
		            // Put circle in the center of square
		            shape.cx = x + w / 2;
		            shape.cy = y + h / 2;
		            shape.r = Math.min(w, h) / 2;
		        },

		        diamond: function (x, y, w, h, shape) {
		            shape.cx = x + w / 2;
		            shape.cy = y + h / 2;
		            shape.width = w;
		            shape.height = h;
		        },

		        pin: function (x, y, w, h, shape) {
		            shape.x = x + w / 2;
		            shape.y = y + h / 2;
		            shape.width = w;
		            shape.height = h;
		        },

		        arrow: function (x, y, w, h, shape) {
		            shape.x = x + w / 2;
		            shape.y = y + h / 2;
		            shape.width = w;
		            shape.height = h;
		        },

		        triangle: function (x, y, w, h, shape) {
		            shape.cx = x + w / 2;
		            shape.cy = y + h / 2;
		            shape.width = w;
		            shape.height = h;
		        }
		    };

		    var symbolBuildProxies = {};
		    for (var name in symbolCtors) {
		        symbolBuildProxies[name] = new symbolCtors[name]();
		    }

		    var Symbol = graphic.extendShape({

		        type: 'symbol',

		        shape: {
		            symbolType: '',
		            x: 0,
		            y: 0,
		            width: 0,
		            height: 0
		        },

		        beforeBrush: function () {
		            var style = this.style;
		            var shape = this.shape;
		            // FIXME
		            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
		                style.textPosition = ['50%', '40%'];
		                style.textAlign = 'center';
		                style.textVerticalAlign = 'middle';
		            }
		        },

		        buildPath: function (ctx, shape) {
		            var symbolType = shape.symbolType;
		            var proxySymbol = symbolBuildProxies[symbolType];
		            if (shape.symbolType !== 'none') {
		                if (!proxySymbol) {
		                    // Default rect
		                    symbolType = 'rect';
		                    proxySymbol = symbolBuildProxies[symbolType];
		                }
		                symbolShapeMakers[symbolType](
		                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape
		                );
		                proxySymbol.buildPath(ctx, proxySymbol.shape);
		            }
		        }
		    });

		    // Provide setColor helper method to avoid determine if set the fill or stroke outside
		    var symbolPathSetColor = function (color) {
		        if (this.type !== 'image') {
		            var symbolStyle = this.style;
		            var symbolShape = this.shape;
		            if (symbolShape && symbolShape.symbolType === 'line') {
		                symbolStyle.stroke = color;
		            }
		            else if (this.__isEmptyBrush) {
		                symbolStyle.stroke = color;
		                symbolStyle.fill = '#fff';
		            }
		            else {
		                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
		                symbolStyle.fill && (symbolStyle.fill = color);
		                symbolStyle.stroke && (symbolStyle.stroke = color);
		            }
		            this.dirty();
		        }
		    };

		    var symbolUtil = {
		        /**
		         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
		         * @param {string} symbolType
		         * @param {number} x
		         * @param {number} y
		         * @param {number} w
		         * @param {number} h
		         * @param {string} color
		         */
		        createSymbol: function (symbolType, x, y, w, h, color) {
		            var isEmpty = symbolType.indexOf('empty') === 0;
		            if (isEmpty) {
		                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
		            }
		            var symbolPath;

		            if (symbolType.indexOf('image://') === 0) {
		                symbolPath = new graphic.Image({
		                    style: {
		                        image: symbolType.slice(8),
		                        x: x,
		                        y: y,
		                        width: w,
		                        height: h
		                    }
		                });
		            }
		            else if (symbolType.indexOf('path://') === 0) {
		                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));
		            }
		            else {
		                symbolPath = new Symbol({
		                    shape: {
		                        symbolType: symbolType,
		                        x: x,
		                        y: y,
		                        width: w,
		                        height: h
		                    }
		                });
		            }

		            symbolPath.__isEmptyBrush = isEmpty;

		            symbolPath.setColor = symbolPathSetColor;

		            symbolPath.setColor(color);

		            return symbolPath;
		        }
		    };

		    module.exports = symbolUtil;


	/***/ },
	/* 101 */
	/***/ function(module, exports) {

		

		    // var arrayDiff = require('zrender/lib/core/arrayDiff');
		    // 'zrender/core/arrayDiff' has been used before, but it did
		    // not do well in performance when roam with fixed dataZoom window.

		    function sign(val) {
		        return val >= 0 ? 1 : -1;
		    }

		    function getStackedOnPoint(coordSys, data, idx) {
		        var baseAxis = coordSys.getBaseAxis();
		        var valueAxis = coordSys.getOtherAxis(baseAxis);
		        var valueStart = baseAxis.onZero
		            ? 0 : valueAxis.scale.getExtent()[0];

		        var valueDim = valueAxis.dim;
		        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

		        var stackedOnSameSign;
		        var stackedOn = data.stackedOn;
		        var val = data.get(valueDim, idx);
		        // Find first stacked value with same sign
		        while (stackedOn &&
		            sign(stackedOn.get(valueDim, idx)) === sign(val)
		        ) {
		            stackedOnSameSign = stackedOn;
		            break;
		        }
		        var stackedData = [];
		        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
		        stackedData[1 - baseDataOffset] = stackedOnSameSign
		            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

		        return coordSys.dataToPoint(stackedData);
		    }

		    // function convertToIntId(newIdList, oldIdList) {
		    //     // Generate int id instead of string id.
		    //     // Compare string maybe slow in score function of arrDiff

		    //     // Assume id in idList are all unique
		    //     var idIndicesMap = {};
		    //     var idx = 0;
		    //     for (var i = 0; i < newIdList.length; i++) {
		    //         idIndicesMap[newIdList[i]] = idx;
		    //         newIdList[i] = idx++;
		    //     }
		    //     for (var i = 0; i < oldIdList.length; i++) {
		    //         var oldId = oldIdList[i];
		    //         // Same with newIdList
		    //         if (idIndicesMap[oldId]) {
		    //             oldIdList[i] = idIndicesMap[oldId];
		    //         }
		    //         else {
		    //             oldIdList[i] = idx++;
		    //         }
		    //     }
		    // }

		    function diffData(oldData, newData) {
		        var diffResult = [];

		        newData.diff(oldData)
		            .add(function (idx) {
		                diffResult.push({cmd: '+', idx: idx});
		            })
		            .update(function (newIdx, oldIdx) {
		                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});
		            })
		            .remove(function (idx) {
		                diffResult.push({cmd: '-', idx: idx});
		            })
		            .execute();

		        return diffResult;
		    }

		    module.exports = function (
		        oldData, newData,
		        oldStackedOnPoints, newStackedOnPoints,
		        oldCoordSys, newCoordSys
		    ) {
		        var diff = diffData(oldData, newData);

		        // var newIdList = newData.mapArray(newData.getId);
		        // var oldIdList = oldData.mapArray(oldData.getId);

		        // convertToIntId(newIdList, oldIdList);

		        // // FIXME One data ?
		        // diff = arrayDiff(oldIdList, newIdList);

		        var currPoints = [];
		        var nextPoints = [];
		        // Points for stacking base line
		        var currStackedPoints = [];
		        var nextStackedPoints = [];

		        var status = [];
		        var sortedIndices = [];
		        var rawIndices = [];
		        var dims = newCoordSys.dimensions;
		        for (var i = 0; i < diff.length; i++) {
		            var diffItem = diff[i];
		            var pointAdded = true;

		            // FIXME, animation is not so perfect when dataZoom window moves fast
		            // Which is in case remvoing or add more than one data in the tail or head
		            switch (diffItem.cmd) {
		                case '=':
		                    var currentPt = oldData.getItemLayout(diffItem.idx);
		                    var nextPt = newData.getItemLayout(diffItem.idx1);
		                    // If previous data is NaN, use next point directly
		                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
		                        currentPt = nextPt.slice();
		                    }
		                    currPoints.push(currentPt);
		                    nextPoints.push(nextPt);

		                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
		                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);

		                    rawIndices.push(newData.getRawIndex(diffItem.idx1));
		                    break;
		                case '+':
		                    var idx = diffItem.idx;
		                    currPoints.push(
		                        oldCoordSys.dataToPoint([
		                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)
		                        ])
		                    );

		                    nextPoints.push(newData.getItemLayout(idx).slice());

		                    currStackedPoints.push(
		                        getStackedOnPoint(oldCoordSys, newData, idx)
		                    );
		                    nextStackedPoints.push(newStackedOnPoints[idx]);

		                    rawIndices.push(newData.getRawIndex(idx));
		                    break;
		                case '-':
		                    var idx = diffItem.idx;
		                    var rawIndex = oldData.getRawIndex(idx);
		                    // Data is replaced. In the case of dynamic data queue
		                    // FIXME FIXME FIXME
		                    if (rawIndex !== idx) {
		                        currPoints.push(oldData.getItemLayout(idx));
		                        nextPoints.push(newCoordSys.dataToPoint([
		                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)
		                        ]));

		                        currStackedPoints.push(oldStackedOnPoints[idx]);
		                        nextStackedPoints.push(
		                            getStackedOnPoint(
		                                newCoordSys, oldData, idx
		                            )
		                        );

		                        rawIndices.push(rawIndex);
		                    }
		                    else {
		                        pointAdded = false;
		                    }
		            }

		            // Original indices
		            if (pointAdded) {
		                status.push(diffItem);
		                sortedIndices.push(sortedIndices.length);
		            }
		        }

		        // Diff result may be crossed if all items are changed
		        // Sort by data index
		        sortedIndices.sort(function (a, b) {
		            return rawIndices[a] - rawIndices[b];
		        });

		        var sortedCurrPoints = [];
		        var sortedNextPoints = [];

		        var sortedCurrStackedPoints = [];
		        var sortedNextStackedPoints = [];

		        var sortedStatus = [];
		        for (var i = 0; i < sortedIndices.length; i++) {
		            var idx = sortedIndices[i];
		            sortedCurrPoints[i] = currPoints[idx];
		            sortedNextPoints[i] = nextPoints[idx];

		            sortedCurrStackedPoints[i] = currStackedPoints[idx];
		            sortedNextStackedPoints[i] = nextStackedPoints[idx];

		            sortedStatus[i] = status[idx];
		        }

		        return {
		            current: sortedCurrPoints,
		            next: sortedNextPoints,

		            stackedOnCurrent: sortedCurrStackedPoints,
		            stackedOnNext: sortedNextStackedPoints,

		            status: sortedStatus
		        };
		    };


	/***/ },
	/* 102 */
	/***/ function(module, exports, __webpack_require__) {

		// Poly path support NaN point


		    var Path = __webpack_require__(44);
		    var vec2 = __webpack_require__(16);

		    var vec2Min = vec2.min;
		    var vec2Max = vec2.max;

		    var scaleAndAdd = vec2.scaleAndAdd;
		    var v2Copy = vec2.copy;

		    // Temporary variable
		    var v = [];
		    var cp0 = [];
		    var cp1 = [];

		    function drawSegment(
		        ctx, points, start, stop, len,
		        dir, smoothMin, smoothMax, smooth, smoothMonotone
		    ) {
		        var idx = start;
		        for (var k = 0; k < len; k++) {
		            var p = points[idx];
		            if (idx >= stop || idx < 0 || isNaN(p[0]) || isNaN(p[1])) {
		                break;
		            }

		            if (idx === start) {
		                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
		                v2Copy(cp0, p);
		            }
		            else {
		                if (smooth > 0) {
		                    var prevIdx = idx - dir;
		                    var nextIdx = idx + dir;

		                    var ratioNextSeg = 0.5;
		                    var prevP = points[prevIdx];
		                    var nextP = points[nextIdx];
		                    // Last point
		                    if ((dir > 0 && (idx === len - 1 || isNaN(nextP[0]) || isNaN(nextP[1])))
		                        || (dir <= 0 && (idx === 0 ||  isNaN(nextP[0]) || isNaN(nextP[1])))
		                    ) {
		                        v2Copy(cp1, p);
		                    }
		                    else {
		                        // If next data is null
		                        if (isNaN(nextP[0]) || isNaN(nextP[1])) {
		                            nextP = p;
		                        }

		                        vec2.sub(v, nextP, prevP);

		                        var lenPrevSeg;
		                        var lenNextSeg;
		                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {
		                            var dim = smoothMonotone === 'x' ? 0 : 1;
		                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
		                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
		                        }
		                        else {
		                            lenPrevSeg = vec2.dist(p, prevP);
		                            lenNextSeg = vec2.dist(p, nextP);
		                        }

		                        // Use ratio of seg length
		                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);

		                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
		                    }
		                    // Smooth constraint
		                    vec2Min(cp0, cp0, smoothMax);
		                    vec2Max(cp0, cp0, smoothMin);
		                    vec2Min(cp1, cp1, smoothMax);
		                    vec2Max(cp1, cp1, smoothMin);

		                    ctx.bezierCurveTo(
		                        cp0[0], cp0[1],
		                        cp1[0], cp1[1],
		                        p[0], p[1]
		                    );
		                    // cp0 of next segment
		                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
		                }
		                else {
		                    ctx.lineTo(p[0], p[1]);
		                }
		            }

		            idx += dir;
		        }

		        return k;
		    }

		    function getBoundingBox(points, smoothConstraint) {
		        var ptMin = [Infinity, Infinity];
		        var ptMax = [-Infinity, -Infinity];
		        if (smoothConstraint) {
		            for (var i = 0; i < points.length; i++) {
		                var pt = points[i];
		                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }
		                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }
		                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }
		                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }
		            }
		        }
		        return {
		            min: smoothConstraint ? ptMin : ptMax,
		            max: smoothConstraint ? ptMax : ptMin
		        };
		    }

		    module.exports = {

		        Polyline: Path.extend({

		            type: 'ec-polyline',

		            shape: {
		                points: [],

		                smooth: 0,

		                smoothConstraint: true,

		                smoothMonotone: null
		            },

		            style: {
		                fill: null,

		                stroke: '#000'
		            },

		            buildPath: function (ctx, shape) {
		                var points = shape.points;

		                var i = 0;
		                var len = points.length;

		                var result = getBoundingBox(points, shape.smoothConstraint);

		                while (i < len) {
		                    i += drawSegment(
		                        ctx, points, i, len, len,
		                        1, result.min, result.max, shape.smooth,
		                        shape.smoothMonotone
		                    ) + 1;
		                }
		            }
		        }),

		        Polygon: Path.extend({

		            type: 'ec-polygon',

		            shape: {
		                points: [],

		                // Offset between stacked base points and points
		                stackedOnPoints: [],

		                smooth: 0,

		                stackedOnSmooth: 0,

		                smoothConstraint: true,

		                smoothMonotone: null
		            },

		            buildPath: function (ctx, shape) {
		                var points = shape.points;
		                var stackedOnPoints = shape.stackedOnPoints;

		                var i = 0;
		                var len = points.length;
		                var smoothMonotone = shape.smoothMonotone;
		                var bbox = getBoundingBox(points, shape.smoothConstraint);
		                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);
		                while (i < len) {
		                    var k = drawSegment(
		                        ctx, points, i, len, len,
		                        1, bbox.min, bbox.max, shape.smooth,
		                        smoothMonotone
		                    );
		                    drawSegment(
		                        ctx, stackedOnPoints, i + k - 1, len, k,
		                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,
		                        smoothMonotone
		                    );
		                    i += k + 1;

		                    ctx.closePath();
		                }
		            }
		        })
		    };


	/***/ },
	/* 103 */
	/***/ function(module, exports) {

		

		    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {

		        // Encoding visual for all series include which is filtered for legend drawing
		        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
		            var data = seriesModel.getData();

		            var symbolType = seriesModel.get('symbol') || defaultSymbolType;
		            var symbolSize = seriesModel.get('symbolSize');

		            data.setVisual({
		                legendSymbol: legendSymbol || symbolType,
		                symbol: symbolType,
		                symbolSize: symbolSize
		            });

		            // Only visible series has each data be visual encoded
		            if (!ecModel.isSeriesFiltered(seriesModel)) {
		                if (typeof symbolSize === 'function') {
		                    data.each(function (idx) {
		                        var rawValue = seriesModel.getRawValue(idx);
		                        // FIXME
		                        var params = seriesModel.getDataParams(idx);
		                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
		                    });
		                }
		                data.each(function (idx) {
		                    var itemModel = data.getItemModel(idx);
		                    var itemSymbolType = itemModel.get('symbol', true);
		                    var itemSymbolSize = itemModel.get('symbolSize', true);
		                    // If has item symbol
		                    if (itemSymbolType != null) {
		                        data.setItemVisual(idx, 'symbol', itemSymbolType);
		                    }
		                    if (itemSymbolSize != null) {
		                        // PENDING Transform symbolSize ?
		                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
		                    }
		                });
		            }
		        });
		    };


	/***/ },
	/* 104 */
	/***/ function(module, exports) {

		

		    module.exports = function (seriesType, ecModel, api) {
		        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
		            var data = seriesModel.getData();
		            var coordSys = seriesModel.coordinateSystem;

		            var dims = coordSys.dimensions;
		            data.each(dims, function (x, y, idx) {
		                var point;
		                if (!isNaN(x) && !isNaN(y)) {
		                    point = coordSys.dataToPoint([x, y]);
		                }
		                else {
		                    // Also {Array.<number>}, not undefined to avoid if...else... statement
		                    point = [NaN, NaN];
		                }

		                data.setItemLayout(idx, point);
		            }, true);
		        });
		    };


	/***/ },
	/* 105 */
	/***/ function(module, exports) {

		
		    var samplers = {
		        average: function (frame) {
		            var sum = 0;
		            var count = 0;
		            for (var i = 0; i < frame.length; i++) {
		                if (!isNaN(frame[i])) {
		                    sum += frame[i];
		                    count++;
		                }
		            }
		            // Return NaN if count is 0
		            return count === 0 ? NaN : sum / count;
		        },
		        sum: function (frame) {
		            var sum = 0;
		            for (var i = 0; i < frame.length; i++) {
		                // Ignore NaN
		                sum += frame[i] || 0;
		            }
		            return sum;
		        },
		        max: function (frame) {
		            var max = -Infinity;
		            for (var i = 0; i < frame.length; i++) {
		                frame[i] > max && (max = frame[i]);
		            }
		            return max;
		        },
		        min: function (frame) {
		            var min = Infinity;
		            for (var i = 0; i < frame.length; i++) {
		                frame[i] < min && (min = frame[i]);
		            }
		            return min;
		        }
		    };

		    var indexSampler = function (frame, value) {
		        return Math.round(frame.length / 2);
		    };
		    module.exports = function (seriesType, ecModel, api) {
		        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
		            var data = seriesModel.getData();
		            var sampling = seriesModel.get('sampling');
		            var coordSys = seriesModel.coordinateSystem;
		            // Only cartesian2d support down sampling
		            if (coordSys.type === 'cartesian2d' && sampling) {
		                var baseAxis = coordSys.getBaseAxis();
		                var valueAxis = coordSys.getOtherAxis(baseAxis);
		                var extent = baseAxis.getExtent();
		                // Coordinste system has been resized
		                var size = extent[1] - extent[0];
		                var rate = Math.round(data.count() / size);
		                if (rate > 1) {
		                    var sampler;
		                    if (typeof sampling === 'string') {
		                        sampler = samplers[sampling];
		                    }
		                    else if (typeof sampling === 'function') {
		                        sampler = sampling;
		                    }
		                    if (sampler) {
		                        data = data.downSample(
		                            valueAxis.dim, 1 / rate, sampler, indexSampler
		                        );
		                        seriesModel.setData(data);
		                    }
		                }
		            }
		        }, this);
		    };


	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);

		    __webpack_require__(107);

		    __webpack_require__(124);

		    // Grid view
		    __webpack_require__(1).extendComponentView({

		        type: 'grid',

		        render: function (gridModel, ecModel) {
		            this.group.removeAll();
		            if (gridModel.get('show')) {
		                this.group.add(new graphic.Rect({
		                    shape:gridModel.coordinateSystem.getRect(),
		                    style: zrUtil.defaults({
		                        fill: gridModel.get('backgroundColor')
		                    }, gridModel.getItemStyle()),
		                    silent: true
		                }));
		            }
		        }
		    });


	/***/ },
	/* 107 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Grid is a region which contains at most 4 cartesian systems
		 *
		 * TODO Default cartesian
		 */
		var factory = exports;

		    var layout = __webpack_require__(21);
		    var axisHelper = __webpack_require__(108);

		    var zrUtil = __webpack_require__(3);
		    var Cartesian2D = __webpack_require__(114);
		    var Axis2D = __webpack_require__(116);

		    var each = zrUtil.each;

		    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
		    var niceScaleExtent = axisHelper.niceScaleExtent;

		    // 依赖 GridModel, AxisModel 做预处理
		    __webpack_require__(119);

		    /**
		     * Check if the axis is used in the specified grid
		     * @inner
		     */
		    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
		        return ecModel.getComponent('grid', axisModel.get('gridIndex')) === gridModel;
		    }

		    function getLabelUnionRect(axis) {
		        var axisModel = axis.model;
		        var labels = axisModel.getFormattedLabels();
		        var rect;
		        var step = 1;
		        var labelCount = labels.length;
		        if (labelCount > 40) {
		            // Simple optimization for large amount of labels
		            step = Math.ceil(labelCount / 40);
		        }
		        for (var i = 0; i < labelCount; i += step) {
		            if (!axis.isLabelIgnored(i)) {
		                var singleRect = axisModel.getTextRect(labels[i]);
		                // FIXME consider label rotate
		                rect ? rect.union(singleRect) : (rect = singleRect);
		            }
		        }
		        return rect;
		    }

		    function Grid(gridModel, ecModel, api) {
		        /**
		         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
		         * @private
		         */
		        this._coordsMap = {};

		        /**
		         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
		         * @private
		         */
		        this._coordsList = [];

		        /**
		         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
		         * @private
		         */
		        this._axesMap = {};

		        /**
		         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
		         * @private
		         */
		        this._axesList = [];

		        this._initCartesian(gridModel, ecModel, api);

		        this._model = gridModel;
		    }

		    var gridProto = Grid.prototype;

		    gridProto.type = 'grid';

		    gridProto.getRect = function () {
		        return this._rect;
		    };

		    gridProto.update = function (ecModel, api) {

		        var axesMap = this._axesMap;

		        this._updateScale(ecModel, this._model);

		        function ifAxisCanNotOnZero(otherAxisDim) {
		            var axes = axesMap[otherAxisDim];
		            for (var idx in axes) {
		                var axis = axes[idx];
		                if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {
		                    return true;
		                }
		            }
		            return false;
		        }

		        each(axesMap.x, function (xAxis) {
		            niceScaleExtent(xAxis, xAxis.model);
		        });
		        each(axesMap.y, function (yAxis) {
		            niceScaleExtent(yAxis, yAxis.model);
		        });
		        // Fix configuration
		        each(axesMap.x, function (xAxis) {
		            // onZero can not be enabled in these two situations
		            // 1. When any other axis is a category axis
		            // 2. When any other axis not across 0 point
		            if (ifAxisCanNotOnZero('y')) {
		                xAxis.onZero = false;
		            }
		        });
		        each(axesMap.y, function (yAxis) {
		            if (ifAxisCanNotOnZero('x')) {
		                yAxis.onZero = false;
		            }
		        });

		        // Resize again if containLabel is enabled
		        // FIXME It may cause getting wrong grid size in data processing stage
		        this.resize(this._model, api);
		    };

		    /**
		     * Resize the grid
		     * @param {module:echarts/coord/cartesian/GridModel} gridModel
		     * @param {module:echarts/ExtensionAPI} api
		     */
		    gridProto.resize = function (gridModel, api) {

		        var gridRect = layout.getLayoutRect(
		            gridModel.getBoxLayoutParams(), {
		                width: api.getWidth(),
		                height: api.getHeight()
		            });

		        this._rect = gridRect;

		        var axesList = this._axesList;

		        adjustAxes();

		        // Minus label size
		        if (gridModel.get('containLabel')) {
		            each(axesList, function (axis) {
		                if (!axis.model.get('axisLabel.inside')) {
		                    var labelUnionRect = getLabelUnionRect(axis);
		                    if (labelUnionRect) {
		                        var dim = axis.isHorizontal() ? 'height' : 'width';
		                        var margin = axis.model.get('axisLabel.margin');
		                        gridRect[dim] -= labelUnionRect[dim] + margin;
		                        if (axis.position === 'top') {
		                            gridRect.y += labelUnionRect.height + margin;
		                        }
		                        else if (axis.position === 'left')  {
		                            gridRect.x += labelUnionRect.width + margin;
		                        }
		                    }
		                }
		            });

		            adjustAxes();
		        }

		        function adjustAxes() {
		            each(axesList, function (axis) {
		                var isHorizontal = axis.isHorizontal();
		                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
		                var idx = axis.inverse ? 1 : 0;
		                axis.setExtent(extent[idx], extent[1 - idx]);
		                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
		            });
		        }
		    };

		    /**
		     * @param {string} axisType
		     * @param {ndumber} [axisIndex]
		     */
		    gridProto.getAxis = function (axisType, axisIndex) {
		        var axesMapOnDim = this._axesMap[axisType];
		        if (axesMapOnDim != null) {
		            if (axisIndex == null) {
		                // Find first axis
		                for (var name in axesMapOnDim) {
		                    return axesMapOnDim[name];
		                }
		            }
		            return axesMapOnDim[axisIndex];
		        }
		    };

		    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
		        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
		        return this._coordsMap[key];
		    };

		    /**
		     * Initialize cartesian coordinate systems
		     * @private
		     */
		    gridProto._initCartesian = function (gridModel, ecModel, api) {
		        var axisPositionUsed = {
		            left: false,
		            right: false,
		            top: false,
		            bottom: false
		        };

		        var axesMap = {
		            x: {},
		            y: {}
		        };
		        var axesCount = {
		            x: 0,
		            y: 0
		        };

		        /// Create axis
		        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
		        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

		        if (!axesCount.x || !axesCount.y) {
		            // Roll back when there no either x or y axis
		            this._axesMap = {};
		            this._axesList = [];
		            return;
		        }

		        this._axesMap = axesMap;

		        /// Create cartesian2d
		        each(axesMap.x, function (xAxis, xAxisIndex) {
		            each(axesMap.y, function (yAxis, yAxisIndex) {
		                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
		                var cartesian = new Cartesian2D(key);

		                cartesian.grid = this;

		                this._coordsMap[key] = cartesian;
		                this._coordsList.push(cartesian);

		                cartesian.addAxis(xAxis);
		                cartesian.addAxis(yAxis);
		            }, this);
		        }, this);

		        function createAxisCreator(axisType) {
		            return function (axisModel, idx) {
		                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
		                    return;
		                }

		                var axisPosition = axisModel.get('position');
		                if (axisType === 'x') {
		                    // Fix position
		                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {
		                        // Default bottom of X
		                        axisPosition = 'bottom';
		                    }
		                    if (axisPositionUsed[axisPosition]) {
		                        axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
		                    }
		                }
		                else {
		                    // Fix position
		                    if (axisPosition !== 'left' && axisPosition !== 'right') {
		                        // Default left of Y
		                        axisPosition = 'left';
		                    }
		                    if (axisPositionUsed[axisPosition]) {
		                        axisPosition = axisPosition === 'left' ? 'right' : 'left';
		                    }
		                }
		                axisPositionUsed[axisPosition] = true;

		                var axis = new Axis2D(
		                    axisType, axisHelper.createScaleByModel(axisModel),
		                    [0, 0],
		                    axisModel.get('type'),
		                    axisPosition
		                );

		                var isCategory = axis.type === 'category';
		                axis.onBand = isCategory && axisModel.get('boundaryGap');
		                axis.inverse = axisModel.get('inverse');

		                axis.onZero = axisModel.get('axisLine.onZero');

		                // Inject axis into axisModel
		                axisModel.axis = axis;

		                // Inject axisModel into axis
		                axis.model = axisModel;

		                // Index of axis, can be used as key
		                axis.index = idx;

		                this._axesList.push(axis);

		                axesMap[axisType][idx] = axis;
		                axesCount[axisType]++;
		            };
		        }
		    };

		    /**
		     * Update cartesian properties from series
		     * @param  {module:echarts/model/Option} option
		     * @private
		     */
		    gridProto._updateScale = function (ecModel, gridModel) {
		        // Reset scale
		        zrUtil.each(this._axesList, function (axis) {
		            axis.scale.setExtent(Infinity, -Infinity);
		        });
		        ecModel.eachSeries(function (seriesModel) {
		            if (seriesModel.get('coordinateSystem') === 'cartesian2d') {
		                var xAxisIndex = seriesModel.get('xAxisIndex');
		                var yAxisIndex = seriesModel.get('yAxisIndex');

		                var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
		                var yAxisModel = ecModel.getComponent('yAxis', yAxisIndex);

		                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)
		                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)
		                 ) {
		                    return;
		                }

		                var cartesian = this.getCartesian(xAxisIndex, yAxisIndex);
		                var data = seriesModel.getData();
		                var xAxis = cartesian.getAxis('x');
		                var yAxis = cartesian.getAxis('y');

		                if (data.type === 'list') {
		                    unionExtent(data, xAxis, seriesModel);
		                    unionExtent(data, yAxis, seriesModel);
		                }
		            }
		        }, this);

		        function unionExtent(data, axis, seriesModel) {
		            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
		                axis.scale.unionExtent(data.getDataExtent(
		                    dim, axis.scale.type !== 'ordinal'
		                ));
		            });
		        }
		    };

		    /**
		     * @inner
		     */
		    function updateAxisTransfrom(axis, coordBase) {
		        var axisExtent = axis.getExtent();
		        var axisExtentSum = axisExtent[0] + axisExtent[1];

		        // Fast transform
		        axis.toGlobalCoord = axis.dim === 'x'
		            ? function (coord) {
		                return coord + coordBase;
		            }
		            : function (coord) {
		                return axisExtentSum - coord + coordBase;
		            };
		        axis.toLocalCoord = axis.dim === 'x'
		            ? function (coord) {
		                return coord - coordBase;
		            }
		            : function (coord) {
		                return axisExtentSum - coord + coordBase;
		            };
		    }

		    Grid.create = function (ecModel, api) {
		        var grids = [];
		        ecModel.eachComponent('grid', function (gridModel, idx) {
		            var grid = new Grid(gridModel, ecModel, api);
		            grid.name = 'grid_' + idx;
		            grid.resize(gridModel, api);

		            gridModel.coordinateSystem = grid;

		            grids.push(grid);
		        });

		        // Inject the coordinateSystems into seriesModel
		        ecModel.eachSeries(function (seriesModel) {
		            if (seriesModel.get('coordinateSystem') !== 'cartesian2d') {
		                return;
		            }
		            var xAxisIndex = seriesModel.get('xAxisIndex');
		            // TODO Validate
		            var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
		            var grid = grids[xAxisModel.get('gridIndex')];
		            seriesModel.coordinateSystem = grid.getCartesian(
		                xAxisIndex, seriesModel.get('yAxisIndex')
		            );
		        });

		        return grids;
		    };

		    // For deciding which dimensions to use when creating list data
		    Grid.dimensions = Cartesian2D.prototype.dimensions;

		    __webpack_require__(25).register('cartesian2d', Grid);

		    module.exports = Grid;


	/***/ },
	/* 108 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var OrdinalScale = __webpack_require__(109);
		    var IntervalScale = __webpack_require__(111);
		    __webpack_require__(112);
		    __webpack_require__(113);
		    var Scale = __webpack_require__(110);

		    var numberUtil = __webpack_require__(7);
		    var zrUtil = __webpack_require__(3);
		    var textContain = __webpack_require__(14);
		    var axisHelper = {};

		    /**
		     * Get axis scale extent before niced.
		     */
		    axisHelper.getScaleExtent = function (axis, model) {
		        var scale = axis.scale;
		        var originalExtent = scale.getExtent();
		        var span = originalExtent[1] - originalExtent[0];
		        if (scale.type === 'ordinal') {
		            // If series has no data, scale extent may be wrong
		            if (!isFinite(span)) {
		                return [0, 0];
		            }
		            else {
		                return originalExtent;
		            }
		        }
		        var min = model.getMin ? model.getMin() : model.get('min');
		        var max = model.getMax ? model.getMax() : model.get('max');
		        var crossZero = model.getNeedCrossZero
		            ? model.getNeedCrossZero() : !model.get('scale');
		        var boundaryGap = model.get('boundaryGap');
		        if (!zrUtil.isArray(boundaryGap)) {
		            boundaryGap = [boundaryGap || 0, boundaryGap || 0];
		        }
		        boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
		        boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
		        var fixMin = true;
		        var fixMax = true;
		        // Add boundary gap
		        if (min == null) {
		            min = originalExtent[0] - boundaryGap[0] * span;
		            fixMin = false;
		        }
		        if (max == null) {
		            max = originalExtent[1] + boundaryGap[1] * span;
		            fixMax = false;
		        }
		        // TODO Only one data
		        if (min === 'dataMin') {
		            min = originalExtent[0];
		        }
		        if (max === 'dataMax') {
		            max = originalExtent[1];
		        }
		        // Evaluate if axis needs cross zero
		        if (crossZero) {
		            // Axis is over zero and min is not set
		            if (min > 0 && max > 0 && !fixMin) {
		                min = 0;
		            }
		            // Axis is under zero and max is not set
		            if (min < 0 && max < 0 && !fixMax) {
		                max = 0;
		            }
		        }
		        return [min, max];
		    };

		    axisHelper.niceScaleExtent = function (axis, model) {
		        var scale = axis.scale;
		        var extent = axisHelper.getScaleExtent(axis, model);
		        var fixMin = (model.getMin ? model.getMin() : model.get('min')) != null;
		        var fixMax = (model.getMax ? model.getMax() : model.get('max')) != null;
		        scale.setExtent(extent[0], extent[1]);
		        scale.niceExtent(model.get('splitNumber'), fixMin, fixMax);

		        // If some one specified the min, max. And the default calculated interval
		        // is not good enough. He can specify the interval. It is often appeared
		        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
		        // to be 60.
		        // FIXME
		        var interval = model.get('interval');
		        if (interval != null) {
		            scale.setInterval && scale.setInterval(interval);
		        }
		    };

		    /**
		     * @param {module:echarts/model/Model} model
		     * @param {string} [axisType] Default retrieve from model.type
		     * @return {module:echarts/scale/*}
		     */
		    axisHelper.createScaleByModel = function(model, axisType) {
		        axisType = axisType || model.get('type');
		        if (axisType) {
		            switch (axisType) {
		                // Buildin scale
		                case 'category':
		                    return new OrdinalScale(
		                        model.getCategories(), [Infinity, -Infinity]
		                    );
		                case 'value':
		                    return new IntervalScale();
		                // Extended scale, like time and log
		                default:
		                    return (Scale.getClass(axisType) || IntervalScale).create(model);
		            }
		        }
		    };

		    /**
		     * Check if the axis corss 0
		     */
		    axisHelper.ifAxisCrossZero = function (axis) {
		        var dataExtent = axis.scale.getExtent();
		        var min = dataExtent[0];
		        var max = dataExtent[1];
		        return !((min > 0 && max > 0) || (min < 0 && max < 0));
		    };

		    /**
		     * @param {Array.<number>} tickCoords In axis self coordinate.
		     * @param {Array.<string>} labels
		     * @param {string} font
		     * @param {boolean} isAxisHorizontal
		     * @return {number}
		     */
		    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {
		        // FIXME
		        // 不同角的axis和label，不只是horizontal和vertical.

		        var textSpaceTakenRect;
		        var autoLabelInterval = 0;
		        var accumulatedLabelInterval = 0;

		        var step = 1;
		        if (labels.length > 40) {
		            // Simple optimization for large amount of labels
		            step = Math.round(labels.length / 40);
		        }
		        for (var i = 0; i < tickCoords.length; i += step) {
		            var tickCoord = tickCoords[i];
		            var rect = textContain.getBoundingRect(
		                labels[i], font, 'center', 'top'
		            );
		            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;
		            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.5;
		            if (!textSpaceTakenRect) {
		                textSpaceTakenRect = rect.clone();
		            }
		            // There is no space for current label;
		            else if (textSpaceTakenRect.intersect(rect)) {
		                accumulatedLabelInterval++;
		                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
		            }
		            else {
		                textSpaceTakenRect.union(rect);
		                // Reset
		                accumulatedLabelInterval = 0;
		            }
		        }
		        if (autoLabelInterval === 0 && step > 1) {
		            return step;
		        }
		        return autoLabelInterval * step;
		    };

		    /**
		     * @param {Object} axis
		     * @param {Function} labelFormatter
		     * @return {Array.<string>}
		     */
		    axisHelper.getFormattedLabels = function (axis, labelFormatter) {
		        var scale = axis.scale;
		        var labels = scale.getTicksLabels();
		        var ticks = scale.getTicks();
		        if (typeof labelFormatter === 'string') {
		            labelFormatter = (function (tpl) {
		                return function (val) {
		                    return tpl.replace('{value}', val);
		                };
		            })(labelFormatter);
		            return zrUtil.map(labels, labelFormatter);
		        }
		        else if (typeof labelFormatter === 'function') {
		            return zrUtil.map(ticks, function (tick, idx) {
		                return labelFormatter(
		                    axis.type === 'category' ? scale.getLabel(tick) : tick,
		                    idx
		                );
		            }, this);
		        }
		        else {
		            return labels;
		        }
		    };

		    module.exports = axisHelper;


	/***/ },
	/* 109 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Linear continuous scale
		 * @module echarts/coord/scale/Ordinal
		 *
		 * http://en.wikipedia.org/wiki/Level_of_measurement
		 */

		// FIXME only one data


		    var zrUtil = __webpack_require__(3);
		    var Scale = __webpack_require__(110);

		    var scaleProto = Scale.prototype;

		    var OrdinalScale = Scale.extend({

		        type: 'ordinal',

		        init: function (data, extent) {
		            this._data = data;
		            this._extent = extent || [0, data.length - 1];
		        },

		        parse: function (val) {
		            return typeof val === 'string'
		                ? zrUtil.indexOf(this._data, val)
		                // val might be float.
		                : Math.round(val);
		        },

		        contain: function (rank) {
		            rank = this.parse(rank);
		            return scaleProto.contain.call(this, rank)
		                && this._data[rank] != null;
		        },

		        /**
		         * Normalize given rank or name to linear [0, 1]
		         * @param {number|string} [val]
		         * @return {number}
		         */
		        normalize: function (val) {
		            return scaleProto.normalize.call(this, this.parse(val));
		        },

		        scale: function (val) {
		            return Math.round(scaleProto.scale.call(this, val));
		        },

		        /**
		         * @return {Array}
		         */
		        getTicks: function () {
		            var ticks = [];
		            var extent = this._extent;
		            var rank = extent[0];

		            while (rank <= extent[1]) {
		                ticks.push(rank);
		                rank++;
		            }

		            return ticks;
		        },

		        /**
		         * Get item on rank n
		         * @param {number} n
		         * @return {string}
		         */
		        getLabel: function (n) {
		            return this._data[n];
		        },

		        /**
		         * @return {number}
		         */
		        count: function () {
		            return this._extent[1] - this._extent[0] + 1;
		        },

		        niceTicks: zrUtil.noop,
		        niceExtent: zrUtil.noop
		    });

		    /**
		     * @return {module:echarts/scale/Time}
		     */
		    OrdinalScale.create = function () {
		        return new OrdinalScale();
		    };

		    module.exports = OrdinalScale;


	/***/ },
	/* 110 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * // Scale class management
		 * @module echarts/scale/Scale
		 */


		    var clazzUtil = __webpack_require__(9);

		    function Scale() {
		        /**
		         * Extent
		         * @type {Array.<number>}
		         * @protected
		         */
		        this._extent = [Infinity, -Infinity];

		        /**
		         * Step is calculated in adjustExtent
		         * @type {Array.<number>}
		         * @protected
		         */
		        this._interval = 0;

		        this.init && this.init.apply(this, arguments);
		    }

		    var scaleProto = Scale.prototype;

		    /**
		     * Parse input val to valid inner number.
		     * @param {*} val
		     * @return {number}
		     */
		    scaleProto.parse = function (val) {
		        // Notice: This would be a trap here, If the implementation
		        // of this method depends on extent, and this method is used
		        // before extent set (like in dataZoom), it would be wrong.
		        // Nevertheless, parse does not depend on extent generally.
		        return val;
		    };

		    scaleProto.contain = function (val) {
		        var extent = this._extent;
		        return val >= extent[0] && val <= extent[1];
		    };

		    /**
		     * Normalize value to linear [0, 1], return 0.5 if extent span is 0
		     * @param {number} val
		     * @return {number}
		     */
		    scaleProto.normalize = function (val) {
		        var extent = this._extent;
		        if (extent[1] === extent[0]) {
		            return 0.5;
		        }
		        return (val - extent[0]) / (extent[1] - extent[0]);
		    };

		    /**
		     * Scale normalized value
		     * @param {number} val
		     * @return {number}
		     */
		    scaleProto.scale = function (val) {
		        var extent = this._extent;
		        return val * (extent[1] - extent[0]) + extent[0];
		    };

		    /**
		     * Set extent from data
		     * @param {Array.<number>} other
		     */
		    scaleProto.unionExtent = function (other) {
		        var extent = this._extent;
		        other[0] < extent[0] && (extent[0] = other[0]);
		        other[1] > extent[1] && (extent[1] = other[1]);
		        // not setExtent because in log axis it may transformed to power
		        // this.setExtent(extent[0], extent[1]);
		    };

		    /**
		     * Get extent
		     * @return {Array.<number>}
		     */
		    scaleProto.getExtent = function () {
		        return this._extent.slice();
		    };

		    /**
		     * Set extent
		     * @param {number} start
		     * @param {number} end
		     */
		    scaleProto.setExtent = function (start, end) {
		        var thisExtent = this._extent;
		        if (!isNaN(start)) {
		            thisExtent[0] = start;
		        }
		        if (!isNaN(end)) {
		            thisExtent[1] = end;
		        }
		    };

		    /**
		     * @return {Array.<string>}
		     */
		    scaleProto.getTicksLabels = function () {
		        var labels = [];
		        var ticks = this.getTicks();
		        for (var i = 0; i < ticks.length; i++) {
		            labels.push(this.getLabel(ticks[i]));
		        }
		        return labels;
		    };

		    clazzUtil.enableClassExtend(Scale);
		    clazzUtil.enableClassManagement(Scale, {
		        registerWhenExtend: true
		    });

		    module.exports = Scale;


	/***/ },
	/* 111 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Interval scale
		 * @module echarts/scale/Interval
		 */



		    var numberUtil = __webpack_require__(7);
		    var formatUtil = __webpack_require__(6);
		    var Scale = __webpack_require__(110);

		    var mathFloor = Math.floor;
		    var mathCeil = Math.ceil;
		    /**
		     * @alias module:echarts/coord/scale/Interval
		     * @constructor
		     */
		    var IntervalScale = Scale.extend({

		        type: 'interval',

		        _interval: 0,

		        setExtent: function (start, end) {
		            var thisExtent = this._extent;
		            //start,end may be a Number like '25',so...
		            if (!isNaN(start)) {
		                thisExtent[0] = parseFloat(start);
		            }
		            if (!isNaN(end)) {
		                thisExtent[1] = parseFloat(end);
		            }
		        },

		        unionExtent: function (other) {
		            var extent = this._extent;
		            other[0] < extent[0] && (extent[0] = other[0]);
		            other[1] > extent[1] && (extent[1] = other[1]);

		            // unionExtent may called by it's sub classes
		            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
		        },
		        /**
		         * Get interval
		         */
		        getInterval: function () {
		            if (!this._interval) {
		                this.niceTicks();
		            }
		            return this._interval;
		        },

		        /**
		         * Set interval
		         */
		        setInterval: function (interval) {
		            this._interval = interval;
		            // Dropped auto calculated niceExtent and use user setted extent
		            // We assume user wan't to set both interval, min, max to get a better result
		            this._niceExtent = this._extent.slice();
		        },

		        /**
		         * @return {Array.<number>}
		         */
		        getTicks: function () {
		            if (!this._interval) {
		                this.niceTicks();
		            }
		            var interval = this._interval;
		            var extent = this._extent;
		            var ticks = [];

		            // Consider this case: using dataZoom toolbox, zoom and zoom.
		            var safeLimit = 10000;

		            if (interval) {
		                var niceExtent = this._niceExtent;
		                if (extent[0] < niceExtent[0]) {
		                    ticks.push(extent[0]);
		                }
		                var tick = niceExtent[0];
		                while (tick <= niceExtent[1]) {
		                    ticks.push(tick);
		                    // Avoid rounding error
		                    tick = numberUtil.round(tick + interval);
		                    if (ticks.length > safeLimit) {
		                        return [];
		                    }
		                }
		                if (extent[1] > niceExtent[1]) {
		                    ticks.push(extent[1]);
		                }
		            }

		            return ticks;
		        },

		        /**
		         * @return {Array.<string>}
		         */
		        getTicksLabels: function () {
		            var labels = [];
		            var ticks = this.getTicks();
		            for (var i = 0; i < ticks.length; i++) {
		                labels.push(this.getLabel(ticks[i]));
		            }
		            return labels;
		        },

		        /**
		         * @param {number} n
		         * @return {number}
		         */
		        getLabel: function (data) {
		            return formatUtil.addCommas(data);
		        },

		        /**
		         * Update interval and extent of intervals for nice ticks
		         *
		         * @param {number} [splitNumber = 5] Desired number of ticks
		         */
		        niceTicks: function (splitNumber) {
		            splitNumber = splitNumber || 5;
		            var extent = this._extent;
		            var span = extent[1] - extent[0];
		            if (!isFinite(span)) {
		                return;
		            }
		            // User may set axis min 0 and data are all negative
		            // FIXME If it needs to reverse ?
		            if (span < 0) {
		                span = -span;
		                extent.reverse();
		            }

		            // From "Nice Numbers for Graph Labels" of Graphic Gems
		            // var niceSpan = numberUtil.nice(span, false);
		            var step = numberUtil.nice(span / splitNumber, true);

		            // Niced extent inside original extent
		            var niceExtent = [
		                numberUtil.round(mathCeil(extent[0] / step) * step),
		                numberUtil.round(mathFloor(extent[1] / step) * step)
		            ];

		            this._interval = step;
		            this._niceExtent = niceExtent;
		        },

		        /**
		         * Nice extent.
		         * @param {number} [splitNumber = 5] Given approx tick number
		         * @param {boolean} [fixMin=false]
		         * @param {boolean} [fixMax=false]
		         */
		        niceExtent: function (splitNumber, fixMin, fixMax) {
		            var extent = this._extent;
		            // If extent start and end are same, expand them
		            if (extent[0] === extent[1]) {
		                if (extent[0] !== 0) {
		                    // Expand extent
		                    var expandSize = extent[0] / 2;
		                    extent[0] -= expandSize;
		                    extent[1] += expandSize;
		                }
		                else {
		                    extent[1] = 1;
		                }
		            }
		            var span = extent[1] - extent[0];
		            // If there are no data and extent are [Infinity, -Infinity]
		            if (!isFinite(span)) {
		                extent[0] = 0;
		                extent[1] = 1;
		            }

		            this.niceTicks(splitNumber);

		            // var extent = this._extent;
		            var interval = this._interval;

		            if (!fixMin) {
		                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
		            }
		            if (!fixMax) {
		                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
		            }
		        }
		    });

		    /**
		     * @return {module:echarts/scale/Time}
		     */
		    IntervalScale.create = function () {
		        return new IntervalScale();
		    };

		    module.exports = IntervalScale;



	/***/ },
	/* 112 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Interval scale
		 * @module echarts/coord/scale/Time
		 */



		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var formatUtil = __webpack_require__(6);

		    var IntervalScale = __webpack_require__(111);

		    var intervalScaleProto = IntervalScale.prototype;

		    var mathCeil = Math.ceil;
		    var mathFloor = Math.floor;
		    var ONE_DAY = 3600000 * 24;

		    // FIXME 公用？
		    var bisect = function (a, x, lo, hi) {
		        while (lo < hi) {
		            var mid = lo + hi >>> 1;
		            if (a[mid][2] < x) {
		                lo = mid + 1;
		            }
		            else {
		                hi  = mid;
		            }
		        }
		        return lo;
		    };

		    /**
		     * @alias module:echarts/coord/scale/Time
		     * @constructor
		     */
		    var TimeScale = IntervalScale.extend({
		        type: 'time',

		        // Overwrite
		        getLabel: function (val) {
		            var stepLvl = this._stepLvl;

		            var date = new Date(val);

		            return formatUtil.formatTime(stepLvl[0], date);
		        },

		        // Overwrite
		        niceExtent: function (approxTickNum, fixMin, fixMax) {
		            var extent = this._extent;
		            // If extent start and end are same, expand them
		            if (extent[0] === extent[1]) {
		                // Expand extent
		                extent[0] -= ONE_DAY;
		                extent[1] += ONE_DAY;
		            }
		            // If there are no data and extent are [Infinity, -Infinity]
		            if (extent[1] === -Infinity && extent[0] === Infinity) {
		                var d = new Date();
		                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
		                extent[0] = extent[1] - ONE_DAY;
		            }

		            this.niceTicks(approxTickNum, fixMin, fixMax);

		            // var extent = this._extent;
		            var interval = this._interval;

		            if (!fixMin) {
		                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
		            }
		            if (!fixMax) {
		                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
		            }
		        },

		        // Overwrite
		        niceTicks: function (approxTickNum) {
		            approxTickNum = approxTickNum || 10;

		            var extent = this._extent;
		            var span = extent[1] - extent[0];
		            var approxInterval = span / approxTickNum;
		            var scaleLevelsLen = scaleLevels.length;
		            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);

		            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
		            var interval = level[2];
		            // Same with interval scale if span is much larger than 1 year
		            if (level[0] === 'year') {
		                var yearSpan = span / interval;

		                // From "Nice Numbers for Graph Labels" of Graphic Gems
		                // var niceYearSpan = numberUtil.nice(yearSpan, false);
		                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);

		                interval *= yearStep;
		            }

		            var niceExtent = [
		                mathCeil(extent[0] / interval) * interval,
		                mathFloor(extent[1] / interval) * interval
		            ];

		            this._stepLvl = level;
		            // Interval will be used in getTicks
		            this._interval = interval;
		            this._niceExtent = niceExtent;
		        },

		        parse: function (val) {
		            // val might be float.
		            return +numberUtil.parseDate(val);
		        }
		    });

		    zrUtil.each(['contain', 'normalize'], function (methodName) {
		        TimeScale.prototype[methodName] = function (val) {
		            return intervalScaleProto[methodName].call(this, this.parse(val));
		        };
		    });

		    // Steps from d3
		    var scaleLevels = [
		        // Format       step    interval
		        ['hh:mm:ss',    1,      1000],           // 1s
		        ['hh:mm:ss',    5,      1000 * 5],       // 5s
		        ['hh:mm:ss',    10,     1000 * 10],      // 10s
		        ['hh:mm:ss',    15,     1000 * 15],      // 15s
		        ['hh:mm:ss',    30,     1000 * 30],      // 30s
		        ['hh:mm\nMM-dd',1,      60000],          // 1m
		        ['hh:mm\nMM-dd',5,      60000 * 5],      // 5m
		        ['hh:mm\nMM-dd',10,     60000 * 10],     // 10m
		        ['hh:mm\nMM-dd',15,     60000 * 15],     // 15m
		        ['hh:mm\nMM-dd',30,     60000 * 30],     // 30m
		        ['hh:mm\nMM-dd',1,      3600000],        // 1h
		        ['hh:mm\nMM-dd',2,      3600000 * 2],    // 2h
		        ['hh:mm\nMM-dd',6,      3600000 * 6],    // 6h
		        ['hh:mm\nMM-dd',12,     3600000 * 12],   // 12h
		        ['MM-dd\nyyyy', 1,      ONE_DAY],   // 1d
		        ['week',        7,      ONE_DAY * 7],        // 7d
		        ['month',       1,      ONE_DAY * 31],       // 1M
		        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M
		        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M
		        ['year',        1,      ONE_DAY * 380]       // 1Y
		    ];

		    /**
		     * @return {module:echarts/scale/Time}
		     */
		    TimeScale.create = function () {
		        return new TimeScale();
		    };

		    module.exports = TimeScale;


	/***/ },
	/* 113 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Log scale
		 * @module echarts/scale/Log
		 */


		    var zrUtil = __webpack_require__(3);
		    var Scale = __webpack_require__(110);
		    var numberUtil = __webpack_require__(7);

		    // Use some method of IntervalScale
		    var IntervalScale = __webpack_require__(111);

		    var scaleProto = Scale.prototype;
		    var intervalScaleProto = IntervalScale.prototype;

		    var mathFloor = Math.floor;
		    var mathCeil = Math.ceil;
		    var mathPow = Math.pow;

		    var LOG_BASE = 10;
		    var mathLog = Math.log;

		    var LogScale = Scale.extend({

		        type: 'log',

		        /**
		         * @return {Array.<number>}
		         */
		        getTicks: function () {
		            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
		                return numberUtil.round(mathPow(LOG_BASE, val));
		            });
		        },

		        /**
		         * @param {number} val
		         * @return {string}
		         */
		        getLabel: intervalScaleProto.getLabel,

		        /**
		         * @param  {number} val
		         * @return {number}
		         */
		        scale: function (val) {
		            val = scaleProto.scale.call(this, val);
		            return mathPow(LOG_BASE, val);
		        },

		        /**
		         * @param {number} start
		         * @param {number} end
		         */
		        setExtent: function (start, end) {
		            start = mathLog(start) / mathLog(LOG_BASE);
		            end = mathLog(end) / mathLog(LOG_BASE);
		            intervalScaleProto.setExtent.call(this, start, end);
		        },

		        /**
		         * @return {number} end
		         */
		        getExtent: function () {
		            var extent = scaleProto.getExtent.call(this);
		            extent[0] = mathPow(LOG_BASE, extent[0]);
		            extent[1] = mathPow(LOG_BASE, extent[1]);
		            return extent;
		        },

		        /**
		         * @param  {Array.<number>} extent
		         */
		        unionExtent: function (extent) {
		            extent[0] = mathLog(extent[0]) / mathLog(LOG_BASE);
		            extent[1] = mathLog(extent[1]) / mathLog(LOG_BASE);
		            scaleProto.unionExtent.call(this, extent);
		        },

		        /**
		         * Update interval and extent of intervals for nice ticks
		         * @param  {number} [approxTickNum = 10] Given approx tick number
		         */
		        niceTicks: function (approxTickNum) {
		            approxTickNum = approxTickNum || 10;
		            var extent = this._extent;
		            var span = extent[1] - extent[0];
		            if (span === Infinity || span <= 0) {
		                return;
		            }

		            var interval = mathPow(10, mathFloor(mathLog(span / approxTickNum) / Math.LN10));
		            var err = approxTickNum / span * interval;

		            // Filter ticks to get closer to the desired count.
		            if (err <= 0.5) {
		                interval *= 10;
		            }
		            var niceExtent = [
		                numberUtil.round(mathCeil(extent[0] / interval) * interval),
		                numberUtil.round(mathFloor(extent[1] / interval) * interval)
		            ];

		            this._interval = interval;
		            this._niceExtent = niceExtent;
		        },

		        /**
		         * Nice extent.
		         * @param {number} [approxTickNum = 10] Given approx tick number
		         * @param {boolean} [fixMin=false]
		         * @param {boolean} [fixMax=false]
		         */
		        niceExtent: intervalScaleProto.niceExtent
		    });

		    zrUtil.each(['contain', 'normalize'], function (methodName) {
		        LogScale.prototype[methodName] = function (val) {
		            val = mathLog(val) / mathLog(LOG_BASE);
		            return scaleProto[methodName].call(this, val);
		        };
		    });

		    LogScale.create = function () {
		        return new LogScale();
		    };

		    module.exports = LogScale;


	/***/ },
	/* 114 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var Cartesian = __webpack_require__(115);

		    function Cartesian2D(name) {

		        Cartesian.call(this, name);
		    }

		    Cartesian2D.prototype = {

		        constructor: Cartesian2D,

		        type: 'cartesian2d',

		        /**
		         * @type {Array.<string>}
		         * @readOnly
		         */
		        dimensions: ['x', 'y'],

		        /**
		         * Base axis will be used on stacking.
		         *
		         * @return {module:echarts/coord/cartesian/Axis2D}
		         */
		        getBaseAxis: function () {
		            return this.getAxesByScale('ordinal')[0]
		                || this.getAxesByScale('time')[0]
		                || this.getAxis('x');
		        },

		        /**
		         * If contain point
		         * @param {Array.<number>} point
		         * @return {boolean}
		         */
		        containPoint: function (point) {
		            var axisX = this.getAxis('x');
		            var axisY = this.getAxis('y');
		            return axisX.contain(axisX.toLocalCoord(point[0]))
		                && axisY.contain(axisY.toLocalCoord(point[1]));
		        },

		        /**
		         * If contain data
		         * @param {Array.<number>} data
		         * @return {boolean}
		         */
		        containData: function (data) {
		            return this.getAxis('x').containData(data[0])
		                && this.getAxis('y').containData(data[1]);
		        },

		        /**
		         * Convert series data to an array of points
		         * @param {module:echarts/data/List} data
		         * @param {boolean} stack
		         * @return {Array}
		         *  Return array of points. For example:
		         *  `[[10, 10], [20, 20], [30, 30]]`
		         */
		        dataToPoints: function (data, stack) {
		            return data.mapArray(['x', 'y'], function (x, y) {
		                return this.dataToPoint([x, y]);
		            }, stack, this);
		        },

		        /**
		         * @param {Array.<number>} data
		         * @param {boolean} [clamp=false]
		         * @return {Array.<number>}
		         */
		        dataToPoint: function (data, clamp) {
		            var xAxis = this.getAxis('x');
		            var yAxis = this.getAxis('y');
		            return [
		                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),
		                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))
		            ];
		        },

		        /**
		         * @param {Array.<number>} point
		         * @param {boolean} [clamp=false]
		         * @return {Array.<number>}
		         */
		        pointToData: function (point, clamp) {
		            var xAxis = this.getAxis('x');
		            var yAxis = this.getAxis('y');
		            return [
		                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),
		                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)
		            ];
		        },

		        /**
		         * Get other axis
		         * @param {module:echarts/coord/cartesian/Axis2D} axis
		         */
		        getOtherAxis: function (axis) {
		            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
		        }
		    };

		    zrUtil.inherits(Cartesian2D, Cartesian);

		    module.exports = Cartesian2D;


	/***/ },
	/* 115 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * Cartesian coordinate system
		 * @module  echarts/coord/Cartesian
		 *
		 */


		    var zrUtil = __webpack_require__(3);

		    function dimAxisMapper(dim) {
		        return this._axes[dim];
		    }

		    /**
		     * @alias module:echarts/coord/Cartesian
		     * @constructor
		     */
		    var Cartesian = function (name) {
		        this._axes = {};

		        this._dimList = [];

		        /**
		         * @type {string}
		         */
		        this.name = name || '';
		    };

		    Cartesian.prototype = {

		        constructor: Cartesian,

		        type: 'cartesian',

		        /**
		         * Get axis
		         * @param  {number|string} dim
		         * @return {module:echarts/coord/Cartesian~Axis}
		         */
		        getAxis: function (dim) {
		            return this._axes[dim];
		        },

		        /**
		         * Get axes list
		         * @return {Array.<module:echarts/coord/Cartesian~Axis>}
		         */
		        getAxes: function () {
		            return zrUtil.map(this._dimList, dimAxisMapper, this);
		        },

		        /**
		         * Get axes list by given scale type
		         */
		        getAxesByScale: function (scaleType) {
		            scaleType = scaleType.toLowerCase();
		            return zrUtil.filter(
		                this.getAxes(),
		                function (axis) {
		                    return axis.scale.type === scaleType;
		                }
		            );
		        },

		        /**
		         * Add axis
		         * @param {module:echarts/coord/Cartesian.Axis}
		         */
		        addAxis: function (axis) {
		            var dim = axis.dim;

		            this._axes[dim] = axis;

		            this._dimList.push(dim);
		        },

		        /**
		         * Convert data to coord in nd space
		         * @param {Array.<number>|Object.<string, number>} val
		         * @return {Array.<number>|Object.<string, number>}
		         */
		        dataToCoord: function (val) {
		            return this._dataCoordConvert(val, 'dataToCoord');
		        },

		        /**
		         * Convert coord in nd space to data
		         * @param  {Array.<number>|Object.<string, number>} val
		         * @return {Array.<number>|Object.<string, number>}
		         */
		        coordToData: function (val) {
		            return this._dataCoordConvert(val, 'coordToData');
		        },

		        _dataCoordConvert: function (input, method) {
		            var dimList = this._dimList;

		            var output = input instanceof Array ? [] : {};

		            for (var i = 0; i < dimList.length; i++) {
		                var dim = dimList[i];
		                var axis = this._axes[dim];

		                output[dim] = axis[method](input[dim]);
		            }

		            return output;
		        }
		    };

		    module.exports = Cartesian;


	/***/ },
	/* 116 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var Axis = __webpack_require__(117);
		    var axisLabelInterval = __webpack_require__(118);

		    /**
		     * Extend axis 2d
		     * @constructor module:echarts/coord/cartesian/Axis2D
		     * @extends {module:echarts/coord/cartesian/Axis}
		     * @param {string} dim
		     * @param {*} scale
		     * @param {Array.<number>} coordExtent
		     * @param {string} axisType
		     * @param {string} position
		     */
		    var Axis2D = function (dim, scale, coordExtent, axisType, position) {
		        Axis.call(this, dim, scale, coordExtent);
		        /**
		         * Axis type
		         *  - 'category'
		         *  - 'value'
		         *  - 'time'
		         *  - 'log'
		         * @type {string}
		         */
		        this.type = axisType || 'value';

		        /**
		         * Axis position
		         *  - 'top'
		         *  - 'bottom'
		         *  - 'left'
		         *  - 'right'
		         */
		        this.position = position || 'bottom';
		    };

		    Axis2D.prototype = {

		        constructor: Axis2D,

		        /**
		         * Index of axis, can be used as key
		         */
		        index: 0,
		        /**
		         * If axis is on the zero position of the other axis
		         * @type {boolean}
		         */
		        onZero: false,

		        /**
		         * Axis model
		         * @param {module:echarts/coord/cartesian/AxisModel}
		         */
		        model: null,

		        isHorizontal: function () {
		            var position = this.position;
		            return position === 'top' || position === 'bottom';
		        },

		        getGlobalExtent: function () {
		            var ret = this.getExtent();
		            ret[0] = this.toGlobalCoord(ret[0]);
		            ret[1] = this.toGlobalCoord(ret[1]);
		            return ret;
		        },

		        /**
		         * @return {number}
		         */
		        getLabelInterval: function () {
		            var labelInterval = this._labelInterval;
		            if (!labelInterval) {
		                labelInterval = this._labelInterval = axisLabelInterval(this);
		            }
		            return labelInterval;
		        },

		        /**
		         * If label is ignored.
		         * Automatically used when axis is category and label can not be all shown
		         * @param  {number}  idx
		         * @return {boolean}
		         */
		        isLabelIgnored: function (idx) {
		            if (this.type === 'category') {
		                var labelInterval = this.getLabelInterval();
		                return ((typeof labelInterval === 'function')
		                    && !labelInterval(idx, this.scale.getLabel(idx)))
		                    || idx % (labelInterval + 1);
		            }
		        },

		        /**
		         * Transform global coord to local coord,
		         * i.e. var localCoord = axis.toLocalCoord(80);
		         * designate by module:echarts/coord/cartesian/Grid.
		         * @type {Function}
		         */
		        toLocalCoord: null,

		        /**
		         * Transform global coord to local coord,
		         * i.e. var globalCoord = axis.toLocalCoord(40);
		         * designate by module:echarts/coord/cartesian/Grid.
		         * @type {Function}
		         */
		        toGlobalCoord: null

		    };
		    zrUtil.inherits(Axis2D, Axis);

		    module.exports = Axis2D;


	/***/ },
	/* 117 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var numberUtil = __webpack_require__(7);
		    var linearMap = numberUtil.linearMap;
		    var zrUtil = __webpack_require__(3);

		    function fixExtentWithBands(extent, nTick) {
		        var size = extent[1] - extent[0];
		        var len = nTick;
		        var margin = size / len / 2;
		        extent[0] += margin;
		        extent[1] -= margin;
		    }

		    var normalizedExtent = [0, 1];
		    /**
		     * @name module:echarts/coord/CartesianAxis
		     * @constructor
		     */
		    var Axis = function (dim, scale, extent) {

		        /**
		         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
		         * @type {string}
		         */
		        this.dim = dim;

		        /**
		         * Axis scale
		         * @type {module:echarts/coord/scale/*}
		         */
		        this.scale = scale;

		        /**
		         * @type {Array.<number>}
		         * @private
		         */
		        this._extent = extent || [0, 0];

		        /**
		         * @type {boolean}
		         */
		        this.inverse = false;

		        /**
		         * Usually true when axis has a ordinal scale
		         * @type {boolean}
		         */
		        this.onBand = false;
		    };

		    Axis.prototype = {

		        constructor: Axis,

		        /**
		         * If axis extent contain given coord
		         * @param {number} coord
		         * @return {boolean}
		         */
		        contain: function (coord) {
		            var extent = this._extent;
		            var min = Math.min(extent[0], extent[1]);
		            var max = Math.max(extent[0], extent[1]);
		            return coord >= min && coord <= max;
		        },

		        /**
		         * If axis extent contain given data
		         * @param {number} data
		         * @return {boolean}
		         */
		        containData: function (data) {
		            return this.contain(this.dataToCoord(data));
		        },

		        /**
		         * Get coord extent.
		         * @return {Array.<number>}
		         */
		        getExtent: function () {
		            var ret = this._extent.slice();
		            return ret;
		        },

		        /**
		         * Get precision used for formatting
		         * @param {Array.<number>} [dataExtent]
		         * @return {number}
		         */
		        getPixelPrecision: function (dataExtent) {
		            return numberUtil.getPixelPrecision(
		                dataExtent || this.scale.getExtent(),
		                this._extent
		            );
		        },

		        /**
		         * Set coord extent
		         * @param {number} start
		         * @param {number} end
		         */
		        setExtent: function (start, end) {
		            var extent = this._extent;
		            extent[0] = start;
		            extent[1] = end;
		        },

		        /**
		         * Convert data to coord. Data is the rank if it has a ordinal scale
		         * @param {number} data
		         * @param  {boolean} clamp
		         * @return {number}
		         */
		        dataToCoord: function (data, clamp) {
		            var extent = this._extent;
		            var scale = this.scale;
		            data = scale.normalize(data);

		            if (this.onBand && scale.type === 'ordinal') {
		                extent = extent.slice();
		                fixExtentWithBands(extent, scale.count());
		            }

		            return linearMap(data, normalizedExtent, extent, clamp);
		        },

		        /**
		         * Convert coord to data. Data is the rank if it has a ordinal scale
		         * @param {number} coord
		         * @param  {boolean} clamp
		         * @return {number}
		         */
		        coordToData: function (coord, clamp) {
		            var extent = this._extent;
		            var scale = this.scale;

		            if (this.onBand && scale.type === 'ordinal') {
		                extent = extent.slice();
		                fixExtentWithBands(extent, scale.count());
		            }

		            var t = linearMap(coord, extent, normalizedExtent, clamp);

		            return this.scale.scale(t);
		        },
		        /**
		         * @return {Array.<number>}
		         */
		        getTicksCoords: function () {
		            if (this.onBand) {
		                var bands = this.getBands();
		                var coords = [];
		                for (var i = 0; i < bands.length; i++) {
		                    coords.push(bands[i][0]);
		                }
		                if (bands[i - 1]) {
		                    coords.push(bands[i - 1][1]);
		                }
		                return coords;
		            }
		            else {
		                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
		            }
		        },

		        /**
		         * Coords of labels are on the ticks or on the middle of bands
		         * @return {Array.<number>}
		         */
		        getLabelsCoords: function () {
		            if (this.onBand) {
		                var bands = this.getBands();
		                var coords = [];
		                var band;
		                for (var i = 0; i < bands.length; i++) {
		                    band = bands[i];
		                    coords.push((band[0] + band[1]) / 2);
		                }
		                return coords;
		            }
		            else {
		                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
		            }
		        },

		        /**
		         * Get bands.
		         *
		         * If axis has labels [1, 2, 3, 4]. Bands on the axis are
		         * |---1---|---2---|---3---|---4---|.
		         *
		         * @return {Array}
		         */
		         // FIXME Situation when labels is on ticks
		        getBands: function () {
		            var extent = this.getExtent();
		            var bands = [];
		            var len = this.scale.count();
		            var start = extent[0];
		            var end = extent[1];
		            var span = end - start;

		            for (var i = 0; i < len; i++) {
		                bands.push([
		                    span * i / len + start,
		                    span * (i + 1) / len + start
		                ]);
		            }
		            return bands;
		        },

		        /**
		         * Get width of band
		         * @return {number}
		         */
		        getBandWidth: function () {
		            var axisExtent = this._extent;
		            var dataExtent = this.scale.getExtent();

		            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
		            // Fix #2728, avoid NaN when only one data.
		            len === 0 && (len = 1);

		            var size = Math.abs(axisExtent[1] - axisExtent[0]);

		            return Math.abs(size) / len;
		        }
		    };

		    module.exports = Axis;


	/***/ },
	/* 118 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * Helper function for axisLabelInterval calculation
		 */



		    var zrUtil = __webpack_require__(3);
		    var axisHelper = __webpack_require__(108);

		    module.exports = function (axis) {
		        var axisModel = axis.model;
		        var labelModel = axisModel.getModel('axisLabel');
		        var labelInterval = labelModel.get('interval');
		        if (!(axis.type === 'category' && labelInterval === 'auto')) {
		            return labelInterval === 'auto' ? 0 : labelInterval;
		        }

		        return axisHelper.getAxisLabelInterval(
		            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),
		            axisModel.getFormattedLabels(),
		            labelModel.getModel('textStyle').getFont(),
		            axis.isHorizontal()
		        );
		    };


	/***/ },
	/* 119 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		// Grid 是在有直角坐标系的时候必须要存在的
		// 所以这里也要被 Cartesian2D 依赖


		    __webpack_require__(120);
		    var ComponentModel = __webpack_require__(19);

		    module.exports = ComponentModel.extend({

		        type: 'grid',

		        dependencies: ['xAxis', 'yAxis'],

		        layoutMode: 'box',

		        /**
		         * @type {module:echarts/coord/cartesian/Grid}
		         */
		        coordinateSystem: null,

		        defaultOption: {
		            show: false,
		            zlevel: 0,
		            z: 0,
		            left: '10%',
		            top: 60,
		            right: '10%',
		            bottom: 60,
		            // If grid size contain label
		            containLabel: false,
		            // width: {totalWidth} - left - right,
		            // height: {totalHeight} - top - bottom,
		            backgroundColor: 'rgba(0,0,0,0)',
		            borderWidth: 1,
		            borderColor: '#ccc'
		        }
		    });


	/***/ },
	/* 120 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var ComponentModel = __webpack_require__(19);
		    var zrUtil = __webpack_require__(3);
		    var axisModelCreator = __webpack_require__(121);

		    var AxisModel = ComponentModel.extend({

		        type: 'cartesian2dAxis',

		        /**
		         * @type {module:echarts/coord/cartesian/Axis2D}
		         */
		        axis: null,

		        /**
		         * @override
		         */
		        init: function () {
		            AxisModel.superApply(this, 'init', arguments);
		            this._resetRange();
		        },

		        /**
		         * @override
		         */
		        mergeOption: function () {
		            AxisModel.superApply(this, 'mergeOption', arguments);
		            this._resetRange();
		        },

		        /**
		         * @override
		         */
		        restoreData: function () {
		            AxisModel.superApply(this, 'restoreData', arguments);
		            this._resetRange();
		        },

		        /**
		         * @public
		         * @param {number} rangeStart
		         * @param {number} rangeEnd
		         */
		        setRange: function (rangeStart, rangeEnd) {
		            this.option.rangeStart = rangeStart;
		            this.option.rangeEnd = rangeEnd;
		        },

		        /**
		         * @public
		         * @return {Array.<number|string|Date>}
		         */
		        getMin: function () {
		            var option = this.option;
		            return option.rangeStart != null ? option.rangeStart : option.min;
		        },

		        /**
		         * @public
		         * @return {Array.<number|string|Date>}
		         */
		        getMax: function () {
		            var option = this.option;
		            return option.rangeEnd != null ? option.rangeEnd : option.max;
		        },

		        /**
		         * @public
		         * @return {boolean}
		         */
		        getNeedCrossZero: function () {
		            var option = this.option;
		            return (option.rangeStart != null || option.rangeEnd != null)
		                ? false : !option.scale;
		        },

		        /**
		         * @private
		         */
		        _resetRange: function () {
		            // rangeStart and rangeEnd is readonly.
		            this.option.rangeStart = this.option.rangeEnd = null;
		        }

		    });

		    function getAxisType(axisDim, option) {
		        // Default axis with data is category axis
		        return option.type || (option.data ? 'category' : 'value');
		    }

		    zrUtil.merge(AxisModel.prototype, __webpack_require__(123));

		    var extraOption = {
		        gridIndex: 0
		    };

		    axisModelCreator('x', AxisModel, getAxisType, extraOption);
		    axisModelCreator('y', AxisModel, getAxisType, extraOption);

		    module.exports = AxisModel;


	/***/ },
	/* 121 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var axisDefault = __webpack_require__(122);
		    var zrUtil = __webpack_require__(3);
		    var ComponentModel = __webpack_require__(19);
		    var layout = __webpack_require__(21);

		    // FIXME axisType is fixed ?
		    var AXIS_TYPES = ['value', 'category', 'time', 'log'];

		    /**
		     * Generate sub axis model class
		     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
		     * @param {module:echarts/model/Component} BaseAxisModelClass
		     * @param {Function} axisTypeDefaulter
		     * @param {Object} [extraDefaultOption]
		     */
		    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {

		        zrUtil.each(AXIS_TYPES, function (axisType) {

		            BaseAxisModelClass.extend({

		                type: axisName + 'Axis.' + axisType,

		                mergeDefaultAndTheme: function (option, ecModel) {
		                    var layoutMode = this.layoutMode;
		                    var inputPositionParams = layoutMode
		                        ? layout.getLayoutParams(option) : {};

		                    var themeModel = ecModel.getTheme();
		                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
		                    zrUtil.merge(option, this.getDefaultOption());

		                    option.type = axisTypeDefaulter(axisName, option);

		                    if (layoutMode) {
		                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
		                    }
		                },

		                defaultOption: zrUtil.mergeAll(
		                    [
		                        {},
		                        axisDefault[axisType + 'Axis'],
		                        extraDefaultOption
		                    ],
		                    true
		                )
		            });
		        });

		        ComponentModel.registerSubTypeDefaulter(
		            axisName + 'Axis',
		            zrUtil.curry(axisTypeDefaulter, axisName)
		        );
		    };


	/***/ },
	/* 122 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    var defaultOption = {
		        show: true,
		        zlevel: 0,                  // 一级层叠
		        z: 0,                       // 二级层叠
		        // 反向坐标轴
		        inverse: false,
		        // 坐标轴名字，默认为空
		        name: '',
		        // 坐标轴名字位置，支持'start' | 'middle' | 'end'
		        nameLocation: 'end',
		        // 坐标轴文字样式，默认取全局样式
		        nameTextStyle: {},
		        // 文字与轴线距离
		        nameGap: 15,
		        // 坐标轴线
		        axisLine: {
		            // 默认显示，属性show控制显示与否
		            show: true,
		            onZero: true,
		            // 属性lineStyle控制线条样式
		            lineStyle: {
		                color: '#333',
		                width: 1,
		                type: 'solid'
		            }
		        },
		        // 坐标轴小标记
		        axisTick: {
		            // 属性show控制显示与否，默认显示
		            show: true,
		            // 控制小标记是否在grid里
		            inside: false,
		            // 属性length控制线长
		            length: 5,
		            // 属性lineStyle控制线条样式
		            lineStyle: {
		                color: '#333',
		                width: 1
		            }
		        },
		        // 坐标轴文本标签，详见axis.axisLabel
		        axisLabel: {
		            show: true,
		            // 控制文本标签是否在grid里
		            inside: false,
		            rotate: 0,
		            margin: 8,
		            // formatter: null,
		            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
		            textStyle: {
		                color: '#333',
		                fontSize: 12
		            }
		        },
		        // 分隔线
		        splitLine: {
		            // 默认显示，属性show控制显示与否
		            show: true,
		            // 属性lineStyle（详见lineStyle）控制线条样式
		            lineStyle: {
		                color: ['#ccc'],
		                width: 1,
		                type: 'solid'
		            }
		        },
		        // 分隔区域
		        splitArea: {
		            // 默认不显示，属性show控制显示与否
		            show: false,
		            // 属性areaStyle（详见areaStyle）控制区域样式
		            areaStyle: {
		                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
		            }
		        }
		    };

		    var categoryAxis = zrUtil.merge({
		        // 类目起始和结束两端空白策略
		        boundaryGap: true,
		        // 坐标轴小标记
		        axisTick: {
		            interval: 'auto'
		        },
		        // 坐标轴文本标签，详见axis.axisLabel
		        axisLabel: {
		            interval: 'auto'
		        }
		    }, defaultOption);

		    var valueAxis = zrUtil.defaults({
		        // 数值起始和结束两端空白策略
		        boundaryGap: [0, 0],
		        // 最小值, 设置成 'dataMin' 则从数据中计算最小值
		        // min: null,
		        // 最大值，设置成 'dataMax' 则从数据中计算最大值
		        // max: null,
		        // Readonly prop, specifies start value of the range when using data zoom.
		        // rangeStart: null
		        // Readonly prop, specifies end value of the range when using data zoom.
		        // rangeEnd: null
		        // 脱离0值比例，放大聚焦到最终_min，_max区间
		        // scale: false,
		        // 分割段数，默认为5
		        splitNumber: 5
		    }, defaultOption);

		    // FIXME
		    var timeAxis = zrUtil.defaults({
		        scale: true,
		        min: 'dataMin',
		        max: 'dataMax'
		    }, valueAxis);
		    var logAxis = zrUtil.defaults({}, valueAxis);
		    logAxis.scale = true;

		    module.exports = {
		        categoryAxis: categoryAxis,
		        valueAxis: valueAxis,
		        timeAxis: timeAxis,
		        logAxis: logAxis
		    };


	/***/ },
	/* 123 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var axisHelper = __webpack_require__(108);

		    function getName(obj) {
		        if (zrUtil.isObject(obj) && obj.value != null) {
		            return obj.value;
		        }
		        else {
		            return obj;
		        }
		    }
		    /**
		     * Get categories
		     */
		    function getCategories() {
		        return this.get('type') === 'category'
		            && zrUtil.map(this.get('data'), getName);
		    }

		    /**
		     * Format labels
		     * @return {Array.<string>}
		     */
		    function getFormattedLabels() {
		        return axisHelper.getFormattedLabels(
		            this.axis,
		            this.get('axisLabel.formatter')
		        );
		    }

		    module.exports = {

		        getFormattedLabels: getFormattedLabels,

		        getCategories: getCategories
		    };


	/***/ },
	/* 124 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		// TODO boundaryGap


		    __webpack_require__(120);

		    __webpack_require__(125);


	/***/ },
	/* 125 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var AxisBuilder = __webpack_require__(126);
		    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
		    var getInterval = AxisBuilder.getInterval;

		    var axisBuilderAttrs = [
		        'axisLine', 'axisLabel', 'axisTick', 'axisName'
		    ];
		    var selfBuilderAttrs = [
		        'splitLine', 'splitArea'
		    ];

		    var AxisView = __webpack_require__(1).extendComponentView({

		        type: 'axis',

		        render: function (axisModel, ecModel) {

		            this.group.removeAll();

		            if (!axisModel.get('show')) {
		                return;
		            }

		            var gridModel = ecModel.getComponent('grid', axisModel.get('gridIndex'));

		            var layout = layoutAxis(gridModel, axisModel);

		            var axisBuilder = new AxisBuilder(axisModel, layout);

		            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

		            this.group.add(axisBuilder.getGroup());

		            zrUtil.each(selfBuilderAttrs, function (name) {
		                if (axisModel.get(name +'.show')) {
		                    this['_' + name](axisModel, gridModel, layout.labelInterval);
		                }
		            }, this);
		        },

		        /**
		         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
		         * @param {module:echarts/coord/cartesian/GridModel} gridModel
		         * @param {number|Function} labelInterval
		         * @private
		         */
		        _splitLine: function (axisModel, gridModel, labelInterval) {
		            var axis = axisModel.axis;

		            var splitLineModel = axisModel.getModel('splitLine');
		            var lineStyleModel = splitLineModel.getModel('lineStyle');
		            var lineWidth = lineStyleModel.get('width');
		            var lineColors = lineStyleModel.get('color');

		            var lineInterval = getInterval(splitLineModel, labelInterval);

		            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];

		            var gridRect = gridModel.coordinateSystem.getRect();
		            var isHorizontal = axis.isHorizontal();

		            var splitLines = [];
		            var lineCount = 0;

		            var ticksCoords = axis.getTicksCoords();

		            var p1 = [];
		            var p2 = [];
		            for (var i = 0; i < ticksCoords.length; i++) {
		                if (ifIgnoreOnTick(axis, i, lineInterval)) {
		                    continue;
		                }

		                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

		                if (isHorizontal) {
		                    p1[0] = tickCoord;
		                    p1[1] = gridRect.y;
		                    p2[0] = tickCoord;
		                    p2[1] = gridRect.y + gridRect.height;
		                }
		                else {
		                    p1[0] = gridRect.x;
		                    p1[1] = tickCoord;
		                    p2[0] = gridRect.x + gridRect.width;
		                    p2[1] = tickCoord;
		                }

		                var colorIndex = (lineCount++) % lineColors.length;
		                splitLines[colorIndex] = splitLines[colorIndex] || [];
		                splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({
		                    shape: {
		                        x1: p1[0],
		                        y1: p1[1],
		                        x2: p2[0],
		                        y2: p2[1]
		                    },
		                    style: {
		                        lineWidth: lineWidth
		                    },
		                    silent: true
		                })));
		            }

		            // Simple optimization
		            // Batching the lines if color are the same
		            var lineStyle = lineStyleModel.getLineStyle();
		            for (var i = 0; i < splitLines.length; i++) {
		                this.group.add(graphic.mergePath(splitLines[i], {
		                    style: zrUtil.defaults({
		                        stroke: lineColors[i % lineColors.length]
		                    }, lineStyle),
		                    silent: true
		                }));
		            }
		        },

		        /**
		         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
		         * @param {module:echarts/coord/cartesian/GridModel} gridModel
		         * @param {number|Function} labelInterval
		         * @private
		         */
		        _splitArea: function (axisModel, gridModel, labelInterval) {
		            var axis = axisModel.axis;

		            var splitAreaModel = axisModel.getModel('splitArea');
		            var areaStyleModel = splitAreaModel.getModel('areaStyle');
		            var areaColors = areaStyleModel.get('color');

		            var gridRect = gridModel.coordinateSystem.getRect();
		            var ticksCoords = axis.getTicksCoords();

		            var prevX = axis.toGlobalCoord(ticksCoords[0]);
		            var prevY = axis.toGlobalCoord(ticksCoords[0]);

		            var splitAreaRects = [];
		            var count = 0;

		            var areaInterval = getInterval(splitAreaModel, labelInterval);

		            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];

		            for (var i = 1; i < ticksCoords.length; i++) {
		                if (ifIgnoreOnTick(axis, i, areaInterval)) {
		                    continue;
		                }

		                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

		                var x;
		                var y;
		                var width;
		                var height;
		                if (axis.isHorizontal()) {
		                    x = prevX;
		                    y = gridRect.y;
		                    width = tickCoord - x;
		                    height = gridRect.height;
		                }
		                else {
		                    x = gridRect.x;
		                    y = prevY;
		                    width = gridRect.width;
		                    height = tickCoord - y;
		                }

		                var colorIndex = (count++) % areaColors.length;
		                splitAreaRects[colorIndex] = splitAreaRects[colorIndex] || [];
		                splitAreaRects[colorIndex].push(new graphic.Rect({
		                    shape: {
		                        x: x,
		                        y: y,
		                        width: width,
		                        height: height
		                    },
		                    silent: true
		                }));

		                prevX = x + width;
		                prevY = y + height;
		            }

		            // Simple optimization
		            // Batching the rects if color are the same
		            var areaStyle = areaStyleModel.getAreaStyle();
		            for (var i = 0; i < splitAreaRects.length; i++) {
		                this.group.add(graphic.mergePath(splitAreaRects[i], {
		                    style: zrUtil.defaults({
		                        fill: areaColors[i % areaColors.length]
		                    }, areaStyle),
		                    silent: true
		                }));
		            }
		        }
		    });

		    AxisView.extend({
		        type: 'xAxis'
		    });
		    AxisView.extend({
		        type: 'yAxis'
		    });

		    /**
		     * @inner
		     */
		    function layoutAxis(gridModel, axisModel) {
		        var grid = gridModel.coordinateSystem;
		        var axis = axisModel.axis;
		        var layout = {};

		        var rawAxisPosition = axis.position;
		        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
		        var axisDim = axis.dim;

		        // [left, right, top, bottom]
		        var rect = grid.getRect();
		        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];

		        var posMap = {
		            x: {top: rectBound[2], bottom: rectBound[3]},
		            y: {left: rectBound[0], right: rectBound[1]}
		        };
		        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);
		        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);

		        function getZero(dim, val) {
		            var theAxis = grid.getAxis(dim);
		            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));
		        }

		        // Axis position
		        layout.position = [
		            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],
		            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]
		        ];

		        // Axis rotation
		        var r = {x: 0, y: 1};
		        layout.rotation = Math.PI / 2 * r[axisDim];

		        // Tick and label direction, x y is axisDim
		        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};

		        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
		        if (axis.onZero) {
		            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;
		        }

		        if (axisModel.getModel('axisTick').get('inside')) {
		            layout.tickDirection = -layout.tickDirection;
		        }
		        if (axisModel.getModel('axisLabel').get('inside')) {
		            layout.labelDirection = -layout.labelDirection;
		        }

		        // Special label rotation
		        var labelRotation = axisModel.getModel('axisLabel').get('rotate');
		        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;

		        // label interval when auto mode.
		        layout.labelInterval = axis.getLabelInterval();

		        // Over splitLine and splitArea
		        layout.z2 = 1;

		        return layout;
		    }


	/***/ },
	/* 126 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var Model = __webpack_require__(8);
		    var numberUtil = __webpack_require__(7);
		    var remRadian = numberUtil.remRadian;
		    var isRadianAroundZero = numberUtil.isRadianAroundZero;

		    var PI = Math.PI;

		    /**
		     * A final axis is translated and rotated from a "standard axis".
		     * So opt.position and opt.rotation is required.
		     *
		     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
		     * for example: (0, 0) ------------> (0, 50)
		     *
		     * nameDirection or tickDirection or labelDirection is 1 means tick
		     * or label is below the standard axis, whereas is -1 means above
		     * the standard axis. labelOffset means offset between label and axis,
		     * which is useful when 'onZero', where axisLabel is in the grid and
		     * label in outside grid.
		     *
		     * Tips: like always,
		     * positive rotation represents anticlockwise, and negative rotation
		     * represents clockwise.
		     * The direction of position coordinate is the same as the direction
		     * of screen coordinate.
		     *
		     * Do not need to consider axis 'inverse', which is auto processed by
		     * axis extent.
		     *
		     * @param {module:zrender/container/Group} group
		     * @param {Object} axisModel
		     * @param {Object} opt Standard axis parameters.
		     * @param {Array.<number>} opt.position [x, y]
		     * @param {number} opt.rotation by radian
		     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.
		     * @param {number} [opt.tickDirection=1] 1 or -1
		     * @param {number} [opt.labelDirection=1] 1 or -1
		     * @param {number} [opt.labelOffset=0] Usefull when onZero.
		     * @param {string} [opt.axisName] default get from axisModel.
		     * @param {number} [opt.labelRotation] by degree, default get from axisModel.
		     * @param {number} [opt.labelInterval] Default label interval when label
		     *                                     interval from model is null or 'auto'.
		     * @param {number} [opt.strokeContainThreshold] Default label interval when label
		     * @param {number} [opt.silent=true]
		     */
		    var AxisBuilder = function (axisModel, opt) {

		        /**
		         * @readOnly
		         */
		        this.opt = opt;

		        /**
		         * @readOnly
		         */
		        this.axisModel = axisModel;

		        // Default value
		        zrUtil.defaults(
		            opt,
		            {
		                labelOffset: 0,
		                nameDirection: 1,
		                tickDirection: 1,
		                labelDirection: 1,
		                silent: true
		            }
		        );

		        /**
		         * @readOnly
		         */
		        this.group = new graphic.Group({
		            position: opt.position.slice(),
		            rotation: opt.rotation
		        });
		    };

		    AxisBuilder.prototype = {

		        constructor: AxisBuilder,

		        hasBuilder: function (name) {
		            return !!builders[name];
		        },

		        add: function (name) {
		            builders[name].call(this);
		        },

		        getGroup: function () {
		            return this.group;
		        }

		    };

		    var builders = {

		        /**
		         * @private
		         */
		        axisLine: function () {
		            var opt = this.opt;
		            var axisModel = this.axisModel;

		            if (!axisModel.get('axisLine.show')) {
		                return;
		            }

		            var extent = this.axisModel.axis.getExtent();

		            this.group.add(new graphic.Line({
		                shape: {
		                    x1: extent[0],
		                    y1: 0,
		                    x2: extent[1],
		                    y2: 0
		                },
		                style: zrUtil.extend(
		                    {lineCap: 'round'},
		                    axisModel.getModel('axisLine.lineStyle').getLineStyle()
		                ),
		                strokeContainThreshold: opt.strokeContainThreshold,
		                silent: !!opt.silent,
		                z2: 1
		            }));
		        },

		        /**
		         * @private
		         */
		        axisTick: function () {
		            var axisModel = this.axisModel;

		            if (!axisModel.get('axisTick.show')) {
		                return;
		            }

		            var axis = axisModel.axis;
		            var tickModel = axisModel.getModel('axisTick');
		            var opt = this.opt;

		            var lineStyleModel = tickModel.getModel('lineStyle');
		            var tickLen = tickModel.get('length');
		            var tickInterval = getInterval(tickModel, opt.labelInterval);
		            var ticksCoords = axis.getTicksCoords();
		            var tickLines = [];

		            for (var i = 0; i < ticksCoords.length; i++) {
		                // Only ordinal scale support tick interval
		                if (ifIgnoreOnTick(axis, i, tickInterval)) {
		                     continue;
		                }

		                var tickCoord = ticksCoords[i];

		                // Tick line
		                tickLines.push(new graphic.Line(graphic.subPixelOptimizeLine({
		                    shape: {
		                        x1: tickCoord,
		                        y1: 0,
		                        x2: tickCoord,
		                        y2: opt.tickDirection * tickLen
		                    },
		                    style: {
		                        lineWidth: lineStyleModel.get('width')
		                    },
		                    silent: true
		                })));
		            }

		            this.group.add(graphic.mergePath(tickLines, {
		                style: lineStyleModel.getLineStyle(),
		                z2: 2,
		                silent: true
		            }));
		        },

		        /**
		         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
		         * @param {module:echarts/coord/cartesian/GridModel} gridModel
		         * @private
		         */
		        axisLabel: function () {
		            var axisModel = this.axisModel;

		            if (!axisModel.get('axisLabel.show')) {
		                return;
		            }

		            var opt = this.opt;
		            var axis = axisModel.axis;
		            var labelModel = axisModel.getModel('axisLabel');
		            var textStyleModel = labelModel.getModel('textStyle');
		            var labelMargin = labelModel.get('margin');
		            var ticks = axis.scale.getTicks();
		            var labels = axisModel.getFormattedLabels();

		            // Special label rotate.
		            var labelRotation = opt.labelRotation;
		            if (labelRotation == null) {
		                labelRotation = labelModel.get('rotate') || 0;
		            }
		            // To radian.
		            labelRotation = labelRotation * PI / 180;

		            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);
		            var categoryData = axisModel.get('data');

		            var textEls = [];
		            for (var i = 0; i < ticks.length; i++) {
		                if (ifIgnoreOnTick(axis, i, opt.labelInterval)) {
		                     continue;
		                }

		                var itemTextStyleModel = textStyleModel;
		                if (categoryData && categoryData[i] && categoryData[i].textStyle) {
		                    itemTextStyleModel = new Model(
		                        categoryData[i].textStyle, textStyleModel, axisModel.ecModel
		                    );
		                }

		                var tickCoord = axis.dataToCoord(ticks[i]);
		                var pos = [
		                    tickCoord,
		                    opt.labelOffset + opt.labelDirection * labelMargin
		                ];

		                var textEl = new graphic.Text({
		                    style: {
		                        text: labels[i],
		                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,
		                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,
		                        textFont: itemTextStyleModel.getFont(),
		                        fill: itemTextStyleModel.getTextColor()
		                    },
		                    position: pos,
		                    rotation: labelLayout.rotation,
		                    silent: true,
		                    z2: 10
		                });
		                textEls.push(textEl);
		                this.group.add(textEl);
		            }

		            function isTwoLabelOverlapped(current, next) {
		                var firstRect = current && current.getBoundingRect().clone();
		                var nextRect = next && next.getBoundingRect().clone();
		                if (firstRect && nextRect) {
		                    firstRect.applyTransform(current.getLocalTransform());
		                    nextRect.applyTransform(next.getLocalTransform());
		                    return firstRect.intersect(nextRect);
		                }
		            }
		            if (axis.type !== 'category') {
		                // If min or max are user set, we need to check
		                // If the tick on min(max) are overlap on their neighbour tick
		                // If they are overlapped, we need to hide the min(max) tick label
		                if (axisModel.getMin ? axisModel.getMin() : axisModel.get('min')) {
		                    var firstLabel = textEls[0];
		                    var nextLabel = textEls[1];
		                    if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
		                        firstLabel.ignore = true;
		                    }
		                }
		                if (axisModel.getMax ? axisModel.getMax() : axisModel.get('max')) {
		                    var lastLabel = textEls[textEls.length - 1];
		                    var prevLabel = textEls[textEls.length - 2];
		                    if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
		                        lastLabel.ignore = true;
		                    }
		                }
		            }
		        },

		        /**
		         * @private
		         */
		        axisName: function () {
		            var opt = this.opt;
		            var axisModel = this.axisModel;

		            var name = this.opt.axisName;
		            // If name is '', do not get name from axisMode.
		            if (name == null) {
		                name = axisModel.get('name');
		            }

		            if (!name) {
		                return;
		            }

		            var nameLocation = axisModel.get('nameLocation');
		            var nameDirection = opt.nameDirection;
		            var textStyleModel = axisModel.getModel('nameTextStyle');
		            var gap = axisModel.get('nameGap') || 0;

		            var extent = this.axisModel.axis.getExtent();
		            var gapSignal = extent[0] > extent[1] ? -1 : 1;
		            var pos = [
		                nameLocation === 'start'
		                    ? extent[0] - gapSignal * gap
		                    : nameLocation === 'end'
		                    ? extent[1] + gapSignal * gap
		                    : (extent[0] + extent[1]) / 2, // 'middle'
		                // Reuse labelOffset.
		                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0
		            ];

		            var labelLayout;

		            if (nameLocation === 'middle') {
		                labelLayout = innerTextLayout(opt, opt.rotation, nameDirection);
		            }
		            else {
		                labelLayout = endTextLayout(opt, nameLocation, extent);
		            }

		            this.group.add(new graphic.Text({
		                style: {
		                    text: name,
		                    textFont: textStyleModel.getFont(),
		                    fill: textStyleModel.getTextColor()
		                        || axisModel.get('axisLine.lineStyle.color'),
		                    textAlign: labelLayout.textAlign,
		                    textVerticalAlign: labelLayout.verticalAlign
		                },
		                position: pos,
		                rotation: labelLayout.rotation,
		                silent: true,
		                z2: 1
		            }));
		        }

		    };

		    /**
		     * @inner
		     */
		    function innerTextLayout(opt, textRotation, direction) {
		        var rotationDiff = remRadian(textRotation - opt.rotation);
		        var textAlign;
		        var verticalAlign;

		        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.
		            verticalAlign = direction > 0 ? 'top' : 'bottom';
		            textAlign = 'center';
		        }
		        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.
		            verticalAlign = direction > 0 ? 'bottom' : 'top';
		            textAlign = 'center';
		        }
		        else {
		            verticalAlign = 'middle';

		            if (rotationDiff > 0 && rotationDiff < PI) {
		                textAlign = direction > 0 ? 'right' : 'left';
		            }
		            else {
		                textAlign = direction > 0 ? 'left' : 'right';
		            }
		        }

		        return {
		            rotation: rotationDiff,
		            textAlign: textAlign,
		            verticalAlign: verticalAlign
		        };
		    }

		    /**
		     * @inner
		     */
		    function endTextLayout(opt, textPosition, extent) {
		        var rotationDiff = remRadian(-opt.rotation);
		        var textAlign;
		        var verticalAlign;
		        var inverse = extent[0] > extent[1];
		        var onLeft = (textPosition === 'start' && !inverse)
		            || (textPosition !== 'start' && inverse);

		        if (isRadianAroundZero(rotationDiff - PI / 2)) {
		            verticalAlign = onLeft ? 'bottom' : 'top';
		            textAlign = 'center';
		        }
		        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
		            verticalAlign = onLeft ? 'top' : 'bottom';
		            textAlign = 'center';
		        }
		        else {
		            verticalAlign = 'middle';
		            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
		                textAlign = onLeft ? 'left' : 'right';
		            }
		            else {
		                textAlign = onLeft ? 'right' : 'left';
		            }
		        }

		        return {
		            rotation: rotationDiff,
		            textAlign: textAlign,
		            verticalAlign: verticalAlign
		        };
		    }

		    /**
		     * @static
		     */
		    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {
		        var rawTick;
		        var scale = axis.scale;
		        return scale.type === 'ordinal'
		            && (
		                typeof interval === 'function'
		                    ? (
		                        rawTick = scale.getTicks()[i],
		                        !interval(rawTick, scale.getLabel(rawTick))
		                    )
		                    : i % (interval + 1)
		            );
		    };

		    /**
		     * @static
		     */
		    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
		        var interval = model.get('interval');
		        if (interval == null || interval == 'auto') {
		            interval = labelInterval;
		        }
		        return interval;
		    };

		    module.exports = AxisBuilder;



	/***/ },
	/* 127 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    __webpack_require__(107);

		    __webpack_require__(128);
		    __webpack_require__(129);

		    var barLayoutGrid = __webpack_require__(131);
		    var echarts = __webpack_require__(1);

		    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));
		    // Visual coding for legend
		    echarts.registerVisualCoding('chart', function (ecModel) {
		        ecModel.eachSeriesByType('bar', function (seriesModel) {
		            var data = seriesModel.getData();
		            data.setVisual('legendSymbol', 'roundRect');
		        });
		    });

		    // In case developer forget to include grid component
		    __webpack_require__(106);


	/***/ },
	/* 128 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var SeriesModel = __webpack_require__(27);
		    var createListFromArray = __webpack_require__(93);

		    module.exports = SeriesModel.extend({

		        type: 'series.bar',

		        dependencies: ['grid', 'polar'],

		        getInitialData: function (option, ecModel) {
		            return createListFromArray(option.data, this, ecModel);
		        },

		        getMarkerPosition: function (value) {
		            var coordSys = this.coordinateSystem;
		            if (coordSys) {
		                var pt = coordSys.dataToPoint(value);
		                var data = this.getData();
		                var offset = data.getLayout('offset');
		                var size = data.getLayout('size');
		                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
		                pt[offsetIndex] += offset + size / 2;
		                return pt;
		            }
		            return [NaN, NaN];
		        },

		        defaultOption: {
		            zlevel: 0,                  // 一级层叠
		            z: 2,                       // 二级层叠
		            coordinateSystem: 'cartesian2d',
		            legendHoverLink: true,
		            // stack: null

		            // Cartesian coordinate system
		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            // 最小高度改为0
		            barMinHeight: 0,

		            // barMaxWidth: null,
		            // 默认自适应
		            // barWidth: null,
		            // 柱间距离，默认为柱形宽度的30%，可设固定值
		            // barGap: '30%',
		            // 类目间柱形距离，默认为类目间距的20%，可设固定值
		            // barCategoryGap: '20%',
		            // label: {
		            //     normal: {
		            //         show: false
		            //         formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调

		            //         // 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
		            //         //           'inside' | 'insideleft' | 'insideTop' | 'insideRight' | 'insideBottom' |
		            //         //           'outside' |'left' | 'right'|'top'|'bottom'
		            //         position:

		            //         textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		            //     }
		            // },
		            itemStyle: {
		                normal: {
		                    // color: '各异',
		                    // 柱条边线
		                    barBorderColor: '#fff',
		                    // 柱条边线线宽，单位px，默认为1
		                    barBorderWidth: 0
		                },
		                emphasis: {
		                    // color: '各异',
		                    // 柱条边线
		                    barBorderColor: '#fff',
		                    // 柱条边线线宽，单位px，默认为1
		                    barBorderWidth: 0
		                }
		            }
		        }
		    });


	/***/ },
	/* 129 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);

		    zrUtil.extend(__webpack_require__(8).prototype, __webpack_require__(130));

		    function fixLayoutWithLineWidth(layout, lineWidth) {
		        var signX = layout.width > 0 ? 1 : -1;
		        var signY = layout.height > 0 ? 1 : -1;
		        // In case width or height are too small.
		        lineWidth = Math.min(lineWidth, Math.abs(layout.width), Math.abs(layout.height));
		        layout.x += signX * lineWidth / 2;
		        layout.y += signY * lineWidth / 2;
		        layout.width -= signX * lineWidth;
		        layout.height -= signY * lineWidth;
		    }

		    module.exports = __webpack_require__(1).extendChartView({

		        type: 'bar',

		        render: function (seriesModel, ecModel, api) {
		            var coordinateSystemType = seriesModel.get('coordinateSystem');

		            if (coordinateSystemType === 'cartesian2d') {
		                this._renderOnCartesian(seriesModel, ecModel, api);
		            }

		            return this.group;
		        },

		        _renderOnCartesian: function (seriesModel, ecModel, api) {
		            var group = this.group;
		            var data = seriesModel.getData();
		            var oldData = this._data;

		            var cartesian = seriesModel.coordinateSystem;
		            var baseAxis = cartesian.getBaseAxis();
		            var isHorizontal = baseAxis.isHorizontal();

		            var enableAnimation = seriesModel.get('animation');

		            var barBorderWidthQuery = ['itemStyle', 'normal', 'barBorderWidth'];

		            function createRect(dataIndex, isUpdate) {
		                var layout = data.getItemLayout(dataIndex);
		                var lineWidth = data.getItemModel(dataIndex).get(barBorderWidthQuery) || 0;
		                fixLayoutWithLineWidth(layout, lineWidth);

		                var rect = new graphic.Rect({
		                    shape: zrUtil.extend({}, layout)
		                });
		                // Animation
		                if (enableAnimation) {
		                    var rectShape = rect.shape;
		                    var animateProperty = isHorizontal ? 'height' : 'width';
		                    var animateTarget = {};
		                    rectShape[animateProperty] = 0;
		                    animateTarget[animateProperty] = layout[animateProperty];
		                    graphic[isUpdate? 'updateProps' : 'initProps'](rect, {
		                        shape: animateTarget
		                    }, seriesModel);
		                }
		                return rect;
		            }
		            data.diff(oldData)
		                .add(function (dataIndex) {
		                    // 空数据
		                    if (!data.hasValue(dataIndex)) {
		                        return;
		                    }

		                    var rect = createRect(dataIndex);

		                    data.setItemGraphicEl(dataIndex, rect);

		                    group.add(rect);

		                })
		                .update(function (newIndex, oldIndex) {
		                    var rect = oldData.getItemGraphicEl(oldIndex);
		                    // 空数据
		                    if (!data.hasValue(newIndex)) {
		                        group.remove(rect);
		                        return;
		                    }
		                    if (!rect) {
		                        rect = createRect(newIndex, true);
		                    }

		                    var layout = data.getItemLayout(newIndex);
		                    var lineWidth = data.getItemModel(newIndex).get(barBorderWidthQuery) || 0;
		                    fixLayoutWithLineWidth(layout, lineWidth);

		                    graphic.updateProps(rect, {
		                        shape: layout
		                    }, seriesModel);

		                    data.setItemGraphicEl(newIndex, rect);

		                    // Add back
		                    group.add(rect);
		                })
		                .remove(function (idx) {
		                    var rect = oldData.getItemGraphicEl(idx);
		                    if (rect) {
		                        // Not show text when animating
		                        rect.style.text = '';
		                        graphic.updateProps(rect, {
		                            shape: {
		                                width: 0
		                            }
		                        }, seriesModel, function () {
		                            group.remove(rect);
		                        });
		                    }
		                })
		                .execute();

		            this._updateStyle(seriesModel, data, isHorizontal);

		            this._data = data;
		        },

		        _updateStyle: function (seriesModel, data, isHorizontal) {
		            function setLabel(style, model, color, labelText, labelPositionOutside) {
		                graphic.setText(style, model, color);
		                style.text = labelText;
		                if (style.textPosition === 'outside') {
		                    style.textPosition = labelPositionOutside;
		                }
		            }

		            data.eachItemGraphicEl(function (rect, idx) {
		                var itemModel = data.getItemModel(idx);
		                var color = data.getItemVisual(idx, 'color');
		                var layout = data.getItemLayout(idx);
		                var itemStyleModel = itemModel.getModel('itemStyle.normal');

		                var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();

		                rect.setShape('r', itemStyleModel.get('barBorderRadius') || 0);

		                rect.setStyle(zrUtil.defaults(
		                    {
		                        fill: color
		                    },
		                    itemStyleModel.getBarItemStyle()
		                ));

		                var labelPositionOutside = isHorizontal
		                    ? (layout.height > 0 ? 'bottom' : 'top')
		                    : (layout.width > 0 ? 'left' : 'right');

		                var labelModel = itemModel.getModel('label.normal');
		                var hoverLabelModel = itemModel.getModel('label.emphasis');
		                var rectStyle = rect.style;
		                if (labelModel.get('show')) {
		                    setLabel(
		                        rectStyle, labelModel, color,
		                        zrUtil.retrieve(
		                            seriesModel.getFormattedLabel(idx, 'normal'),
		                            seriesModel.getRawValue(idx)
		                        ),
		                        labelPositionOutside
		                    );
		                }
		                else {
		                    rectStyle.text = '';
		                }
		                if (hoverLabelModel.get('show')) {
		                    setLabel(
		                        hoverStyle, hoverLabelModel, color,
		                        zrUtil.retrieve(
		                            seriesModel.getFormattedLabel(idx, 'emphasis'),
		                            seriesModel.getRawValue(idx)
		                        ),
		                        labelPositionOutside
		                    );
		                }
		                else {
		                    hoverStyle.text = '';
		                }
		                graphic.setHoverStyle(rect, hoverStyle);
		            });
		        },

		        remove: function (ecModel, api) {
		            var group = this.group;
		            if (ecModel.get('animation')) {
		                if (this._data) {
		                    this._data.eachItemGraphicEl(function (el) {
		                        // Not show text when animating
		                        el.style.text = '';
		                        graphic.updateProps(el, {
		                            shape: {
		                                width: 0
		                            }
		                        }, ecModel, function () {
		                            group.remove(el);
		                        });
		                    });
		                }
		            }
		            else {
		                group.removeAll();
		            }
		        }
		    });


	/***/ },
	/* 130 */
	/***/ function(module, exports, __webpack_require__) {

		
		    module.exports = {
		        getBarItemStyle: __webpack_require__(11)(
		            [
		                ['fill', 'color'],
		                ['stroke', 'borderColor'],
		                ['lineWidth', 'borderWidth'],
		                // Compatitable with 2
		                ['stroke', 'barBorderColor'],
		                ['lineWidth', 'barBorderWidth'],
		                ['opacity'],
		                ['shadowBlur'],
		                ['shadowOffsetX'],
		                ['shadowOffsetY'],
		                ['shadowColor']
		            ]
		        )
		    };


	/***/ },
	/* 131 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var parsePercent = numberUtil.parsePercent;

		    function getSeriesStackId(seriesModel) {
		        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
		    }

		    function calBarWidthAndOffset(barSeries, api) {
		        // Columns info on each category axis. Key is cartesian name
		        var columnsMap = {};

		        zrUtil.each(barSeries, function (seriesModel, idx) {
		            var cartesian = seriesModel.coordinateSystem;

		            var baseAxis = cartesian.getBaseAxis();

		            var columnsOnAxis = columnsMap[baseAxis.index] || {
		                remainedWidth: baseAxis.getBandWidth(),
		                autoWidthCount: 0,
		                categoryGap: '20%',
		                gap: '30%',
		                axis: baseAxis,
		                stacks: {}
		            };
		            var stacks = columnsOnAxis.stacks;
		            columnsMap[baseAxis.index] = columnsOnAxis;

		            var stackId = getSeriesStackId(seriesModel);

		            if (!stacks[stackId]) {
		                columnsOnAxis.autoWidthCount++;
		            }
		            stacks[stackId] = stacks[stackId] || {
		                width: 0,
		                maxWidth: 0
		            };

		            var barWidth = seriesModel.get('barWidth');
		            var barMaxWidth = seriesModel.get('barMaxWidth');
		            var barGap = seriesModel.get('barGap');
		            var barCategoryGap = seriesModel.get('barCategoryGap');
		            // TODO
		            if (barWidth && ! stacks[stackId].width) {
		                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
		                stacks[stackId].width = barWidth;
		                columnsOnAxis.remainedWidth -= barWidth;
		            }

		            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
		            (barGap != null) && (columnsOnAxis.gap = barGap);
		            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);
		        });

		        var result = {};

		        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {

		            result[coordSysName] = {};

		            var stacks = columnsOnAxis.stacks;
		            var baseAxis = columnsOnAxis.axis;
		            var bandWidth = baseAxis.getBandWidth();
		            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
		            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);

		            var remainedWidth = columnsOnAxis.remainedWidth;
		            var autoWidthCount = columnsOnAxis.autoWidthCount;
		            var autoWidth = (remainedWidth - categoryGap)
		                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
		            autoWidth = Math.max(autoWidth, 0);

		            // Find if any auto calculated bar exceeded maxBarWidth
		            zrUtil.each(stacks, function (column, stack) {
		                var maxWidth = column.maxWidth;
		                if (!column.width && maxWidth && maxWidth < autoWidth) {
		                    maxWidth = Math.min(maxWidth, remainedWidth);
		                    remainedWidth -= maxWidth;
		                    column.width = maxWidth;
		                    autoWidthCount--;
		                }
		            });

		            // Recalculate width again
		            autoWidth = (remainedWidth - categoryGap)
		                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
		            autoWidth = Math.max(autoWidth, 0);

		            var widthSum = 0;
		            var lastColumn;
		            zrUtil.each(stacks, function (column, idx) {
		                if (!column.width) {
		                    column.width = autoWidth;
		                }
		                lastColumn = column;
		                widthSum += column.width * (1 + barGapPercent);
		            });
		            if (lastColumn) {
		                widthSum -= lastColumn.width * barGapPercent;
		            }

		            var offset = -widthSum / 2;
		            zrUtil.each(stacks, function (column, stackId) {
		                result[coordSysName][stackId] = result[coordSysName][stackId] || {
		                    offset: offset,
		                    width: column.width
		                };

		                offset += column.width * (1 + barGapPercent);
		            });
		        });

		        return result;
		    }

		    /**
		     * @param {string} seriesType
		     * @param {module:echarts/model/Global} ecModel
		     * @param {module:echarts/ExtensionAPI} api
		     */
		    function barLayoutGrid(seriesType, ecModel, api) {

		        var barWidthAndOffset = calBarWidthAndOffset(
		            zrUtil.filter(
		                ecModel.getSeriesByType(seriesType),
		                function (seriesModel) {
		                    return !ecModel.isSeriesFiltered(seriesModel)
		                        && seriesModel.coordinateSystem
		                        && seriesModel.coordinateSystem.type === 'cartesian2d';
		                }
		            )
		        );

		        var lastStackCoords = {};

		        ecModel.eachSeriesByType(seriesType, function (seriesModel) {

		            var data = seriesModel.getData();
		            var cartesian = seriesModel.coordinateSystem;
		            var baseAxis = cartesian.getBaseAxis();

		            var stackId = getSeriesStackId(seriesModel);
		            var columnLayoutInfo = barWidthAndOffset[baseAxis.index][stackId];
		            var columnOffset = columnLayoutInfo.offset;
		            var columnWidth = columnLayoutInfo.width;
		            var valueAxis = cartesian.getOtherAxis(baseAxis);

		            var barMinHeight = seriesModel.get('barMinHeight') || 0;

		            var valueAxisStart = baseAxis.onZero
		                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))
		                : valueAxis.getGlobalExtent()[0];

		            var coords = cartesian.dataToPoints(data, true);
		            lastStackCoords[stackId] = lastStackCoords[stackId] || [];

		            data.setLayout({
		                offset: columnOffset,
		                size: columnWidth
		            });
		            data.each(valueAxis.dim, function (value, idx) {
		                // 空数据
		                if (isNaN(value)) {
		                    return;
		                }
		                if (!lastStackCoords[stackId][idx]) {
		                    lastStackCoords[stackId][idx] = {
		                        // Positive stack
		                        p: valueAxisStart,
		                        // Negative stack
		                        n: valueAxisStart
		                    };
		                }
		                var sign = value >= 0 ? 'p' : 'n';
		                var coord = coords[idx];
		                var lastCoord = lastStackCoords[stackId][idx][sign];
		                var x, y, width, height;
		                if (valueAxis.isHorizontal()) {
		                    x = lastCoord;
		                    y = coord[1] + columnOffset;
		                    width = coord[0] - lastCoord;
		                    height = columnWidth;

		                    if (Math.abs(width) < barMinHeight) {
		                        width = (width < 0 ? -1 : 1) * barMinHeight;
		                    }
		                    lastStackCoords[stackId][idx][sign] += width;
		                }
		                else {
		                    x = coord[0] + columnOffset;
		                    y = lastCoord;
		                    width = columnWidth;
		                    height = coord[1] - lastCoord;
		                    if (Math.abs(height) < barMinHeight) {
		                        // Include zero to has a positive bar
		                        height = (height <= 0 ? -1 : 1) * barMinHeight;
		                    }
		                    lastStackCoords[stackId][idx][sign] += height;
		                }

		                data.setItemLayout(idx, {
		                    x: x,
		                    y: y,
		                    width: width,
		                    height: height
		                });
		            }, true);

		        }, this);
		    }

		    module.exports = barLayoutGrid;


	/***/ },
	/* 132 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var echarts = __webpack_require__(1);

		    __webpack_require__(133);
		    __webpack_require__(135);

		    __webpack_require__(136)('pie', [{
		        type: 'pieToggleSelect',
		        event: 'pieselectchanged',
		        method: 'toggleSelected'
		    }, {
		        type: 'pieSelect',
		        event: 'pieselected',
		        method: 'select'
		    }, {
		        type: 'pieUnSelect',
		        event: 'pieunselected',
		        method: 'unSelect'
		    }]);

		    echarts.registerVisualCoding(
		        'chart',  zrUtil.curry(__webpack_require__(137), 'pie')
		    );

		    echarts.registerLayout(zrUtil.curry(
		        __webpack_require__(138), 'pie'
		    ));

		    echarts.registerProcessor(
		        'filter', zrUtil.curry(__webpack_require__(140), 'pie')
		    );


	/***/ },
	/* 133 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var List = __webpack_require__(94);
		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);
		    var completeDimensions = __webpack_require__(96);

		    var dataSelectableMixin = __webpack_require__(134);

		    var PieSeries = __webpack_require__(1).extendSeriesModel({

		        type: 'series.pie',

		        // Overwrite
		        init: function (option) {
		            PieSeries.superApply(this, 'init', arguments);

		            // Enable legend selection for each data item
		            // Use a function instead of direct access because data reference may changed
		            this.legendDataProvider = function () {
		                return this._dataBeforeProcessed;
		            };

		            this.updateSelectedMap();

		            this._defaultLabelLine(option);
		        },

		        // Overwrite
		        mergeOption: function (newOption) {
		            PieSeries.superCall(this, 'mergeOption', newOption);
		            this.updateSelectedMap();
		        },

		        getInitialData: function (option, ecModel) {
		            var dimensions = completeDimensions(['value'], option.data);
		            var list = new List(dimensions, this);
		            list.initData(option.data);
		            return list;
		        },

		        // Overwrite
		        getDataParams: function (dataIndex) {
		            var data = this._data;
		            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);
		            var sum = data.getSum('value');
		            // FIXME toFixed?
		            //
		            // Percent is 0 if sum is 0
		            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);

		            params.$vars.push('percent');
		            return params;
		        },

		        _defaultLabelLine: function (option) {
		            // Extend labelLine emphasis
		            modelUtil.defaultEmphasis(option.labelLine, ['show']);

		            var labelLineNormalOpt = option.labelLine.normal;
		            var labelLineEmphasisOpt = option.labelLine.emphasis;
		            // Not show label line if `label.normal.show = false`
		            labelLineNormalOpt.show = labelLineNormalOpt.show
		                && option.label.normal.show;
		            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show
		                && option.label.emphasis.show;
		        },

		        defaultOption: {
		            zlevel: 0,
		            z: 2,
		            legendHoverLink: true,

		            hoverAnimation: true,
		            // 默认全局居中
		            center: ['50%', '50%'],
		            radius: [0, '75%'],
		            // 默认顺时针
		            clockwise: true,
		            startAngle: 90,
		            // 最小角度改为0
		            minAngle: 0,
		            // 选中是扇区偏移量
		            selectedOffset: 10,

		            // If use strategy to avoid label overlapping
		            avoidLabelOverlap: true,
		            // 选择模式，默认关闭，可选single，multiple
		            // selectedMode: false,
		            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
		            // roseType: null,

		            label: {
		                normal: {
		                    // If rotate around circle
		                    rotate: false,
		                    show: true,
		                    // 'outer', 'inside', 'center'
		                    position: 'outer'
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数
		                },
		                emphasis: {}
		            },
		            // Enabled when label.normal.position is 'outer'
		            labelLine: {
		                normal: {
		                    show: true,
		                    // 引导线两段中的第一段长度
		                    length: 15,
		                    // 引导线两段中的第二段长度
		                    length2: 15,
		                    smooth: false,
		                    lineStyle: {
		                        // color: 各异,
		                        width: 1,
		                        type: 'solid'
		                    }
		                }
		            },
		            itemStyle: {
		                normal: {
		                    // color: 各异,
		                    borderColor: 'rgba(0,0,0,0)',
		                    borderWidth: 1
		                },
		                emphasis: {
		                    // color: 各异,
		                    borderColor: 'rgba(0,0,0,0)',
		                    borderWidth: 1
		                }
		            },

		            animationEasing: 'cubicOut',

		            data: []
		        }
		    });

		    zrUtil.mixin(PieSeries, dataSelectableMixin);

		    module.exports = PieSeries;


	/***/ },
	/* 134 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Data selectable mixin for chart series.
		 * To eanble data select, option of series must have `selectedMode`.
		 * And each data item will use `selected` to toggle itself selected status
		 *
		 * @module echarts/chart/helper/DataSelectable
		 */


		    var zrUtil = __webpack_require__(3);

		    module.exports = {

		        updateSelectedMap: function () {
		            var option = this.option;
		            this._dataOptMap = zrUtil.reduce(option.data, function (dataOptMap, dataOpt) {
		                dataOptMap[dataOpt.name] = dataOpt;
		                return dataOptMap;
		            }, {});
		        },
		        /**
		         * @param {string} name
		         */
		        // PENGING If selectedMode is null ?
		        select: function (name) {
		            var dataOptMap = this._dataOptMap;
		            var dataOpt = dataOptMap[name];
		            var selectedMode = this.get('selectedMode');
		            if (selectedMode === 'single') {
		                zrUtil.each(dataOptMap, function (dataOpt) {
		                    dataOpt.selected = false;
		                });
		            }
		            dataOpt && (dataOpt.selected = true);
		        },

		        /**
		         * @param {string} name
		         */
		        unSelect: function (name) {
		            var dataOpt = this._dataOptMap[name];
		            // var selectedMode = this.get('selectedMode');
		            // selectedMode !== 'single' && dataOpt && (dataOpt.selected = false);
		            dataOpt && (dataOpt.selected = false);
		        },

		        /**
		         * @param {string} name
		         */
		        toggleSelected: function (name) {
		            var dataOpt = this._dataOptMap[name];
		            if (dataOpt != null) {
		                this[dataOpt.selected ? 'unSelect' : 'select'](name);
		                return dataOpt.selected;
		            }
		        },

		        /**
		         * @param {string} name
		         */
		        isSelected: function (name) {
		            var dataOpt = this._dataOptMap[name];
		            return dataOpt && dataOpt.selected;
		        }
		    };


	/***/ },
	/* 135 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);

		    /**
		     * @param {module:echarts/model/Series} seriesModel
		     * @param {boolean} hasAnimation
		     * @inner
		     */
		    function updateDataSelected(uid, seriesModel, hasAnimation, api) {
		        var data = seriesModel.getData();
		        var dataIndex = this.dataIndex;
		        var name = data.getName(dataIndex);
		        var selectedOffset = seriesModel.get('selectedOffset');

		        api.dispatchAction({
		            type: 'pieToggleSelect',
		            from: uid,
		            name: name,
		            seriesId: seriesModel.id
		        });

		        data.each(function (idx) {
		            toggleItemSelected(
		                data.getItemGraphicEl(idx),
		                data.getItemLayout(idx),
		                seriesModel.isSelected(data.getName(idx)),
		                selectedOffset,
		                hasAnimation
		            );
		        });
		    }

		    /**
		     * @param {module:zrender/graphic/Sector} el
		     * @param {Object} layout
		     * @param {boolean} isSelected
		     * @param {number} selectedOffset
		     * @param {boolean} hasAnimation
		     * @inner
		     */
		    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
		        var midAngle = (layout.startAngle + layout.endAngle) / 2;

		        var dx = Math.cos(midAngle);
		        var dy = Math.sin(midAngle);

		        var offset = isSelected ? selectedOffset : 0;
		        var position = [dx * offset, dy * offset];

		        hasAnimation
		            // animateTo will stop revious animation like update transition
		            ? el.animate()
		                .when(200, {
		                    position: position
		                })
		                .start('bounceOut')
		            : el.attr('position', position);
		    }

		    /**
		     * Piece of pie including Sector, Label, LabelLine
		     * @constructor
		     * @extends {module:zrender/graphic/Group}
		     */
		    function PiePiece(data, idx) {

		        graphic.Group.call(this);

		        var sector = new graphic.Sector({
		            z2: 2
		        });
		        var polyline = new graphic.Polyline();
		        var text = new graphic.Text();
		        this.add(sector);
		        this.add(polyline);
		        this.add(text);

		        this.updateData(data, idx, true);

		        // Hover to change label and labelLine
		        function onEmphasis() {
		            polyline.ignore = polyline.hoverIgnore;
		            text.ignore = text.hoverIgnore;
		        }
		        function onNormal() {
		            polyline.ignore = polyline.normalIgnore;
		            text.ignore = text.normalIgnore;
		        }
		        this.on('emphasis', onEmphasis)
		            .on('normal', onNormal)
		            .on('mouseover', onEmphasis)
		            .on('mouseout', onNormal);
		    }

		    var piePieceProto = PiePiece.prototype;

		    function getLabelStyle(data, idx, state, labelModel, labelPosition) {
		        var textStyleModel = labelModel.getModel('textStyle');
		        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
		        return {
		            fill: textStyleModel.getTextColor()
		                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
		            textFont: textStyleModel.getFont(),
		            text: zrUtil.retrieve(
		                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)
		            )
		        };
		    }

		    piePieceProto.updateData = function (data, idx, firstCreate) {

		        var sector = this.childAt(0);

		        var seriesModel = data.hostModel;
		        var itemModel = data.getItemModel(idx);
		        var layout = data.getItemLayout(idx);
		        var sectorShape = zrUtil.extend({}, layout);
		        sectorShape.label = null;
		        if (firstCreate) {
		            sector.setShape(sectorShape);
		            sector.shape.endAngle = layout.startAngle;
		            graphic.updateProps(sector, {
		                shape: {
		                    endAngle: layout.endAngle
		                }
		            }, seriesModel);
		        }
		        else {
		            graphic.updateProps(sector, {
		                shape: sectorShape
		            }, seriesModel);
		        }

		        // Update common style
		        var itemStyleModel = itemModel.getModel('itemStyle');
		        var visualColor = data.getItemVisual(idx, 'color');

		        sector.setStyle(
		            zrUtil.defaults(
		                {
		                    fill: visualColor
		                },
		                itemStyleModel.getModel('normal').getItemStyle()
		            )
		        );
		        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

		        // Toggle selected
		        toggleItemSelected(
		            this,
		            data.getItemLayout(idx),
		            itemModel.get('selected'),
		            seriesModel.get('selectedOffset'),
		            seriesModel.get('animation')
		        );

		        function onEmphasis() {
		            // Sector may has animation of updating data. Force to move to the last frame
		            // Or it may stopped on the wrong shape
		            sector.stopAnimation(true);
		            sector.animateTo({
		                shape: {
		                    r: layout.r + 10
		                }
		            }, 300, 'elasticOut');
		        }
		        function onNormal() {
		            sector.stopAnimation(true);
		            sector.animateTo({
		                shape: {
		                    r: layout.r
		                }
		            }, 300, 'elasticOut');
		        }
		        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');
		        if (itemModel.get('hoverAnimation')) {
		            sector
		                .on('mouseover', onEmphasis)
		                .on('mouseout', onNormal)
		                .on('emphasis', onEmphasis)
		                .on('normal', onNormal);
		        }

		        this._updateLabel(data, idx);

		        graphic.setHoverStyle(this);
		    };

		    piePieceProto._updateLabel = function (data, idx) {

		        var labelLine = this.childAt(1);
		        var labelText = this.childAt(2);

		        var seriesModel = data.hostModel;
		        var itemModel = data.getItemModel(idx);
		        var layout = data.getItemLayout(idx);
		        var labelLayout = layout.label;
		        var visualColor = data.getItemVisual(idx, 'color');

		        graphic.updateProps(labelLine, {
		            shape: {
		                points: labelLayout.linePoints || [
		                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]
		                ]
		            }
		        }, seriesModel);

		        graphic.updateProps(labelText, {
		            style: {
		                x: labelLayout.x,
		                y: labelLayout.y
		            }
		        }, seriesModel);
		        labelText.attr({
		            style: {
		                textVerticalAlign: labelLayout.verticalAlign,
		                textAlign: labelLayout.textAlign,
		                textFont: labelLayout.font
		            },
		            rotation: labelLayout.rotation,
		            origin: [labelLayout.x, labelLayout.y],
		            z2: 10
		        });

		        var labelModel = itemModel.getModel('label.normal');
		        var labelHoverModel = itemModel.getModel('label.emphasis');
		        var labelLineModel = itemModel.getModel('labelLine.normal');
		        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
		        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');

		        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));

		        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
		        labelText.hoverIgnore = !labelHoverModel.get('show');

		        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
		        labelLine.hoverIgnore = !labelLineHoverModel.get('show');

		        // Default use item visual color
		        labelLine.setStyle({
		            stroke: visualColor
		        });
		        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());

		        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);
		        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();

		        var smooth = labelLineModel.get('smooth');
		        if (smooth && smooth === true) {
		            smooth = 0.4;
		        }
		        labelLine.setShape({
		            smooth: smooth
		        });
		    };

		    zrUtil.inherits(PiePiece, graphic.Group);


		    // Pie view
		    var Pie = __webpack_require__(41).extend({

		        type: 'pie',

		        init: function () {
		            var sectorGroup = new graphic.Group();
		            this._sectorGroup = sectorGroup;
		        },

		        render: function (seriesModel, ecModel, api, payload) {
		            if (payload && (payload.from === this.uid)) {
		                return;
		            }

		            var data = seriesModel.getData();
		            var oldData = this._data;
		            var group = this.group;

		            var hasAnimation = ecModel.get('animation');
		            var isFirstRender = !oldData;

		            var onSectorClick = zrUtil.curry(
		                updateDataSelected, this.uid, seriesModel, hasAnimation, api
		            );

		            var selectedMode = seriesModel.get('selectedMode');

		            data.diff(oldData)
		                .add(function (idx) {
		                    var piePiece = new PiePiece(data, idx);
		                    if (isFirstRender) {
		                        piePiece.eachChild(function (child) {
		                            child.stopAnimation(true);
		                        });
		                    }

		                    selectedMode && piePiece.on('click', onSectorClick);

		                    data.setItemGraphicEl(idx, piePiece);

		                    group.add(piePiece);
		                })
		                .update(function (newIdx, oldIdx) {
		                    var piePiece = oldData.getItemGraphicEl(oldIdx);

		                    piePiece.updateData(data, newIdx);

		                    piePiece.off('click');
		                    selectedMode && piePiece.on('click', onSectorClick);
		                    group.add(piePiece);
		                    data.setItemGraphicEl(newIdx, piePiece);
		                })
		                .remove(function (idx) {
		                    var piePiece = oldData.getItemGraphicEl(idx);
		                    group.remove(piePiece);
		                })
		                .execute();

		            if (hasAnimation && isFirstRender && data.count() > 0) {
		                var shape = data.getItemLayout(0);
		                var r = Math.max(api.getWidth(), api.getHeight()) / 2;

		                var removeClipPath = zrUtil.bind(group.removeClipPath, group);
		                group.setClipPath(this._createClipPath(
		                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel
		                ));
		            }

		            this._data = data;
		        },

		        _createClipPath: function (
		            cx, cy, r, startAngle, clockwise, cb, seriesModel
		        ) {
		            var clipPath = new graphic.Sector({
		                shape: {
		                    cx: cx,
		                    cy: cy,
		                    r0: 0,
		                    r: r,
		                    startAngle: startAngle,
		                    endAngle: startAngle,
		                    clockwise: clockwise
		                }
		            });

		            graphic.initProps(clipPath, {
		                shape: {
		                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
		                }
		            }, seriesModel, cb);

		            return clipPath;
		        }
		    });

		    module.exports = Pie;


	/***/ },
	/* 136 */
	/***/ function(module, exports, __webpack_require__) {

		
		    var echarts = __webpack_require__(1);
		    var zrUtil = __webpack_require__(3);
		    module.exports = function (seriesType, actionInfos) {
		        zrUtil.each(actionInfos, function (actionInfo) {
		            actionInfo.update = 'updateView';
		            /**
		             * @payload
		             * @property {string} seriesName
		             * @property {string} name
		             */
		            echarts.registerAction(actionInfo, function (payload, ecModel) {
		                var selected = {};
		                ecModel.eachComponent(
		                    {mainType: 'series', subType: seriesType, query: payload},
		                    function (seriesModel) {
		                        if (seriesModel[actionInfo.method]) {
		                            seriesModel[actionInfo.method](payload.name);
		                        }
		                        var data = seriesModel.getData();
		                        // Create selected map
		                        data.each(function (idx) {
		                            var name = data.getName(idx);
		                            selected[name] = seriesModel.isSelected(name) || false;
		                        });
		                    }
		                );
		                return {
		                    name: payload.name,
		                    selected: selected
		                };
		            });
		        });
		    };


	/***/ },
	/* 137 */
	/***/ function(module, exports) {

		// Pick color from palette for each data item


		    module.exports = function (seriesType, ecModel) {
		        var globalColorList = ecModel.get('color');
		        var offset = 0;
		        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
		            var colorList = seriesModel.get('color', true);
		            var dataAll = seriesModel.getRawData();
		            if (!ecModel.isSeriesFiltered(seriesModel)) {
		                var data = seriesModel.getData();
		                data.each(function (idx) {
		                    var itemModel = data.getItemModel(idx);
		                    var rawIdx = data.getRawIndex(idx);
		                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded
		                    var singleDataColor = data.getItemVisual(idx, 'color', true);
		                    if (!singleDataColor) {
		                        var paletteColor = colorList ? colorList[rawIdx % colorList.length]
		                            : globalColorList[(rawIdx + offset) % globalColorList.length];
		                        var color = itemModel.get('itemStyle.normal.color') || paletteColor;
		                        // Legend may use the visual info in data before processed
		                        dataAll.setItemVisual(rawIdx, 'color', color);
		                        data.setItemVisual(idx, 'color', color);
		                    }
		                    else {
		                        // Set data all color for legend
		                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
		                    }
		                });
		            }
		            offset += dataAll.count();
		        });
		    };


	/***/ },
	/* 138 */
	/***/ function(module, exports, __webpack_require__) {

		// TODO minAngle



		    var numberUtil = __webpack_require__(7);
		    var parsePercent = numberUtil.parsePercent;
		    var labelLayout = __webpack_require__(139);
		    var zrUtil = __webpack_require__(3);

		    var PI2 = Math.PI * 2;
		    var RADIAN = Math.PI / 180;

		    module.exports = function (seriesType, ecModel, api) {
		        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
		            var center = seriesModel.get('center');
		            var radius = seriesModel.get('radius');

		            if (!zrUtil.isArray(radius)) {
		                radius = [0, radius];
		            }
		            if (!zrUtil.isArray(center)) {
		                center = [center, center];
		            }

		            var width = api.getWidth();
		            var height = api.getHeight();
		            var size = Math.min(width, height);
		            var cx = parsePercent(center[0], width);
		            var cy = parsePercent(center[1], height);
		            var r0 = parsePercent(radius[0], size / 2);
		            var r = parsePercent(radius[1], size / 2);

		            var data = seriesModel.getData();

		            var startAngle = -seriesModel.get('startAngle') * RADIAN;

		            var minAngle = seriesModel.get('minAngle') * RADIAN;

		            var sum = data.getSum('value');
		            // Sum may be 0
		            var unitRadian = Math.PI / (sum || data.count()) * 2;

		            var clockwise = seriesModel.get('clockwise');

		            var roseType = seriesModel.get('roseType');

		            // [0...max]
		            var extent = data.getDataExtent('value');
		            extent[0] = 0;

		            // In the case some sector angle is smaller than minAngle
		            var restAngle = PI2;
		            var valueSumLargerThanMinAngle = 0;

		            var currentAngle = startAngle;

		            var dir = clockwise ? 1 : -1;
		            data.each('value', function (value, idx) {
		                var angle;
		                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？
		                if (roseType !== 'area') {
		                    angle = sum === 0 ? unitRadian : (value * unitRadian);
		                }
		                else {
		                    angle = PI2 / (data.count() || 1);
		                }

		                if (angle < minAngle) {
		                    angle = minAngle;
		                    restAngle -= minAngle;
		                }
		                else {
		                    valueSumLargerThanMinAngle += value;
		                }

		                var endAngle = currentAngle + dir * angle;
		                data.setItemLayout(idx, {
		                    angle: angle,
		                    startAngle: currentAngle,
		                    endAngle: endAngle,
		                    clockwise: clockwise,
		                    cx: cx,
		                    cy: cy,
		                    r0: r0,
		                    r: roseType
		                        ? numberUtil.linearMap(value, extent, [r0, r])
		                        : r
		                });

		                currentAngle = endAngle;
		            }, true);

		            // Some sector is constrained by minAngle
		            // Rest sectors needs recalculate angle
		            if (restAngle < PI2) {
		                // Average the angle if rest angle is not enough after all angles is
		                // Constrained by minAngle
		                if (restAngle <= 1e-3) {
		                    var angle = PI2 / data.count();
		                    data.each(function (idx) {
		                        var layout = data.getItemLayout(idx);
		                        layout.startAngle = startAngle + dir * idx * angle;
		                        layout.endAngle = startAngle + dir * (idx + 1) * angle;
		                    });
		                }
		                else {
		                    unitRadian = restAngle / valueSumLargerThanMinAngle;
		                    currentAngle = startAngle;
		                    data.each('value', function (value, idx) {
		                        var layout = data.getItemLayout(idx);
		                        var angle = layout.angle === minAngle
		                            ? minAngle : value * unitRadian;
		                        layout.startAngle = currentAngle;
		                        layout.endAngle = currentAngle + dir * angle;
		                        currentAngle += angle;
		                    });
		                }
		            }

		            labelLayout(seriesModel, r, width, height);
		        });
		    };


	/***/ },
	/* 139 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		// FIXME emphasis label position is not same with normal label position


		    var textContain = __webpack_require__(14);

		    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
		        list.sort(function (a, b) {
		            return a.y - b.y;
		        });

		        // 压
		        function shiftDown(start, end, delta, dir) {
		            for (var j = start; j < end; j++) {
		                list[j].y += delta;
		                if (j > start
		                    && j + 1 < end
		                    && list[j + 1].y > list[j].y + list[j].height
		                ) {
		                    shiftUp(j, delta / 2);
		                    return;
		                }
		            }

		            shiftUp(end - 1, delta / 2);
		        }

		        // 弹
		        function shiftUp(end, delta) {
		            for (var j = end; j >= 0; j--) {
		                list[j].y -= delta;
		                if (j > 0
		                    && list[j].y > list[j - 1].y + list[j - 1].height
		                ) {
		                    break;
		                }
		            }
		        }

		        function changeX(list, isDownList, cx, cy, r, dir) {
		            var lastDeltaX = dir > 0
		                ? isDownList                // 右侧
		                    ? Number.MAX_VALUE      // 下
		                    : 0                     // 上
		                : isDownList                // 左侧
		                    ? Number.MAX_VALUE      // 下
		                    : 0;                    // 上

		            for (var i = 0, l = list.length; i < l; i++) {
		                // Not change x for center label
		                if (list[i].position === 'center') {
		                    continue;
		                }
		                var deltaY = Math.abs(list[i].y - cy);
		                var length = list[i].len;
		                var length2 = list[i].len2;
		                var deltaX = (deltaY < r + length)
		                    ? Math.sqrt(
		                          (r + length + length2) * (r + length + length2)
		                          - deltaY * deltaY
		                      )
		                    : Math.abs(list[i].x - cx);
		                if (isDownList && deltaX >= lastDeltaX) {
		                    // 右下，左下
		                    deltaX = lastDeltaX - 10;
		                }
		                if (!isDownList && deltaX <= lastDeltaX) {
		                    // 右上，左上
		                    deltaX = lastDeltaX + 10;
		                }

		                list[i].x = cx + deltaX * dir;
		                lastDeltaX = deltaX;
		            }
		        }

		        var lastY = 0;
		        var delta;
		        var len = list.length;
		        var upList = [];
		        var downList = [];
		        for (var i = 0; i < len; i++) {
		            delta = list[i].y - lastY;
		            if (delta < 0) {
		                shiftDown(i, len, -delta, dir);
		            }
		            lastY = list[i].y + list[i].height;
		        }
		        if (viewHeight - lastY < 0) {
		            shiftUp(len - 1, lastY - viewHeight);
		        }
		        for (var i = 0; i < len; i++) {
		            if (list[i].y >= cy) {
		                downList.push(list[i]);
		            }
		            else {
		                upList.push(list[i]);
		            }
		        }
		        changeX(upList, false, cx, cy, r, dir);
		        changeX(downList, true, cx, cy, r, dir);
		    }

		    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
		        var leftList = [];
		        var rightList = [];
		        for (var i = 0; i < labelLayoutList.length; i++) {
		            if (labelLayoutList[i].x < cx) {
		                leftList.push(labelLayoutList[i]);
		            }
		            else {
		                rightList.push(labelLayoutList[i]);
		            }
		        }

		        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
		        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);

		        for (var i = 0; i < labelLayoutList.length; i++) {
		            var linePoints = labelLayoutList[i].linePoints;
		            if (linePoints) {
		                var dist = linePoints[1][0] - linePoints[2][0];
		                if (labelLayoutList[i].x < cx) {
		                    linePoints[2][0] = labelLayoutList[i].x + 3;
		                }
		                else {
		                    linePoints[2][0] = labelLayoutList[i].x - 3;
		                }
		                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
		                linePoints[1][0] = linePoints[2][0] + dist;
		            }
		        }
		    }

		    module.exports = function (seriesModel, r, viewWidth, viewHeight) {
		        var data = seriesModel.getData();
		        var labelLayoutList = [];
		        var cx;
		        var cy;
		        var hasLabelRotate = false;

		        data.each(function (idx) {
		            var layout = data.getItemLayout(idx);

		            var itemModel = data.getItemModel(idx);
		            var labelModel = itemModel.getModel('label.normal');
		            // Use position in normal or emphasis
		            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');

		            var labelLineModel = itemModel.getModel('labelLine.normal');
		            var labelLineLen = labelLineModel.get('length');
		            var labelLineLen2 = labelLineModel.get('length2');

		            var midAngle = (layout.startAngle + layout.endAngle) / 2;
		            var dx = Math.cos(midAngle);
		            var dy = Math.sin(midAngle);

		            var textX;
		            var textY;
		            var linePoints;
		            var textAlign;

		            cx = layout.cx;
		            cy = layout.cy;

		            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
		            if (labelPosition === 'center') {
		                textX = layout.cx;
		                textY = layout.cy;
		                textAlign = 'center';
		            }
		            else {
		                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
		                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;

		                textX = x1 + dx * 3;
		                textY = y1 + dy * 3;

		                if (!isLabelInside) {
		                    // For roseType
		                    var x2 = x1 + dx * (labelLineLen + r - layout.r);
		                    var y2 = y1 + dy * (labelLineLen + r - layout.r);
		                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);
		                    var y3 = y2;

		                    textX = x3 + (dx < 0 ? -5 : 5);
		                    textY = y3;
		                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];
		                }

		                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');
		            }
		            var font = labelModel.getModel('textStyle').getFont();

		            var labelRotate = labelModel.get('rotate')
		                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;
		            var text = seriesModel.getFormattedLabel(idx, 'normal')
		                        || data.getName(idx);
		            var textRect = textContain.getBoundingRect(
		                text, font, textAlign, 'top'
		            );
		            hasLabelRotate = !!labelRotate;
		            layout.label = {
		                x: textX,
		                y: textY,
		                position: labelPosition,
		                height: textRect.height,
		                len: labelLineLen,
		                len2: labelLineLen2,
		                linePoints: linePoints,
		                textAlign: textAlign,
		                verticalAlign: 'middle',
		                font: font,
		                rotation: labelRotate
		            };

		            // Not layout the inside label
		            if (!isLabelInside) {
		                labelLayoutList.push(layout.label);
		            }
		        });
		        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
		            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
		        }
		    };


	/***/ },
	/* 140 */
	/***/ function(module, exports) {

		
		    module.exports = function (seriesType, ecModel) {
		        var legendModels = ecModel.findComponents({
		            mainType: 'legend'
		        });
		        if (!legendModels || !legendModels.length) {
		            return;
		        }
		        ecModel.eachSeriesByType(seriesType, function (series) {
		            var data = series.getData();
		            data.filterSelf(function (idx) {
		                var name = data.getName(idx);
		                // If in any legend component the status is not selected.
		                for (var i = 0; i < legendModels.length; i++) {
		                    if (!legendModels[i].isSelected(name)) {
		                        return false;
		                    }
		                }
		                return true;
		            }, this);
		        }, this);
		    };


	/***/ },
	/* 141 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var echarts = __webpack_require__(1);

		    __webpack_require__(142);
		    __webpack_require__(143);

		    echarts.registerVisualCoding('chart', zrUtil.curry(
		        __webpack_require__(103), 'scatter', 'circle', null
		    ));
		    echarts.registerLayout(zrUtil.curry(
		        __webpack_require__(104), 'scatter'
		    ));

		    // In case developer forget to include grid component
		    __webpack_require__(106);


	/***/ },
	/* 142 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var createListFromArray = __webpack_require__(93);
		    var SeriesModel = __webpack_require__(27);

		    module.exports = SeriesModel.extend({

		        type: 'series.scatter',

		        dependencies: ['grid', 'polar'],

		        getInitialData: function (option, ecModel) {
		            var list = createListFromArray(option.data, this, ecModel);
		            return list;
		        },

		        defaultOption: {
		            coordinateSystem: 'cartesian2d',
		            zlevel: 0,
		            z: 2,
		            legendHoverLink: true,

		            hoverAnimation: true,
		            // Cartesian coordinate system
		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            // Polar coordinate system
		            polarIndex: 0,

		            // Geo coordinate system
		            geoIndex: 0,

		            // symbol: null,        // 图形类型
		            symbolSize: 10,          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
		            // symbolRotate: null,  // 图形旋转控制

		            large: false,
		            // Available when large is true
		            largeThreshold: 2000,

		            // label: {
		                // normal: {
		                    // show: false
		                    // distance: 5,
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
		                    //           'inside'|'left'|'right'|'top'|'bottom'
		                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		            //     }
		            // },
		            itemStyle: {
		                normal: {
		                    opacity: 0.8
		                    // color: 各异
		                }
		            }
		        }
		    });


	/***/ },
	/* 143 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var SymbolDraw = __webpack_require__(98);
		    var LargeSymbolDraw = __webpack_require__(144);

		    __webpack_require__(1).extendChartView({

		        type: 'scatter',

		        init: function () {
		            this._normalSymbolDraw = new SymbolDraw();
		            this._largeSymbolDraw = new LargeSymbolDraw();
		        },

		        render: function (seriesModel, ecModel, api) {
		            var data = seriesModel.getData();
		            var largeSymbolDraw = this._largeSymbolDraw;
		            var normalSymbolDraw = this._normalSymbolDraw;
		            var group = this.group;

		            var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold')
		                ? largeSymbolDraw : normalSymbolDraw;

		            this._symbolDraw = symbolDraw;
		            symbolDraw.updateData(data);
		            group.add(symbolDraw.group);

		            group.remove(
		                symbolDraw === largeSymbolDraw
		                ? normalSymbolDraw.group : largeSymbolDraw.group
		            );
		        },

		        updateLayout: function (seriesModel) {
		            this._symbolDraw.updateLayout(seriesModel);
		        },

		        remove: function (ecModel, api) {
		            this._symbolDraw && this._symbolDraw.remove(api, true);
		        }
		    });


	/***/ },
	/* 144 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var symbolUtil = __webpack_require__(100);
		    var zrUtil = __webpack_require__(3);

		    var LargeSymbolPath = graphic.extendShape({
		        shape: {
		            points: null,
		            sizes: null
		        },

		        symbolProxy: null,

		        buildPath: function (path, shape) {
		            var points = shape.points;
		            var sizes = shape.sizes;

		            var symbolProxy = this.symbolProxy;
		            var symbolProxyShape = symbolProxy.shape;
		            for (var i = 0; i < points.length; i++) {
		                var pt = points[i];
		                var size = sizes[i];
		                if (size[0] < 4) {
		                    // Optimize for small symbol
		                    path.rect(
		                        pt[0] - size[0] / 2, pt[1] - size[1] / 2,
		                        size[0], size[1]
		                    );
		                }
		                else {
		                    symbolProxyShape.x = pt[0] - size[0] / 2;
		                    symbolProxyShape.y = pt[1] - size[1] / 2;
		                    symbolProxyShape.width = size[0];
		                    symbolProxyShape.height = size[1];

		                    symbolProxy.buildPath(path, symbolProxyShape);
		                }
		            }
		        }
		    });

		    function LargeSymbolDraw() {
		        this.group = new graphic.Group();

		        this._symbolEl = new LargeSymbolPath({
		            silent: true
		        });
		    }

		    var largeSymbolProto = LargeSymbolDraw.prototype;

		    /**
		     * Update symbols draw by new data
		     * @param {module:echarts/data/List} data
		     */
		    largeSymbolProto.updateData = function (data) {
		        this.group.removeAll();

		        var symbolEl = this._symbolEl;

		        var seriesModel = data.hostModel;

		        symbolEl.setShape({
		            points: data.mapArray(data.getItemLayout),
		            sizes: data.mapArray(
		                function (idx) {
		                    var size = data.getItemVisual(idx, 'symbolSize');
		                    if (!zrUtil.isArray(size)) {
		                        size = [size, size];
		                    }
		                    return size;
		                }
		            )
		        });

		        // Create symbolProxy to build path for each data
		        symbolEl.symbolProxy = symbolUtil.createSymbol(
		            data.getVisual('symbol'), 0, 0, 0, 0
		        );
		        // Use symbolProxy setColor method
		        symbolEl.setColor = symbolEl.symbolProxy.setColor;

		        symbolEl.setStyle(
		            seriesModel.getModel('itemStyle.normal').getItemStyle(['color'])
		        );

		        var visualColor = data.getVisual('color');
		        if (visualColor) {
		            symbolEl.setColor(visualColor);
		        }

		        // Add back
		        this.group.add(this._symbolEl);
		    };

		    largeSymbolProto.updateLayout = function (seriesModel) {
		        var data = seriesModel.getData();
		        this._symbolEl.setShape({
		            points: data.mapArray(data.getItemLayout)
		        });
		    };

		    largeSymbolProto.remove = function () {
		        this.group.removeAll();
		    };

		    module.exports = LargeSymbolDraw;


	/***/ },
	/* 145 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var echarts = __webpack_require__(1);

		    // Must use radar component
		    __webpack_require__(146);

		    __webpack_require__(151);
		    __webpack_require__(152);

		    echarts.registerVisualCoding(
		        'chart',  zrUtil.curry(__webpack_require__(137), 'radar')
		    );
		    echarts.registerVisualCoding('chart', zrUtil.curry(
		        __webpack_require__(103), 'radar', 'circle', null
		    ));
		    echarts.registerLayout(__webpack_require__(153));

		    echarts.registerProcessor(
		        'filter', zrUtil.curry(__webpack_require__(140), 'radar')
		    );

		    echarts.registerPreprocessor(__webpack_require__(154));


	/***/ },
	/* 146 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(147);
		    __webpack_require__(149);

		    __webpack_require__(150);


	/***/ },
	/* 147 */
	/***/ function(module, exports, __webpack_require__) {

		// TODO clockwise


		    var zrUtil = __webpack_require__(3);
		    var IndicatorAxis = __webpack_require__(148);
		    var IntervalScale = __webpack_require__(111);
		    var numberUtil = __webpack_require__(7);
		    var axisHelper = __webpack_require__(108);

		    function Radar(radarModel, ecModel, api) {

		        this._model = radarModel;
		        /**
		         * Radar dimensions
		         * @type {Array.<string>}
		         */
		        this.dimensions = [];

		        this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {
		            var dim = 'indicator_' + idx;
		            var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());
		            indicatorAxis.name = indicatorModel.get('name');
		            // Inject model and axis
		            indicatorAxis.model = indicatorModel;
		            indicatorModel.axis = indicatorAxis;
		            this.dimensions.push(dim);
		            return indicatorAxis;
		        }, this);

		        this.resize(radarModel, api);

		        /**
		         * @type {number}
		         * @readOnly
		         */
		        this.cx;
		        /**
		         * @type {number}
		         * @readOnly
		         */
		        this.cy;
		        /**
		         * @type {number}
		         * @readOnly
		         */
		        this.r;
		        /**
		         * @type {number}
		         * @readOnly
		         */
		        this.startAngle;
		    }

		    Radar.prototype.getIndicatorAxes = function () {
		        return this._indicatorAxes;
		    };

		    Radar.prototype.dataToPoint = function (value, indicatorIndex) {
		        var indicatorAxis = this._indicatorAxes[indicatorIndex];

		        return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);
		    };

		    Radar.prototype.coordToPoint = function (coord, indicatorIndex) {
		        var indicatorAxis = this._indicatorAxes[indicatorIndex];
		        var angle = indicatorAxis.angle;
		        var x = this.cx + coord * Math.cos(angle);
		        var y = this.cy - coord * Math.sin(angle);
		        return [x, y];
		    };

		    Radar.prototype.pointToData = function (pt) {
		        var dx = pt[0] - this.cx;
		        var dy = pt[1] - this.cy;
		        var radius = Math.sqrt(dx * dx + dy * dy);
		        dx /= radius;
		        dy /= radius;

		        var radian = Math.atan2(-dy, dx);

		        // Find the closest angle
		        // FIXME index can calculated directly
		        var minRadianDiff = Infinity;
		        var closestAxis;
		        var closestAxisIdx = -1;
		        for (var i = 0; i < this._indicatorAxes.length; i++) {
		            var indicatorAxis = this._indicatorAxes[i];
		            var diff = Math.abs(radian - indicatorAxis.angle);
		            if (diff < minRadianDiff) {
		                closestAxis = indicatorAxis;
		                closestAxisIdx = i;
		                minRadianDiff = diff;
		            }
		        }

		        return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];
		    };

		    Radar.prototype.resize = function (radarModel, api) {
		        var center = radarModel.get('center');
		        var viewWidth = api.getWidth();
		        var viewHeight = api.getHeight();
		        var viewSize = Math.min(viewWidth, viewHeight) / 2;
		        this.cx = numberUtil.parsePercent(center[0], viewWidth);
		        this.cy = numberUtil.parsePercent(center[1], viewHeight);

		        this.startAngle = radarModel.get('startAngle') * Math.PI / 180;

		        this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);

		        zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {
		            indicatorAxis.setExtent(0, this.r);
		            var angle = (this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length);
		            // Normalize to [-PI, PI]
		            angle = Math.atan2(Math.sin(angle), Math.cos(angle));
		            indicatorAxis.angle = angle;
		        }, this);
		    };

		    Radar.prototype.update = function (ecModel, api) {
		        var indicatorAxes = this._indicatorAxes;
		        var radarModel = this._model;
		        zrUtil.each(indicatorAxes, function (indicatorAxis) {
		            indicatorAxis.scale.setExtent(Infinity, -Infinity);
		        });
		        ecModel.eachSeriesByType('radar', function (radarSeries, idx) {
		            if (radarSeries.get('coordinateSystem') !== 'radar'
		                || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel
		            ) {
		                return;
		            }
		            var data = radarSeries.getData();
		            zrUtil.each(indicatorAxes, function (indicatorAxis) {
		                indicatorAxis.scale.unionExtent(data.getDataExtent(indicatorAxis.dim));
		            });
		        }, this);

		        var splitNumber = radarModel.get('splitNumber');

		        function increaseInterval(interval) {
		            var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));
		            // Increase interval
		            var f = interval / exp10;
		            if (f === 2) {
		                f = 5;
		            }
		            else { // f is 2 or 5
		                f *= 2;
		            }
		            return f * exp10;
		        }
		        // Force all the axis fixing the maxSplitNumber.
		        zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {
		            var rawExtent = axisHelper.getScaleExtent(indicatorAxis, indicatorAxis.model);
		            axisHelper.niceScaleExtent(indicatorAxis, indicatorAxis.model);

		            var axisModel = indicatorAxis.model;
		            var scale = indicatorAxis.scale;
		            var fixedMin = axisModel.get('min');
		            var fixedMax = axisModel.get('max');
		            var interval = scale.getInterval();

		            if (fixedMin != null && fixedMax != null) {
		                // User set min, max, divide to get new interval
		                // FIXME precision
		                scale.setInterval(
		                    (fixedMax - fixedMin) / splitNumber
		                );
		            }
		            else if (fixedMin != null) {
		                var max;
		                // User set min, expand extent on the other side
		                do {
		                    max = fixedMin + interval * splitNumber;
		                    scale.setExtent(+fixedMin, max);
		                    // Interval must been set after extent
		                    // FIXME
		                    scale.setInterval(interval);

		                    interval = increaseInterval(interval);
		                } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));
		            }
		            else if (fixedMax != null) {
		                var min;
		                // User set min, expand extent on the other side
		                do {
		                    min = fixedMax - interval * splitNumber;
		                    scale.setExtent(min, +fixedMax);
		                    scale.setInterval(interval);
		                    interval = increaseInterval(interval);
		                } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));
		            }
		            else {
		                var nicedSplitNumber = scale.getTicks().length - 1;
		                if (nicedSplitNumber > splitNumber) {
		                    interval = increaseInterval(interval);
		                }
		                // PENDING
		                var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;
		                var halfSplitNumber = Math.round(splitNumber / 2);
		                scale.setExtent(
		                    numberUtil.round(center - halfSplitNumber * interval),
		                    numberUtil.round(center + (splitNumber - halfSplitNumber) * interval)
		                );
		                scale.setInterval(interval);
		            }
		        });
		    };

		    /**
		     * Radar dimensions is based on the data
		     * @type {Array}
		     */
		    Radar.dimensions = [];

		    Radar.create = function (ecModel, api) {
		        var radarList = [];
		        ecModel.eachComponent('radar', function (radarModel) {
		            var radar = new Radar(radarModel, ecModel, api);
		            radarList.push(radar);
		            radarModel.coordinateSystem = radar;
		        });
		        ecModel.eachSeriesByType('radar', function (radarSeries) {
		            if (radarSeries.get('coordinateSystem') === 'radar') {
		                // Inject coordinate system
		                radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];
		            }
		        });
		        return radarList;
		    };

		    __webpack_require__(25).register('radar', Radar);
		    module.exports = Radar;


	/***/ },
	/* 148 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var Axis = __webpack_require__(117);

		    function IndicatorAxis(dim, scale, radiusExtent) {
		        Axis.call(this, dim, scale, radiusExtent);

		        /**
		         * Axis type
		         *  - 'category'
		         *  - 'value'
		         *  - 'time'
		         *  - 'log'
		         * @type {string}
		         */
		        this.type = 'value';

		        this.angle = 0;

		        /**
		         * Indicator name
		         * @type {string}
		         */
		        this.name = '';
		        /**
		         * @type {module:echarts/model/Model}
		         */
		        this.model;
		    }

		    zrUtil.inherits(IndicatorAxis, Axis);

		    module.exports = IndicatorAxis;


	/***/ },
	/* 149 */
	/***/ function(module, exports, __webpack_require__) {

		


		    var axisDefault = __webpack_require__(122);
		    var valueAxisDefault = axisDefault.valueAxis;
		    var Model = __webpack_require__(8);
		    var zrUtil = __webpack_require__(3);

		    var axisModelCommonMixin = __webpack_require__(123);

		    function defaultsShow(opt, show) {
		        return zrUtil.defaults({
		            show: show
		        }, opt);
		    }

		    var RadarModel = __webpack_require__(1).extendComponentModel({

		        type: 'radar',

		        optionUpdated: function () {
		            var boundaryGap = this.get('boundaryGap');
		            var splitNumber = this.get('splitNumber');
		            var scale = this.get('scale');
		            var axisLine = this.get('axisLine');
		            var axisTick = this.get('axisTick');
		            var axisLabel = this.get('axisLabel');
		            var nameTextStyle = this.get('name.textStyle');
		            var showName = this.get('name.show');
		            var nameFormatter = this.get('name.formatter');
		            var nameGap = this.get('nameGap');
		            var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {
		                // PENDING
		                if (indicatorOpt.max != null && indicatorOpt.max > 0) {
		                    indicatorOpt.min = 0;
		                }
		                else if (indicatorOpt.min != null && indicatorOpt.min < 0) {
		                    indicatorOpt.max = 0;
		                }
		                // Use same configuration
		                indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {
		                    boundaryGap: boundaryGap,
		                    splitNumber: splitNumber,
		                    scale: scale,
		                    axisLine: axisLine,
		                    axisTick: axisTick,
		                    axisLabel: axisLabel,
		                    // Competitable with 2 and use text
		                    name: indicatorOpt.text,
		                    nameLocation: 'end',
		                    nameGap: nameGap,
		                    // min: 0,
		                    nameTextStyle: nameTextStyle
		                }, false);
		                if (!showName) {
		                    indicatorOpt.name = '';
		                }
		                if (typeof nameFormatter === 'string') {
		                    indicatorOpt.name = nameFormatter.replace('{value}', indicatorOpt.name);
		                }
		                else if (typeof nameFormatter === 'function') {
		                    indicatorOpt.name = nameFormatter(
		                        indicatorOpt.name, indicatorOpt
		                    );
		                }
		                return zrUtil.extend(
		                    new Model(indicatorOpt, null, this.ecModel),
		                    axisModelCommonMixin
		                );
		            }, this);
		            this.getIndicatorModels = function () {
		                return indicatorModels;
		            };
		        },

		        defaultOption: {

		            zlevel: 0,

		            z: 0,

		            center: ['50%', '50%'],

		            radius: '75%',

		            startAngle: 90,

		            name: {
		                show: true
		                // formatter: null
		                // textStyle: {}
		            },

		            boundaryGap: [0, 0],

		            splitNumber: 5,

		            nameGap: 15,

		            scale: false,

		            // Polygon or circle
		            shape: 'polygon',

		            axisLine: zrUtil.merge(
		                {
		                    lineStyle: {
		                        color: '#bbb'
		                    }
		                },
		                valueAxisDefault.axisLine
		            ),
		            axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),
		            axisTick: defaultsShow(valueAxisDefault.axisTick, false),
		            splitLine: defaultsShow(valueAxisDefault.splitLine, true),
		            splitArea: defaultsShow(valueAxisDefault.splitArea, true),

		            // {text, min, max}
		            indicator: []
		        }
		    });

		    module.exports = RadarModel;


	/***/ },
	/* 150 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var AxisBuilder = __webpack_require__(126);
		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);

		    var axisBuilderAttrs = [
		        'axisLine', 'axisLabel', 'axisTick', 'axisName'
		    ];

		    module.exports = __webpack_require__(1).extendComponentView({

		        type: 'radar',

		        render: function (radarModel, ecModel, api) {
		            var group = this.group;
		            group.removeAll();

		            this._buildAxes(radarModel);
		            this._buildSplitLineAndArea(radarModel);
		        },

		        _buildAxes: function (radarModel) {
		            var radar = radarModel.coordinateSystem;
		            var indicatorAxes = radar.getIndicatorAxes();
		            var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {
		                var axisBuilder = new AxisBuilder(indicatorAxis.model, {
		                    position: [radar.cx, radar.cy],
		                    rotation: indicatorAxis.angle,
		                    labelDirection: -1,
		                    tickDirection: -1,
		                    nameDirection: 1
		                });
		                return axisBuilder;
		            });

		            zrUtil.each(axisBuilders, function (axisBuilder) {
		                zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
		                this.group.add(axisBuilder.getGroup());
		            }, this);
		        },

		        _buildSplitLineAndArea: function (radarModel) {
		            var radar = radarModel.coordinateSystem;
		            var splitNumber = radarModel.get('splitNumber');
		            var indicatorAxes = radar.getIndicatorAxes();
		            if (!indicatorAxes.length) {
		                return;
		            }
		            var shape = radarModel.get('shape');
		            var splitLineModel = radarModel.getModel('splitLine');
		            var splitAreaModel = radarModel.getModel('splitArea');
		            var lineStyleModel = splitLineModel.getModel('lineStyle');
		            var areaStyleModel = splitAreaModel.getModel('areaStyle');

		            var showSplitLine = splitLineModel.get('show');
		            var showSplitArea = splitAreaModel.get('show');
		            var splitLineColors = lineStyleModel.get('color');
		            var splitAreaColors = areaStyleModel.get('color');

		            splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];
		            splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];

		            var splitLines = [];
		            var splitAreas = [];

		            function getColorIndex(areaOrLine, areaOrLineColorList, idx) {
		                var colorIndex = idx % areaOrLineColorList.length;
		                areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];
		                return colorIndex;
		            }

		            if (shape === 'circle') {
		                var ticksRadius = indicatorAxes[0].getTicksCoords();
		                var cx = radar.cx;
		                var cy = radar.cy;
		                for (var i = 0; i < ticksRadius.length; i++) {
		                    if (showSplitLine) {
		                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
		                        splitLines[colorIndex].push(new graphic.Circle({
		                            shape: {
		                                cx: cx,
		                                cy: cy,
		                                r: ticksRadius[i]
		                            }
		                        }));
		                    }
		                    if (showSplitArea && i < ticksRadius.length - 1) {
		                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);
		                        splitAreas[colorIndex].push(new graphic.Ring({
		                            shape: {
		                                cx: cx,
		                                cy: cy,
		                                r0: ticksRadius[i],
		                                r: ticksRadius[i + 1]
		                            }
		                        }));
		                    }
		                }
		            }
		            // Polyyon
		            else {
		                var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {
		                    var ticksCoords = indicatorAxis.getTicksCoords();
		                    return zrUtil.map(ticksCoords, function (tickCoord) {
		                        return radar.coordToPoint(tickCoord, idx);
		                    });
		                });

		                var prevPoints = [];
		                for (var i = 0; i <= splitNumber; i++) {
		                    var points = [];
		                    for (var j = 0; j < indicatorAxes.length; j++) {
		                        points.push(axesTicksPoints[j][i]);
		                    }
		                    // Close
		                    points.push(points[0].slice());
		                    if (showSplitLine) {
		                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
		                        splitLines[colorIndex].push(new graphic.Polyline({
		                            shape: {
		                                points: points
		                            }
		                        }));
		                    }
		                    if (showSplitArea && prevPoints) {
		                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);
		                        splitAreas[colorIndex].push(new graphic.Polygon({
		                            shape: {
		                                points: points.concat(prevPoints)
		                            }
		                        }));
		                    }
		                    prevPoints = points.slice().reverse();
		                }
		            }

		            var lineStyle = lineStyleModel.getLineStyle();
		            var areaStyle = areaStyleModel.getAreaStyle();
		            // Add splitArea before splitLine
		            zrUtil.each(splitAreas, function (splitAreas, idx) {
		                this.group.add(graphic.mergePath(
		                    splitAreas, {
		                        style: zrUtil.defaults({
		                            stroke: 'none',
		                            fill: splitAreaColors[idx % splitAreaColors.length]
		                        }, areaStyle),
		                        silent: true
		                    }
		                ));
		            }, this);

		            zrUtil.each(splitLines, function (splitLines, idx) {
		                this.group.add(graphic.mergePath(
		                    splitLines, {
		                        style: zrUtil.defaults({
		                            fill: 'none',
		                            stroke: splitLineColors[idx % splitLineColors.length]
		                        }, lineStyle),
		                        silent: true
		                    }
		                ));
		            }, this);

		        }
		    });


	/***/ },
	/* 151 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var SeriesModel = __webpack_require__(27);
		    var List = __webpack_require__(94);
		    var completeDimensions = __webpack_require__(96);
		    var zrUtil = __webpack_require__(3);
		    var formatUtil = __webpack_require__(6);

		    var RadarSeries = SeriesModel.extend({

		        type: 'series.radar',

		        dependencies: ['radar'],


		        // Overwrite
		        init: function (option) {
		            RadarSeries.superApply(this, 'init', arguments);

		            // Enable legend selection for each data item
		            // Use a function instead of direct access because data reference may changed
		            this.legendDataProvider = function () {
		                return this._dataBeforeProcessed;
		            };
		        },

		        getInitialData: function (option, ecModel) {
		            var data = option.data || [];
		            var dimensions = completeDimensions(
		                [], data, [], 'indicator_'
		            );
		            var list = new List(dimensions, this);
		            list.initData(data);
		            return list;
		        },

		        formatTooltip: function (dataIndex) {
		            var value = this.getRawValue(dataIndex);
		            var coordSys = this.coordinateSystem;
		            var indicatorAxes = coordSys.getIndicatorAxes();
		            return this._data.getName(dataIndex) + '<br />'
		                + zrUtil.map(indicatorAxes, function (axis, idx) {
		                    return axis.name + ' : ' + value[idx];
		                }).join('<br />');
		        },

		        getFormattedLabel: function (dataIndex, status, formatter, indicatorIndex) {
		            status = status || 'normal';
		            var data = this.getData();
		            var itemModel = data.getItemModel(dataIndex);

		            var params = this.getDataParams(dataIndex);
		            if (formatter == null) {
		                formatter = itemModel.get(['label', status, 'formatter']);
		            }
		            // Get value of specified indicator
		            params.value = params.value[indicatorIndex || 0];
		            if (typeof formatter === 'function') {
		                params.status = status;
		                return formatter(params);
		            }
		            else if (typeof formatter === 'string') {
		                return formatUtil.formatTpl(formatter, params);
		            }
		        },

		        defaultOption: {
		            zlevel: 0,
		            z: 2,
		            coordinateSystem: 'radar',
		            legendHoverLink: true,
		            radarIndex: 0,
		            lineStyle: {
		                normal: {
		                    width: 2,
		                    type: 'solid'
		                }
		            },
		            label: {
		                normal: {
		                    position: 'top'
		                }
		            },
		            // areaStyle: {
		            // },
		            // itemStyle: {}
		            symbol: 'emptyCircle',
		            symbolSize: 4
		            // symbolRotate: null
		        }
		    });

		    module.exports = RadarSeries;


	/***/ },
	/* 152 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);
		    var symbolUtil = __webpack_require__(100);

		    function normalizeSymbolSize(symbolSize) {
		        if (!zrUtil.isArray(symbolSize)) {
		            symbolSize = [+symbolSize, +symbolSize];
		        }
		        return symbolSize;
		    }
		    module.exports = __webpack_require__(1).extendChartView({
		        type: 'radar',

		        render: function (seriesModel, ecModel, api) {
		            var polar = seriesModel.coordinateSystem;
		            var group = this.group;

		            var data = seriesModel.getData();
		            var oldData = this._data;

		            function createSymbol(data, idx) {
		                var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
		                var color = data.getItemVisual(idx, 'color');
		                if (symbolType === 'none') {
		                    return;
		                }
		                var symbolPath = symbolUtil.createSymbol(
		                    symbolType, -0.5, -0.5, 1, 1, color
		                );
		                symbolPath.attr({
		                    style: {
		                        strokeNoScale: true
		                    },
		                    z2: 100,
		                    scale: normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'))
		                });
		                return symbolPath;
		            }

		            function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {
		                // Simply rerender all
		                symbolGroup.removeAll();
		                for (var i = 0; i < newPoints.length - 1; i++) {
		                    var symbolPath = createSymbol(data, idx);
		                    if (symbolPath) {
		                        symbolPath.__dimIdx = i;
		                        if (oldPoints[i]) {
		                            symbolPath.attr('position', oldPoints[i]);
		                            graphic[isInit ? 'initProps' : 'updateProps'](
		                                symbolPath, {
		                                    position: newPoints[i]
		                                }, seriesModel
		                            );
		                        }
		                        else {
		                            symbolPath.attr('position', newPoints[i]);
		                        }
		                        symbolGroup.add(symbolPath);
		                    }
		                }
		            }

		            function getInitialPoints(points) {
		                return zrUtil.map(points, function (pt) {
		                    return [polar.cx, polar.cy];
		                });
		            }
		            data.diff(oldData)
		                .add(function (idx) {
		                    var points = data.getItemLayout(idx);
		                    if (!points) {
		                        return;
		                    }
		                    var polygon = new graphic.Polygon();
		                    var polyline = new graphic.Polyline();
		                    var target = {
		                        shape: {
		                            points: points
		                        }
		                    };
		                    polygon.shape.points = getInitialPoints(points);
		                    polyline.shape.points = getInitialPoints(points);
		                    graphic.initProps(polygon, target, seriesModel);
		                    graphic.initProps(polyline, target, seriesModel);

		                    var itemGroup = new graphic.Group();
		                    var symbolGroup = new graphic.Group();
		                    itemGroup.add(polyline);
		                    itemGroup.add(polygon);
		                    itemGroup.add(symbolGroup);

		                    updateSymbols(
		                        polyline.shape.points, points, symbolGroup, data, idx, true
		                    );

		                    data.setItemGraphicEl(idx, itemGroup);
		                })
		                .update(function (newIdx, oldIdx) {
		                    var itemGroup = oldData.getItemGraphicEl(oldIdx);
		                    var polyline = itemGroup.childAt(0);
		                    var polygon = itemGroup.childAt(1);
		                    var symbolGroup = itemGroup.childAt(2);
		                    var target = {
		                        shape: {
		                            points: data.getItemLayout(newIdx)
		                        }
		                    };
		                    if (!target.shape.points) {
		                        return;
		                    }
		                    updateSymbols(
		                        polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false
		                    );

		                    graphic.updateProps(polyline, target, seriesModel);
		                    graphic.updateProps(polygon, target, seriesModel);

		                    data.setItemGraphicEl(newIdx, itemGroup);
		                })
		                .remove(function (idx) {
		                    group.remove(oldData.getItemGraphicEl(idx));
		                })
		                .execute();

		            data.eachItemGraphicEl(function (itemGroup, idx) {
		                var itemModel = data.getItemModel(idx);
		                var polyline = itemGroup.childAt(0);
		                var polygon = itemGroup.childAt(1);
		                var symbolGroup = itemGroup.childAt(2);
		                var color = data.getItemVisual(idx, 'color');

		                group.add(itemGroup);

		                polyline.setStyle(
		                    zrUtil.extend(
		                        itemModel.getModel('lineStyle.normal').getLineStyle(),
		                        {
		                            stroke: color
		                        }
		                    )
		                );
		                polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();

		                var areaStyleModel = itemModel.getModel('areaStyle.normal');
		                var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');
		                var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();
		                var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();

		                hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;
		                polygon.ignore = polygonIgnore;

		                polygon.setStyle(
		                    zrUtil.defaults(
		                        areaStyleModel.getAreaStyle(),
		                        {
		                            fill: color,
		                            opacity: 0.7
		                        }
		                    )
		                );
		                polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();

		                var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
		                var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
		                var labelModel = itemModel.getModel('label.normal');
		                var labelHoverModel = itemModel.getModel('label.emphasis');
		                symbolGroup.eachChild(function (symbolPath) {
		                    symbolPath.setStyle(itemStyle);
		                    symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);

		                    var defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);
		                    graphic.setText(symbolPath.style, labelModel, color);
		                    symbolPath.setStyle({
		                        text: labelModel.get('show') ? zrUtil.retrieve(
		                            seriesModel.getFormattedLabel(
		                                idx, 'normal', null, symbolPath.__dimIdx
		                            ),
		                            defaultText
		                        ) : ''
		                    });

		                    graphic.setText(symbolPath.hoverStyle, labelHoverModel, color);
		                    symbolPath.hoverStyle.text = labelHoverModel.get('show') ? zrUtil.retrieve(
		                        seriesModel.getFormattedLabel(
		                            idx, 'emphasis', null, symbolPath.__dimIdx
		                        ),
		                        defaultText
		                    ) : '';
		                });

		                function onEmphasis() {
		                    polygon.attr('ignore', hoverPolygonIgnore);
		                }

		                function onNormal() {
		                    polygon.attr('ignore', polygonIgnore);
		                }

		                itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');
		                itemGroup.on('emphasis', onEmphasis)
		                    .on('mouseover', onEmphasis)
		                    .on('normal', onNormal)
		                    .on('mouseout', onNormal);

		                graphic.setHoverStyle(itemGroup);
		            });

		            this._data = data;
		        },

		        remove: function () {
		            this.group.removeAll();
		            this._data = null;
		        }
		    });


	/***/ },
	/* 153 */
	/***/ function(module, exports) {

		

		    module.exports = function (ecModel, api) {
		        ecModel.eachSeriesByType('radar', function (seriesModel) {
		            var data = seriesModel.getData();
		            var points = [];
		            var coordSys = seriesModel.coordinateSystem;
		            if (!coordSys) {
		                return;
		            }

		            function pointsConverter(val, idx) {
		                points[idx] = points[idx] || [];
		                points[idx][i] = coordSys.dataToPoint(val, i);
		            }
		            for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {
		                var dim = data.dimensions[i];
		                data.each(dim, pointsConverter);
		            }

		            data.each(function (idx) {
		                // Close polygon
		                points[idx][0] && points[idx].push(points[idx][0].slice());
		                data.setItemLayout(idx, points[idx]);
		            });
		        });
		    };


	/***/ },
	/* 154 */
	/***/ function(module, exports, __webpack_require__) {

		// Backward compat for radar chart in 2


		    var zrUtil = __webpack_require__(3);

		    module.exports = function (option) {
		        var polarOptArr = option.polar;
		        if (polarOptArr) {
		            if (!zrUtil.isArray(polarOptArr)) {
		                polarOptArr = [polarOptArr];
		            }
		            var polarNotRadar = [];
		            zrUtil.each(polarOptArr, function (polarOpt, idx) {
		                if (polarOpt.indicator) {
		                    if (polarOpt.type && !polarOpt.shape) {
		                        polarOpt.shape = polarOpt.type;
		                    }
		                    option.radar = option.radar || [];
		                    if (!zrUtil.isArray(option.radar)) {
		                        option.radar = [option.radar];
		                    }
		                    option.radar.push(polarOpt);
		                }
		                else {
		                    polarNotRadar.push(polarOpt);
		                }
		            });
		            option.polar = polarNotRadar;
		        }
		        zrUtil.each(option.series, function (seriesOpt) {
		            if (seriesOpt.type === 'radar' && seriesOpt.polarIndex) {
		                seriesOpt.radarIndex = seriesOpt.polarIndex;
		            }
		        });
		    };


	/***/ },
	/* 155 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);

		    __webpack_require__(156);

		    __webpack_require__(157);

		    __webpack_require__(161);

		    __webpack_require__(163);

		    echarts.registerLayout(__webpack_require__(173));

		    echarts.registerVisualCoding('chart', __webpack_require__(174));

		    echarts.registerProcessor('statistic', __webpack_require__(175));

		    echarts.registerPreprocessor(__webpack_require__(176));

		    __webpack_require__(136)('map', [{
		        type: 'mapToggleSelect',
		        event: 'mapselectchanged',
		        method: 'toggleSelected'
		    }, {
		        type: 'mapSelect',
		        event: 'mapselected',
		        method: 'select'
		    }, {
		        type: 'mapUnSelect',
		        event: 'mapunselected',
		        method: 'unSelect'
		    }]);


	/***/ },
	/* 156 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var List = __webpack_require__(94);
		    var echarts = __webpack_require__(1);
		    var SeriesModel = __webpack_require__(27);
		    var zrUtil = __webpack_require__(3);
		    var completeDimensions = __webpack_require__(96);

		    var formatUtil = __webpack_require__(6);
		    var encodeHTML = formatUtil.encodeHTML;
		    var addCommas = formatUtil.addCommas;

		    var dataSelectableMixin = __webpack_require__(134);

		    function fillData(dataOpt, geoJson) {
		        var dataNameMap = {};
		        var features = geoJson.features;
		        for (var i = 0; i < dataOpt.length; i++) {
		            dataNameMap[dataOpt[i].name] = dataOpt[i];
		        }

		        for (var i = 0; i < features.length; i++) {
		            var name = features[i].properties.name;
		            if (!dataNameMap[name]) {
		                dataOpt.push({
		                    value: NaN,
		                    name: name
		                });
		            }
		        }
		        return dataOpt;
		    }

		    var MapSeries = SeriesModel.extend({

		        type: 'series.map',

		        /**
		         * Only first map series of same mapType will drawMap
		         * @type {boolean}
		         */
		        needsDrawMap: false,

		        /**
		         * Group of all map series with same mapType
		         * @type {boolean}
		         */
		        seriesGroup: [],

		        init: function (option) {

		            option = this._fillOption(option);
		            this.option = option;

		            MapSeries.superApply(this, 'init', arguments);

		            this.updateSelectedMap();
		        },

		        getInitialData: function (option) {
		            var dimensions = completeDimensions(['value'], option.data || []);

		            var list = new List(dimensions, this);

		            list.initData(option.data);

		            return list;
		        },

		        mergeOption: function (newOption) {
		            newOption = this._fillOption(newOption);

		            MapSeries.superCall(this, 'mergeOption', newOption);

		            this.updateSelectedMap();
		        },

		        _fillOption: function (option) {
		            // Shallow clone
		            option = zrUtil.extend({}, option);

		            var map = echarts.getMap(option.mapType);
		            var geoJson = map && map.geoJson;
		            geoJson && option.data
		                && (option.data = fillData(option.data, geoJson));

		            return option;
		        },

		        /**
		         * @param {number} zoom
		         */
		        setRoamZoom: function (zoom) {
		            var roamDetail = this.option.roamDetail;
		            roamDetail && (roamDetail.zoom = zoom);
		        },

		        /**
		         * @param {number} x
		         * @param {number} y
		         */
		        setRoamPan: function (x, y) {
		            var roamDetail = this.option.roamDetail;
		            if (roamDetail) {
		                roamDetail.x = x;
		                roamDetail.y = y;
		            }
		        },

		        getRawValue: function (dataIndex) {
		            // Use value stored in data instead because it is calculated from multiple series
		            // FIXME Provide all value of multiple series ?
		            return this._data.get('value', dataIndex);
		        },

		        /**
		         * Map tooltip formatter
		         *
		         * @param {number} dataIndex
		         */
		        formatTooltip: function (dataIndex) {
		            var data = this._data;
		            var formattedValue = addCommas(this.getRawValue(dataIndex));
		            var name = data.getName(dataIndex);

		            var seriesGroup = this.seriesGroup;
		            var seriesNames = [];
		            for (var i = 0; i < seriesGroup.length; i++) {
		                if (!isNaN(seriesGroup[i].getRawValue(dataIndex))) {
		                    seriesNames.push(
		                        encodeHTML(seriesGroup[i].name)
		                    );
		                }
		            }

		            return seriesNames.join(', ') + '<br />'
		                + name + ' : ' + formattedValue;
		        },

		        defaultOption: {
		            // 一级层叠
		            zlevel: 0,
		            // 二级层叠
		            z: 2,
		            coordinateSystem: 'geo',
		            // 各省的 map 暂时都用中文
		            map: 'china',

		            // 'center' | 'left' | 'right' | 'x%' | {number}
		            left: 'center',
		            // 'center' | 'top' | 'bottom' | 'x%' | {number}
		            top: 'center',
		            // right
		            // bottom
		            // width:
		            // height   // 自适应

		            // 数值合并方式，默认加和，可选为：
		            // 'sum' | 'average' | 'max' | 'min'
		            // mapValueCalculation: 'sum',
		            // 地图数值计算结果小数精度
		            // mapValuePrecision: 0,
		            // 显示图例颜色标识（系列标识的小圆点），图例开启时有效
		            showLegendSymbol: true,
		            // 选择模式，默认关闭，可选single，multiple
		            // selectedMode: false,
		            dataRangeHoverLink: true,
		            // 是否开启缩放及漫游模式
		            // roam: false,

		            // 在 roam 开启的时候使用
		            roamDetail: {
		                x: 0,
		                y: 0,
		                zoom: 1
		            },

		            scaleLimit: null,

		            label: {
		                normal: {
		                    show: false,
		                    textStyle: {
		                        color: '#000'
		                    }
		                },
		                emphasis: {
		                    show: false,
		                    textStyle: {
		                        color: '#000'
		                    }
		                }
		            },
		            // scaleLimit: null,
		            itemStyle: {
		                normal: {
		                    // color: 各异,
		                    borderWidth: 0.5,
		                    borderColor: '#444',
		                    areaColor: '#eee'
		                },
		                // 也是选中样式
		                emphasis: {
		                    areaColor: 'rgba(255,215, 0, 0.8)'
		                }
		            }
		        }
		    });

		    zrUtil.mixin(MapSeries, dataSelectableMixin);

		    module.exports = MapSeries;


	/***/ },
	/* 157 */
	/***/ function(module, exports, __webpack_require__) {

		

		    // var zrUtil = require('zrender/lib/core/util');
		    var graphic = __webpack_require__(42);

		    var MapDraw = __webpack_require__(158);

		    __webpack_require__(1).extendChartView({

		        type: 'map',

		        render: function (mapModel, ecModel, api, payload) {
		            // Not render if it is an toggleSelect action from self
		            if (payload && payload.type === 'mapToggleSelect'
		                && payload.from === this.uid
		            ) {
		                return;
		            }

		            var group = this.group;
		            group.removeAll();
		            // Not update map if it is an roam action from self
		            if (!(payload && payload.type === 'geoRoam'
		                && payload.component === 'series'
		                && payload.name === mapModel.name)) {

		                if (mapModel.needsDrawMap) {
		                    var mapDraw = this._mapDraw || new MapDraw(api, true);
		                    group.add(mapDraw.group);

		                    mapDraw.draw(mapModel, ecModel, api, this);

		                    this._mapDraw = mapDraw;
		                }
		                else {
		                    // Remove drawed map
		                    this._mapDraw && this._mapDraw.remove();
		                    this._mapDraw = null;
		                }
		            }
		            else {
		                var mapDraw = this._mapDraw;
		                mapDraw && group.add(mapDraw.group);
		            }

		            mapModel.get('showLegendSymbol') && ecModel.getComponent('legend')
		                && this._renderSymbols(mapModel, ecModel, api);
		        },

		        remove: function () {
		            this._mapDraw && this._mapDraw.remove();
		            this._mapDraw = null;
		            this.group.removeAll();
		        },

		        _renderSymbols: function (mapModel, ecModel, api) {
		            var data = mapModel.getData();
		            var group = this.group;

		            data.each('value', function (value, idx) {
		                if (isNaN(value)) {
		                    return;
		                }

		                var layout = data.getItemLayout(idx);

		                if (!layout || !layout.point) {
		                    // Not exists in map
		                    return;
		                }

		                var point = layout.point;
		                var offset = layout.offset;

		                var circle = new graphic.Circle({
		                    style: {
		                        fill: data.getVisual('color')
		                    },
		                    shape: {
		                        cx: point[0] + offset * 9,
		                        cy: point[1],
		                        r: 3
		                    },
		                    silent: true,
		                    z2: 10
		                });

		                // First data on the same region
		                if (!offset) {
		                    var labelText = data.getName(idx);

		                    var itemModel = data.getItemModel(idx);
		                    var labelModel = itemModel.getModel('label.normal');
		                    var hoverLabelModel = itemModel.getModel('label.emphasis');

		                    var textStyleModel = labelModel.getModel('textStyle');
		                    var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');

		                    var polygonGroups = data.getItemGraphicEl(idx);
		                    circle.setStyle({
		                        textPosition: 'bottom'
		                    });

		                    var onEmphasis = function () {
		                        circle.setStyle({
		                            text: hoverLabelModel.get('show') ? labelText : '',
		                            textFill: hoverTextStyleModel.getTextColor(),
		                            textFont: hoverTextStyleModel.getFont()
		                        });
		                    };

		                    var onNormal = function () {
		                        circle.setStyle({
		                            text: labelModel.get('show') ? labelText : '',
		                            textFill: textStyleModel.getTextColor(),
		                            textFont: textStyleModel.getFont()
		                        });
		                    };

		                    polygonGroups.on('mouseover', onEmphasis)
		                        .on('mouseout', onNormal)
		                        .on('emphasis', onEmphasis)
		                        .on('normal', onNormal);

		                    onNormal();
		                }

		                group.add(circle);
		            });
		        }
		    });


	/***/ },
	/* 158 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/component/helper/MapDraw
		 */


		    var RoamController = __webpack_require__(159);
		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);

		    function getFixedItemStyle(model, scale) {
		        var itemStyle = model.getItemStyle();
		        var areaColor = model.get('areaColor');
		        if (areaColor) {
		            itemStyle.fill = areaColor;
		        }

		        return itemStyle;
		    }

		    function updateMapSelectHandler(mapOrGeoModel, data, group, api, fromView) {
		        group.off('click');
		        mapOrGeoModel.get('selectedMode')
		            && group.on('click', function (e) {
		                var dataIndex = e.target.dataIndex;
		                if (dataIndex != null) {
		                    var name = data.getName(dataIndex);

		                    api.dispatchAction({
		                        type: 'mapToggleSelect',
		                        seriesIndex: mapOrGeoModel.seriesIndex,
		                        name: name,
		                        from: fromView.uid
		                    });

		                    updateMapSelected(mapOrGeoModel, data, api);
		                }
		            });
		    }

		    function updateMapSelected(mapOrGeoModel, data) {
		        data.eachItemGraphicEl(function (el, idx) {
		            var name = data.getName(idx);
		            el.trigger(mapOrGeoModel.isSelected(name) ? 'emphasis' : 'normal');
		        });
		    }

		    /**
		     * @alias module:echarts/component/helper/MapDraw
		     * @param {module:echarts/ExtensionAPI} api
		     * @param {boolean} updateGroup
		     */
		    function MapDraw(api, updateGroup) {

		        var group = new graphic.Group();

		        /**
		         * @type {module:echarts/component/helper/RoamController}
		         * @private
		         */
		        this._controller = new RoamController(
		            api.getZr(), updateGroup ? group : null, null
		        );

		        /**
		         * @type {module:zrender/container/Group}
		         * @readOnly
		         */
		        this.group = group;

		        /**
		         * @type {boolean}
		         * @private
		         */
		        this._updateGroup = updateGroup;
		    }

		    MapDraw.prototype = {

		        constructor: MapDraw,

		        draw: function (mapOrGeoModel, ecModel, api, fromView) {

		            // geoModel has no data
		            var data = mapOrGeoModel.getData && mapOrGeoModel.getData();

		            var geo = mapOrGeoModel.coordinateSystem;

		            var group = this.group;
		            group.removeAll();

		            var scale = geo.scale;
		            group.position = geo.position.slice();
		            group.scale = scale.slice();

		            var itemStyleModel;
		            var hoverItemStyleModel;
		            var itemStyle;
		            var hoverItemStyle;

		            var labelModel;
		            var hoverLabelModel;

		            var itemStyleAccessPath = ['itemStyle', 'normal'];
		            var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];
		            var labelAccessPath = ['label', 'normal'];
		            var hoverLabelAccessPath = ['label', 'emphasis'];
		            if (!data) {
		                itemStyleModel = mapOrGeoModel.getModel(itemStyleAccessPath);
		                hoverItemStyleModel = mapOrGeoModel.getModel(hoverItemStyleAccessPath);

		                itemStyle = getFixedItemStyle(itemStyleModel, scale);
		                hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);

		                labelModel = mapOrGeoModel.getModel(labelAccessPath);
		                hoverLabelModel = mapOrGeoModel.getModel(hoverLabelAccessPath);
		            }

		            zrUtil.each(geo.regions, function (region) {

		                var regionGroup = new graphic.Group();
		                var dataIdx;
		                // Use the itemStyle in data if has data
		                if (data) {
		                    // FIXME If dataIdx < 0
		                    dataIdx = data.indexOfName(region.name);
		                    var itemModel = data.getItemModel(dataIdx);

		                    // Only visual color of each item will be used. It can be encoded by dataRange
		                    // But visual color of series is used in symbol drawing
		                    //
		                    // Visual color for each series is for the symbol draw
		                    var visualColor = data.getItemVisual(dataIdx, 'color', true);

		                    itemStyleModel = itemModel.getModel(itemStyleAccessPath);
		                    hoverItemStyleModel = itemModel.getModel(hoverItemStyleAccessPath);

		                    itemStyle = getFixedItemStyle(itemStyleModel, scale);
		                    hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);

		                    labelModel = itemModel.getModel(labelAccessPath);
		                    hoverLabelModel = itemModel.getModel(hoverLabelAccessPath);

		                    if (visualColor) {
		                        itemStyle.fill = visualColor;
		                    }
		                }
		                var textStyleModel = labelModel.getModel('textStyle');
		                var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');

		                zrUtil.each(region.contours, function (contour) {

		                    var polygon = new graphic.Polygon({
		                        shape: {
		                            points: contour
		                        },
		                        style: {
		                            strokeNoScale: true
		                        },
		                        culling: true
		                    });

		                    polygon.setStyle(itemStyle);

		                    regionGroup.add(polygon);
		                });

		                // Label
		                var showLabel = labelModel.get('show');
		                var hoverShowLabel = hoverLabelModel.get('show');

		                var isDataNaN = data && isNaN(data.get('value', dataIdx));
		                var itemLayout = data && data.getItemLayout(dataIdx);
		                // In the following cases label will be drawn
		                // 1. In map series and data value is NaN
		                // 2. In geo component
		                // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout
		                if (
		                    (!data || isDataNaN && (showLabel || hoverShowLabel))
		                 || (itemLayout && itemLayout.showLabel)
		                 ) {
		                    var query = data ? dataIdx : region.name;
		                    var formattedStr = mapOrGeoModel.getFormattedLabel(query, 'normal');
		                    var hoverFormattedStr = mapOrGeoModel.getFormattedLabel(query, 'emphasis');
		                    var text = new graphic.Text({
		                        style: {
		                            text: showLabel ? (formattedStr || region.name) : '',
		                            fill: textStyleModel.getTextColor(),
		                            textFont: textStyleModel.getFont(),
		                            textAlign: 'center',
		                            textVerticalAlign: 'middle'
		                        },
		                        hoverStyle: {
		                            text: hoverShowLabel ? (hoverFormattedStr || region.name) : '',
		                            fill: hoverTextStyleModel.getTextColor(),
		                            textFont: hoverTextStyleModel.getFont()
		                        },
		                        position: region.center.slice(),
		                        scale: [1 / scale[0], 1 / scale[1]],
		                        z2: 10,
		                        silent: true
		                    });

		                    regionGroup.add(text);
		                }

		                // setItemGraphicEl, setHoverStyle after all polygons and labels
		                // are added to the rigionGroup
		                data && data.setItemGraphicEl(dataIdx, regionGroup);

		                graphic.setHoverStyle(regionGroup, hoverItemStyle);

		                group.add(regionGroup);
		            });

		            this._updateController(mapOrGeoModel, ecModel, api);

		            data && updateMapSelectHandler(mapOrGeoModel, data, group, api, fromView);

		            data && updateMapSelected(mapOrGeoModel, data);
		        },

		        remove: function () {
		            this.group.removeAll();
		            this._controller.dispose();
		        },

		        _updateController: function (mapOrGeoModel, ecModel, api) {
		            var geo = mapOrGeoModel.coordinateSystem;
		            var controller = this._controller;
		            controller.zoomLimit = mapOrGeoModel.get('scaleLimit');
		            // Update zoom from model
		            controller.zoom = mapOrGeoModel.get('roamDetail.zoom');
		            // roamType is will be set default true if it is null
		            controller.enable(mapOrGeoModel.get('roam') || false);
		            // FIXME mainType, subType 作为 component 的属性？
		            var mainType = mapOrGeoModel.type.split('.')[0];
		            controller.off('pan')
		                .on('pan', function (dx, dy) {
		                    api.dispatchAction({
		                        type: 'geoRoam',
		                        component: mainType,
		                        name: mapOrGeoModel.name,
		                        dx: dx,
		                        dy: dy
		                    });
		                });
		            controller.off('zoom')
		                .on('zoom', function (zoom, mouseX, mouseY) {
		                    api.dispatchAction({
		                        type: 'geoRoam',
		                        component: mainType,
		                        name: mapOrGeoModel.name,
		                        zoom: zoom,
		                        originX: mouseX,
		                        originY: mouseY
		                    });

		                    if (this._updateGroup) {
		                        var group = this.group;
		                        var scale = group.scale;
		                        group.traverse(function (el) {
		                            if (el.type === 'text') {
		                                el.attr('scale', [1 / scale[0], 1 / scale[1]]);
		                            }
		                        });
		                    }
		                }, this);

		            controller.rect = geo.getViewRect();
		        }
		    };

		    module.exports = MapDraw;


	/***/ },
	/* 159 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/component/helper/RoamController
		 */



		    var Eventful = __webpack_require__(32);
		    var zrUtil = __webpack_require__(3);
		    var eventTool = __webpack_require__(80);
		    var interactionMutex = __webpack_require__(160);

		    function mousedown(e) {
		        if (e.target && e.target.draggable) {
		            return;
		        }

		        var x = e.offsetX;
		        var y = e.offsetY;
		        var rect = this.rect;
		        if (rect && rect.contain(x, y)) {
		            this._x = x;
		            this._y = y;
		            this._dragging = true;
		        }
		    }

		    function mousemove(e) {
		        if (!this._dragging) {
		            return;
		        }

		        eventTool.stop(e.event);

		        if (e.gestureEvent !== 'pinch') {

		            if (interactionMutex.isTaken('globalPan', this._zr)) {
		                return;
		            }

		            var x = e.offsetX;
		            var y = e.offsetY;

		            var dx = x - this._x;
		            var dy = y - this._y;

		            this._x = x;
		            this._y = y;

		            var target = this.target;

		            if (target) {
		                var pos = target.position;
		                pos[0] += dx;
		                pos[1] += dy;
		                target.dirty();
		            }

		            eventTool.stop(e.event);
		            this.trigger('pan', dx, dy);
		        }
		    }

		    function mouseup(e) {
		        this._dragging = false;
		    }

		    function mousewheel(e) {
		        eventTool.stop(e.event);
		        // Convenience:
		        // Mac and VM Windows on Mac: scroll up: zoom out.
		        // Windows: scroll up: zoom in.
		        var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;
		        zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);
		    }

		    function pinch(e) {
		        if (interactionMutex.isTaken('globalPan', this._zr)) {
		            return;
		        }

		        eventTool.stop(e.event);
		        var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
		        zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);
		    }

		    function zoom(e, zoomDelta, zoomX, zoomY) {
		        var rect = this.rect;

		        if (rect && rect.contain(zoomX, zoomY)) {

		            var target = this.target;
		            var zoomLimit = this.zoomLimit;

		            if (target) {
		                var pos = target.position;
		                var scale = target.scale;

		                var newZoom = this.zoom = this.zoom || 1;
		                newZoom *= zoomDelta;
		                if (zoomLimit) {
		                    newZoom = Math.max(
		                        Math.min(zoomLimit.max, newZoom),
		                        zoomLimit.min
		                    );
		                }
		                var zoomScale = newZoom / this.zoom;
		                this.zoom = newZoom;
		                // Keep the mouse center when scaling
		                pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);
		                pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);
		                scale[0] *= zoomScale;
		                scale[1] *= zoomScale;

		                target.dirty();
		            }

		            this.trigger('zoom', zoomDelta, zoomX, zoomY);
		        }
		    }

		    /**
		     * @alias module:echarts/component/helper/RoamController
		     * @constructor
		     * @mixin {module:zrender/mixin/Eventful}
		     *
		     * @param {module:zrender/zrender~ZRender} zr
		     * @param {module:zrender/Element} target
		     * @param {module:zrender/core/BoundingRect} rect
		     */
		    function RoamController(zr, target, rect) {

		        /**
		         * @type {module:zrender/Element}
		         */
		        this.target = target;

		        /**
		         * @type {module:zrender/core/BoundingRect}
		         */
		        this.rect = rect;

		        /**
		         * { min: 1, max: 2 }
		         * @type {Object}
		         */
		        this.zoomLimit;

		        /**
		         * @type {number}
		         */
		        this.zoom;
		        /**
		         * @type {module:zrender}
		         */
		        this._zr = zr;

		        // Avoid two roamController bind the same handler
		        var bind = zrUtil.bind;
		        var mousedownHandler = bind(mousedown, this);
		        var mousemoveHandler = bind(mousemove, this);
		        var mouseupHandler = bind(mouseup, this);
		        var mousewheelHandler = bind(mousewheel, this);
		        var pinchHandler = bind(pinch, this);

		        Eventful.call(this);

		        /**
		         * Notice: only enable needed types. For example, if 'zoom'
		         * is not needed, 'zoom' should not be enabled, otherwise
		         * default mousewheel behaviour (scroll page) will be disabled.
		         *
		         * @param  {boolean|string} [controlType=true] Specify the control type,
		         *                          which can be null/undefined or true/false
		         *                          or 'pan/move' or 'zoom'/'scale'
		         */
		        this.enable = function (controlType) {
		            // Disable previous first
		            this.disable();

		            if (controlType == null) {
		                controlType = true;
		            }

		            if (controlType === true || (controlType === 'move' || controlType === 'pan')) {
		                zr.on('mousedown', mousedownHandler);
		                zr.on('mousemove', mousemoveHandler);
		                zr.on('mouseup', mouseupHandler);
		            }
		            if (controlType === true || (controlType === 'scale' || controlType === 'zoom')) {
		                zr.on('mousewheel', mousewheelHandler);
		                zr.on('pinch', pinchHandler);
		            }
		        };

		        this.disable = function () {
		            zr.off('mousedown', mousedownHandler);
		            zr.off('mousemove', mousemoveHandler);
		            zr.off('mouseup', mouseupHandler);
		            zr.off('mousewheel', mousewheelHandler);
		            zr.off('pinch', pinchHandler);
		        };

		        this.dispose = this.disable;

		        this.isDragging = function () {
		            return this._dragging;
		        };

		        this.isPinching = function () {
		            return this._pinching;
		        };
		    }

		    zrUtil.mixin(RoamController, Eventful);

		    module.exports = RoamController;


	/***/ },
	/* 160 */
	/***/ function(module, exports) {

		

		    var ATTR = '\0_ec_interaction_mutex';

		    var interactionMutex = {

		        take: function (key, zr) {
		            getStore(zr)[key] = true;
		        },

		        release: function (key, zr) {
		            getStore(zr)[key] = false;
		        },

		        isTaken: function (key, zr) {
		            return !!getStore(zr)[key];
		        }
		    };

		    function getStore(zr) {
		        return zr[ATTR] || (zr[ATTR] = {});
		    }

		    module.exports = interactionMutex;


	/***/ },
	/* 161 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var roamHelper = __webpack_require__(162);

		    var echarts = __webpack_require__(1);
		    var actionInfo = {
		        type: 'geoRoam',
		        event: 'geoRoam',
		        update: 'updateLayout'
		    };

		    /**
		     * @payload
		     * @property {string} [component=series]
		     * @property {string} name Component name
		     * @property {number} [dx]
		     * @property {number} [dy]
		     * @property {number} [zoom]
		     * @property {number} [originX]
		     * @property {number} [originY]
		     */
		    echarts.registerAction(actionInfo, function (payload, ecModel) {
		        var componentType = payload.component || 'series';

		        ecModel.eachComponent(componentType, function (componentModel) {
		            if (componentModel.name === payload.name) {
		                var geo = componentModel.coordinateSystem;
		                if (geo.type !== 'geo') {
		                    return;
		                }

		                var roamDetailModel = componentModel.getModel('roamDetail');
		                var res = roamHelper.calcPanAndZoom(
		                    roamDetailModel, payload, componentModel.get('scaleLimit')
		                );

		                componentModel.setRoamPan
		                    && componentModel.setRoamPan(res.x, res.y);

		                componentModel.setRoamZoom
		                    && componentModel.setRoamZoom(res.zoom);

		                geo && geo.setPan(res.x, res.y);
		                geo && geo.setZoom(res.zoom);

		                // All map series with same `map` use the same geo coordinate system
		                // So the roamDetail must be in sync. Include the series not selected by legend
		                if (componentType === 'series') {
		                    zrUtil.each(componentModel.seriesGroup, function (seriesModel) {
		                        seriesModel.setRoamPan(res.x, res.y);
		                        seriesModel.setRoamZoom(res.zoom);
		                    });
		                }
		            }
		        });
		    });


	/***/ },
	/* 162 */
	/***/ function(module, exports) {

		

		    var roamHelper = {};

		    /**
		     * Calculate pan and zoom which from roamDetail model
		     * @param {module:echarts/model/Model} roamDetailModel
		     * @param {Object} payload
		     * @param {Object} [zoomLimit]
		     */
		    roamHelper.calcPanAndZoom = function (
		        roamDetailModel, payload, zoomLimit
		    ) {
		        var dx = payload.dx;
		        var dy = payload.dy;
		        var zoom = payload.zoom;

		        var panX = roamDetailModel.get('x') || 0;
		        var panY = roamDetailModel.get('y') || 0;

		        var previousZoom = roamDetailModel.get('zoom') || 1;

		        if (dx != null && dy != null) {
		            panX += dx;
		            panY += dy;
		        }
		        if (zoom != null) {
		            if (zoomLimit) {
		                zoom = Math.max(
		                    Math.min(previousZoom * zoom, zoomLimit.max),
		                    zoomLimit.min
		                ) / previousZoom;
		            }
		            var fixX = (payload.originX - panX) * (zoom - 1);
		            var fixY = (payload.originY - panY) * (zoom - 1);

		            panX -= fixX;
		            panY -= fixY;
		        }

		        return {
		            x: panX,
		            y: panY,
		            zoom: (zoom || 1) * previousZoom
		        };
		    };

		    module.exports = roamHelper;


	/***/ },
	/* 163 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(164);

		    var Geo = __webpack_require__(165);

		    var layout = __webpack_require__(21);
		    var zrUtil = __webpack_require__(3);

		    var mapDataStores = {};

		    /**
		     * Resize method bound to the geo
		     * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel
		     * @param {module:echarts/ExtensionAPI} api
		     */
		    function resizeGeo (geoModel, api) {
		        var rect = this.getBoundingRect();

		        var boxLayoutOption = geoModel.getBoxLayoutParams();
		        // 0.75 rate
		        boxLayoutOption.aspect = rect.width / rect.height * 0.75;

		        var viewRect = layout.getLayoutRect(boxLayoutOption, {
		            width: api.getWidth(),
		            height: api.getHeight()
		        });

		        this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);

		        var roamDetailModel = geoModel.getModel('roamDetail');

		        var panX = roamDetailModel.get('x') || 0;
		        var panY = roamDetailModel.get('y') || 0;
		        var zoom = roamDetailModel.get('zoom') || 1;

		        this.setPan(panX, panY);
		        this.setZoom(zoom);
		    }

		    /**
		     * @param {module:echarts/coord/Geo} geo
		     * @param {module:echarts/model/Model} model
		     * @inner
		     */
		    function setGeoCoords(geo, model) {
		        zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {
		            geo.addGeoCoord(name, geoCoord);
		        });
		    }

		    function mapNotExistsError(name) {
		        console.error('Map ' + name + ' not exists');
		    }

		    var geoCreator = {

		        // For deciding which dimensions to use when creating list data
		        dimensions: Geo.prototype.dimensions,

		        create: function (ecModel, api) {
		            var geoList = [];

		            // FIXME Create each time may be slow
		            ecModel.eachComponent('geo', function (geoModel, idx) {
		                var name = geoModel.get('map');
		                var mapData = mapDataStores[name];
		                if (!mapData) {
		                    mapNotExistsError(name);
		                }
		                var geo = new Geo(
		                    name + idx, name,
		                    mapData && mapData.geoJson, mapData && mapData.specialAreas,
		                    geoModel.get('nameMap')
		                );
		                geo.zoomLimit = geoModel.get('scaleLimit');
		                geoList.push(geo);

		                setGeoCoords(geo, geoModel);

		                geoModel.coordinateSystem = geo;
		                geo.model = geoModel;

		                // Inject resize method
		                geo.resize = resizeGeo;

		                geo.resize(geoModel, api);
		            });

		            ecModel.eachSeries(function (seriesModel) {
		                var coordSys = seriesModel.get('coordinateSystem');
		                if (coordSys === 'geo') {
		                    var geoIndex = seriesModel.get('geoIndex') || 0;
		                    seriesModel.coordinateSystem = geoList[geoIndex];
		                }
		            });

		            // If has map series
		            var mapModelGroupBySeries = {};

		            ecModel.eachSeriesByType('map', function (seriesModel) {
		                var mapType = seriesModel.get('map');

		                mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];

		                mapModelGroupBySeries[mapType].push(seriesModel);
		            });

		            zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {
		                var mapData = mapDataStores[mapType];
		                if (!mapData) {
		                    mapNotExistsError(name);
		                }

		                var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {
		                    return singleMapSeries.get('nameMap');
		                });
		                var geo = new Geo(
		                    mapType, mapType,
		                    mapData && mapData.geoJson, mapData && mapData.specialAreas,
		                    zrUtil.mergeAll(nameMapList)
		                );
		                geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {
		                    return singleMapSeries.get('scaleLimit');
		                }));
		                geoList.push(geo);

		                // Inject resize method
		                geo.resize = resizeGeo;

		                geo.resize(mapSeries[0], api);

		                zrUtil.each(mapSeries, function (singleMapSeries) {
		                    singleMapSeries.coordinateSystem = geo;

		                    setGeoCoords(geo, singleMapSeries);
		                });
		            });

		            return geoList;
		        },

		        /**
		         * @param {string} mapName
		         * @param {Object|string} geoJson
		         * @param {Object} [specialAreas]
		         *
		         * @example
		         *     $.get('USA.json', function (geoJson) {
		         *         echarts.registerMap('USA', geoJson);
		         *         // Or
		         *         echarts.registerMap('USA', {
		         *             geoJson: geoJson,
		         *             specialAreas: {}
		         *         })
		         *     });
		         */
		        registerMap: function (mapName, geoJson, specialAreas) {
		            if (geoJson.geoJson && !geoJson.features) {
		                specialAreas = geoJson.specialAreas;
		                geoJson = geoJson.geoJson;
		            }
		            if (typeof geoJson === 'string') {
		                geoJson = (typeof JSON !== 'undefined' && JSON.parse)
		                    ? JSON.parse(geoJson) : (new Function('return (' + geoJson + ');'))();
		            }
		            mapDataStores[mapName] = {
		                geoJson: geoJson,
		                specialAreas: specialAreas
		            };
		        },

		        /**
		         * @param {string} mapName
		         * @return {Object}
		         */
		        getMap: function (mapName) {
		            return mapDataStores[mapName];
		        }
		    };

		    // Inject methods into echarts
		    var echarts = __webpack_require__(1);

		    echarts.registerMap = geoCreator.registerMap;

		    echarts.getMap = geoCreator.getMap;

		    // TODO
		    echarts.loadMap = function () {};

		    echarts.registerCoordinateSystem('geo', geoCreator);


	/***/ },
	/* 164 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		    var modelUtil = __webpack_require__(5);
		    var ComponentModel = __webpack_require__(19);

		    ComponentModel.extend({

		        type: 'geo',

		        /**
		         * @type {module:echarts/coord/geo/Geo}
		         */
		        coordinateSystem: null,

		        init: function (option) {
		            ComponentModel.prototype.init.apply(this, arguments);

		            // Default label emphasis `position` and `show`
		            modelUtil.defaultEmphasis(
		                option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']
		            );
		        },

		        defaultOption: {

		            zlevel: 0,

		            z: 0,

		            show: true,

		            left: 'center',

		            top: 'center',

		            // 自适应
		            // width:,
		            // height:,
		            // right
		            // bottom

		            // Map type
		            map: '',

		            // 在 roam 开启的时候使用
		            roamDetail: {
		                x: 0,
		                y: 0,
		                zoom: 1
		            },

		            scaleLimit: null,

		            label: {
		                normal: {
		                    show: false,
		                    textStyle: {
		                        color: '#000'
		                    }
		                },
		                emphasis: {
		                    show: true,
		                    textStyle: {
		                        color: 'rgb(100,0,0)'
		                    }
		                }
		            },

		            itemStyle: {
		                normal: {
		                    // color: 各异,
		                    borderWidth: 0.5,
		                    borderColor: '#444',
		                    color: '#eee'
		                },
		                emphasis: {                 // 也是选中样式
		                    color: 'rgba(255,215,0,0.8)'
		                }
		            }
		        },

		        /**
		         * Format label
		         * @param {string} name Region name
		         * @param {string} [status='normal'] 'normal' or 'emphasis'
		         * @return {string}
		         */
		        getFormattedLabel: function (name, status) {
		            var formatter = this.get('label.' + status + '.formatter');
		            var params = {
		                name: name
		            };
		            if (typeof formatter === 'function') {
		                params.status = status;
		                return formatter(params);
		            }
		            else if (typeof formatter === 'string') {
		                return formatter.replace('{a}', params.seriesName);
		            }
		        },

		        setRoamZoom: function (zoom) {
		            var roamDetail = this.option.roamDetail;
		            roamDetail && (roamDetail.zoom = zoom);
		        },

		        setRoamPan: function (x, y) {
		            var roamDetail = this.option.roamDetail;
		            if (roamDetail) {
		                roamDetail.x = x;
		                roamDetail.y = y;
		            }
		        }
		    });


	/***/ },
	/* 165 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var parseGeoJson = __webpack_require__(166);

		    var zrUtil = __webpack_require__(3);

		    var BoundingRect = __webpack_require__(15);

		    var View = __webpack_require__(169);


		    // Geo fix functions
		    var geoFixFuncs = [
		        __webpack_require__(170),
		        __webpack_require__(171),
		        __webpack_require__(172)
		    ];

		    /**
		     * [Geo description]
		     * @param {string} name Geo name
		     * @param {string} map Map type
		     * @param {Object} geoJson
		     * @param {Object} [specialAreas]
		     *        Specify the positioned areas by left, top, width, height
		     * @param {Object.<string, string>} [nameMap]
		     *        Specify name alias
		     */
		    function Geo(name, map, geoJson, specialAreas, nameMap) {

		        View.call(this, name);

		        /**
		         * Map type
		         * @type {string}
		         */
		        this.map = map;

		        this._nameCoordMap = {};

		        this.loadGeoJson(geoJson, specialAreas, nameMap);
		    }

		    Geo.prototype = {

		        constructor: Geo,

		        type: 'geo',

		        /**
		         * @param {Array.<string>}
		         * @readOnly
		         */
		        dimensions: ['lng', 'lat'],

		        /**
		         * @param {Object} geoJson
		         * @param {Object} [specialAreas]
		         *        Specify the positioned areas by left, top, width, height
		         * @param {Object.<string, string>} [nameMap]
		         *        Specify name alias
		         */
		        loadGeoJson: function (geoJson, specialAreas, nameMap) {
		            // https://jsperf.com/try-catch-performance-overhead
		            try {
		                this.regions = geoJson ? parseGeoJson(geoJson) : [];
		            }
		            catch (e) {
		                throw 'Invalid geoJson format\n' + e;
		            }
		            specialAreas = specialAreas || {};
		            nameMap = nameMap || {};
		            var regions = this.regions;
		            var regionsMap = {};
		            for (var i = 0; i < regions.length; i++) {
		                var regionName = regions[i].name;
		                // Try use the alias in nameMap
		                regionName = nameMap[regionName] || regionName;
		                regions[i].name = regionName;

		                regionsMap[regionName] = regions[i];
		                // Add geoJson
		                this.addGeoCoord(regionName, regions[i].center);

		                // Some area like Alaska in USA map needs to be tansformed
		                // to look better
		                var specialArea = specialAreas[regionName];
		                if (specialArea) {
		                    regions[i].transformTo(
		                        specialArea.left, specialArea.top, specialArea.width, specialArea.height
		                    );
		                }
		            }

		            this._regionsMap = regionsMap;

		            this._rect = null;

		            zrUtil.each(geoFixFuncs, function (fixFunc) {
		                fixFunc(this);
		            }, this);
		        },

		        // Overwrite
		        transformTo: function (x, y, width, height) {
		            var rect = this.getBoundingRect();

		            rect = rect.clone();
		            // Longitute is inverted
		            rect.y = -rect.y - rect.height;

		            var viewTransform = this._viewTransform;

		            viewTransform.transform = rect.calculateTransform(
		                new BoundingRect(x, y, width, height)
		            );

		            viewTransform.decomposeTransform();

		            var scale = viewTransform.scale;
		            scale[1] = -scale[1];

		            viewTransform.updateTransform();

		            this._updateTransform();
		        },

		        /**
		         * @param {string} name
		         * @return {module:echarts/coord/geo/Region}
		         */
		        getRegion: function (name) {
		            return this._regionsMap[name];
		        },

		        /**
		         * Add geoCoord for indexing by name
		         * @param {string} name
		         * @param {Array.<number>} geoCoord
		         */
		        addGeoCoord: function (name, geoCoord) {
		            this._nameCoordMap[name] = geoCoord;
		        },

		        /**
		         * Get geoCoord by name
		         * @param {string} name
		         * @return {Array.<number>}
		         */
		        getGeoCoord: function (name) {
		            return this._nameCoordMap[name];
		        },

		        // Overwrite
		        getBoundingRect: function () {
		            if (this._rect) {
		                return this._rect;
		            }
		            var rect;

		            var regions = this.regions;
		            for (var i = 0; i < regions.length; i++) {
		                var regionRect = regions[i].getBoundingRect();
		                rect = rect || regionRect.clone();
		                rect.union(regionRect);
		            }
		            // FIXME Always return new ?
		            return (this._rect = rect || new BoundingRect(0, 0, 0, 0));
		        },

		        /**
		         * Convert series data to a list of points
		         * @param {module:echarts/data/List} data
		         * @param {boolean} stack
		         * @return {Array}
		         *  Return list of points. For example:
		         *  `[[10, 10], [20, 20], [30, 30]]`
		         */
		        dataToPoints: function (data) {
		            var item = [];
		            return data.mapArray(['lng', 'lat'], function (lon, lat) {
		                item[0] = lon;
		                item[1] = lat;
		                return this.dataToPoint(item);
		            }, this);
		        },

		        // Overwrite
		        /**
		         * @param {string|Array.<number>} data
		         * @return {Array.<number>}
		         */
		        dataToPoint: function (data) {
		            if (typeof data === 'string') {
		                // Map area name to geoCoord
		                data = this.getGeoCoord(data);
		            }
		            if (data) {
		                return View.prototype.dataToPoint.call(this, data);
		            }
		        }
		    };

		    zrUtil.mixin(Geo, View);

		    module.exports = Geo;


	/***/ },
	/* 166 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Parse and decode geo json
		 * @module echarts/coord/geo/parseGeoJson
		 */


		    var zrUtil = __webpack_require__(3);

		    var Region = __webpack_require__(167);

		    function decode(json) {
		        if (!json.UTF8Encoding) {
		            return json;
		        }
		        var features = json.features;

		        for (var f = 0; f < features.length; f++) {
		            var feature = features[f];
		            var geometry = feature.geometry;
		            var coordinates = geometry.coordinates;
		            var encodeOffsets = geometry.encodeOffsets;

		            for (var c = 0; c < coordinates.length; c++) {
		                var coordinate = coordinates[c];

		                if (geometry.type === 'Polygon') {
		                    coordinates[c] = decodePolygon(
		                        coordinate,
		                        encodeOffsets[c]
		                    );
		                }
		                else if (geometry.type === 'MultiPolygon') {
		                    for (var c2 = 0; c2 < coordinate.length; c2++) {
		                        var polygon = coordinate[c2];
		                        coordinate[c2] = decodePolygon(
		                            polygon,
		                            encodeOffsets[c][c2]
		                        );
		                    }
		                }
		            }
		        }
		        // Has been decoded
		        json.UTF8Encoding = false;
		        return json;
		    }

		    function decodePolygon(coordinate, encodeOffsets) {
		        var result = [];
		        var prevX = encodeOffsets[0];
		        var prevY = encodeOffsets[1];

		        for (var i = 0; i < coordinate.length; i += 2) {
		            var x = coordinate.charCodeAt(i) - 64;
		            var y = coordinate.charCodeAt(i + 1) - 64;
		            // ZigZag decoding
		            x = (x >> 1) ^ (-(x & 1));
		            y = (y >> 1) ^ (-(y & 1));
		            // Delta deocding
		            x += prevX;
		            y += prevY;

		            prevX = x;
		            prevY = y;
		            // Dequantize
		            result.push([x / 1024, y / 1024]);
		        }

		        return result;
		    }

		    /**
		     * @inner
		     */
		    function flattern2D(array) {
		        var ret = [];
		        for (var i = 0; i < array.length; i++) {
		            for (var k = 0; k < array[i].length; k++) {
		                ret.push(array[i][k]);
		            }
		        }
		        return ret;
		    }

		    /**
		     * @alias module:echarts/coord/geo/parseGeoJson
		     * @param {Object} geoJson
		     * @return {module:zrender/container/Group}
		     */
		    module.exports = function (geoJson) {

		        decode(geoJson);

		        return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
		            // Output of mapshaper may have geometry null
		            return featureObj.geometry && featureObj.properties;
		        }), function (featureObj) {
		            var properties = featureObj.properties;
		            var geometry = featureObj.geometry;

		            var coordinates = geometry.coordinates;

		            if (geometry.type === 'MultiPolygon') {
		                coordinates = flattern2D(coordinates);
		            }

		            return new Region(
		                properties.name,
		                coordinates,
		                properties.cp
		            );
		        });
		    };


	/***/ },
	/* 167 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/coord/geo/Region
		 */


		    var polygonContain = __webpack_require__(168);

		    var BoundingRect = __webpack_require__(15);

		    var bbox = __webpack_require__(50);
		    var vec2 = __webpack_require__(16);

		    /**
		     * @param {string} name
		     * @param {Array} contours
		     * @param {Array.<number>} cp
		     */
		    function Region(name, contours, cp) {

		        /**
		         * @type {string}
		         * @readOnly
		         */
		        this.name = name;

		        /**
		         * @type {Array.<Array>}
		         * @readOnly
		         */
		        this.contours = contours;

		        if (!cp) {
		            var rect = this.getBoundingRect();
		            cp = [
		                rect.x + rect.width / 2,
		                rect.y + rect.height / 2
		            ];
		        }
		        else {
		            cp = [cp[0], cp[1]];
		        }
		        /**
		         * @type {Array.<number>}
		         */
		        this.center = cp;
		    }

		    Region.prototype = {

		        constructor: Region,

		        /**
		         * @return {module:zrender/core/BoundingRect}
		         */
		        getBoundingRect: function () {
		            var rect = this._rect;
		            if (rect) {
		                return rect;
		            }

		            var MAX_NUMBER = Number.MAX_VALUE;
		            var min = [MAX_NUMBER, MAX_NUMBER];
		            var max = [-MAX_NUMBER, -MAX_NUMBER];
		            var min2 = [];
		            var max2 = [];
		            var contours = this.contours;
		            for (var i = 0; i < contours.length; i++) {
		                bbox.fromPoints(contours[i], min2, max2);
		                vec2.min(min, min, min2);
		                vec2.max(max, max, max2);
		            }
		            // No data
		            if (i === 0) {
		                min[0] = min[1] = max[0] = max[1] = 0;
		            }

		            return (this._rect = new BoundingRect(
		                min[0], min[1], max[0] - min[0], max[1] - min[1]
		            ));
		        },

		        /**
		         * @param {<Array.<number>} coord
		         * @return {boolean}
		         */
		        contain: function (coord) {
		            var rect = this.getBoundingRect();
		            var contours = this.contours;
		            if (rect.contain(coord[0], coord[1])) {
		                for (var i = 0, len = contours.length; i < len; i++) {
		                    if (polygonContain.contain(contours[i], coord[0], coord[1])) {
		                        return true;
		                    }
		                }
		            }
		            return false;
		        },

		        transformTo: function (x, y, width, height) {
		            var rect = this.getBoundingRect();
		            var aspect = rect.width / rect.height;
		            if (!width) {
		                width = aspect * height;
		            }
		            else if (!height) {
		                height = width / aspect ;
		            }
		            var target = new BoundingRect(x, y, width, height);
		            var transform = rect.calculateTransform(target);
		            var contours = this.contours;
		            for (var i = 0; i < contours.length; i++) {
		                for (var p = 0; p < contours[i].length; p++) {
		                    vec2.applyTransform(contours[i][p], contours[i][p], transform);
		                }
		            }
		            rect = this._rect;
		            rect.copy(target);
		            // Update center
		            this.center = [
		                rect.x + rect.width / 2,
		                rect.y + rect.height / 2
		            ];
		        }
		    };

		    module.exports = Region;


	/***/ },
	/* 168 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var windingLine = __webpack_require__(57);

		    var EPSILON = 1e-8;

		    function isAroundEqual(a, b) {
		        return Math.abs(a - b) < EPSILON;
		    }

		    function contain(points, x, y) {
		        var w = 0;
		        var p = points[0];

		        if (!p) {
		            return false;
		        }

		        for (var i = 1; i < points.length; i++) {
		            var p2 = points[i];
		            w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
		            p = p2;
		        }

		        // Close polygon
		        var p0 = points[0];
		        if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
		            w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
		        }

		        return w !== 0;
		    }


		    module.exports = {
		        contain: contain
		    };


	/***/ },
	/* 169 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Simple view coordinate system
		 * Mapping given x, y to transformd view x, y
		 */


		    var vector = __webpack_require__(16);
		    var matrix = __webpack_require__(17);

		    var Transformable = __webpack_require__(33);
		    var zrUtil = __webpack_require__(3);

		    var BoundingRect = __webpack_require__(15);

		    var v2ApplyTransform = vector.applyTransform;

		    // Dummy transform node
		    function TransformDummy() {
		        Transformable.call(this);
		    }
		    zrUtil.mixin(TransformDummy, Transformable);

		    function View(name) {
		        /**
		         * @type {string}
		         */
		        this.name = name;

		        /**
		         * @type {Array.<number>}
		         */
		        this.zoomLimit;

		        Transformable.call(this);

		        this._roamTransform = new TransformDummy();

		        this._viewTransform = new TransformDummy();
		    }

		    View.prototype = {

		        constructor: View,

		        type: 'view',

		        /**
		         * @param {Array.<string>}
		         * @readOnly
		         */
		        dimensions: ['x', 'y'],

		        /**
		         * Set bounding rect
		         * @param {number} x
		         * @param {number} y
		         * @param {number} width
		         * @param {number} height
		         */

		        // PENDING to getRect
		        setBoundingRect: function (x, y, width, height) {
		            this._rect = new BoundingRect(x, y, width, height);
		            return this._rect;
		        },

		        /**
		         * @return {module:zrender/core/BoundingRect}
		         */
		        // PENDING to getRect
		        getBoundingRect: function () {
		            return this._rect;
		        },

		        /**
		         * @param {number} x
		         * @param {number} y
		         * @param {number} width
		         * @param {number} height
		         */
		        setViewRect: function (x, y, width, height) {
		            this.transformTo(x, y, width, height);
		            this._viewRect = new BoundingRect(x, y, width, height);
		        },

		        /**
		         * Transformed to particular position and size
		         * @param {number} x
		         * @param {number} y
		         * @param {number} width
		         * @param {number} height
		         */
		        transformTo: function (x, y, width, height) {
		            var rect = this.getBoundingRect();
		            var viewTransform = this._viewTransform;

		            viewTransform.transform = rect.calculateTransform(
		                new BoundingRect(x, y, width, height)
		            );

		            viewTransform.decomposeTransform();

		            this._updateTransform();
		        },

		        /**
		         * @param {number} x
		         * @param {number} y
		         */
		        setPan: function (x, y) {

		            this._roamTransform.position = [x, y];

		            this._updateTransform();
		        },

		        /**
		         * @param {number} zoom
		         */
		        setZoom: function (zoom) {
		            var zoomLimit = this.zoomLimit;
		            if (zoomLimit) {
		                zoom = Math.max(
		                    Math.min(zoom, zoomLimit.max), zoomLimit.min
		                );
		            }

		            this._roamTransform.scale = [zoom, zoom];

		            this._updateTransform();
		        },

		        /**
		         * @return {Array.<number}
		         */
		        getRoamTransform: function () {
		            return this._roamTransform.transform;
		        },

		        /**
		         * Update transform from roam and mapLocation
		         * @private
		         */
		        _updateTransform: function () {
		            var roamTransform = this._roamTransform;
		            var viewTransform = this._viewTransform;
		            // var scale = this.scale;

		            viewTransform.parent = roamTransform;
		            roamTransform.updateTransform();
		            viewTransform.updateTransform();

		            viewTransform.transform
		                && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);

		            this.decomposeTransform();
		        },

		        /**
		         * @return {module:zrender/core/BoundingRect}
		         */
		        getViewRect: function () {
		            return this._viewRect;
		        },

		        /**
		         * Convert a single (lon, lat) data item to (x, y) point.
		         * @param {Array.<number>} data
		         * @return {Array.<number>}
		         */
		        dataToPoint: function (data) {
		            var transform = this.transform;
		            return transform
		                ? v2ApplyTransform([], data, transform)
		                : [data[0], data[1]];
		        },

		        /**
		         * Convert a (x, y) point to (lon, lat) data
		         * @param {Array.<number>} point
		         * @return {Array.<number>}
		         */
		        pointToData: function (point) {
		            var invTransform = this.invTransform;
		            return invTransform
		                ? v2ApplyTransform([], point, invTransform)
		                : [point[0], point[1]];
		        }

		        /**
		         * @return {number}
		         */
		        // getScalarScale: function () {
		        //     // Use determinant square root of transform to mutiply scalar
		        //     var m = this.transform;
		        //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));
		        //     return det;
		        // }
		    };

		    zrUtil.mixin(View, Transformable);

		    module.exports = View;


	/***/ },
	/* 170 */
	/***/ function(module, exports, __webpack_require__) {

		// Fix for 南海诸岛


		    var Region = __webpack_require__(167);

		    var geoCoord = [126, 25];

		    var points = [
		        [[0,3.5],[7,11.2],[15,11.9],[30,7],[42,0.7],[52,0.7],
		         [56,7.7],[59,0.7],[64,0.7],[64,0],[5,0],[0,3.5]],
		        [[13,16.1],[19,14.7],[16,21.7],[11,23.1],[13,16.1]],
		        [[12,32.2],[14,38.5],[15,38.5],[13,32.2],[12,32.2]],
		        [[16,47.6],[12,53.2],[13,53.2],[18,47.6],[16,47.6]],
		        [[6,64.4],[8,70],[9,70],[8,64.4],[6,64.4]],
		        [[23,82.6],[29,79.8],[30,79.8],[25,82.6],[23,82.6]],
		        [[37,70.7],[43,62.3],[44,62.3],[39,70.7],[37,70.7]],
		        [[48,51.1],[51,45.5],[53,45.5],[50,51.1],[48,51.1]],
		        [[51,35],[51,28.7],[53,28.7],[53,35],[51,35]],
		        [[52,22.4],[55,17.5],[56,17.5],[53,22.4],[52,22.4]],
		        [[58,12.6],[62,7],[63,7],[60,12.6],[58,12.6]],
		        [[0,3.5],[0,93.1],[64,93.1],[64,0],[63,0],[63,92.4],
		         [1,92.4],[1,3.5],[0,3.5]]
		    ];
		    for (var i = 0; i < points.length; i++) {
		        for (var k = 0; k < points[i].length; k++) {
		            points[i][k][0] /= 10.5;
		            points[i][k][1] /= -10.5 / 0.75;

		            points[i][k][0] += geoCoord[0];
		            points[i][k][1] += geoCoord[1];
		        }
		    }
		    module.exports = function (geo) {
		        if (geo.map === 'china') {
		            geo.regions.push(new Region(
		                '南海诸岛', points, geoCoord
		            ));
		        }
		    };


	/***/ },
	/* 171 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    var coordsOffsetMap = {
		        '南海诸岛' : [32, 80],
		        // 全国
		        '广东': [0, -10],
		        '香港': [10, 5],
		        '澳门': [-10, 10],
		        //'北京': [-10, 0],
		        '天津': [5, 5]
		    };

		    module.exports = function (geo) {
		        zrUtil.each(geo.regions, function (region) {
		            var coordFix = coordsOffsetMap[region.name];
		            if (coordFix) {
		                var cp = region.center;
		                cp[0] += coordFix[0] / 10.5;
		                cp[1] += -coordFix[1] / (10.5 / 0.75);
		            }
		        });
		    };


	/***/ },
	/* 172 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    var geoCoordMap = {
		        'Russia': [100, 60],
		        'United States of America': [-99, 38]
		    };

		    module.exports = function (geo) {
		        zrUtil.each(geo.regions, function (region) {
		            var geoCoord = geoCoordMap[region.name];
		            if (geoCoord) {
		                var cp = region.center;
		                cp[0] = geoCoord[0];
		                cp[1] = geoCoord[1];
		            }
		        });
		    };


	/***/ },
	/* 173 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    module.exports = function (ecModel) {

		        var processedMapType = {};

		        ecModel.eachSeriesByType('map', function (mapSeries) {
		            var mapType = mapSeries.get('mapType');
		            if (processedMapType[mapType]) {
		                return;
		            }

		            var mapSymbolOffsets = {};

		            zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {
		                var geo = subMapSeries.coordinateSystem;
		                var data = subMapSeries.getData();
		                if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {
		                    data.each('value', function (value, idx) {
		                        var name = data.getName(idx);
		                        var region = geo.getRegion(name);

		                        // No region or no value
		                        // In MapSeries data regions will be filled with NaN
		                        // If they are not in the series.data array.
		                        // So here must validate if value is NaN
		                        if (!region || isNaN(value)) {
		                            return;
		                        }

		                        var offset = mapSymbolOffsets[name] || 0;

		                        var point = geo.dataToPoint(region.center);

		                        mapSymbolOffsets[name] = offset + 1;

		                        data.setItemLayout(idx, {
		                            point: point,
		                            offset: offset
		                        });
		                    });
		                }
		            });

		            // Show label of those region not has legendSymbol(which is offset 0)
		            var data = mapSeries.getData();
		            data.each(function (idx) {
		                var name = data.getName(idx);
		                var layout = data.getItemLayout(idx) || {};
		                layout.showLabel = !mapSymbolOffsets[name];
		                data.setItemLayout(idx, layout);
		            });

		            processedMapType[mapType] = true;
		        });
		    };


	/***/ },
	/* 174 */
	/***/ function(module, exports) {

		
		    module.exports = function (ecModel) {
		        ecModel.eachSeriesByType('map', function (seriesModel) {
		            var colorList = seriesModel.get('color');
		            var itemStyleModel = seriesModel.getModel('itemStyle.normal');

		            var areaColor = itemStyleModel.get('areaColor');
		            var color = itemStyleModel.get('color')
		                || colorList[seriesModel.seriesIndex % colorList.length];

		            seriesModel.getData().setVisual({
		                'areaColor': areaColor,
		                'color': color
		            });
		        });
		    };


	/***/ },
	/* 175 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    // FIXME 公用？
		    /**
		     * @param {Array.<module:echarts/data/List>} datas
		     * @param {string} statisticsType 'average' 'sum'
		     * @inner
		     */
		    function dataStatistics(datas, statisticsType) {
		        var dataNameMap = {};
		        var dims = ['value'];

		        for (var i = 0; i < datas.length; i++) {
		            datas[i].each(dims, function (value, idx) {
		                var name = datas[i].getName(idx);
		                dataNameMap[name] = dataNameMap[name] || [];
		                if (!isNaN(value)) {
		                    dataNameMap[name].push(value);
		                }
		            });
		        }

		        return datas[0].map(dims, function (value, idx) {
		            var name = datas[0].getName(idx);
		            var sum = 0;
		            var min = Infinity;
		            var max = -Infinity;
		            var len = dataNameMap[name].length;
		            for (var i = 0; i < len; i++) {
		                min = Math.min(min, dataNameMap[name][i]);
		                max = Math.max(max, dataNameMap[name][i]);
		                sum += dataNameMap[name][i];
		            }
		            var result;
		            if (statisticsType === 'min') {
		                result = min;
		            }
		            else if (statisticsType === 'max') {
		                result = max;
		            }
		            else if (statisticsType === 'average') {
		                result = sum / len;
		            }
		            else {
		                result = sum;
		            }
		            return len === 0 ? NaN : result;
		        });
		    }

		    module.exports = function (ecModel) {
		        var seriesGroupByMapType = {};
		        ecModel.eachSeriesByType('map', function (seriesModel) {
		            var mapType = seriesModel.get('map');
		            seriesGroupByMapType[mapType] = seriesGroupByMapType[mapType] || [];
		            seriesGroupByMapType[mapType].push(seriesModel);
		        });

		        zrUtil.each(seriesGroupByMapType, function (seriesList, mapType) {
		            var data = dataStatistics(
		                zrUtil.map(seriesList, function (seriesModel) {
		                    return seriesModel.getData();
		                }),
		                seriesList[0].get('mapValueCalculation')
		            );

		            seriesList[0].seriesGroup = [];

		            seriesList[0].setData(data);

		            // FIXME Put where?
		            for (var i = 0; i < seriesList.length; i++) {
		                seriesList[i].seriesGroup = seriesList;
		                seriesList[i].needsDrawMap = i === 0;
		            }
		        });
		    };


	/***/ },
	/* 176 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var geoProps = [
		        'x', 'y', 'x2', 'y2', 'width', 'height', 'map', 'roam', 'roamDetail', 'label', 'itemStyle'
		    ];

		    var geoCoordsMap = {};

		    function createGeoFromMap(mapSeriesOpt) {
		        var geoOpt = {};
		        zrUtil.each(geoProps, function (propName) {
		            if (mapSeriesOpt[propName] != null) {
		                geoOpt[propName] = mapSeriesOpt[propName];
		            }
		        });
		        return geoOpt;
		    }
		    module.exports = function (option) {
		        // Save geoCoord
		        var mapSeries = [];
		        zrUtil.each(option.series, function (seriesOpt) {
		            if (seriesOpt.type === 'map') {
		                mapSeries.push(seriesOpt);
		            }
		            zrUtil.extend(geoCoordsMap, seriesOpt.geoCoord);
		        });

		        var newCreatedGeoOptMap = {};
		        zrUtil.each(mapSeries, function (seriesOpt) {
		            seriesOpt.map = seriesOpt.map || seriesOpt.mapType;
		            // Put x, y, width, height, x2, y2 in the top level
		            zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);
		            if (seriesOpt.markPoint) {
		                var markPoint = seriesOpt.markPoint;
		                // Convert name or geoCoord in markPoint to lng and lat
		                // For example
		                // { name: 'xxx', value: 10} Or
		                // { geoCoord: [lng, lat], value: 10} to
		                // { name: 'xxx', value: [lng, lat, 10]}
		                markPoint.data = zrUtil.map(markPoint.data, function (dataOpt) {
		                    if (!zrUtil.isArray(dataOpt.value)) {
		                        var geoCoord;
		                        if (dataOpt.geoCoord) {
		                            geoCoord = dataOpt.geoCoord;
		                        }
		                        else if (dataOpt.name) {
		                            geoCoord = geoCoordsMap[dataOpt.name];
		                        }
		                        var newValue = geoCoord ? [geoCoord[0], geoCoord[1]] : [NaN, NaN];
		                        if (dataOpt.value != null) {
		                            newValue.push(dataOpt.value);
		                        }
		                        dataOpt.value = newValue;
		                    }
		                    return dataOpt;
		                });
		                // Convert map series which only has markPoint without data to scatter series
		                // FIXME
		                if (!(seriesOpt.data && seriesOpt.data.length)) {
		                    if (!option.geo) {
		                        option.geo = [];
		                    }

		                    // Use same geo if multiple map series has same map type
		                    var geoOpt = newCreatedGeoOptMap[seriesOpt.map];
		                    if (!geoOpt) {
		                        geoOpt = newCreatedGeoOptMap[seriesOpt.map] = createGeoFromMap(seriesOpt);
		                        option.geo.push(geoOpt);
		                    }

		                    var scatterSeries = seriesOpt.markPoint;
		                    scatterSeries.type = option.effect && option.effect.show ? 'effectScatter' : 'scatter';
		                    scatterSeries.coordinateSystem = 'geo';
		                    scatterSeries.geoIndex = zrUtil.indexOf(option.geo, geoOpt);
		                    scatterSeries.name = seriesOpt.name;

		                    option.series.splice(zrUtil.indexOf(option.series, seriesOpt), 1, scatterSeries);
		                }
		            }
		        });
		    };


	/***/ },
	/* 177 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);

		    __webpack_require__(178);
		    __webpack_require__(182);
		    __webpack_require__(185);

		    echarts.registerVisualCoding('chart', __webpack_require__(186));

		    echarts.registerLayout(__webpack_require__(188));


	/***/ },
	/* 178 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var SeriesModel = __webpack_require__(27);
		    var Tree = __webpack_require__(179);
		    var zrUtil = __webpack_require__(3);
		    var Model = __webpack_require__(8);
		    var formatUtil = __webpack_require__(6);
		    var helper = __webpack_require__(181);
		    var encodeHTML = formatUtil.encodeHTML;
		    var addCommas = formatUtil.addCommas;


		    module.exports = SeriesModel.extend({

		        type: 'series.treemap',

		        dependencies: ['grid', 'polar'],

		        /**
		         * @type {module:echarts/data/Tree~Node}
		         */
		        _viewRoot: null,

		        defaultOption: {
		            // center: ['50%', '50%'],          // not supported in ec3.
		            // size: ['80%', '80%'],            // deprecated, compatible with ec2.
		            left: 'center',
		            top: 'middle',
		            right: null,
		            bottom: null,
		            width: '80%',
		            height: '80%',
		            sort: true,                         // Can be null or false or true
		                                                // (order by desc default, asc not supported yet (strange effect))
		            clipWindow: 'origin',               // Size of clipped window when zooming. 'origin' or 'fullscreen'
		            squareRatio: 0.5 * (1 + Math.sqrt(5)), // golden ratio
		            leafDepth: null,                    // Nodes on depth from root are regarded as leaves.
		                                                // Count from zero (zero represents only view root).
		            visualDimension: 0,                 // Can be 0, 1, 2, 3.
		            zoomToNodeRatio: 0.32 * 0.32,       // Be effective when using zoomToNode. Specify the proportion of the
		                                                // target node area in the view area.
		            roam: true,                         // true, false, 'scale' or 'zoom', 'move'.
		            nodeClick: 'zoomToNode',            // Leaf node click behaviour: 'zoomToNode', 'link', false.
		                                                // If leafDepth is set and clicking a node which has children but
		                                                // be on left depth, the behaviour would be changing root. Otherwise
		                                                // use behavious defined above.
		            animation: true,
		            animationDurationUpdate: 900,
		            animationEasing: 'quinticInOut',
		            breadcrumb: {
		                show: true,
		                height: 22,
		                left: 'center',
		                top: 'bottom',
		                // right
		                // bottom
		                emptyItemWidth: 25,             // Width of empty node.
		                itemStyle: {
		                    normal: {
		                        color: 'rgba(0,0,0,0.7)', //'#5793f3',
		                        borderColor: 'rgba(255,255,255,0.7)',
		                        borderWidth: 1,
		                        shadowColor: 'rgba(150,150,150,1)',
		                        shadowBlur: 3,
		                        shadowOffsetX: 0,
		                        shadowOffsetY: 0,
		                        textStyle: {
		                            color: '#fff'
		                        }
		                    },
		                    emphasis: {
		                        textStyle: {}
		                    }
		                }
		            },
		            label: {
		                normal: {
		                    show: true,
		                    position: ['50%', '50%'], // Can be 5, '5%' or position stirng like 'insideTopLeft', ...
		                    textStyle: {
		                        align: 'center',
		                        baseline: 'middle',
		                        color: '#fff',
		                        ellipsis: true
		                    }
		                }
		            },
		            itemStyle: {
		                normal: {
		                    color: null,            // Can be 'none' if not necessary.
		                    colorAlpha: null,       // Can be 'none' if not necessary.
		                    colorSaturation: null,  // Can be 'none' if not necessary.
		                    borderWidth: 0,
		                    gapWidth: 0,
		                    borderColor: '#fff',
		                    borderColorSaturation: null // If specified, borderColor will be ineffective, and the
		                                                // border color is evaluated by color of current node and
		                                                // borderColorSaturation.
		                },
		                emphasis: {

		                }
		            },
		            color: 'none',              // Array. Specify color list of each level.
		                                        // level[0].color would be global color list.
		            colorAlpha: null,           // Array. Specify color alpha range of each level, like [0.2, 0.8]
		            colorSaturation: null,      // Array. Specify color saturation of each level, like [0.2, 0.5]
		            colorMappingBy: 'index',    // 'value' or 'index' or 'id'.
		            visibleMin: 10,             // If area less than this threshold (unit: pixel^2), node will not
		                                        // be rendered. Only works when sort is 'asc' or 'desc'.
		            childrenVisibleMin: null,   // If area of a node less than this threshold (unit: pixel^2),
		                                        // grandchildren will not show.
		                                        // Why grandchildren? If not grandchildren but children,
		                                        // some siblings show children and some not,
		                                        // the appearance may be mess and not consistent,
		            levels: []                  // Each item: {
		                                        //     visibleMin, itemStyle, visualDimension, label
		                                        // }
		            // data: {
		            //      value: [],
		            //      children: [],
		            //      link: 'http://xxx.xxx.xxx',
		            //      target: 'blank' or 'self'
		            // }
		        },

		        /**
		         * @override
		         */
		        getInitialData: function (option, ecModel) {
		            var data = option.data || [];
		            var rootName = option.name;
		            rootName == null && (rootName = option.name);

		            // Create a virtual root.
		            var root = {name: rootName, children: option.data};
		            var value0 = (data[0] || {}).value;

		            completeTreeValue(root, zrUtil.isArray(value0) ? value0.length : -1);

		            // FIXME
		            // sereis.mergeOption 的 getInitData是否放在merge后，从而能直接获取merege后的结果而非手动判断。
		            var levels = option.levels || [];

		            levels = option.levels = setDefault(levels, ecModel);

		            // Make sure always a new tree is created when setOption,
		            // in TreemapView, we check whether oldTree === newTree
		            // to choose mappings approach among old shapes and new shapes.
		            return Tree.createTree(root, this, levels).data;
		        },

		        optionUpdated: function () {
		            this.resetViewRoot();
		        },

		        /**
		         * @override
		         * @param {number} dataIndex
		         * @param {boolean} [mutipleSeries=false]
		         */
		        formatTooltip: function (dataIndex) {
		            var data = this.getData();
		            var value = this.getRawValue(dataIndex);
		            var formattedValue = zrUtil.isArray(value)
		                ? addCommas(value[0]) : addCommas(value);
		            var name = data.getName(dataIndex);

		            return encodeHTML(name) + ': ' + formattedValue;
		        },

		        /**
		         * Add tree path to tooltip param
		         *
		         * @override
		         * @param {number} dataIndex
		         * @return {Object}
		         */
		        getDataParams: function (dataIndex) {
		            var params = SeriesModel.prototype.getDataParams.apply(this, arguments);

		            var data = this.getData();
		            var node = data.tree.getNodeByDataIndex(dataIndex);
		            var treePathInfo = params.treePathInfo = [];

		            while (node) {
		                var nodeDataIndex = node.dataIndex;
		                treePathInfo.push({
		                    name: node.name,
		                    dataIndex: nodeDataIndex,
		                    value: this.getRawValue(nodeDataIndex)
		                });
		                node = node.parentNode;
		            }

		            treePathInfo.reverse();

		            return params;
		        },

		        /**
		         * @public
		         * @param {Object} layoutInfo {
		         *                                x: containerGroup x
		         *                                y: containerGroup y
		         *                                width: containerGroup width
		         *                                height: containerGroup height
		         *                            }
		         */
		        setLayoutInfo: function (layoutInfo) {
		            /**
		             * @readOnly
		             * @type {Object}
		             */
		            this.layoutInfo = this.layoutInfo || {};
		            zrUtil.extend(this.layoutInfo, layoutInfo);
		        },

		        /**
		         * @param  {string} id
		         * @return {number} index
		         */
		        mapIdToIndex: function (id) {
		            // A feature is implemented:
		            // index is monotone increasing with the sequence of
		            // input id at the first time.
		            // This feature can make sure that each data item and its
		            // mapped color have the same index between data list and
		            // color list at the beginning, which is useful for user
		            // to adjust data-color mapping.

		            /**
		             * @private
		             * @type {Object}
		             */
		            var idIndexMap = this._idIndexMap;

		            if (!idIndexMap) {
		                idIndexMap = this._idIndexMap = {};
		                /**
		                 * @private
		                 * @type {number}
		                 */
		                this._idIndexMapCount = 0;
		            }

		            var index = idIndexMap[id];
		            if (index == null) {
		                idIndexMap[id] = index = this._idIndexMapCount++;
		            }

		            return index;
		        },

		        getViewRoot: function () {
		            return this._viewRoot;
		        },

		        /**
		         * @param {module:echarts/data/Tree~Node} [viewRoot]
		         * @return {string} direction 'drilldown' or 'rollup'
		         */
		        resetViewRoot: function (viewRoot) {
		            viewRoot
		                ? (this._viewRoot = viewRoot)
		                : (viewRoot = this._viewRoot);

		            var root = this.getData().tree.root;

		            if (!viewRoot
		                || (viewRoot !== root && !root.contains(viewRoot))
		            ) {
		                this._viewRoot = root;
		            }
		        }
		    });

		    /**
		     * @param {Object} dataNode
		     */
		    function completeTreeValue(dataNode, arrValueLength) {
		        // Postorder travel tree.
		        // If value of none-leaf node is not set,
		        // calculate it by suming up the value of all children.
		        var sum = 0;

		        zrUtil.each(dataNode.children, function (child) {

		            completeTreeValue(child, arrValueLength);

		            var childValue = child.value;
		            zrUtil.isArray(childValue) && (childValue = childValue[0]);

		            sum += childValue;
		        });

		        var thisValue = dataNode.value;

		        if (arrValueLength >= 0) {
		            if (!zrUtil.isArray(thisValue)) {
		                dataNode.value = new Array(arrValueLength);
		            }
		            else {
		                thisValue = thisValue[0];
		            }
		        }

		        if (thisValue == null || isNaN(thisValue)) {
		            thisValue = sum;
		        }
		        // Value should not less than 0.
		        if (thisValue < 0) {
		            thisValue = 0;
		        }

		        arrValueLength >= 0
		            ? (dataNode.value[0] = thisValue)
		            : (dataNode.value = thisValue);
		    }

		    /**
		     * set default to level configuration
		     */
		    function setDefault(levels, ecModel) {
		        var globalColorList = ecModel.get('color');

		        if (!globalColorList) {
		            return;
		        }

		        levels = levels || [];
		        var hasColorDefine;
		        zrUtil.each(levels, function (levelDefine) {
		            var model = new Model(levelDefine);
		            var modelColor = model.get('color');
		            if (model.get('itemStyle.normal.color')
		                || (modelColor && modelColor !== 'none')
		            ) {
		                hasColorDefine = true;
		            }
		        });

		        if (!hasColorDefine) {
		            var level0 = levels[0] || (levels[0] = {});
		            level0.color = globalColorList.slice();
		        }

		        return levels;
		    }



	/***/ },
	/* 179 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Tree data structure
		 *
		 * @module echarts/data/Tree
		 */


		    var zrUtil = __webpack_require__(3);
		    var Model = __webpack_require__(8);
		    var List = __webpack_require__(94);
		    var linkListHelper = __webpack_require__(180);
		    var completeDimensions = __webpack_require__(96);

		    /**
		     * @constructor module:echarts/data/Tree~TreeNode
		     * @param {string} name
		     * @param {number} [dataIndex=-1]
		     * @param {module:echarts/data/Tree} hostTree
		     */
		    var TreeNode = function (name, dataIndex, hostTree) {
		        /**
		         * @type {string}
		         */
		        this.name = name || '';

		        /**
		         * Depth of node
		         *
		         * @type {number}
		         * @readOnly
		         */
		        this.depth = 0;

		        /**
		         * Height of the subtree rooted at this node.
		         * @type {number}
		         * @readOnly
		         */
		        this.height = 0;

		        /**
		         * @type {module:echarts/data/Tree~TreeNode}
		         * @readOnly
		         */
		        this.parentNode = null;

		        /**
		         * Reference to list item.
		         * Do not persistent dataIndex outside,
		         * besause it may be changed by list.
		         * If dataIndex -1,
		         * this node is logical deleted (filtered) in list.
		         *
		         * @type {Object}
		         * @readOnly
		         */
		        this.dataIndex = dataIndex == null ? -1 : dataIndex;

		        /**
		         * @type {Array.<module:echarts/data/Tree~TreeNode>}
		         * @readOnly
		         */
		        this.children = [];

		        /**
		         * @type {Array.<module:echarts/data/Tree~TreeNode>}
		         * @pubilc
		         */
		        this.viewChildren = [];

		        /**
		         * @type {moduel:echarts/data/Tree}
		         * @readOnly
		         */
		        this.hostTree = hostTree;
		    };

		    TreeNode.prototype = {

		        constructor: TreeNode,

		        /**
		         * The node is removed.
		         * @return {boolean} is removed.
		         */
		        isRemoved: function () {
		            return this.dataIndex < 0;
		        },

		        /**
		         * Travel this subtree (include this node).
		         * Usage:
		         *    node.eachNode(function () { ... }); // preorder
		         *    node.eachNode('preorder', function () { ... }); // preorder
		         *    node.eachNode('postorder', function () { ... }); // postorder
		         *    node.eachNode(
		         *        {order: 'postorder', attr: 'viewChildren'},
		         *        function () { ... }
		         *    ); // postorder
		         *
		         * @param {(Object|string)} options If string, means order.
		         * @param {string=} options.order 'preorder' or 'postorder'
		         * @param {string=} options.attr 'children' or 'viewChildren'
		         * @param {Function} cb If in preorder and return false,
		         *                      its subtree will not be visited.
		         * @param {Object} [context]
		         */
		        eachNode: function (options, cb, context) {
		            if (typeof options === 'function') {
		                context = cb;
		                cb = options;
		                options = null;
		            }

		            options = options || {};
		            if (zrUtil.isString(options)) {
		                options = {order: options};
		            }

		            var order = options.order || 'preorder';
		            var children = this[options.attr || 'children'];

		            var suppressVisitSub;
		            order === 'preorder' && (suppressVisitSub = cb.call(context, this));

		            for (var i = 0; !suppressVisitSub && i < children.length; i++) {
		                children[i].eachNode(options, cb, context);
		            }

		            order === 'postorder' && cb.call(context, this);
		        },

		        /**
		         * Update depth and height of this subtree.
		         *
		         * @param  {number} depth
		         */
		        updateDepthAndHeight: function (depth) {
		            var height = 0;
		            this.depth = depth;
		            for (var i = 0; i < this.children.length; i++) {
		                var child = this.children[i];
		                child.updateDepthAndHeight(depth + 1);
		                if (child.height > height) {
		                    height = child.height;
		                }
		            }
		            this.height = height + 1;
		        },

		        /**
		         * @param  {string} id
		         * @return {module:echarts/data/Tree~TreeNode}
		         */
		        getNodeById: function (id) {
		            if (this.getId() === id) {
		                return this;
		            }
		            for (var i = 0, children = this.children, len = children.length; i < len; i++) {
		                var res = children[i].getNodeById(id);
		                if (res) {
		                    return res;
		                }
		            }
		        },

		        /**
		         * @param {module:echarts/data/Tree~TreeNode} node
		         * @return {boolean}
		         */
		        contains: function (node) {
		            if (node === this) {
		                return true;
		            }
		            for (var i = 0, children = this.children, len = children.length; i < len; i++) {
		                var res = children[i].contains(node);
		                if (res) {
		                    return res;
		                }
		            }
		        },

		        /**
		         * @param {boolean} includeSelf Default false.
		         * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]
		         */
		        getAncestors: function (includeSelf) {
		            var ancestors = [];
		            var node = includeSelf ? this : this.parentNode;
		            while (node) {
		                ancestors.push(node);
		                node = node.parentNode;
		            }
		            ancestors.reverse();
		            return ancestors;
		        },

		        /**
		         * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3
		         * @return {number} Value.
		         */
		        getValue: function (dimension) {
		            var data = this.hostTree.data;
		            return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
		        },

		        /**
		         * @param {Object} layout
		         * @param {boolean=} [merge=false]
		         */
		        setLayout: function (layout, merge) {
		            this.dataIndex >= 0
		                && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);
		        },

		        /**
		         * @return {Object} layout
		         */
		        getLayout: function () {
		            return this.hostTree.data.getItemLayout(this.dataIndex);
		        },

		        /**
		         * @param {string} path
		         * @return {module:echarts/model/Model}
		         */
		        getModel: function (path) {
		            if (this.dataIndex < 0) {
		                return;
		            }
		            var hostTree = this.hostTree;
		            var itemModel = hostTree.data.getItemModel(this.dataIndex);
		            var levelModel = this.getLevelModel();

		            return itemModel.getModel(path, (levelModel || hostTree.hostModel).getModel(path));
		        },

		        /**
		         * @return {module:echarts/model/Model}
		         */
		        getLevelModel: function () {
		            return (this.hostTree.levelModels || [])[this.depth];
		        },

		        /**
		         * @example
		         *  setItemVisual('color', color);
		         *  setItemVisual({
		         *      'color': color
		         *  });
		         */
		        setVisual: function (key, value) {
		            this.dataIndex >= 0
		                && this.hostTree.data.setItemVisual(this.dataIndex, key, value);
		        },

		        /**
		         * @public
		         */
		        getVisual: function (key, ignoreParent) {
		            return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);
		        },

		        /**
		         * @public
		         * @return {number}
		         */
		        getRawIndex: function () {
		            return this.hostTree.data.getRawIndex(this.dataIndex);
		        },

		        /**
		         * @public
		         * @return {string}
		         */
		        getId: function () {
		            return this.hostTree.data.getId(this.dataIndex);
		        }
		    };

		    /**
		     * @constructor
		     * @alias module:echarts/data/Tree
		     * @param {module:echarts/model/Model} hostModel
		     * @param {Array.<Object>} levelOptions
		     */
		    function Tree(hostModel, levelOptions) {
		        /**
		         * @type {module:echarts/data/Tree~TreeNode}
		         * @readOnly
		         */
		        this.root;

		        /**
		         * @type {module:echarts/data/List}
		         * @readOnly
		         */
		        this.data;

		        /**
		         * Index of each item is the same as the raw index of coresponding list item.
		         * @private
		         * @type {Array.<module:echarts/data/Tree~TreeNode}
		         */
		        this._nodes = [];

		        /**
		         * @private
		         * @readOnly
		         * @type {module:echarts/model/Model}
		         */
		        this.hostModel = hostModel;

		        /**
		         * @private
		         * @readOnly
		         * @type {Array.<module:echarts/model/Model}
		         */
		        this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {
		            return new Model(levelDefine, hostModel, hostModel.ecModel);
		        });
		    }

		    Tree.prototype = {

		        constructor: Tree,

		        type: 'tree',

		        /**
		         * Travel this subtree (include this node).
		         * Usage:
		         *    node.eachNode(function () { ... }); // preorder
		         *    node.eachNode('preorder', function () { ... }); // preorder
		         *    node.eachNode('postorder', function () { ... }); // postorder
		         *    node.eachNode(
		         *        {order: 'postorder', attr: 'viewChildren'},
		         *        function () { ... }
		         *    ); // postorder
		         *
		         * @param {(Object|string)} options If string, means order.
		         * @param {string=} options.order 'preorder' or 'postorder'
		         * @param {string=} options.attr 'children' or 'viewChildren'
		         * @param {Function} cb
		         * @param {Object}   [context]
		         */
		        eachNode: function(options, cb, context) {
		            this.root.eachNode(options, cb, context);
		        },

		        /**
		         * @param {number} dataIndex
		         * @return {module:echarts/data/Tree~TreeNode}
		         */
		        getNodeByDataIndex: function (dataIndex) {
		            var rawIndex = this.data.getRawIndex(dataIndex);
		            return this._nodes[rawIndex];
		        },

		        /**
		         * @param {string} name
		         * @return {module:echarts/data/Tree~TreeNode}
		         */
		        getNodeByName: function (name) {
		            return this.root.getNodeByName(name);
		        },

		        /**
		         * Update item available by list,
		         * when list has been performed options like 'filterSelf' or 'map'.
		         */
		        update: function () {
		            var data = this.data;
		            var nodes = this._nodes;

		            for (var i = 0, len = nodes.length; i < len; i++) {
		                nodes[i].dataIndex = -1;
		            }

		            for (var i = 0, len = data.count(); i < len; i++) {
		                nodes[data.getRawIndex(i)].dataIndex = i;
		            }
		        }
		    };

		    /**
		     * data node format:
		     * {
		     *     name: ...
		     *     value: ...
		     *     children: [
		     *         {
		     *             name: ...
		     *             value: ...
		     *             children: ...
		     *         },
		     *         ...
		     *     ]
		     * }
		     *
		     * @static
		     * @param {Objec} dataRoot Root node.
		     * @param {module:echarts/model/Model} hostModel
		     * @param {Array.<Object>} levelOptions
		     * @return module:echarts/data/Tree
		     */
		    Tree.createTree = function (dataRoot, hostModel, levelOptions) {

		        var tree = new Tree(hostModel, levelOptions);
		        var listData = [];

		        buildHierarchy(dataRoot);

		        function buildHierarchy(dataNode, parentNode) {
		            listData.push(dataNode);

		            var node = new TreeNode(dataNode.name, listData.length - 1, tree);
		            parentNode
		                ? addChild(node, parentNode)
		                : (tree.root = node);

		            var children = dataNode.children;
		            if (children) {
		                for (var i = 0; i < children.length; i++) {
		                    buildHierarchy(children[i], node);
		                }
		            }
		        }

		        tree.root.updateDepthAndHeight(0);

		        var dimensions = completeDimensions([{name: 'value'}], listData);
		        var list = new List(dimensions, hostModel);
		        list.initData(listData);

		        linkListHelper.linkToTree(list, tree);

		        return tree;
		    };

		    /**
		     * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,
		     * so this function is not ready and not necessary to be public.
		     *
		     * @param {(module:echarts/data/Tree~TreeNode|Object)} child
		     */
		    function addChild(child, node) {
		        var children = node.children;
		        if (child.parentNode === node) {
		            return;
		        }

		        children.push(child);
		        child.parentNode = node;

		        node.hostTree._nodes.push(child);
		    }

		    module.exports = Tree;


	/***/ },
	/* 180 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Link list to graph or tree
		 */


		    var zrUtil = __webpack_require__(3);
		    var arraySlice = Array.prototype.slice;

		    // Caution:
		    // In most case, only one of the list and its shallow clones (see list.cloneShallow)
		    // can be active in echarts process. Considering heap memory consumption,
		    // we do not clone tree or graph, but share them among list and its shallow clones.
		    // But in some rare case, we have to keep old list (like do animation in chart). So
		    // please take care that both the old list and the new list share the same tree/graph.

		    function linkList(list, target, targetType) {
		        zrUtil.each(listProxyMethods, function (method, methodName) {
		            var originMethod = list[methodName];
		            list[methodName] = zrUtil.curry(method, originMethod, target, targetType);
		        });

		        list[targetType] = target;
		        target.data = list;

		        return list;
		    }

		    var listProxyMethods = {
		        cloneShallow: function (originMethod, target, targetType) {
		            var newList = originMethod.apply(this, arraySlice.call(arguments, 3));
		            return linkList(newList, target, targetType);
		        },
		        map: function (originMethod, target, targetType) {
		            var newList = originMethod.apply(this, arraySlice.call(arguments, 3));
		            return linkList(newList, target, targetType);
		        },
		        filterSelf: function (originMethod, target, targetType) {
		            var result = originMethod.apply(this, arraySlice.call(arguments, 3));
		            target.update();
		            return result;
		        }
		    };

		    module.exports = {
		        linkToGraph: function (list, graph) {
		            linkList(list, graph, 'graph');
		        },

		        linkToTree: function (list, tree) {
		            linkList(list, tree, 'tree');
		        }
		    };


	/***/ },
	/* 181 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    var helper = {

		        retrieveTargetInfo: function (payload, seriesModel) {
		            if (payload
		                && (
		                    payload.type === 'treemapZoomToNode'
		                    || payload.type === 'treemapRootToNode'
		                )
		            ) {
		                var root = seriesModel.getData().tree.root;
		                var targetNode = payload.targetNode;
		                if (targetNode && root.contains(targetNode)) {
		                    return {node: targetNode};
		                }

		                var targetNodeId = payload.targetNodeId;
		                if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {
		                    return {node: targetNode};
		                }
		            }
		        },

		        getPathToRoot: function (node) {
		            var path = [];
		            while (node) {
		                path.push(node);
		                node = node.parentNode;
		            }
		            return path.reverse();
		        },

		        aboveViewRoot: function (viewRoot, node) {
		            var viewPath = helper.getPathToRoot(viewRoot);
		            return helper.aboveViewRootByViewPath(viewPath, node);
		        },

		        // viewPath should obtained from getPathToRoot(viewRoot)
		        aboveViewRootByViewPath: function (viewPath, node) {
		            var index = zrUtil.indexOf(viewPath, node);
		            // The last one is viewRoot
		            return index >= 0 && index !== viewPath.length - 1;
		        }

		    };

		    module.exports = helper;


	/***/ },
	/* 182 */
	/***/ function(module, exports, __webpack_require__) {

		 

		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var DataDiffer = __webpack_require__(95);
		    var helper = __webpack_require__(181);
		    var Breadcrumb = __webpack_require__(183);
		    var RoamController = __webpack_require__(159);
		    var BoundingRect = __webpack_require__(15);
		    var matrix = __webpack_require__(17);
		    var animationUtil = __webpack_require__(184);
		    var bind = zrUtil.bind;
		    var Group = graphic.Group;
		    var Rect = graphic.Rect;
		    var each = zrUtil.each;

		    var DRAG_THRESHOLD = 3;

		    module.exports = __webpack_require__(1).extendChartView({

		        type: 'treemap',

		        /**
		         * @override
		         */
		        init: function (o, api) {

		            /**
		             * @private
		             * @type {module:zrender/container/Group}
		             */
		            this._containerGroup;

		            /**
		             * @private
		             * @type {Object.<string, Array.<module:zrender/container/Group>>}
		             */
		            this._storage = createStorage();

		            /**
		             * @private
		             * @type {module:echarts/data/Tree}
		             */
		            this._oldTree;

		            /**
		             * @private
		             * @type {module:echarts/chart/treemap/Breadcrumb}
		             */
		            this._breadcrumb;

		            /**
		             * @private
		             * @type {module:echarts/component/helper/RoamController}
		             */
		            this._controller;

		            /**
		             * 'ready', 'animating'
		             * @private
		             */
		            this._state = 'ready';

		            /**
		             * @private
		             * @type {boolean}
		             */
		            this._mayClick;
		        },

		        /**
		         * @override
		         */
		        render: function (seriesModel, ecModel, api, payload) {

		            var models = ecModel.findComponents({
		                mainType: 'series', subType: 'treemap', query: payload
		            });
		            if (zrUtil.indexOf(models, seriesModel) < 0) {
		                return;
		            }

		            this.seriesModel = seriesModel;
		            this.api = api;
		            this.ecModel = ecModel;

		            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
		            var payloadType = payload && payload.type;
		            var layoutInfo = seriesModel.layoutInfo;
		            var isInit = !this._oldTree;
		            var thisStorage = this._storage;

		            // Mark new root when action is treemapRootToNode.
		            var reRoot = (payloadType === 'treemapRootToNode' && targetInfo && thisStorage)
		                ? {
		                    rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],
		                    direction: payload.direction
		                }
		                : null;

		            var containerGroup = this._giveContainerGroup(layoutInfo);

		            var renderResult = this._doRender(containerGroup, seriesModel, reRoot);

		            (
		                !isInit && (
		                    !payloadType
		                    || payloadType === 'treemapZoomToNode'
		                    || payloadType === 'treemapRootToNode'
		                )
		            )
		                ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot)
		                : renderResult.renderFinally();

		            this._resetController(api);

		            this._renderBreadcrumb(seriesModel, api, targetInfo);
		        },

		        /**
		         * @private
		         */
		        _giveContainerGroup: function (layoutInfo) {
		            var containerGroup = this._containerGroup;
		            if (!containerGroup) {
		                // FIXME
		                // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。
		                containerGroup = this._containerGroup = new Group();
		                this._initEvents(containerGroup);
		                this.group.add(containerGroup);
		            }
		            containerGroup.position = [layoutInfo.x, layoutInfo.y];

		            return containerGroup;
		        },

		        /**
		         * @private
		         */
		        _doRender: function (containerGroup, seriesModel, reRoot) {
		            var thisTree = seriesModel.getData().tree;
		            var oldTree = this._oldTree;

		            // Clear last shape records.
		            var lastsForAnimation = createStorage();
		            var thisStorage = createStorage();
		            var oldStorage = this._storage;
		            var willInvisibleEls = [];
		            var willVisibleEls = [];
		            var willDeleteEls = [];
		            var renderNode = bind(
		                this._renderNode, this,
		                thisStorage, oldStorage, reRoot,
		                lastsForAnimation, willInvisibleEls, willVisibleEls
		            );
		            var viewRoot = seriesModel.getViewRoot();
		            var viewPath = helper.getPathToRoot(viewRoot);

		            // Notice: when thisTree and oldTree are the same tree (see list.cloneShadow),
		            // the oldTree is actually losted, so we can not find all of the old graphic
		            // elements from tree. So we use this stragegy: make element storage, move
		            // from old storage to new storage, clear old storage.

		            dualTravel(
		                thisTree.root ? [thisTree.root] : [],
		                (oldTree && oldTree.root) ? [oldTree.root] : [],
		                containerGroup,
		                thisTree === oldTree || !oldTree,
		                0
		            );

		            // Process all removing.
		            var willDeleteEls = clearStorage(oldStorage);

		            this._oldTree = thisTree;
		            this._storage = thisStorage;

		            return {
		                lastsForAnimation: lastsForAnimation,
		                willDeleteEls: willDeleteEls,
		                renderFinally: renderFinally
		            };

		            function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, viewPathIndex) {
		                // When 'render' is triggered by action,
		                // 'this' and 'old' may be the same tree,
		                // we use rawIndex in that case.
		                if (sameTree) {
		                    oldViewChildren = thisViewChildren;
		                    each(thisViewChildren, function (child, index) {
		                        !child.isRemoved() && processNode(index, index);
		                    });
		                }
		                // Diff hierarchically (diff only in each subtree, but not whole).
		                // because, consistency of view is important.
		                else {
		                    (new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey))
		                        .add(processNode)
		                        .update(processNode)
		                        .remove(zrUtil.curry(processNode, null))
		                        .execute();
		                }

		                function getKey(node) {
		                    // Identify by name or raw index.
		                    return node.getId();
		                }

		                function processNode(newIndex, oldIndex) {
		                    var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;
		                    var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;

		                    // Whether under viewRoot.
		                    if (!thisNode
		                        || isNaN(viewPathIndex)
		                        || (viewPathIndex < viewPath.length && viewPath[viewPathIndex] !== thisNode)
		                    ) {
		                        // Deleting nodes will be performed finally. This method just find
		                        // element from old storage, or create new element, set them to new
		                        // storage, and set styles.
		                        return;
		                    }

		                    var group = renderNode(thisNode, oldNode, parentGroup);

		                    group && dualTravel(
		                        thisNode && thisNode.viewChildren || [],
		                        oldNode && oldNode.viewChildren || [],
		                        group,
		                        sameTree,
		                        viewPathIndex + 1
		                    );
		                }
		            }

		            function clearStorage(storage) {
		                var willDeleteEls = createStorage();
		                storage && each(storage, function (store, storageName) {
		                    var delEls = willDeleteEls[storageName];
		                    each(store, function (el) {
		                        el && (delEls.push(el), el.__tmWillDelete = storageName);
		                    });
		                });
		                return willDeleteEls;
		            }

		            function renderFinally() {
		                each(willDeleteEls, function (els) {
		                    each(els, function (el) {
		                        el.parent && el.parent.remove(el);
		                    });
		                });
		                // Theoritically there is no intersection between willInvisibleEls
		                // and willVisibleEls have, but we set visible after for robustness.
		                each(willInvisibleEls, function (el) {
		                    el.invisible = true;
		                    // Setting invisible is for optimizing, so no need to set dirty,
		                    // just mark as invisible.
		                    el.dirty();
		                });
		                each(willVisibleEls, function (el) {
		                    el.invisible = false;
		                    el.__tmWillVisible = false;
		                    el.dirty();
		                });
		            }
		        },

		        /**
		         * @private
		         */
		        _renderNode: function (
		            thisStorage, oldStorage, reRoot,
		            lastsForAnimation, willInvisibleEls, willVisibleEls,
		            thisNode, oldNode, parentGroup
		        ) {
		            var thisRawIndex = thisNode && thisNode.getRawIndex();
		            var oldRawIndex = oldNode && oldNode.getRawIndex();

		            var layout = thisNode.getLayout();
		            var thisWidth = layout.width;
		            var thisHeight = layout.height;
		            var invisible = layout.invisible;

		            // Node group
		            var group = giveGraphic('nodeGroup', Group);
		            if (!group) {
		                return;
		            }
		            parentGroup.add(group);
		            group.position = [layout.x, layout.y];
		            group.__tmNodeWidth = thisWidth;
		            group.__tmNodeHeight = thisHeight;

		            // Background
		            var bg = giveGraphic('background', Rect, 0);
		            if (bg) {
		                bg.setShape({x: 0, y: 0, width: thisWidth, height: thisHeight});
		                updateStyle(bg, {fill: thisNode.getVisual('borderColor', true)});
		                group.add(bg);
		            }

		            var thisViewChildren = thisNode.viewChildren;

		            // No children, render content.
		            if (!thisViewChildren || !thisViewChildren.length) {
		                var borderWidth = layout.borderWidth;
		                var content = giveGraphic('content', Rect, 3);
		                if (content) {
		                    var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);
		                    var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);
		                    var labelModel = thisNode.getModel('label.normal');
		                    var textStyleModel = thisNode.getModel('label.normal.textStyle');
		                    var hoverStyle = thisNode.getModel('itemStyle.emphasis').getItemStyle();
		                    var text = thisNode.getModel().get('name');
		                    var textRect = textStyleModel.getTextRect(text);
		                    var showLabel = labelModel.get('show');

		                    if (!showLabel || textRect.height > contentHeight) {
		                        text = '';
		                    }
		                    else if (textRect.width > contentWidth) {
		                        text = textStyleModel.get('ellipsis')
		                            ? textStyleModel.ellipsis(text, contentWidth) : '';
		                    }

		                    graphic.setHoverStyle(content, hoverStyle);

		                    // For tooltip.
		                    content.dataIndex = thisNode.dataIndex;
		                    content.seriesIndex = this.seriesModel.seriesIndex;

		                    content.culling = true;
		                    content.setShape({
		                        x: borderWidth,
		                        y: borderWidth,
		                        width: contentWidth,
		                        height: contentHeight
		                    });

		                    updateStyle(content, {
		                        fill: thisNode.getVisual('color', true),
		                        text: text,
		                        textPosition: labelModel.get('position'),
		                        textFill: textStyleModel.getTextColor(),
		                        textAlign: textStyleModel.get('align'),
		                        textVerticalAlign: textStyleModel.get('baseline'),
		                        textFont: textStyleModel.getFont()
		                    });
		                    group.add(content);
		                }
		            }

		            return group;

		            function giveGraphic(storageName, Ctor, z) {
		                var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];
		                var lasts = lastsForAnimation[storageName];

		                if (element) {
		                    // Remove from oldStorage
		                    oldStorage[storageName][oldRawIndex] = null;
		                    prepareAnimationWhenHasOld(lasts, element, storageName);
		                }
		                // If invisible and no old element, do not create new element (for optimizing).
		                else if (!invisible) {
		                    element = new Ctor({z: z});
		                    prepareAnimationWhenNoOld(lasts, element, storageName);
		                }

		                // Set to thisStorage
		                return (thisStorage[storageName][thisRawIndex] = element);
		            }

		            function prepareAnimationWhenHasOld(lasts, element, storageName) {
		                var lastCfg = lasts[thisRawIndex] = {};
		                lastCfg.old = storageName === 'nodeGroup'
		                    ? element.position.slice()
		                    : zrUtil.extend({}, element.shape);
		            }

		            // If a element is new, we need to find the animation start point carefully,
		            // otherwise it will looks strange when 'zoomToNode'.
		            function prepareAnimationWhenNoOld(lasts, element, storageName) {
		                // New background do not animate but delay show.
		                if (storageName === 'background') {
		                    element.invisible = true;
		                    element.__tmWillVisible = true;
		                    willVisibleEls.push(element);
		                }
		                else {
		                    var lastCfg = lasts[thisRawIndex] = {};
		                    var parentNode = thisNode.parentNode;

		                    if (parentNode && (!reRoot || reRoot.direction === 'drilldown')) {
		                        var parentOldX = 0;
		                        var parentOldY = 0;
		                        // For convenience, get old bounding rect from background.
		                        var parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];

		                        if (parentOldBg && parentOldBg.old) {
		                            parentOldX = parentOldBg.old.width / 2; // Devided by 2 for reRoot effect.
		                            parentOldY = parentOldBg.old.height / 2;
		                        }
		                        // When no parent old shape found, its parent is new too,
		                        // so we can just use {x:0, y:0}.
		                        lastCfg.old = storageName === 'nodeGroup'
		                            ? [parentOldX, parentOldY]
		                            : {x: parentOldX, y: parentOldY, width: 0, height: 0};
		                    }

		                    // Fade in, user can be aware that these nodes are new.
		                    lastCfg.fadein = storageName !== 'nodeGroup';
		                }
		            }

		            function updateStyle(element, style) {
		                if (!invisible) {
		                    // If invisible, do not set visual, otherwise the element will
		                    // change immediately before animation. We think it is OK to
		                    // remain its origin color when moving out of the view window.
		                    element.setStyle(style);
		                    if (!element.__tmWillVisible) {
		                        element.invisible = false;
		                    }
		                }
		                else {
		                    // Delay invisible setting utill animation finished,
		                    // avoid element vanish suddenly before animation.
		                    !element.invisible && willInvisibleEls.push(element);
		                }
		            }
		        },

		        /**
		         * @private
		         */
		        _doAnimation: function (containerGroup, renderResult, seriesModel, reRoot) {
		            if (!seriesModel.get('animation')) {
		                return;
		            }

		            var duration = seriesModel.get('animationDurationUpdate');
		            var easing = seriesModel.get('animationEasing');
		            var animationWrap = animationUtil.createWrap();

		            // Make delete animations.
		            each(renderResult.willDeleteEls, function (store, storageName) {
		                each(store, function (el, rawIndex) {
		                    var storageName;

		                    if (el.invisible || !(storageName = el.__tmWillDelete)) {
		                        return;
		                    }

		                    var parent = el.parent; // Always has parent, and parent is nodeGroup.
		                    var target;

		                    if (reRoot && reRoot.direction === 'drilldown') {
		                        if (parent === reRoot.rootNodeGroup) {
		                            // Only 'content' will enter this branch, but not nodeGroup.
		                            target = {
		                                shape: {
		                                    x: 0, y: 0,
		                                    width: parent.__tmNodeWidth, height: parent.__tmNodeHeight
		                                }
		                            };
		                            el.z = 2;
		                        }
		                        else {
		                            target = {style: {opacity: 0}};
		                            el.z = 1;
		                        }
		                    }
		                    else {
		                        var targetX = 0;
		                        var targetY = 0;

		                        if (!parent.__tmWillDelete) {
		                            // Let node animate to right-bottom corner, cooperating with fadeout,
		                            // which is appropriate for user understanding.
		                            // Divided by 2 for reRoot rollup effect.
		                            targetX = parent.__tmNodeWidth / 2;
		                            targetY = parent.__tmNodeHeight / 2;
		                        }
		                        target = storageName === 'nodeGroup'
		                            ? {position: [targetX, targetY], style: {opacity: 0}}
		                            : {
		                                shape: {x: targetX, y: targetY, width: 0, height: 0},
		                                style: {opacity: 0}
		                            };
		                    }

		                    target && animationWrap.add(el, target, duration, easing);
		                });
		            });

		            // Make other animations
		            each(this._storage, function (store, storageName) {
		                each(store, function (el, rawIndex) {
		                    var last = renderResult.lastsForAnimation[storageName][rawIndex];
		                    var target = {};

		                    if (!last) {
		                        return;
		                    }

		                    if (storageName === 'nodeGroup') {
		                        if (last.old) {
		                            target.position = el.position.slice();
		                            el.position = last.old;
		                        }
		                    }
		                    else {
		                        if (last.old) {
		                            target.shape = zrUtil.extend({}, el.shape);
		                            el.setShape(last.old);
		                        }

		                        if (last.fadein) {
		                            el.setStyle('opacity', 0);
		                            target.style = {opacity: 1};
		                        }
		                        // When animation is stopped for succedent animation starting,
		                        // el.style.opacity might not be 1
		                        else if (el.style.opacity !== 1) {
		                            target.style = {opacity: 1};
		                        }
		                    }
		                    animationWrap.add(el, target, duration, easing);
		                });
		            }, this);

		            this._state = 'animating';

		            animationWrap
		                .done(bind(function () {
		                    this._state = 'ready';
		                    renderResult.renderFinally();
		                }, this))
		                .start();
		        },

		        /**
		         * @private
		         */
		        _resetController: function (api) {
		            var controller = this._controller;

		            // Init controller.
		            if (!controller) {
		                controller = this._controller = new RoamController(api.getZr());
		                controller.enable(this.seriesModel.get('roam'));
		                controller.on('pan', bind(this._onPan, this));
		                controller.on('zoom', bind(this._onZoom, this));
		            }

		            controller.rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());
		        },

		        /**
		         * @private
		         */
		        _clearController: function () {
		            var controller = this._controller;
		            if (controller) {
		                controller.off('pan').off('zoom');
		                controller = null;
		            }
		        },

		        /**
		         * @private
		         */
		        _onPan: function (dx, dy) {
		            this._mayClick = false;

		            if (this._state !== 'animating'
		                && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)
		            ) {
		                // These param must not be cached.
		                var viewRoot = this.seriesModel.getViewRoot();

		                if (!viewRoot) {
		                    return;
		                }

		                var rootLayout = viewRoot.getLayout();

		                if (!rootLayout) {
		                    return;
		                }

		                this.api.dispatchAction({
		                    type: 'treemapMove',
		                    from: this.uid,
		                    seriesId: this.seriesModel.id,
		                    rootRect: {
		                        x: rootLayout.x + dx, y: rootLayout.y + dy,
		                        width: rootLayout.width, height: rootLayout.height
		                    }
		                });
		            }
		        },

		        /**
		         * @private
		         */
		        _onZoom: function (scale, mouseX, mouseY) {
		            this._mayClick = false;

		            if (this._state !== 'animating') {
		                // These param must not be cached.
		                var viewRoot = this.seriesModel.getViewRoot();

		                if (!viewRoot) {
		                    return;
		                }

		                var rootLayout = viewRoot.getLayout();

		                if (!rootLayout) {
		                    return;
		                }

		                var rect = new BoundingRect(
		                    rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height
		                );
		                var layoutInfo = this.seriesModel.layoutInfo;

		                // Transform mouse coord from global to containerGroup.
		                mouseX -= layoutInfo.x;
		                mouseY -= layoutInfo.y;

		                // Scale root bounding rect.
		                var m = matrix.create();
		                matrix.translate(m, m, [-mouseX, -mouseY]);
		                matrix.scale(m, m, [scale, scale]);
		                matrix.translate(m, m, [mouseX, mouseY]);

		                rect.applyTransform(m);

		                this.api.dispatchAction({
		                    type: 'treemapRender',
		                    from: this.uid,
		                    seriesId: this.seriesModel.id,
		                    rootRect: {
		                        x: rect.x, y: rect.y,
		                        width: rect.width, height: rect.height
		                    }
		                });
		            }
		        },

		        /**
		         * @private
		         */
		        _initEvents: function (containerGroup) {
		            // FIXME
		            // 不用click以及silent的原因是，animate时视图设置silent true来避免click生效，
		            // 但是animate中，按下鼠标，animate结束后（silent设回为false）松开鼠标，
		            // 还是会触发click，期望是不触发。

		            // Mousedown occurs when drag start, and mouseup occurs when drag end,
		            // click event should not be triggered in that case.

		            containerGroup.on('mousedown', function (e) {
		                this._state === 'ready' && (this._mayClick = true);
		            }, this);
		            containerGroup.on('mouseup', function (e) {
		                if (this._mayClick) {
		                    this._mayClick = false;
		                    this._state === 'ready' && onClick.call(this, e);
		                }
		            }, this);

		            function onClick(e) {
		                var nodeClick = this.seriesModel.get('nodeClick', true);

		                if (!nodeClick) {
		                    return;
		                }

		                var targetInfo = this.findTarget(e.offsetX, e.offsetY);

		                if (!targetInfo) {
		                    return;
		                }

		                var node = targetInfo.node;
		                if (node.getLayout().isLeafRoot) {
		                    this._rootToNode(targetInfo);
		                }
		                else {
		                    if (nodeClick === 'zoomToNode') {
		                        this._zoomToNode(targetInfo);
		                    }
		                    else if (nodeClick === 'link') {
		                        var itemModel = node.hostTree.data.getItemModel(node.dataIndex);
		                        var link = itemModel.get('link', true);
		                        var linkTarget = itemModel.get('target', true) || 'blank';
		                        link && window.open(link, linkTarget);
		                    }
		                }
		            }
		        },

		        /**
		         * @private
		         */
		        _renderBreadcrumb: function (seriesModel, api, targetInfo) {
		            if (!targetInfo) {
		                // Find breadcrumb tail on center of containerGroup.
		                targetInfo = this.findTarget(api.getWidth() / 2, api.getHeight() / 2);

		                if (!targetInfo) {
		                    targetInfo = {node: seriesModel.getData().tree.root};
		                }
		            }

		            (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group, bind(onSelect, this))))
		                .render(seriesModel, api, targetInfo.node);

		            function onSelect(node) {
		                if (this._state !== 'animating') {
		                    helper.aboveViewRoot(seriesModel.getViewRoot(), node)
		                        ? this._rootToNode({node: node})
		                        : this._zoomToNode({node: node});
		                }
		            }
		        },

		        /**
		         * @override
		         */
		        remove: function () {
		            this._clearController();
		            this._containerGroup && this._containerGroup.removeAll();
		            this._storage = createStorage();
		            this._state = 'ready';
		            this._breadcrumb && this._breadcrumb.remove();
		        },

		        dispose: function () {
		            this._clearController();
		        },

		        /**
		         * @private
		         */
		        _zoomToNode: function (targetInfo) {
		            this.api.dispatchAction({
		                type: 'treemapZoomToNode',
		                from: this.uid,
		                seriesId: this.seriesModel.id,
		                targetNode: targetInfo.node
		            });
		        },

		        /**
		         * @private
		         */
		        _rootToNode: function (targetInfo) {
		            this.api.dispatchAction({
		                type: 'treemapRootToNode',
		                from: this.uid,
		                seriesId: this.seriesModel.id,
		                targetNode: targetInfo.node
		            });
		        },

		        /**
		         * @public
		         * @param {number} x Global coord x.
		         * @param {number} y Global coord y.
		         * @return {Object} info If not found, return undefined;
		         * @return {number} info.node Target node.
		         * @return {number} info.offsetX x refer to target node.
		         * @return {number} info.offsetY y refer to target node.
		         */
		        findTarget: function (x, y) {
		            var targetInfo;
		            var viewRoot = this.seriesModel.getViewRoot();

		            viewRoot.eachNode({attr: 'viewChildren', order: 'preorder'}, function (node) {
		                var bgEl = this._storage.background[node.getRawIndex()];
		                // If invisible, there might be no element.
		                if (bgEl) {
		                    var point = bgEl.transformCoordToLocal(x, y);
		                    var shape = bgEl.shape;

		                    // For performance consideration, dont use 'getBoundingRect'.
		                    if (shape.x <= point[0]
		                        && point[0] <= shape.x + shape.width
		                        && shape.y <= point[1]
		                        && point[1] <= shape.y + shape.height
		                    ) {
		                        targetInfo = {node: node, offsetX: point[0], offsetY: point[1]};
		                    }
		                    else {
		                        return false; // Suppress visit subtree.
		                    }
		                }
		            }, this);

		            return targetInfo;
		        }

		    });

		    function createStorage() {
		        return {nodeGroup: [], background: [], content: []};
		    }



	/***/ },
	/* 183 */
	/***/ function(module, exports, __webpack_require__) {

		 

		    var graphic = __webpack_require__(42);
		    var layout = __webpack_require__(21);
		    var zrUtil = __webpack_require__(3);

		    var TEXT_PADDING = 8;
		    var ITEM_GAP = 8;
		    var ARRAY_LENGTH = 5;

		    function Breadcrumb(containerGroup, onSelect) {
		        /**
		         * @private
		         * @type {module:zrender/container/Group}
		         */
		        this.group = new graphic.Group();

		        containerGroup.add(this.group);

		        /**
		         * @private
		         * @type {Function}
		         */
		        this._onSelect = onSelect || zrUtil.noop;
		    }

		    Breadcrumb.prototype = {

		        constructor: Breadcrumb,

		        render: function (seriesModel, api, targetNode) {
		            var model = seriesModel.getModel('breadcrumb');
		            var thisGroup = this.group;

		            thisGroup.removeAll();

		            if (!model.get('show') || !targetNode) {
		                return;
		            }

		            var normalStyleModel = model.getModel('itemStyle.normal');
		            // var emphasisStyleModel = model.getModel('itemStyle.emphasis');
		            var textStyleModel = normalStyleModel.getModel('textStyle');

		            var layoutParam = {
		                pos: {
		                    left: model.get('left'),
		                    right: model.get('right'),
		                    top: model.get('top'),
		                    bottom: model.get('bottom')
		                },
		                box: {
		                    width: api.getWidth(),
		                    height: api.getHeight()
		                },
		                emptyItemWidth: model.get('emptyItemWidth'),
		                totalWidth: 0,
		                renderList: []
		            };

		            this._prepare(
		                model, targetNode, layoutParam, textStyleModel
		            );
		            this._renderContent(
		                model, targetNode, layoutParam, normalStyleModel, textStyleModel
		            );

		            layout.positionGroup(thisGroup, layoutParam.pos, layoutParam.box);
		        },

		        /**
		         * Prepare render list and total width
		         * @private
		         */
		        _prepare: function (model, targetNode, layoutParam, textStyleModel) {
		            for (var node = targetNode; node; node = node.parentNode) {
		                var text = node.getModel().get('name');
		                var textRect = textStyleModel.getTextRect(text);
		                var itemWidth = Math.max(
		                    textRect.width + TEXT_PADDING * 2,
		                    layoutParam.emptyItemWidth
		                );
		                layoutParam.totalWidth += itemWidth + ITEM_GAP;
		                layoutParam.renderList.push({node: node, text: text, width: itemWidth});
		            }
		        },

		        /**
		         * @private
		         */
		        _renderContent: function (
		            model, targetNode, layoutParam, normalStyleModel, textStyleModel
		        ) {
		            // Start rendering.
		            var lastX = 0;
		            var emptyItemWidth = layoutParam.emptyItemWidth;
		            var height = model.get('height');
		            var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);
		            var totalWidth = layoutParam.totalWidth;
		            var renderList = layoutParam.renderList;

		            for (var i = renderList.length - 1; i >= 0; i--) {
		                var item = renderList[i];
		                var itemWidth = item.width;
		                var text = item.text;

		                // Hdie text and shorten width if necessary.
		                if (totalWidth > availableSize.width) {
		                    totalWidth -= itemWidth - emptyItemWidth;
		                    itemWidth = emptyItemWidth;
		                    text = '';
		                }

		                this.group.add(new graphic.Polygon({
		                    shape: {
		                        points: makeItemPoints(
		                            lastX, 0, itemWidth, height,
		                            i === renderList.length - 1, i === 0
		                        )
		                    },
		                    style: zrUtil.defaults(
		                        normalStyleModel.getItemStyle(),
		                        {
		                            lineJoin: 'bevel',
		                            text: text,
		                            textFill: textStyleModel.getTextColor(),
		                            textFont: textStyleModel.getFont()
		                        }
		                    ),
		                    z: 10,
		                    onclick: zrUtil.bind(this._onSelect, this, item.node)
		                }));

		                lastX += itemWidth + ITEM_GAP;
		            }
		        },

		        /**
		         * @override
		         */
		        remove: function () {
		            this.group.removeAll();
		        }
		    };

		    function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {
		        var points = [
		            [head ? x : x - ARRAY_LENGTH, y],
		            [x + itemWidth, y],
		            [x + itemWidth, y + itemHeight],
		            [head ? x : x - ARRAY_LENGTH, y + itemHeight]
		        ];
		        !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);
		        !head && points.push([x, y + itemHeight / 2]);
		        return points;
		    }

		    module.exports = Breadcrumb;


	/***/ },
	/* 184 */
	/***/ function(module, exports, __webpack_require__) {

		 

		    var zrUtil = __webpack_require__(3);

		    /**
		     * @param {number} [time=500] Time in ms
		     * @param {string} [easing='linear']
		     * @param {number} [delay=0]
		     * @param {Function} [callback]
		     *
		     * @example
		     *  // Animate position
		     *  animation
		     *      .createWrap()
		     *      .add(el1, {position: [10, 10]})
		     *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)
		     *      .done(function () { // done })
		     *      .start('cubicOut');
		     */
		    function createWrap() {

		        var storage = [];
		        var elExistsMap = {};
		        var doneCallback;

		        return {

		            /**
		             * Caution: a el can only be added once, otherwise 'done'
		             * might not be called. This method checks this (by el.id),
		             * suppresses adding and returns false when existing el found.
		             *
		             * @param {modele:zrender/Element} el
		             * @param {Object} target
		             * @param {number} [time=500]
		             * @param {number} [delay=0]
		             * @param {string} [easing='linear']
		             * @return {boolean} Whether adding succeeded.
		             *
		             * @example
		             *     add(el, target, time, delay, easing);
		             *     add(el, target, time, easing);
		             *     add(el, target, time);
		             *     add(el, target);
		             */
		            add: function (el, target, time, delay, easing) {
		                if (zrUtil.isString(delay)) {
		                    easing = delay;
		                    delay = 0;
		                }

		                if (elExistsMap[el.id]) {
		                    return false;
		                }
		                elExistsMap[el.id] = 1;

		                storage.push(
		                    {el: el, target: target, time: time, delay: delay, easing: easing}
		                );

		                return true;
		            },

		            /**
		             * Only execute when animation finished. Will not execute when any
		             * of 'stop' or 'stopAnimation' called.
		             *
		             * @param {Function} callback
		             */
		            done: function (callback) {
		                doneCallback = callback;
		                return this;
		            },

		            /**
		             * Will stop exist animation firstly.
		             */
		            start: function () {
		                var count = storage.length;

		                for (var i = 0, len = storage.length; i < len; i++) {
		                    var item = storage[i];
		                    item.el.animateTo(item.target, item.time, item.delay, item.easing, done);
		                }

		                return this;

		                function done() {
		                    count--;
		                    if (!count) {
		                        storage.length = 0;
		                        elExistsMap = {};
		                        doneCallback && doneCallback();
		                    }
		                }
		            }
		        };
		    }

		    module.exports = {createWrap: createWrap};


	/***/ },
	/* 185 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Treemap action
		 */


		    var echarts = __webpack_require__(1);
		    var helper = __webpack_require__(181);

		    var noop = function () {};

		    var actionTypes = [
		        'treemapZoomToNode',
		        'treemapRender',
		        'treemapMove'
		    ];

		    for (var i = 0; i < actionTypes.length; i++) {
		        echarts.registerAction({type: actionTypes[i], update: 'updateView'}, noop);
		    }

		    echarts.registerAction(
		        {type: 'treemapRootToNode', update: 'updateView'},
		        function (payload, ecModel) {
		            ecModel.eachComponent(
		                {mainType: 'series', subType: 'treemap', query: payload},
		                function (model, index) {
		                    var targetInfo = helper.retrieveTargetInfo(payload, model);

		                    if (targetInfo) {
		                        var originViewRoot = model.getViewRoot();
		                        if (originViewRoot) {
		                            payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node)
		                                ? 'rollup' : 'drilldown';
		                        }
		                        model.resetViewRoot(targetInfo.node);
		                    }
		                }
		            );
		        }
		    );



	/***/ },
	/* 186 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var VisualMapping = __webpack_require__(187);
		    var zrColor = __webpack_require__(38);
		    var zrUtil = __webpack_require__(3);
		    var isArray = zrUtil.isArray;

		    var ITEM_STYLE_NORMAL = 'itemStyle.normal';

		    module.exports = function (ecModel, payload) {

		        var condition = {mainType: 'series', subType: 'treemap', query: payload};
		        ecModel.eachComponent(condition, function (seriesModel) {

		            var tree = seriesModel.getData().tree;
		            var root = tree.root;
		            var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);

		            if (root.isRemoved()) {
		                return;
		            }

		            var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {
		                return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;
		            });

		            travelTree(
		                root,
		                {},
		                levelItemStyles,
		                seriesItemStyleModel,
		                seriesModel.getViewRoot().getAncestors(),
		                seriesModel
		            );
		        });
		    };

		    function travelTree(
		        node, designatedVisual, levelItemStyles, seriesItemStyleModel,
		        viewRootAncestors, seriesModel
		    ) {
		        var nodeModel = node.getModel();
		        var nodeLayout = node.getLayout();

		        // Optimize
		        if (nodeLayout.invisible) {
		            return;
		        }

		        var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);
		        var levelItemStyle = levelItemStyles[node.depth];
		        var visuals = buildVisuals(
		            nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel
		        );

		        // calculate border color
		        var borderColor = nodeItemStyleModel.get('borderColor');
		        var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');
		        var thisNodeColor;
		        if (borderColorSaturation != null) {
		            // For performance, do not always execute 'calculateColor'.
		            thisNodeColor = calculateColor(visuals, node);
		            borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);
		        }
		        node.setVisual('borderColor', borderColor);

		        var viewChildren = node.viewChildren;
		        if (!viewChildren || !viewChildren.length) {
		            thisNodeColor = calculateColor(visuals, node);
		            // Apply visual to this node.
		            node.setVisual('color', thisNodeColor);
		        }
		        else {
		            var mapping = buildVisualMapping(
		                node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren
		            );
		            // Designate visual to children.
		            zrUtil.each(viewChildren, function (child, index) {
		                // If higher than viewRoot, only ancestors of viewRoot is needed to visit.
		                if (child.depth >= viewRootAncestors.length
		                    || child === viewRootAncestors[child.depth]
		                ) {
		                    var childVisual = mapVisual(
		                        nodeModel, visuals, child, index, mapping, seriesModel
		                    );
		                    travelTree(
		                        child, childVisual, levelItemStyles, seriesItemStyleModel,
		                        viewRootAncestors, seriesModel
		                    );
		                }
		            });
		        }
		    }

		    function buildVisuals(
		        nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel
		    ) {
		        var visuals = zrUtil.extend({}, designatedVisual);

		        zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {
		            // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel
		            var val = nodeItemStyleModel.get(visualName, true); // Ignore parent
		            val == null && levelItemStyle && (val = levelItemStyle[visualName]);
		            val == null && (val = designatedVisual[visualName]);
		            val == null && (val = seriesItemStyleModel.get(visualName));

		            val != null && (visuals[visualName] = val);
		        });

		        return visuals;
		    }

		    function calculateColor(visuals) {
		        var color = getValueVisualDefine(visuals, 'color');

		        if (color) {
		            var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');
		            var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');
		            if (colorSaturation) {
		                color = zrColor.modifyHSL(color, null, null, colorSaturation);
		            }
		            if (colorAlpha) {
		                color = zrColor.modifyAlpha(color, colorAlpha);
		            }

		            return color;
		        }
		    }

		    function calculateBorderColor(borderColorSaturation, thisNodeColor) {
		        return thisNodeColor != null
		             ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation)
		             : null;
		    }

		    function getValueVisualDefine(visuals, name) {
		        var value = visuals[name];
		        if (value != null && value !== 'none') {
		            return value;
		        }
		    }

		    function buildVisualMapping(
		        node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren
		    ) {
		        if (!viewChildren || !viewChildren.length) {
		            return;
		        }

		        var rangeVisual = getRangeVisual(nodeModel, 'color')
		            || (
		                visuals.color != null
		                && visuals.color !== 'none'
		                && (
		                    getRangeVisual(nodeModel, 'colorAlpha')
		                    || getRangeVisual(nodeModel, 'colorSaturation')
		                )
		            );

		        if (!rangeVisual) {
		            return;
		        }

		        var colorMappingBy = nodeModel.get('colorMappingBy');
		        var opt = {
		            type: rangeVisual.name,
		            dataExtent: nodeLayout.dataExtent,
		            visual: rangeVisual.range
		        };
		        if (opt.type === 'color'
		            && (colorMappingBy === 'index' || colorMappingBy === 'id')
		        ) {
		            opt.mappingMethod = 'category';
		            opt.loop = true;
		            // categories is ordinal, so do not set opt.categories.
		        }
		        else {
		            opt.mappingMethod = 'linear';
		        }

		        var mapping = new VisualMapping(opt);
		        mapping.__drColorMappingBy = colorMappingBy;

		        return mapping;
		    }

		    // Notice: If we dont have the attribute 'colorRange', but only use
		    // attribute 'color' to represent both concepts of 'colorRange' and 'color',
		    // (It means 'colorRange' when 'color' is Array, means 'color' when not array),
		    // this problem will be encountered:
		    // If a level-1 node dont have children, and its siblings has children,
		    // and colorRange is set on level-1, then the node can not be colored.
		    // So we separate 'colorRange' and 'color' to different attributes.
		    function getRangeVisual(nodeModel, name) {
		        // 'colorRange', 'colorARange', 'colorSRange'.
		        // If not exsits on this node, fetch from levels and series.
		        var range = nodeModel.get(name);
		        return (isArray(range) && range.length) ? {name: name, range: range} : null;
		    }

		    function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {
		        var childVisuals = zrUtil.extend({}, visuals);

		        if (mapping) {
		            var mappingType = mapping.type;
		            var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;
		            var value =
		                colorMappingBy === 'index'
		                ? index
		                : colorMappingBy === 'id'
		                ? seriesModel.mapIdToIndex(child.getId())
		                : child.getValue(nodeModel.get('visualDimension'));

		            childVisuals[mappingType] = mapping.mapValueToVisual(value);
		        }

		        return childVisuals;
		    }



	/***/ },
	/* 187 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Visual mapping.
		 */


		    var zrUtil = __webpack_require__(3);
		    var zrColor = __webpack_require__(38);
		    var linearMap = __webpack_require__(7).linearMap;
		    var each = zrUtil.each;
		    var isObject = zrUtil.isObject;

		    var CATEGORY_DEFAULT_VISUAL_INDEX = -1;

		    function linearMapArray(val, domain, range, clamp) {
		        if (zrUtil.isArray(val)) {
		            return zrUtil.map(val, function (v) {
		                return linearMap(v, domain, range, clamp);
		            });
		        }
		        return linearMap(val, domain, range, clamp);
		    }
		    /**
		     * @param {Object} option
		     * @param {string} [option.type] See visualHandlers.
		     * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category'
		     * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],
		     *                                              required when mappingMethod is 'linear'
		     * @param {Array.<Object>=} [option.pieceList] [
		     *                                             {value: someValue},
		     *                                             {interval: [min1, max1], visual: {...}},
		     *                                             {interval: [min2, max2]}
		     *                                             ],
		     *                                            required when mappingMethod is 'piecewise'.
		     *                                            Visual for only each piece can be specified.
		     * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']
		     *                                            required when mappingMethod is 'category'.
		     *                                            If no option.categories, it represents
		     *                                            categories is [0, 1, 2, ...].
		     * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.
		     * @param {(Array|Object|*)} [option.visual]  Visual data.
		     *                                            when mappingMethod is 'category',
		     *                                            visual data can be array or object
		     *                                            (like: {cate1: '#222', none: '#fff'})
		     *                                            or primary types (which represents
		     *                                            defualt category visual), otherwise visual
		     *                                            can only be array.
		     *
		     */
		    var VisualMapping = function (option) {
		        var mappingMethod = option.mappingMethod;
		        var visualType = option.type;

		        /**
		         * @readOnly
		         * @type {string}
		         */
		        this.type = visualType;

		        /**
		         * @readOnly
		         * @type {string}
		         */
		        this.mappingMethod = mappingMethod;

		        /**
		         * @readOnly
		         * @type {Object}
		         */
		        var thisOption = this.option = zrUtil.clone(option);

		        /**
		         * @private
		         * @type {Function}
		         */
		        this._normalizeData = normalizers[mappingMethod];

		        /**
		         * @private
		         * @type {Function}
		         */
		        this._getSpecifiedVisual = zrUtil.bind(
		            specifiedVisualGetters[mappingMethod], this, visualType
		        );

		        zrUtil.extend(this, visualHandlers[visualType]);

		        if (mappingMethod === 'piecewise') {
		            preprocessForPiecewise(thisOption);
		        }
		        if (mappingMethod === 'category') {
		            preprocessForCategory(thisOption);
		        }
		    };

		    VisualMapping.prototype = {

		        constructor: VisualMapping,

		        applyVisual: null,

		        isValueActive: null,

		        mapValueToVisual: null,

		        getNormalizer: function () {
		            return zrUtil.bind(this._normalizeData, this);
		        }
		    };

		    var visualHandlers = VisualMapping.visualHandlers = {

		        color: {

		            applyVisual: defaultApplyColor,

		            /**
		             * Create a mapper function
		             * @return {Function}
		             */
		            getColorMapper: function () {
		                var visual = isCategory(this)
		                    ? this.option.visual
		                    : zrUtil.map(this.option.visual, zrColor.parse);
		                return zrUtil.bind(
		                    isCategory(this)
		                    ? function (value, isNormalized) {
		                        !isNormalized && (value = this._normalizeData(value));
		                        return getVisualForCategory(this, visual, value);
		                    }
		                    : function (value, isNormalized, out) {
		                        // If output rgb array
		                        // which will be much faster and useful in pixel manipulation
		                        var returnRGBArray = !!out;
		                        !isNormalized && (value = this._normalizeData(value));
		                        out = zrColor.fastMapToColor(value, visual, out);
		                        return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');
		                    }, this);
		            },

		            // value:
		            // (1) {number}
		            // (2) {Array.<number>} Represents a interval, for colorStops.
		            // Return type:
		            // (1) {string} color value like '#444'
		            // (2) {Array.<Object>} colorStops,
		            // like [{color: '#fff', offset: 0}, {color: '#444', offset: 1}]
		            // where offset is between 0 and 1.
		            mapValueToVisual: function (value) {
		                var visual = this.option.visual;

		                if (zrUtil.isArray(value)) {
		                    value = [
		                        this._normalizeData(value[0]),
		                        this._normalizeData(value[1])
		                    ];

		                    // For creating gradient color list.
		                    return zrColor.mapIntervalToColor(value, visual);
		                }
		                else {
		                    var normalized = this._normalizeData(value);
		                    var result = this._getSpecifiedVisual(value);

		                    if (result == null) {
		                        result = isCategory(this)
		                            ? getVisualForCategory(this, visual, normalized)
		                            : zrColor.mapToColor(normalized, visual);
		                    }

		                    return result;
		                }
		            }
		        },

		        colorHue: makePartialColorVisualHandler(function (color, value) {
		            return zrColor.modifyHSL(color, value);
		        }),

		        colorSaturation: makePartialColorVisualHandler(function (color, value) {
		            return zrColor.modifyHSL(color, null, value);
		        }),

		        colorLightness: makePartialColorVisualHandler(function (color, value) {
		            return zrColor.modifyHSL(color, null, null, value);
		        }),

		        colorAlpha: makePartialColorVisualHandler(function (color, value) {
		            return zrColor.modifyAlpha(color, value);
		        }),

		        symbol: {
		            applyVisual: function (value, getter, setter) {
		                var symbolCfg = this.mapValueToVisual(value);
		                if (zrUtil.isString(symbolCfg)) {
		                    setter('symbol', symbolCfg);
		                }
		                else if (isObject(symbolCfg)) {
		                    for (var name in symbolCfg) {
		                        if (symbolCfg.hasOwnProperty(name)) {
		                            setter(name, symbolCfg[name]);
		                        }
		                    }
		                }
		            },

		            mapValueToVisual: function (value) {
		                var normalized = this._normalizeData(value);
		                var result = this._getSpecifiedVisual(value);
		                var visual = this.option.visual;

		                if (result == null) {
		                    result = isCategory(this)
		                        ? getVisualForCategory(this, visual, normalized)
		                        : (arrayGetByNormalizedValue(visual, normalized) || {});
		                }

		                return result;
		            }
		        },

		        symbolSize: {
		            applyVisual: function (value, getter, setter) {
		                setter('symbolSize', this.mapValueToVisual(value));
		            },

		            mapValueToVisual: function (value) {
		                var normalized = this._normalizeData(value);
		                var result = this._getSpecifiedVisual(value);
		                var visual = this.option.visual;

		                if (result == null) {
		                    result = isCategory(this)
		                        ? getVisualForCategory(this, visual, normalized)
		                        : linearMapArray(normalized, [0, 1], visual, true);
		                }
		                return result;
		            }
		        }
		    };

		    function preprocessForPiecewise(thisOption) {
		        var pieceList = thisOption.pieceList;
		        thisOption.hasSpecialVisual = false;

		        zrUtil.each(pieceList, function (piece, index) {
		            piece.originIndex = index;
		            if (piece.visual) {
		                thisOption.hasSpecialVisual = true;
		            }
		        });
		    }

		    function preprocessForCategory(thisOption) {
		        // Hash categories.
		        var categories = thisOption.categories;
		        var visual = thisOption.visual;
		        var isVisualArray = zrUtil.isArray(visual);

		        if (!categories) {
		            if (!isVisualArray) {
		                // visual should be array when no categories.
		                throw new Error();
		            }
		            else {
		                return;
		            }
		        }

		        var categoryMap = thisOption.categoryMap = {};
		        each(categories, function (cate, index) {
		            categoryMap[cate] = index;
		        });

		        // Process visual map input.
		        if (!isVisualArray) {
		            var visualArr = [];

		            if (zrUtil.isObject(visual)) {
		                each(visual, function (v, cate) {
		                    var index = categoryMap[cate];
		                    visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;
		                });
		            }
		            else { // Is primary type, represents default visual.
		                visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
		            }

		            visual = thisOption.visual = visualArr;
		        }

		        // Remove categories that has no visual,
		        // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.
		        for (var i = categories.length - 1; i >= 0; i--) {
		            if (visual[i] == null) {
		                delete categoryMap[categories[i]];
		                categories.pop();
		            }
		        }
		    }

		    function makePartialColorVisualHandler(applyValue) {
		        return {

		            applyVisual: function (value, getter, setter) {
		                // color can be {string} or {Array.<Object>} (for gradient color stops)
		                var color = getter('color');
		                var isArrayValue = zrUtil.isArray(value);
		                value = isArrayValue
		                    ? [this.mapValueToVisual(value[0]), this.mapValueToVisual(value[1])]
		                    : this.mapValueToVisual(value);

		                if (zrUtil.isArray(color)) {
		                    for (var i = 0, len = color.length; i < len; i++) {
		                        color[i].color = applyValue(
		                            color[i].color, isArrayValue ? value[i] : value
		                        );
		                    }
		                }
		                else {
		                    // Must not be array value
		                    setter('color', applyValue(color, value));
		                }
		            },

		            mapValueToVisual: function (value) {
		                var normalized = this._normalizeData(value);
		                var result = this._getSpecifiedVisual(value);
		                var visual = this.option.visual;

		                if (result == null) {
		                    result = isCategory(this)
		                        ? getVisualForCategory(this, visual, normalized)
		                        : linearMapArray(normalized, [0, 1], visual, true);
		                }
		                return result;
		            }
		        };
		    }

		    function arrayGetByNormalizedValue(arr, normalized) {
		        return arr[
		            Math.round(linearMapArray(normalized, [0, 1], [0, arr.length - 1], true))
		        ];
		    }

		    function defaultApplyColor(value, getter, setter) {
		        setter('color', this.mapValueToVisual(value));
		    }

		    function getVisualForCategory(me, visual, normalized) {
		        return visual[
		            (me.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX)
		                ? normalized % visual.length
		                : normalized
		        ];
		    }

		    function isCategory(me) {
		        return me.option.mappingMethod === 'category';
		    }


		    var normalizers = {

		        linear: function (value) {
		            return linearMapArray(value, this.option.dataExtent, [0, 1], true);
		        },

		        piecewise: function (value) {
		            var pieceList = this.option.pieceList;
		            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
		            if (pieceIndex != null) {
		                return linearMapArray(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
		            }
		        },

		        category: function (value) {
		            var index = this.option.categories
		                ? this.option.categoryMap[value]
		                : value; // ordinal
		            return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
		        }
		    };


		    // FIXME
		    // refactor
		    var specifiedVisualGetters = {

		        // Linear do not support this feature.
		        linear: zrUtil.noop,

		        piecewise: function (visualType, value) {
		            var thisOption = this.option;
		            var pieceList = thisOption.pieceList;
		            if (thisOption.hasSpecialVisual) {
		                var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
		                var piece = pieceList[pieceIndex];
		                if (piece && piece.visual) {
		                    return piece.visual[visualType];
		                }
		            }
		        },

		        // Category do not need to support this feature.
		        // Visual can be set in visualMap.inRange or
		        // visualMap.outOfRange directly.
		        category: zrUtil.noop
		    };

		    /**
		     * @public
		     */
		    VisualMapping.addVisualHandler = function (name, handler) {
		        visualHandlers[name] = handler;
		    };

		    /**
		     * @public
		     */
		    VisualMapping.isValidType = function (visualType) {
		        return visualHandlers.hasOwnProperty(visualType);
		    };

		    /**
		     * Convinent method.
		     * Visual can be Object or Array or primary type.
		     *
		     * @public
		     */
		    VisualMapping.eachVisual = function (visual, callback, context) {
		        if (zrUtil.isObject(visual)) {
		            zrUtil.each(visual, callback, context);
		        }
		        else {
		            callback.call(context, visual);
		        }
		    };

		    VisualMapping.mapVisual = function (visual, callback, context) {
		        var isPrimary;
		        var newVisual = zrUtil.isArray(visual)
		            ? []
		            : zrUtil.isObject(visual)
		            ? {}
		            : (isPrimary = true, null);

		        VisualMapping.eachVisual(visual, function (v, key) {
		            var newVal = callback.call(context, v, key);
		            isPrimary ? (newVisual = newVal) : (newVisual[key] = newVal);
		        });
		        return newVisual;
		    };

		    /**
		     * 'color', 'colorSaturation', 'colorAlpha', ... are in the same visualCluster named 'color'.
		     * Other visuals are in the cluster named as the same as theirselves.
		     *
		     * @public
		     * @param {string} visualType
		     * @param {string} visualCluster
		     * @return {boolean}
		     */
		    VisualMapping.isInVisualCluster = function (visualType, visualCluster) {
		        return visualCluster === 'color'
		            ? !!(visualType && visualType.indexOf(visualCluster) === 0)
		            : visualType === visualCluster;
		    };

		    /**
		     * @public
		     * @param {Object} obj
		     * @return {Oject} new object containers visual values.
		     *                 If no visuals, return null.
		     */
		    VisualMapping.retrieveVisuals = function (obj) {
		        var ret = {};
		        var hasVisual;

		        obj && each(visualHandlers, function (h, visualType) {
		            if (obj.hasOwnProperty(visualType)) {
		                ret[visualType] = obj[visualType];
		                hasVisual = true;
		            }
		        });

		        return hasVisual ? ret : null;
		    };

		    /**
		     * Give order to visual types, considering colorSaturation, colorAlpha depends on color.
		     *
		     * @public
		     * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}
		     *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']
		     * @return {Array.<string>} Sorted visual types.
		     */
		    VisualMapping.prepareVisualTypes = function (visualTypes) {
		        if (isObject(visualTypes)) {
		            var types = [];
		            each(visualTypes, function (item, type) {
		                types.push(type);
		            });
		            visualTypes = types;
		        }
		        else if (zrUtil.isArray(visualTypes)) {
		            visualTypes = visualTypes.slice();
		        }
		        else {
		            return [];
		        }

		        visualTypes.sort(function (type1, type2) {
		            // color should be front of colorSaturation, colorAlpha, ...
		            // symbol and symbolSize do not matter.
		            return (type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0)
		                ? 1 : -1;
		        });

		        return visualTypes;
		    };

		    /**
		     * @public {Array.<Object>} [{value: ..., interval: [min, max]}, ...]
		     * @return {number} index
		     */
		    VisualMapping.findPieceIndex = function (value, pieceList) {
		        // value has high priority.
		        for (var i = 0, len = pieceList.length; i < len; i++) {
		            var piece = pieceList[i];
		            if (piece.value != null && piece.value === value) {
		                return i;
		            }
		        }

		        for (var i = 0, len = pieceList.length; i < len; i++) {
		            var piece = pieceList[i];
		            var interval = piece.interval;
		            if (interval) {
		                if (interval[0] === -Infinity) {
		                    if (value < interval[1]) {
		                        return i;
		                    }
		                }
		                else if (interval[1] === Infinity) {
		                    if (interval[0] < value) {
		                        return i;
		                    }
		                }
		                else if (
		                    piece.interval[0] <= value
		                    && value <= piece.interval[1]
		                ) {
		                    return i;
		                }
		            }
		        }
		    };

		    module.exports = VisualMapping;




	/***/ },
	/* 188 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var mathMax = Math.max;
		    var mathMin = Math.min;
		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var layout = __webpack_require__(21);
		    var helper = __webpack_require__(181);
		    var parsePercent = numberUtil.parsePercent;
		    var retrieveValue = zrUtil.retrieve;
		    var BoundingRect = __webpack_require__(15);
		    var helper = __webpack_require__(181);

		    /**
		     * @public
		     */
		    function update(ecModel, api, payload) {
		        // Layout result in each node:
		        // {x, y, width, height, area, borderWidth}
		        var condition = {mainType: 'series', subType: 'treemap', query: payload};
		        ecModel.eachComponent(condition, function (seriesModel) {

		            var ecWidth = api.getWidth();
		            var ecHeight = api.getHeight();
		            var seriesOption = seriesModel.option;

		            var size = seriesOption.size || []; // Compatible with ec2.
		            var containerWidth = parsePercent(
		                retrieveValue(seriesOption.width, size[0]),
		                ecWidth
		            );
		            var containerHeight = parsePercent(
		                retrieveValue(seriesOption.height, size[1]),
		                ecHeight
		            );

		            var layoutInfo = layout.getLayoutRect(
		                seriesModel.getBoxLayoutParams(),
		                {
		                    width: api.getWidth(),
		                    height: api.getHeight()
		                }
		            );

		            // Fetch payload info.
		            var payloadType = payload && payload.type;
		            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
		            var rootRect = (payloadType === 'treemapRender' || payloadType === 'treemapMove')
		                ? payload.rootRect : null;
		            var viewRoot = seriesModel.getViewRoot();

		            if (payloadType !== 'treemapMove') {
		                var rootSize = payloadType === 'treemapZoomToNode'
		                    ? estimateRootSize(
		                        seriesModel, targetInfo, viewRoot, containerWidth, containerHeight
		                    )
		                    : rootRect
		                    ? [rootRect.width, rootRect.height]
		                    : [containerWidth, containerHeight];

		                var sort = seriesOption.sort;
		                if (sort && sort !== 'asc' && sort !== 'desc') {
		                    sort = 'desc';
		                }
		                var options = {
		                    squareRatio: seriesOption.squareRatio,
		                    sort: sort,
		                    leafDepth: seriesOption.leafDepth
		                };

		                viewRoot.setLayout({
		                    x: 0, y: 0,
		                    width: rootSize[0], height: rootSize[1],
		                    area: rootSize[0] * rootSize[1]
		                });

		                squarify(viewRoot, options, false, 0);
		            }

		            // Set root position
		            viewRoot.setLayout(
		                calculateRootPosition(layoutInfo, rootRect, targetInfo),
		                true
		            );

		            seriesModel.setLayoutInfo(layoutInfo);

		            // Optimize
		            // FIXME
		            // 现在没有clip功能，暂时取ec高宽。
		            prunning(
		                seriesModel.getData().tree.root,
		                // Transform to base element coordinate system.
		                new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight),
		                helper.getPathToRoot(viewRoot)
		            );

		        });
		    }

		    /**
		     * Layout treemap with squarify algorithm.
		     * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf
		     * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js
		     *
		     * @protected
		     * @param {module:echarts/data/Tree~TreeNode} node
		     * @param {Object} options
		     * @param {string} options.sort 'asc' or 'desc'
		     * @param {number} options.squareRatio
		     * @param {boolean} hideChildren
		     * @param {number} depth
		     */
		    function squarify(node, options, hideChildren, depth) {
		        var width;
		        var height;

		        if (node.isRemoved()) {
		            return;
		        }

		        var thisLayout = node.getLayout();
		        width = thisLayout.width;
		        height = thisLayout.height;

		        // Considering border and gap
		        var itemStyleModel = node.getModel('itemStyle.normal');
		        var borderWidth = itemStyleModel.get('borderWidth');
		        var halfGapWidth = itemStyleModel.get('gapWidth') / 2;
		        var layoutOffset = borderWidth - halfGapWidth;
		        var nodeModel = node.getModel();

		        node.setLayout({borderWidth: borderWidth}, true);

		        width = mathMax(width - 2 * layoutOffset, 0);
		        height = mathMax(height - 2 * layoutOffset, 0);

		        var totalArea = width * height;
		        var viewChildren = initChildren(
		            node, nodeModel, totalArea, options, hideChildren, depth
		        );

		        if (!viewChildren.length) {
		            return;
		        }

		        var rect = {x: layoutOffset, y: layoutOffset, width: width, height: height};
		        var rowFixedLength = mathMin(width, height);
		        var best = Infinity; // the best row score so far
		        var row = [];
		        row.area = 0;

		        for (var i = 0, len = viewChildren.length; i < len;) {
		            var child = viewChildren[i];

		            row.push(child);
		            row.area += child.getLayout().area;
		            var score = worst(row, rowFixedLength, options.squareRatio);

		            // continue with this orientation
		            if (score <= best) {
		                i++;
		                best = score;
		            }
		            // abort, and try a different orientation
		            else {
		                row.area -= row.pop().getLayout().area;
		                position(row, rowFixedLength, rect, halfGapWidth, false);
		                rowFixedLength = mathMin(rect.width, rect.height);
		                row.length = row.area = 0;
		                best = Infinity;
		            }
		        }

		        if (row.length) {
		            position(row, rowFixedLength, rect, halfGapWidth, true);
		        }

		        if (!hideChildren) {
		            var childrenVisibleMin = nodeModel.get('childrenVisibleMin');
		            if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {
		                hideChildren = true;
		            }
		        }

		        for (var i = 0, len = viewChildren.length; i < len; i++) {
		            squarify(viewChildren[i], options, hideChildren, depth + 1);
		        }
		    }

		    /**
		     * Set area to each child, and calculate data extent for visual coding.
		     */
		    function initChildren(node, nodeModel, totalArea, options, hideChildren, depth) {
		        var viewChildren = node.children || [];
		        var orderBy = options.sort;
		        orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);

		        var overLeafDepth = options.leafDepth != null && options.leafDepth <= depth;

		        // leafDepth has higher priority.
		        if (hideChildren && !overLeafDepth) {
		            return (node.viewChildren = []);
		        }

		        // Sort children, order by desc.
		        viewChildren = zrUtil.filter(viewChildren, function (child) {
		            return !child.isRemoved();
		        });

		        sort(viewChildren, orderBy);

		        var info = statistic(nodeModel, viewChildren, orderBy);

		        if (info.sum === 0) {
		            return (node.viewChildren = []);
		        }

		        info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);

		        if (info.sum === 0) {
		            return (node.viewChildren = []);
		        }

		        // Set area to each child.
		        for (var i = 0, len = viewChildren.length; i < len; i++) {
		            var area = viewChildren[i].getValue() / info.sum * totalArea;
		            // Do not use setLayout({...}, true), because it is needed to clear last layout.
		            viewChildren[i].setLayout({area: area});
		        }

		        if (overLeafDepth) {
		            viewChildren.length && node.setLayout({isLeafRoot: true}, true);
		            viewChildren.length = 0;
		        }

		        node.viewChildren = viewChildren;
		        node.setLayout({dataExtent: info.dataExtent}, true);

		        return viewChildren;
		    }

		    /**
		     * Consider 'visibleMin'. Modify viewChildren and get new sum.
		     */
		    function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {

		        // visibleMin is not supported yet when no option.sort.
		        if (!orderBy) {
		            return sum;
		        }

		        var visibleMin = nodeModel.get('visibleMin');
		        var len = orderedChildren.length;
		        var deletePoint = len;

		        // Always travel from little value to big value.
		        for (var i = len - 1; i >= 0; i--) {
		            var value = orderedChildren[
		                orderBy === 'asc' ? len - i - 1 : i
		            ].getValue();

		            if (value / sum * totalArea < visibleMin) {
		                deletePoint = i;
		                sum -= value;
		            }
		        }

		        orderBy === 'asc'
		            ? orderedChildren.splice(0, len - deletePoint)
		            : orderedChildren.splice(deletePoint, len - deletePoint);

		        return sum;
		    }

		    /**
		     * Sort
		     */
		    function sort(viewChildren, orderBy) {
		        if (orderBy) {
		            viewChildren.sort(function (a, b) {
		                return orderBy === 'asc'
		                    ?  a.getValue() - b.getValue() : b.getValue() - a.getValue();
		            });
		        }
		        return viewChildren;
		    }

		    /**
		     * Statistic
		     */
		    function statistic(nodeModel, children, orderBy) {
		        // Calculate sum.
		        var sum = 0;
		        for (var i = 0, len = children.length; i < len; i++) {
		            sum += children[i].getValue();
		        }

		        // Statistic data extent for latter visual coding.
		        // Notice: data extent should be calculate based on raw children
		        // but not filtered view children, otherwise visual mapping will not
		        // be stable when zoom (where children is filtered by visibleMin).

		        var dimension = nodeModel.get('visualDimension');
		        var dataExtent;

		        // The same as area dimension.
		        if (!children || !children.length) {
		            dataExtent = [NaN, NaN];
		        }
		        else if (dimension === 'value' && orderBy) {
		            dataExtent = [
		                children[children.length - 1].getValue(),
		                children[0].getValue()
		            ];
		            orderBy === 'asc' && dataExtent.reverse();
		        }
		        // Other dimension.
		        else {
		            var dataExtent = [Infinity, -Infinity];
		            zrUtil.each(children, function (child) {
		                var value = child.getValue(dimension);
		                value < dataExtent[0] && (dataExtent[0] = value);
		                value > dataExtent[1] && (dataExtent[1] = value);
		            });
		        }

		        return {sum: sum, dataExtent: dataExtent};
		    }

		    /**
		     * Computes the score for the specified row,
		     * as the worst aspect ratio.
		     */
		    function worst(row, rowFixedLength, ratio) {
		        var areaMax = 0;
		        var areaMin = Infinity;

		        for (var i = 0, area, len = row.length; i < len; i++) {
		            area = row[i].getLayout().area;
		            if (area) {
		                area < areaMin && (areaMin = area);
		                area > areaMax && (areaMax = area);
		            }
		        }

		        var squareArea = row.area * row.area;
		        var f = rowFixedLength * rowFixedLength * ratio;

		        return squareArea
		            ? mathMax(
		                (f * areaMax) / squareArea,
		                squareArea / (f * areaMin)
		            )
		            : Infinity;
		    }

		    /**
		     * Positions the specified row of nodes. Modifies `rect`.
		     */
		    function position(row, rowFixedLength, rect, halfGapWidth, flush) {
		        // When rowFixedLength === rect.width,
		        // it is horizontal subdivision,
		        // rowFixedLength is the width of the subdivision,
		        // rowOtherLength is the height of the subdivision,
		        // and nodes will be positioned from left to right.

		        // wh[idx0WhenH] means: when horizontal,
		        //      wh[idx0WhenH] => wh[0] => 'width'.
		        //      xy[idx1WhenH] => xy[1] => 'y'.
		        var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;
		        var idx1WhenH = 1 - idx0WhenH;
		        var xy = ['x', 'y'];
		        var wh = ['width', 'height'];

		        var last = rect[xy[idx0WhenH]];
		        var rowOtherLength = rowFixedLength
		            ? row.area / rowFixedLength : 0;

		        if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {
		            rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow
		        }
		        for (var i = 0, rowLen = row.length; i < rowLen; i++) {
		            var node = row[i];
		            var nodeLayout = {};
		            var step = rowOtherLength
		                ? node.getLayout().area / rowOtherLength : 0;

		            var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0);

		            // We use Math.max/min to avoid negative width/height when considering gap width.
		            var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;
		            var modWH = (i === rowLen - 1 || remain < step) ? remain : step;
		            var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);

		            nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);
		            nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);

		            last += modWH;
		            node.setLayout(nodeLayout, true);
		        }

		        rect[xy[idx1WhenH]] += rowOtherLength;
		        rect[wh[idx1WhenH]] -= rowOtherLength;
		    }

		    // Return [containerWidth, containerHeight] as defualt.
		    function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {
		        // If targetInfo.node exists, we zoom to the node,
		        // so estimate whold width and heigth by target node.
		        var currNode = (targetInfo || {}).node;
		        var defaultSize = [containerWidth, containerHeight];

		        if (!currNode || currNode === viewRoot) {
		            return defaultSize;
		        }

		        var parent;
		        var viewArea = containerWidth * containerHeight;
		        var area = viewArea * seriesModel.option.zoomToNodeRatio;

		        while (parent = currNode.parentNode) { // jshint ignore:line
		            var sum = 0;
		            var siblings = parent.children;

		            for (var i = 0, len = siblings.length; i < len; i++) {
		                sum += siblings[i].getValue();
		            }
		            var currNodeValue = currNode.getValue();
		            if (currNodeValue === 0) {
		                return defaultSize;
		            }
		            area *= sum / currNodeValue;

		            var borderWidth = parent.getModel('itemStyle.normal').get('borderWidth');

		            if (isFinite(borderWidth)) {
		                // Considering border, suppose aspect ratio is 1.
		                area += 4 * borderWidth * borderWidth + 4 * borderWidth * Math.pow(area, 0.5);
		            }

		            area > numberUtil.MAX_SAFE_INTEGER && (area = numberUtil.MAX_SAFE_INTEGER);

		            currNode = parent;
		        }

		        area < viewArea && (area = viewArea);
		        var scale = Math.pow(area / viewArea, 0.5);

		        return [containerWidth * scale, containerHeight * scale];
		    }

		    // Root postion base on coord of containerGroup
		    function calculateRootPosition(layoutInfo, rootRect, targetInfo) {
		        if (rootRect) {
		            return {x: rootRect.x, y: rootRect.y};
		        }

		        var defaultPosition = {x: 0, y: 0};
		        if (!targetInfo) {
		            return defaultPosition;
		        }

		        // If targetInfo is fetched by 'retrieveTargetInfo',
		        // old tree and new tree are the same tree,
		        // so the node still exists and we can visit it.

		        var targetNode = targetInfo.node;
		        var layout = targetNode.getLayout();

		        if (!layout) {
		            return defaultPosition;
		        }

		        // Transform coord from local to container.
		        var targetCenter = [layout.width / 2, layout.height / 2];
		        var node = targetNode;
		        while (node) {
		            var nodeLayout = node.getLayout();
		            targetCenter[0] += nodeLayout.x;
		            targetCenter[1] += nodeLayout.y;
		            node = node.parentNode;
		        }

		        return {
		            x: layoutInfo.width / 2 - targetCenter[0],
		            y: layoutInfo.height / 2 - targetCenter[1]
		        };
		    }

		    // Mark invisible nodes for prunning when visual coding and rendering.
		    // Prunning depends on layout and root position, so we have to do it after them.
		    function prunning(node, clipRect, viewPath) {
		        var nodeLayout = node.getLayout();

		        node.setLayout({
		            invisible: nodeLayout
		                ? !clipRect.intersect(nodeLayout)
		                : !helper.aboveViewRootByViewPath(viewPath, node)
		        }, true);

		        var viewChildren = node.viewChildren || [];
		        for (var i = 0, len = viewChildren.length; i < len; i++) {
		            // Transform to child coordinate.
		            var childClipRect = new BoundingRect(
		                clipRect.x - nodeLayout.x,
		                clipRect.y - nodeLayout.y,
		                clipRect.width,
		                clipRect.height
		            );
		            prunning(viewChildren[i], childClipRect, viewPath);
		        }
		    }

		    module.exports = update;


	/***/ },
	/* 189 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);
		    var zrUtil = __webpack_require__(3);

		    __webpack_require__(190);
		    __webpack_require__(193);

		    __webpack_require__(197);

		    echarts.registerProcessor('filter', __webpack_require__(198));

		    echarts.registerVisualCoding('chart', zrUtil.curry(
		        __webpack_require__(103), 'graph', 'circle', null
		    ));
		    echarts.registerVisualCoding('chart', __webpack_require__(199));

		    echarts.registerLayout(__webpack_require__(200));
		    echarts.registerLayout(__webpack_require__(202));
		    echarts.registerLayout(__webpack_require__(204));

		    // Graph view coordinate system
		    echarts.registerCoordinateSystem('graphView', {
		        create: __webpack_require__(206)
		    });


	/***/ },
	/* 190 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var List = __webpack_require__(94);
		    var zrUtil = __webpack_require__(3);

		    var createGraphFromNodeEdge = __webpack_require__(191);

		    var GraphSeries = __webpack_require__(1).extendSeriesModel({

		        type: 'series.graph',

		        init: function (option) {
		            GraphSeries.superApply(this, 'init', arguments);

		            // Provide data for legend select
		            this.legendDataProvider = function () {
		                return this._categoriesData;
		            };

		            this._updateCategoriesData();
		        },

		        mergeOption: function (option) {
		            GraphSeries.superApply(this, 'mergeOption', arguments);

		            this._updateCategoriesData();
		        },

		        getInitialData: function (option, ecModel) {
		            var edges = option.edges || option.links;
		            var nodes = option.data || option.nodes;
		            if (nodes && edges) {
		                var graph = createGraphFromNodeEdge(nodes, edges, this, true);
		                var list = graph.data;
		                var self = this;
		                // Overwrite list.getItemModel to
		                list.wrapMethod('getItemModel', function (model) {
		                    var categoriesModels = self._categoriesModels;
		                    var categoryIdx = model.getShallow('category');
		                    var categoryModel = categoriesModels[categoryIdx];
		                    if (categoryModel) {
		                        categoryModel.parentModel = model.parentModel;
		                        model.parentModel = categoryModel;
		                    }
		                    return model;
		                });
		                return list;
		            }
		        },

		        restoreData: function () {
		            GraphSeries.superApply(this, 'restoreData', arguments);
		            this.getGraph().restoreData();
		        },

		        /**
		         * @return {module:echarts/data/Graph}
		         */
		        getGraph: function () {
		            return this.getData().graph;
		        },

		        /**
		         * @return {module:echarts/data/List}
		         */
		        getEdgeData: function () {
		            return this.getGraph().edgeData;
		        },

		        /**
		         * @return {module:echarts/data/List}
		         */
		        getCategoriesData: function () {
		            return this._categoriesData;
		        },

		        _updateCategoriesData: function () {
		            var categories = zrUtil.map(this.option.categories || [], function (category) {
		                // Data must has value
		                return category.value != null ? category : zrUtil.extend({
		                    value: 0
		                }, category);
		            });
		            var categoriesData = new List(['value'], this);
		            categoriesData.initData(categories);

		            this._categoriesData = categoriesData;

		            this._categoriesModels = categoriesData.mapArray(function (idx) {
		                return categoriesData.getItemModel(idx, true);
		            });
		        },

		        /**
		         * @param {number} zoom
		         */
		        setRoamZoom: function (zoom) {
		            var roamDetail = this.option.roamDetail;
		            roamDetail && (roamDetail.zoom = zoom);
		        },

		        /**
		         * @param {number} x
		         * @param {number} y
		         */
		        setRoamPan: function (x, y) {
		            var roamDetail = this.option.roamDetail;
		            if (roamDetail) {
		                roamDetail.x = x;
		                roamDetail.y = y;
		            }
		        },

		        defaultOption: {
		            zlevel: 0,
		            z: 2,

		            color: ['#61a0a8', '#d14a61', '#fd9c35', '#675bba', '#fec42c',
		                    '#dd4444', '#fd9c35', '#cd4870'],

		            coordinateSystem: 'view',

		            legendHoverLink: true,

		            hoverAnimation: true,

		            layout: null,

		            // Configuration of force
		            force: {
		                initLayout: null,
		                repulsion: 50,
		                gravity: 0.1,
		                edgeLength: 30,

		                layoutAnimation: true
		            },

		            left: 'center',
		            top: 'center',
		            // right: null,
		            // bottom: null,
		            // width: '80%',
		            // height: '80%',

		            symbol: 'circle',
		            symbolSize: 10,

		            draggable: false,

		            roam: false,
		            roamDetail: {
		                x: 0,
		                y: 0,
		                zoom: 1
		            },

		            // Symbol size scale ratio in roam
		            nodeScaleRatio: 0.6,

		            // Line width scale ratio in roam
		            // edgeScaleRatio: 0.1,

		            // categories: [],

		            // data: []
		            // Or
		            // nodes: []
		            //
		            // links: []
		            // Or
		            // edges: []

		            label: {
		                normal: {
		                    show: false
		                },
		                emphasis: {
		                    show: true
		                }
		            },

		            itemStyle: {
		                normal: {},
		                emphasis: {}
		            },

		            lineStyle: {
		                normal: {
		                    color: '#aaa',
		                    width: 1,
		                    curveness: 0,
		                    opacity: 0.5
		                },
		                emphasis: {}
		            }
		        }
		    });

		    module.exports = GraphSeries;


	/***/ },
	/* 191 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var List = __webpack_require__(94);
		    var Graph = __webpack_require__(192);
		    var linkList = __webpack_require__(180);
		    var completeDimensions = __webpack_require__(96);
		    var zrUtil = __webpack_require__(3);

		    module.exports = function (nodes, edges, hostModel, directed) {
		        var graph = new Graph(directed);
		        for (var i = 0; i < nodes.length; i++) {
		            graph.addNode(zrUtil.retrieve(
		                // Id, name, dataIndex
		                nodes[i].id, nodes[i].name, i
		            ), i);
		        }

		        var linkNameList = [];
		        var validEdges = [];
		        for (var i = 0; i < edges.length; i++) {
		            var link = edges[i];
		            // addEdge may fail when source or target not exists
		            if (graph.addEdge(link.source, link.target, i)) {
		                validEdges.push(link);
		                linkNameList.push(zrUtil.retrieve(link.id, link.source + ' - ' + link.target));
		            }
		        }

		        // FIXME
		        var dimensionNames = completeDimensions(['value'], nodes);

		        var nodeData = new List(dimensionNames, hostModel);
		        var edgeData = new List(['value'], hostModel);

		        nodeData.initData(nodes);
		        edgeData.initData(validEdges, linkNameList);

		        graph.setEdgeData(edgeData);

		        linkList.linkToGraph(nodeData, graph);
		        // Update dataIndex of nodes and edges because invalid edge may be removed
		        graph.update();

		        return graph;
		    };


	/***/ },
	/* 192 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * Graph data structure
		 *
		 * @module echarts/data/Graph
		 * @author Yi Shen(https://www.github.com/pissang)
		 */


		    var zrUtil = __webpack_require__(3);

		    /**
		     * @alias module:echarts/data/Graph
		     * @constructor
		     * @param {boolean} directed
		     */
		    var Graph = function(directed) {
		        /**
		         * 是否是有向图
		         * @type {boolean}
		         * @private
		         */
		        this._directed = directed || false;

		        /**
		         * @type {Array.<module:echarts/data/Graph.Node>}
		         * @readOnly
		         */
		        this.nodes = [];

		        /**
		         * @type {Array.<module:echarts/data/Graph.Edge>}
		         * @readOnly
		         */
		        this.edges = [];

		        /**
		         * @type {Object.<string, module:echarts/data/Graph.Node>}
		         * @private
		         */
		        this._nodesMap = {};
		        /**
		         * @type {Object.<string, module:echarts/data/Graph.Edge>}
		         * @private
		         */
		        this._edgesMap = {};

		        /**
		         * @type {module:echarts/data/List}
		         * @readOnly
		         */
		        this.data;

		        /**
		         * @type {module:echarts/data/List}
		         * @readOnly
		         */
		        this.edgeData;
		    };

		    var graphProto = Graph.prototype;
		    /**
		     * @type {string}
		     */
		    graphProto.type = 'graph';

		    /**
		     * If is directed graph
		     * @return {boolean}
		     */
		    graphProto.isDirected = function () {
		        return this._directed;
		    };

		    /**
		     * Add a new node
		     * @param {string} id
		     * @param {number} [dataIndex]
		     */
		    graphProto.addNode = function (id, dataIndex) {
		        var nodesMap = this._nodesMap;

		        if (nodesMap[id]) {
		            return;
		        }

		        var node = new Node(id, dataIndex);
		        node.hostGraph = this;

		        this.nodes.push(node);

		        nodesMap[id] = node;
		        return node;
		    };

		    /**
		     * Get node by data index
		     * @param  {number} dataIndex
		     * @return {module:echarts/data/Graph~Node}
		     */
		    graphProto.getNodeByIndex = function (dataIndex) {
		        var rawIdx = this.data.getRawIndex(dataIndex);
		        return this.nodes[rawIdx];
		    };
		    /**
		     * Get node by id
		     * @param  {string} id
		     * @return {module:echarts/data/Graph.Node}
		     */
		    graphProto.getNodeById = function (id) {
		        return this._nodesMap[id];
		    };

		    /**
		     * Add a new edge
		     * @param {string|module:echarts/data/Graph.Node} n1
		     * @param {string|module:echarts/data/Graph.Node} n2
		     * @param {number} [dataIndex=-1]
		     * @return {module:echarts/data/Graph.Edge}
		     */
		    graphProto.addEdge = function (n1, n2, dataIndex) {
		        var nodesMap = this._nodesMap;
		        var edgesMap = this._edgesMap;

		        if (!(n1 instanceof Node)) {
		            n1 = nodesMap[n1];
		        }
		        if (!(n2 instanceof Node)) {
		            n2 = nodesMap[n2];
		        }
		        if (!n1 || !n2) {
		            return;
		        }

		        var key = n1.id + '-' + n2.id;
		        // PENDING
		        if (edgesMap[key]) {
		            return;
		        }

		        var edge = new Edge(n1, n2, dataIndex);
		        edge.hostGraph = this;

		        if (this._directed) {
		            n1.outEdges.push(edge);
		            n2.inEdges.push(edge);
		        }
		        n1.edges.push(edge);
		        if (n1 !== n2) {
		            n2.edges.push(edge);
		        }

		        this.edges.push(edge);
		        edgesMap[key] = edge;

		        return edge;
		    };

		    /**
		     * Get edge by data index
		     * @param  {number} dataIndex
		     * @return {module:echarts/data/Graph~Node}
		     */
		    graphProto.getEdgeByIndex = function (dataIndex) {
		        var rawIdx = this.edgeData.getRawIndex(dataIndex);
		        return this.edges[rawIdx];
		    };
		    /**
		     * Get edge by two linked nodes
		     * @param  {module:echarts/data/Graph.Node|string} n1
		     * @param  {module:echarts/data/Graph.Node|string} n2
		     * @return {module:echarts/data/Graph.Edge}
		     */
		    graphProto.getEdge = function (n1, n2) {
		        if (n1 instanceof Node) {
		            n1 = n1.id;
		        }
		        if (n2 instanceof Node) {
		            n2 = n2.id;
		        }

		        var edgesMap = this._edgesMap;

		        if (this._directed) {
		            return edgesMap[n1 + '-' + n2];
		        } else {
		            return edgesMap[n1 + '-' + n2]
		                || edgesMap[n2 + '-' + n1];
		        }
		    };

		    /**
		     * Iterate all nodes
		     * @param  {Function} cb
		     * @param  {*} [context]
		     */
		    graphProto.eachNode = function (cb, context) {
		        var nodes = this.nodes;
		        var len = nodes.length;
		        for (var i = 0; i < len; i++) {
		            if (nodes[i].dataIndex >= 0) {
		                cb.call(context, nodes[i], i);
		            }
		        }
		    };

		    /**
		     * Iterate all edges
		     * @param  {Function} cb
		     * @param  {*} [context]
		     */
		    graphProto.eachEdge = function (cb, context) {
		        var edges = this.edges;
		        var len = edges.length;
		        for (var i = 0; i < len; i++) {
		            if (edges[i].dataIndex >= 0
		                && edges[i].node1.dataIndex >= 0
		                && edges[i].node2.dataIndex >= 0
		            ) {
		                cb.call(context, edges[i], i);
		            }
		        }
		    };

		    /**
		     * Breadth first traverse
		     * @param {Function} cb
		     * @param {module:echarts/data/Graph.Node} startNode
		     * @param {string} [direction='none'] 'none'|'in'|'out'
		     * @param {*} [context]
		     */
		    graphProto.breadthFirstTraverse = function (
		        cb, startNode, direction, context
		    ) {
		        if (!(startNode instanceof Node)) {
		            startNode = this._nodesMap[startNode];
		        }
		        if (!startNode) {
		            return;
		        }

		        var edgeType = direction === 'out'
		            ? 'outEdges' : (direction === 'in' ? 'inEdges' : 'edges');

		        for (var i = 0; i < this.nodes.length; i++) {
		            this.nodes[i].__visited = false;
		        }

		        if (cb.call(context, startNode, null)) {
		            return;
		        }

		        var queue = [startNode];
		        while (queue.length) {
		            var currentNode = queue.shift();
		            var edges = currentNode[edgeType];

		            for (var i = 0; i < edges.length; i++) {
		                var e = edges[i];
		                var otherNode = e.node1 === currentNode
		                    ? e.node2 : e.node1;
		                if (!otherNode.__visited) {
		                    if (cb.call(otherNode, otherNode, currentNode)) {
		                        // Stop traversing
		                        return;
		                    }
		                    queue.push(otherNode);
		                    otherNode.__visited = true;
		                }
		            }
		        }
		    };

		    // TODO
		    // graphProto.depthFirstTraverse = function (
		    //     cb, startNode, direction, context
		    // ) {

		    // };

		    // Filter update
		    graphProto.update = function () {
		        var data = this.data;
		        var edgeData = this.edgeData;
		        var nodes = this.nodes;
		        var edges = this.edges;

		        for (var i = 0, len = nodes.length; i < len; i++) {
		            nodes[i].dataIndex = -1;
		        }
		        for (var i = 0, len = data.count(); i < len; i++) {
		            nodes[data.getRawIndex(i)].dataIndex = i;
		        }

		        edgeData.filterSelf(function (idx) {
		            var edge = edges[edgeData.getRawIndex(idx)];
		            return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
		        });

		        // Update edge
		        for (var i = 0, len = edges.length; i < len; i++) {
		            edges[i].dataIndex = -1;
		        }
		        for (var i = 0, len = edgeData.count(); i < len; i++) {
		            edges[edgeData.getRawIndex(i)].dataIndex = i;
		        }
		    };

		    /**
		     * Set edge data
		     * @param {module:echarts/data/List} edgeData
		     */
		    graphProto.setEdgeData = function (edgeData) {
		        this.edgeData = edgeData;
		        this._edgeDataSaved = edgeData.cloneShallow();
		    };

		    graphProto.restoreData = function () {
		        this.edgeData = this._edgeDataSaved.cloneShallow();
		    };

		    /**
		     * @return {module:echarts/data/Graph}
		     */
		    graphProto.clone = function () {
		        var graph = new Graph(this._directed);
		        var nodes = this.nodes;
		        var edges = this.edges;
		        for (var i = 0; i < nodes.length; i++) {
		            graph.addNode(nodes[i].id, nodes[i].dataIndex);
		        }
		        for (var i = 0; i < edges.length; i++) {
		            var e = edges[i];
		            graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
		        }
		        return graph;
		    };


		    /**
		     * @alias module:echarts/data/Graph.Node
		     */
		    function Node(id, dataIndex) {
		        /**
		        * @type {string}
		        */
		        this.id = id == null ? '' : id;

		        /**
		        * @type {Array.<module:echarts/data/Graph.Edge>}
		        */
		        this.inEdges = [];
		        /**
		        * @type {Array.<module:echarts/data/Graph.Edge>}
		        */
		        this.outEdges = [];
		        /**
		        * @type {Array.<module:echarts/data/Graph.Edge>}
		        */
		        this.edges = [];
		        /**
		         * @type {module:echarts/data/Graph}
		         */
		        this.hostGraph;

		        /**
		         * @type {number}
		         */
		        this.dataIndex = dataIndex == null ? -1 : dataIndex;
		    }

		    Node.prototype = {

		        constructor: Node,

		        /**
		         * @return {number}
		         */
		        degree: function () {
		            return this.edges.length;
		        },

		        /**
		         * @return {number}
		         */
		        inDegree: function () {
		            return this.inEdges.length;
		        },

		        /**
		        * @return {number}
		        */
		        outDegree: function () {
		            return this.outEdges.length;
		        },

		        /**
		         * @param {string} [path]
		         * @return {module:echarts/model/Model}
		         */
		        getModel: function (path) {
		            if (this.dataIndex < 0) {
		                return;
		            }
		            var graph = this.hostGraph;
		            var itemModel = graph.data.getItemModel(this.dataIndex);

		            return itemModel.getModel(path);
		        }
		    };

		    /**
		     * 图边
		     * @alias module:echarts/data/Graph.Edge
		     * @param {module:echarts/data/Graph.Node} n1
		     * @param {module:echarts/data/Graph.Node} n2
		     * @param {number} [dataIndex=-1]
		     */
		    function Edge(n1, n2, dataIndex) {

		        /**
		         * 节点1，如果是有向图则为源节点
		         * @type {module:echarts/data/Graph.Node}
		         */
		        this.node1 = n1;

		        /**
		         * 节点2，如果是有向图则为目标节点
		         * @type {module:echarts/data/Graph.Node}
		         */
		        this.node2 = n2;

		        this.dataIndex = dataIndex == null ? -1 : dataIndex;
		    }

		    /**
		     * @param {string} [path]
		     * @return {module:echarts/model/Model}
		     */
		     Edge.prototype.getModel = function (path) {
		        if (this.dataIndex < 0) {
		            return;
		        }
		        var graph = this.hostGraph;
		        var itemModel = graph.edgeData.getItemModel(this.dataIndex);

		        return itemModel.getModel(path);
		    };

		    var createGraphDataProxyMixin = function (hostName, dataName) {
		        return {
		            /**
		             * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
		             * @return {number}
		             */
		            getValue: function (dimension) {
		                var data = this[hostName][dataName];
		                return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
		            },

		            /**
		             * @param {Object|string} key
		             * @param {*} [value]
		             */
		            setVisual: function (key, value) {
		                this.dataIndex >= 0
		                    && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
		            },

		            /**
		             * @param {string} key
		             * @return {boolean}
		             */
		            getVisual: function (key, ignoreParent) {
		                return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
		            },

		            /**
		             * @param {Object} layout
		             * @return {boolean} [merge=false]
		             */
		            setLayout: function (layout, merge) {
		                this.dataIndex >= 0
		                    && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
		            },

		            /**
		             * @return {Object}
		             */
		            getLayout: function () {
		                return this[hostName][dataName].getItemLayout(this.dataIndex);
		            },

		            /**
		             * @return {module:zrender/Element}
		             */
		            getGraphicEl: function () {
		                return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
		            },

		            /**
		             * @return {number}
		             */
		            getRawIndex: function () {
		                return this[hostName][dataName].getRawIndex(this.dataIndex);
		            }
		        };
		    };

		    zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
		    zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));

		    Graph.Node = Node;
		    Graph.Edge = Edge;

		    module.exports = Graph;


	/***/ },
	/* 193 */
	/***/ function(module, exports, __webpack_require__) {

		


		    var SymbolDraw = __webpack_require__(98);
		    var LineDraw = __webpack_require__(194);
		    var RoamController = __webpack_require__(159);

		    var modelUtil = __webpack_require__(5);
		    var graphic = __webpack_require__(42);

		    __webpack_require__(1).extendChartView({

		        type: 'graph',

		        init: function (ecModel, api) {
		            var symbolDraw = new SymbolDraw();
		            var lineDraw = new LineDraw();
		            var group = this.group;

		            var controller = new RoamController(api.getZr(), group);

		            group.add(symbolDraw.group);
		            group.add(lineDraw.group);

		            this._symbolDraw = symbolDraw;
		            this._lineDraw = lineDraw;
		            this._controller = controller;

		            this._firstRender = true;
		        },

		        render: function (seriesModel, ecModel, api) {
		            var coordSys = seriesModel.coordinateSystem;
		            // Only support view and geo coordinate system
		            if (coordSys.type !== 'geo' && coordSys.type !== 'view') {
		                return;
		            }

		            var data = seriesModel.getData();
		            this._model = seriesModel;

		            var symbolDraw = this._symbolDraw;
		            var lineDraw = this._lineDraw;

		            symbolDraw.updateData(data);

		            var edgeData = data.graph.edgeData;
		            var rawOption = seriesModel.option;
		            var formatModel = modelUtil.createDataFormatModel(
		                seriesModel, edgeData, rawOption.edges || rawOption.links
		            );
		            formatModel.formatTooltip = function (dataIndex) {
		                var params = this.getDataParams(dataIndex);
		                var edge = data.graph.getEdgeByIndex(dataIndex);
		                var sourceName = data.getName(edge.node1.dataIndex);
		                var targetName = data.getName(edge.node2.dataIndex);
		                var html = sourceName + ' > ' + targetName;
		                if (params.value) {
		                    html += ' : ' + params.value;
		                }
		                return html;
		            };

		            lineDraw.updateData(edgeData, null, null);
		            edgeData.eachItemGraphicEl(function (el) {
		                el.traverse(function (child) {
		                    child.dataModel = formatModel;
		                });
		            });

		            // Save the original lineWidth
		            // data.graph.eachEdge(function (edge) {
		            //     edge.__lineWidth = edge.getModel('lineStyle.normal').get('width');
		            // });

		            var group = this.group;
		            var groupNewProp = {
		                position: coordSys.position,
		                scale: coordSys.scale
		            };
		            if (this._firstRender) {
		                group.attr(groupNewProp);
		            }
		            else {
		                graphic.updateProps(group, groupNewProp, seriesModel);
		            }

		            this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');
		            // this._edgeScaleRatio = seriesModel.get('edgeScaleRatio');

		            this._updateNodeAndLinkScale();

		            this._updateController(seriesModel, coordSys, api);

		            clearTimeout(this._layoutTimeout);
		            var forceLayout = seriesModel.forceLayout;
		            var layoutAnimation = seriesModel.get('force.layoutAnimation');
		            if (forceLayout) {
		                this._startForceLayoutIteration(forceLayout, layoutAnimation);
		            }
		            // Update draggable
		            data.eachItemGraphicEl(function (el, idx) {
		                var draggable = data.getItemModel(idx).get('draggable');
		                if (draggable && forceLayout) {
		                    el.on('drag', function () {
		                        forceLayout.warmUp();
		                        !this._layouting
		                            && this._startForceLayoutIteration(forceLayout, layoutAnimation);
		                        forceLayout.setFixed(idx);
		                        // Write position back to layout
		                        data.setItemLayout(idx, el.position);
		                    }, this).on('dragend', function () {
		                        forceLayout.setUnfixed(idx);
		                    }, this);
		                }
		                else {
		                    el.off('drag');
		                }
		                el.setDraggable(draggable);
		            }, this);

		            this._firstRender = false;
		        },

		        _startForceLayoutIteration: function (forceLayout, layoutAnimation) {
		            var self = this;
		            (function step() {
		                forceLayout.step(function (stopped) {
		                    self.updateLayout();
		                    (self._layouting = !stopped) && (
		                        layoutAnimation
		                            ? (self._layoutTimeout = setTimeout(step, 16))
		                            : step()
		                    );
		                });
		            })();
		        },

		        _updateController: function (seriesModel, coordSys, api) {
		            var controller = this._controller;
		            controller.rect = coordSys.getViewRect();

		            controller.enable(seriesModel.get('roam'));

		            controller
		                .off('pan')
		                .off('zoom')
		                .on('pan', function (dx, dy) {
		                    api.dispatchAction({
		                        seriesId: seriesModel.id,
		                        type: 'graphRoam',
		                        dx: dx,
		                        dy: dy
		                    });
		                })
		                .on('zoom', function (zoom, mouseX, mouseY) {
		                    api.dispatchAction({
		                        seriesId: seriesModel.id,
		                        type: 'graphRoam',
		                        zoom:  zoom,
		                        originX: mouseX,
		                        originY: mouseY
		                    });
		                })
		                .on('zoom', this._updateNodeAndLinkScale, this);
		        },

		        _updateNodeAndLinkScale: function () {
		            var seriesModel = this._model;
		            var data = seriesModel.getData();

		            var group = this.group;
		            var nodeScaleRatio = this._nodeScaleRatio;
		            // var edgeScaleRatio = this._edgeScaleRatio;

		            // Assume scale aspect is 1
		            var groupScale = group.scale[0];

		            var nodeScale = (groupScale - 1) * nodeScaleRatio + 1;
		            // var edgeScale = (groupScale - 1) * edgeScaleRatio + 1;
		            var invScale = [
		                nodeScale / groupScale,
		                nodeScale / groupScale
		            ];

		            data.eachItemGraphicEl(function (el, idx) {
		                el.attr('scale', invScale);
		            });
		            // data.graph.eachEdge(function (edge) {
		            //     var lineGroup = edge.getGraphicEl();
		            //     // FIXME
		            //     lineGroup.childOfName('line').setStyle(
		            //         'lineWidth',
		            //         edge.__lineWidth * edgeScale / groupScale
		            //     );
		            // });
		        },

		        updateLayout: function (seriesModel, ecModel) {
		            this._symbolDraw.updateLayout();
		            this._lineDraw.updateLayout();
		        },

		        remove: function (ecModel, api) {
		            this._symbolDraw && this._symbolDraw.remove();
		            this._lineDraw && this._lineDraw.remove();
		        }
		    });


	/***/ },
	/* 194 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/chart/helper/LineDraw
		 */


		    var graphic = __webpack_require__(42);
		    var LineGroup = __webpack_require__(195);

		    /**
		     * @alias module:echarts/component/marker/LineDraw
		     * @constructor
		     */
		    function LineDraw(ctor) {
		        this._ctor = ctor || LineGroup;
		        this.group = new graphic.Group();
		    }

		    var lineDrawProto = LineDraw.prototype;

		    /**
		     * @param {module:echarts/data/List} lineData
		     * @param {module:echarts/data/List} [fromData]
		     * @param {module:echarts/data/List} [toData]
		     */
		    lineDrawProto.updateData = function (lineData, fromData, toData) {

		        var oldLineData = this._lineData;
		        var group = this.group;
		        var LineCtor = this._ctor;

		        lineData.diff(oldLineData)
		            .add(function (idx) {
		                var lineGroup = new LineCtor(lineData, fromData, toData, idx);

		                lineData.setItemGraphicEl(idx, lineGroup);

		                group.add(lineGroup);
		            })
		            .update(function (newIdx, oldIdx) {
		                var lineGroup = oldLineData.getItemGraphicEl(oldIdx);
		                lineGroup.updateData(lineData, fromData, toData, newIdx);

		                lineData.setItemGraphicEl(newIdx, lineGroup);

		                group.add(lineGroup);
		            })
		            .remove(function (idx) {
		                group.remove(oldLineData.getItemGraphicEl(idx));
		            })
		            .execute();

		        this._lineData = lineData;
		        this._fromData = fromData;
		        this._toData = toData;
		    };

		    lineDrawProto.updateLayout = function () {
		        var lineData = this._lineData;
		        lineData.eachItemGraphicEl(function (el, idx) {
		            el.updateLayout(lineData, this._fromData, this._toData, idx);
		        }, this);
		    };

		    lineDrawProto.remove = function () {
		        this.group.removeAll();
		    };

		    module.exports = LineDraw;


	/***/ },
	/* 195 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/chart/helper/Line
		 */


		    var symbolUtil = __webpack_require__(100);
		    var vector = __webpack_require__(16);
		    var LinePath = __webpack_require__(196);
		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);

		    /**
		     * @inner
		     */
		    function createSymbol(name, data, idx) {
		        var color = data.getItemVisual(idx, 'color');
		        var symbolType = data.getItemVisual(idx, 'symbol');
		        var symbolSize = data.getItemVisual(idx, 'symbolSize');

		        if (symbolType === 'none') {
		            return;
		        }

		        if (!zrUtil.isArray(symbolSize)) {
		            symbolSize = [symbolSize, symbolSize];
		        }
		        var symbolPath = symbolUtil.createSymbol(
		            symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2,
		            symbolSize[0], symbolSize[1], color
		        );
		        symbolPath.name = name;

		        return symbolPath;
		    }

		    function createLine(points) {
		        var line = new LinePath({
		            name: 'line',
		            style: {
		                strokeNoScale: true
		            }
		        });
		        setLinePoints(line.shape, points);
		        return line;
		    }

		    function setLinePoints(targetShape, points) {
		        var p1 = points[0];
		        var p2 = points[1];
		        var cp1 = points[2];
		        targetShape.x1 = p1[0];
		        targetShape.y1 = p1[1];
		        targetShape.x2 = p2[0];
		        targetShape.y2 = p2[1];
		        targetShape.percent = 1;

		        if (cp1) {
		            targetShape.cpx1 = cp1[0];
		            targetShape.cpy1 = cp1[1];
		        }
		    }

		    function isSymbolArrow(symbol) {
		        return symbol.type === 'symbol' && symbol.shape.symbolType === 'arrow';
		    }

		    function updateSymbolBeforeLineUpdate () {
		        var lineGroup = this;
		        var line = lineGroup.childOfName('line');
		        // If line not changed
		        if (!this.__dirty && !line.__dirty) {
		            return;
		        }
		        var symbolFrom = lineGroup.childOfName('fromSymbol');
		        var symbolTo = lineGroup.childOfName('toSymbol');
		        var label = lineGroup.childOfName('label');
		        var fromPos = line.pointAt(0);
		        var toPos = line.pointAt(line.shape.percent);

		        var d = vector.sub([], toPos, fromPos);
		        vector.normalize(d, d);

		        if (symbolFrom) {
		            symbolFrom.attr('position', fromPos);
		            // Rotate the arrow
		            // FIXME Hard coded ?
		            if (isSymbolArrow(symbolFrom)) {
		                symbolFrom.attr('rotation', tangentRotation(toPos, fromPos));
		            }
		        }
		        if (symbolTo) {
		            symbolTo.attr('position', toPos);
		            if (isSymbolArrow(symbolTo)) {
		                symbolTo.attr('rotation', tangentRotation(fromPos, toPos));
		            }
		        }

		        label.attr('position', toPos);

		        var textPosition;
		        var textAlign;
		        var textVerticalAlign;
		        // End
		        if (label.__position === 'end') {
		            textPosition = [d[0] * 5 + toPos[0], d[1] * 5 + toPos[1]];
		            textAlign = d[0] > 0.8 ? 'left' : (d[0] < -0.8 ? 'right' : 'center');
		            textVerticalAlign = d[1] > 0.8 ? 'top' : (d[1] < -0.8 ? 'bottom' : 'middle');
		        }
		        // Start
		        else {
		            textPosition = [-d[0] * 5 + fromPos[0], -d[1] * 5 + fromPos[1]];
		            textAlign = d[0] > 0.8 ? 'right' : (d[0] < -0.8 ? 'left' : 'center');
		            textVerticalAlign = d[1] > 0.8 ? 'bottom' : (d[1] < -0.8 ? 'top' : 'middle');
		        }
		        label.attr({
		            style: {
		                // Use the user specified text align and baseline first
		                textVerticalAlign: label.__verticalAlign || textVerticalAlign,
		                textAlign: label.__textAlign || textAlign
		            },
		            position: textPosition
		        });
		    }

		    function tangentRotation(p1, p2) {
		        return -Math.PI / 2 - Math.atan2(
		            p2[1] - p1[1], p2[0] - p1[0]
		        );
		    }

		    /**
		     * @constructor
		     * @extends {module:zrender/graphic/Group}
		     * @alias {module:echarts/chart/helper/Line}
		     */
		    function Line(lineData, fromData, toData, idx) {
		        graphic.Group.call(this);

		        this._createLine(lineData, fromData, toData, idx);
		    }

		    var lineProto = Line.prototype;

		    // Update symbol position and rotation
		    lineProto.beforeUpdate = updateSymbolBeforeLineUpdate;

		    lineProto._createLine = function (lineData, fromData, toData, idx) {
		        var seriesModel = lineData.hostModel;
		        var linePoints = lineData.getItemLayout(idx);

		        var line = createLine(linePoints);
		        line.shape.percent = 0;
		        graphic.initProps(line, {
		            shape: {
		                percent: 1
		            }
		        }, seriesModel);

		        this.add(line);

		        var label = new graphic.Text({
		            name: 'label'
		        });
		        this.add(label);

		        if (fromData) {
		            var symbolFrom = createSymbol('fromSymbol', fromData, idx);
		            // symbols must added after line to make sure
		            // it will be updated after line#update.
		            // Or symbol position and rotation update in line#beforeUpdate will be one frame slow
		            this.add(symbolFrom);

		            this._fromSymbolType = fromData.getItemVisual(idx, 'symbol');
		        }
		        if (toData) {
		            var symbolTo = createSymbol('toSymbol', toData, idx);
		            this.add(symbolTo);

		            this._toSymbolType = toData.getItemVisual(idx, 'symbol');
		        }

		        this._updateCommonStl(lineData, fromData, toData, idx);
		    };

		    lineProto.updateData = function (lineData, fromData, toData, idx) {
		        var seriesModel = lineData.hostModel;

		        var line = this.childOfName('line');
		        var linePoints = lineData.getItemLayout(idx);
		        var target = {
		            shape: {}
		        };
		        setLinePoints(target.shape, linePoints);
		        graphic.updateProps(line, target, seriesModel);

		        // Symbol changed
		        if (fromData) {
		            var fromSymbolType = fromData.getItemVisual(idx, 'symbol');
		            if (this._fromSymbolType !== fromSymbolType) {
		                var symbolFrom = createSymbol('fromSymbol', fromData, idx);
		                this.remove(this.childOfName('fromSymbol'));
		                this.add(symbolFrom);
		            }
		            this._fromSymbolType = fromSymbolType;
		        }
		        if (toData) {
		            var toSymbolType = toData.getItemVisual(idx, 'symbol');
		            // Symbol changed
		            if (toSymbolType !== this._toSymbolType) {
		                var symbolTo = createSymbol('toSymbol', toData, idx);
		                this.remove(this.childOfName('toSymbol'));
		                this.add(symbolTo);
		            }
		            this._toSymbolType = toSymbolType;
		        }

		        this._updateCommonStl(lineData, fromData, toData, idx);
		    };

		    lineProto._updateCommonStl = function (lineData, fromData, toData, idx) {
		        var seriesModel = lineData.hostModel;

		        var line = this.childOfName('line');
		        var itemModel = lineData.getItemModel(idx);

		        var labelModel = itemModel.getModel('label.normal');
		        var textStyleModel = labelModel.getModel('textStyle');
		        var labelHoverModel = itemModel.getModel('label.emphasis');
		        var textStyleHoverModel = labelHoverModel.getModel('textStyle');

		        var defaultText = numberUtil.round(seriesModel.getRawValue(idx));
		        if (isNaN(defaultText)) {
		            // Use name
		            defaultText = lineData.getName(idx);
		        }
		        line.setStyle(zrUtil.extend(
		            {
		                stroke: lineData.getItemVisual(idx, 'color')
		            },
		            itemModel.getModel('lineStyle.normal').getLineStyle()
		        ));

		        var label = this.childOfName('label');
		        label.setStyle({
		            text: labelModel.get('show')
		                ? zrUtil.retrieve(
		                    seriesModel.getFormattedLabel(idx, 'normal'),
		                    defaultText
		                )
		                : '',
		            textFont: textStyleModel.getFont(),
		            fill: textStyleModel.getTextColor() || lineData.getItemVisual(idx, 'color')
		        });
		        label.hoverStyle = {
		            text: labelHoverModel.get('show')
		                ? zrUtil.retrieve(
		                    seriesModel.getFormattedLabel(idx, 'emphasis'),
		                    defaultText
		                )
		                : '',
		            textFont: textStyleHoverModel.getFont(),
		            fill: textStyleHoverModel.getTextColor()
		        };
		        label.__textAlign = textStyleModel.get('align');
		        label.__verticalAlign = textStyleModel.get('baseline');
		        label.__position = labelModel.get('position');

		        graphic.setHoverStyle(
		            this, itemModel.getModel('lineStyle.emphasis').getLineStyle()
		        );
		    };

		    lineProto.updateLayout = function (lineData, fromData, toData, idx) {
		        var points = lineData.getItemLayout(idx);
		        var linePath = this.childOfName('line');
		        setLinePoints(linePath.shape, points);
		        linePath.dirty(true);
		        // var fromEl = fromData && fromData.getItemGraphicEl(idx);
		        // var toEl = toData && toData.getItemGraphicEl(idx);
		        // fromEl && fromEl.attr('position', points[0]);
		        // toEl && toEl.attr('position', points[1]);
		    };

		    zrUtil.inherits(Line, graphic.Group);

		    module.exports = Line;


	/***/ },
	/* 196 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Line path for bezier and straight line draw
		 */

		    var graphic = __webpack_require__(42);

		    var straightLineProto = graphic.Line.prototype;
		    var bezierCurveProto = graphic.BezierCurve.prototype;

		    module.exports = graphic.extendShape({

		        type: 'ec-line',

		        style: {
		            stroke: '#000',
		            fill: null
		        },

		        shape: {
		            x1: 0,
		            y1: 0,
		            x2: 0,
		            y2: 0,
		            percent: 1,
		            cpx1: null,
		            cpy1: null
		        },

		        buildPath: function (ctx, shape) {
		            (shape.cpx1 == null || shape.cpy1 == null
		                ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);
		        },

		        pointAt: function (t) {
		            var shape = this.shape;
		            return shape.cpx1 == null || shape.cpy1 == null
		                ? straightLineProto.pointAt.call(this, t)
		                : bezierCurveProto.pointAt.call(this, t);
		        }
		    });


	/***/ },
	/* 197 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);
		    var roamHelper = __webpack_require__(162);

		    var actionInfo = {
		        type: 'graphRoam',
		        event: 'graphRoam',
		        update: 'none'
		    };

		    /**
		     * @payload
		     * @property {string} name Series name
		     * @property {number} [dx]
		     * @property {number} [dy]
		     * @property {number} [zoom]
		     * @property {number} [originX]
		     * @property {number} [originY]
		     */

		    echarts.registerAction(actionInfo, function (payload, ecModel) {
		        ecModel.eachComponent({mainType: 'series', query: payload}, function (seriesModel) {
		            var coordSys = seriesModel.coordinateSystem;

		            var roamDetailModel = seriesModel.getModel('roamDetail');
		            var res = roamHelper.calcPanAndZoom(roamDetailModel, payload);

		            seriesModel.setRoamPan
		                && seriesModel.setRoamPan(res.x, res.y);

		            seriesModel.setRoamZoom
		                && seriesModel.setRoamZoom(res.zoom);

		            coordSys && coordSys.setPan(res.x, res.y);
		            coordSys && coordSys.setZoom(res.zoom);
		        });
		    });


	/***/ },
	/* 198 */
	/***/ function(module, exports) {

		

		    module.exports = function (ecModel) {
		        var legendModels = ecModel.findComponents({
		            mainType: 'legend'
		        });
		        if (!legendModels || !legendModels.length) {
		            return;
		        }
		        ecModel.eachSeriesByType('graph', function (graphSeries) {
		            var categoriesData = graphSeries.getCategoriesData();
		            var graph = graphSeries.getGraph();
		            var data = graph.data;

		            var categoryNames = categoriesData.mapArray(categoriesData.getName);

		            data.filterSelf(function (idx) {
		                var model = data.getItemModel(idx);
		                var category = model.getShallow('category');
		                if (category != null) {
		                    if (typeof category === 'number') {
		                        category = categoryNames[category];
		                    }
		                    // If in any legend component the status is not selected.
		                    for (var i = 0; i < legendModels.length; i++) {
		                        if (!legendModels[i].isSelected(category)) {
		                            return false;
		                        }
		                    }
		                }
		                return true;
		            });
		        }, this);
		    };


	/***/ },
	/* 199 */
	/***/ function(module, exports) {

		

		    module.exports = function (ecModel) {
		        ecModel.eachSeriesByType('graph', function (seriesModel) {
		            var colorList = seriesModel.get('color');
		            var categoriesData = seriesModel.getCategoriesData();
		            var data = seriesModel.getData();

		            var categoryNameIdxMap = {};

		            categoriesData.each(function (idx) {
		                categoryNameIdxMap[categoriesData.getName(idx)] = idx;

		                var itemModel = categoriesData.getItemModel(idx);
		                var rawIdx = categoriesData.getRawIndex(idx);
		                var color = itemModel.get('itemStyle.normal.color')
		                    || colorList[rawIdx % colorList.length];
		                categoriesData.setItemVisual(idx, 'color', color);
		            });

		            // Assign category color to visual
		            if (categoriesData.count()) {
		                data.each(function (idx) {
		                    var model = data.getItemModel(idx);
		                    var category = model.getShallow('category');
		                    if (category != null) {
		                        if (typeof category === 'string') {
		                            category = categoryNameIdxMap[category];
		                        }
		                        data.setItemVisual(
		                            idx, 'color',
		                            categoriesData.getItemVisual(category, 'color')
		                        );
		                    }
		                });
		            }
		        });
		    };


	/***/ },
	/* 200 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var simpleLayoutHelper = __webpack_require__(201);
		    module.exports = function (ecModel, api) {
		        ecModel.eachSeriesByType('graph', function (seriesModel) {
		            var layout = seriesModel.get('layout');
		            if (!layout || layout === 'none') {
		                simpleLayoutHelper(seriesModel);
		            }
		        });
		    };


	/***/ },
	/* 201 */
	/***/ function(module, exports) {

		
		    module.exports = function (seriesModel) {
		        var coordSys = seriesModel.coordinateSystem;
		        if (coordSys && coordSys.type !== 'view') {
		            return;
		        }
		        var graph = seriesModel.getGraph();

		        graph.eachNode(function (node) {
		            var model = node.getModel();
		            node.setLayout([+model.get('x'), +model.get('y')]);
		        });

		        graph.eachEdge(function (edge) {
		            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
		            var p1 = edge.node1.getLayout();
		            var p2 = edge.node2.getLayout();
		            var cp1;
		            if (curveness > 0) {
		                cp1 = [
		                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness,
		                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness
		                ];
		            }
		            edge.setLayout([p1, p2, cp1]);
		        });
		    };


	/***/ },
	/* 202 */
	/***/ function(module, exports, __webpack_require__) {

		
		    var circularLayoutHelper = __webpack_require__(203);
		    module.exports = function (ecModel, api) {
		        ecModel.eachSeriesByType('graph', function (seriesModel) {
		            if (seriesModel.get('layout') === 'circular') {
		                circularLayoutHelper(seriesModel);
		            }
		        });
		    };


	/***/ },
	/* 203 */
	/***/ function(module, exports) {

		
		    module.exports = function (seriesModel) {
		        var coordSys = seriesModel.coordinateSystem;
		        if (coordSys && coordSys.type !== 'view') {
		            return;
		        }

		        var rect = coordSys.getBoundingRect();

		        var nodeData = seriesModel.getData();
		        var graph = nodeData.graph;

		        var angle = 0;
		        var sum = nodeData.getSum('value');
		        var unitAngle = Math.PI * 2 / (sum || nodeData.count());

		        var cx = rect.width / 2 + rect.x;
		        var cy = rect.height / 2 + rect.y;

		        var r = Math.min(rect.width, rect.height) / 2;

		        graph.eachNode(function (node) {
		            var value = node.getValue('value');

		            angle += unitAngle * (sum ? value : 2) / 2;

		            node.setLayout([
		                r * Math.cos(angle) + cx,
		                r * Math.sin(angle) + cy
		            ]);

		            angle += unitAngle * (sum ? value : 2) / 2;
		        });

		        graph.eachEdge(function (edge) {
		            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
		            var p1 = edge.node1.getLayout();
		            var p2 = edge.node2.getLayout();
		            var cp1;
		            if (curveness > 0) {
		                cp1 = [cx, cy];
		            }
		            edge.setLayout([p1, p2, cp1]);
		        });
		    };


	/***/ },
	/* 204 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var forceHelper = __webpack_require__(205);
		    var numberUtil = __webpack_require__(7);
		    var simpleLayoutHelper = __webpack_require__(201);
		    var circularLayoutHelper = __webpack_require__(203);
		    var vec2 = __webpack_require__(16);

		    module.exports = function (ecModel, api) {
		        ecModel.eachSeriesByType('graph', function (graphSeries) {
		            if (graphSeries.get('layout') === 'force') {
		                var preservedPoints = graphSeries.preservedPoints || {};
		                var graph = graphSeries.getGraph();
		                var nodeData = graph.data;
		                var edgeData = graph.edgeData;
		                var forceModel = graphSeries.getModel('force');
		                var initLayout = forceModel.get('initLayout');
		                if (graphSeries.preservedPoints) {
		                    nodeData.each(function (idx) {
		                        var id = nodeData.getId(idx);
		                        nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);
		                    });
		                }
		                else if (!initLayout || initLayout === 'none') {
		                    simpleLayoutHelper(graphSeries);
		                }
		                else if (initLayout === 'circular') {
		                    circularLayoutHelper(graphSeries);
		                }

		                var nodeDataExtent = nodeData.getDataExtent('value');
		                // var edgeDataExtent = edgeData.getDataExtent('value');
		                var repulsion = forceModel.get('repulsion');
		                var edgeLength = forceModel.get('edgeLength');
		                var nodes = nodeData.mapArray('value', function (value, idx) {
		                    var point = nodeData.getItemLayout(idx);
		                    // var w = numberUtil.linearMap(value, nodeDataExtent, [0, 50]);
		                    var rep = numberUtil.linearMap(value, nodeDataExtent, [0, repulsion]) || (repulsion / 2);
		                    return {
		                        w: rep,
		                        rep: rep,
		                        p: (!point || isNaN(point[0]) || isNaN(point[1])) ? null : point
		                    };
		                });
		                var edges = edgeData.mapArray('value', function (value, idx) {
		                    var edge = graph.getEdgeByIndex(idx);
		                    // var w = numberUtil.linearMap(value, edgeDataExtent, [0, 100]);
		                    return {
		                        n1: nodes[edge.node1.dataIndex],
		                        n2: nodes[edge.node2.dataIndex],
		                        d: edgeLength,
		                        curveness: edge.getModel().get('lineStyle.normal.curveness') || 0
		                    };
		                });

		                var coordSys = graphSeries.coordinateSystem;
		                var rect = coordSys.getBoundingRect();
		                var forceInstance = forceHelper(nodes, edges, {
		                    rect: rect,
		                    gravity: forceModel.get('gravity')
		                });
		                var oldStep = forceInstance.step;
		                forceInstance.step = function (cb) {
		                    for (var i = 0, l = nodes.length; i < l; i++) {
		                        if (nodes[i].fixed) {
		                            // Write back to layout instance
		                            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());
		                        }
		                    }
		                    oldStep(function (nodes, edges, stopped) {
		                        for (var i = 0, l = nodes.length; i < l; i++) {
		                            if (!nodes[i].fixed) {
		                                graph.getNodeByIndex(i).setLayout(nodes[i].p);
		                            }
		                            preservedPoints[nodeData.getId(i)] = nodes[i].p;
		                        }
		                        for (var i = 0, l = edges.length; i < l; i++) {
		                            var e = edges[i];
		                            var p1 = e.n1.p;
		                            var p2 = e.n2.p;
		                            var points = [p1, p2];
		                            if (e.curveness > 0) {
		                                points.push([
		                                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness,
		                                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness
		                                ]);
		                            }
		                            graph.getEdgeByIndex(i).setLayout(points);
		                        }
		                        // Update layout

		                        cb && cb(stopped);
		                    });
		                };
		                graphSeries.forceLayout = forceInstance;
		                graphSeries.preservedPoints = preservedPoints;

		                // Step to get the layout
		                forceInstance.step();
		            }
		            else {
		                // Remove prev injected forceLayout instance
		                graphSeries.forceLayout = null;
		            }
		        });
		    };


	/***/ },
	/* 205 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var vec2 = __webpack_require__(16);
		    var scaleAndAdd = vec2.scaleAndAdd;

		    // function adjacentNode(n, e) {
		    //     return e.n1 === n ? e.n2 : e.n1;
		    // }

		    module.exports = function (nodes, edges, opts) {
		        var rect = opts.rect;
		        var width = rect.width;
		        var height = rect.height;
		        var center = [rect.x + width / 2, rect.y + height / 2];
		        // var scale = opts.scale || 1;
		        var gravity = opts.gravity == null ? 0.1 : opts.gravity;

		        // for (var i = 0; i < edges.length; i++) {
		        //     var e = edges[i];
		        //     var n1 = e.n1;
		        //     var n2 = e.n2;
		        //     n1.edges = n1.edges || [];
		        //     n2.edges = n2.edges || [];
		        //     n1.edges.push(e);
		        //     n2.edges.push(e);
		        // }
		        // Init position
		        for (var i = 0; i < nodes.length; i++) {
		            var n = nodes[i];
		            if (!n.p) {
		                // Use the position from first adjecent node with defined position
		                // Or use a random position
		                // From d3
		                // if (n.edges) {
		                //     var j = -1;
		                //     while (++j < n.edges.length) {
		                //         var e = n.edges[j];
		                //         var other = adjacentNode(n, e);
		                //         if (other.p) {
		                //             n.p = vec2.clone(other.p);
		                //             break;
		                //         }
		                //     }
		                // }
		                // if (!n.p) {
		                    n.p = vec2.create(
		                        width * (Math.random() - 0.5) + center[0],
		                        height * (Math.random() - 0.5) + center[1]
		                    );
		                // }
		            }
		            n.pp = vec2.clone(n.p);
		            n.edges = null;
		        }

		        // Formula in 'Graph Drawing by Force-directed Placement'
		        // var k = scale * Math.sqrt(width * height / nodes.length);
		        // var k2 = k * k;

		        var friction = 0.6;

		        return {
		            warmUp: function () {
		                friction = 0.5;
		            },

		            setFixed: function (idx) {
		                nodes[idx].fixed = true;
		            },

		            setUnfixed: function (idx) {
		                nodes[idx].fixed = false;
		            },

		            step: function (cb) {
		                var v12 = [];
		                var nLen = nodes.length;
		                for (var i = 0; i < edges.length; i++) {
		                    var e = edges[i];
		                    var n1 = e.n1;
		                    var n2 = e.n2;

		                    vec2.sub(v12, n2.p, n1.p);
		                    var d = vec2.len(v12) - e.d;
		                    var w = n2.w / (n1.w + n2.w);
		                    vec2.normalize(v12, v12);

		                    !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);
		                    !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);
		                }
		                // Gravity
		                for (var i = 0; i < nLen; i++) {
		                    var n = nodes[i];
		                    if (!n.fixed) {
		                        vec2.sub(v12, center, n.p);
		                        // var d = vec2.len(v12);
		                        // vec2.scale(v12, v12, 1 / d);
		                        // var gravityFactor = gravity;
		                        vec2.scaleAndAdd(n.p, n.p, v12, gravity * friction);
		                    }
		                }

		                // Repulsive
		                // PENDING
		                for (var i = 0; i < nLen; i++) {
		                    var n1 = nodes[i];
		                    for (var j = i + 1; j < nLen; j++) {
		                        var n2 = nodes[j];
		                        vec2.sub(v12, n2.p, n1.p);
		                        var d = vec2.len(v12);
		                        if (d === 0) {
		                            // Random repulse
		                            vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);
		                            d = 1;
		                        }
		                        var repFact = (n1.rep + n2.rep) / d / d;
		                        !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);
		                        !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);
		                    }
		                }
		                var v = [];
		                for (var i = 0; i < nLen; i++) {
		                    var n = nodes[i];
		                    if (!n.fixed) {
		                        vec2.sub(v, n.p, n.pp);
		                        vec2.scaleAndAdd(n.p, n.p, v, friction);
		                        vec2.copy(n.pp, n.p);
		                    }
		                }

		                friction = friction * 0.992;

		                cb && cb(nodes, edges, friction < 0.01);
		            }
		        };
		    };


	/***/ },
	/* 206 */
	/***/ function(module, exports, __webpack_require__) {

		
		    // FIXME Where to create the simple view coordinate system
		    var View = __webpack_require__(169);
		    var layout = __webpack_require__(21);
		    var bbox = __webpack_require__(50);

		    function getViewRect(seriesModel, api, aspect) {
		        var option = seriesModel.getBoxLayoutParams();
		        option.aspect = aspect;
		        return layout.getLayoutRect(option, {
		            width: api.getWidth(),
		            height: api.getHeight()
		        });
		    }

		    module.exports = function (ecModel, api) {
		        var viewList = [];
		        ecModel.eachSeriesByType('graph', function (seriesModel) {
		            var coordSysType = seriesModel.get('coordinateSystem');
		            if (!coordSysType || coordSysType === 'view') {
		                var viewCoordSys = new View();
		                viewList.push(viewCoordSys);

		                var data = seriesModel.getData();
		                var positions = data.mapArray(function (idx) {
		                    var itemModel = data.getItemModel(idx);
		                    return [+itemModel.get('x'), +itemModel.get('y')];
		                });

		                var min = [];
		                var max = [];

		                bbox.fromPoints(positions, min, max);

		                // FIXME If get view rect after data processed?
		                var viewRect = getViewRect(
		                    seriesModel, api, (max[0] - min[0]) / (max[1] - min[1]) || 1
		                );
		                // Position may be NaN, use view rect instead
		                if (isNaN(min[0]) || isNaN(min[1])) {
		                    min = [viewRect.x, viewRect.y];
		                    max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];
		                }

		                var bbWidth = max[0] - min[0];
		                var bbHeight = max[1] - min[1];

		                var viewWidth = viewRect.width;
		                var viewHeight = viewRect.height;

		                viewCoordSys = seriesModel.coordinateSystem = new View();

		                viewCoordSys.setBoundingRect(
		                    min[0], min[1], bbWidth, bbHeight
		                );
		                viewCoordSys.setViewRect(
		                    viewRect.x, viewRect.y, viewWidth, viewHeight
		                );

		                // Update roam info
		                var roamDetailModel = seriesModel.getModel('roamDetail');
		                viewCoordSys.setPan(roamDetailModel.get('x') || 0, roamDetailModel.get('y') || 0);
		                viewCoordSys.setZoom(roamDetailModel.get('zoom') || 1);
		            }
		        });
		        return viewList;
		    };


	/***/ },
	/* 207 */
	/***/ function(module, exports, __webpack_require__) {

		
		    __webpack_require__(208);
		    __webpack_require__(209);


	/***/ },
	/* 208 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var List = __webpack_require__(94);
		    var SeriesModel = __webpack_require__(27);
		    var zrUtil = __webpack_require__(3);

		    var GaugeSeries = SeriesModel.extend({

		        type: 'series.gauge',

		        getInitialData: function (option, ecModel) {
		            var list = new List(['value'], this);
		            var dataOpt = option.data || [];
		            if (!zrUtil.isArray(dataOpt)) {
		                dataOpt = [dataOpt];
		            }
		            // Only use the first data item
		            list.initData(dataOpt);
		            return list;
		        },

		        defaultOption: {
		            zlevel: 0,
		            z: 2,
		            // 默认全局居中
		            center: ['50%', '50%'],
		            legendHoverLink: true,
		            radius: '75%',
		            startAngle: 225,
		            endAngle: -45,
		            clockwise: true,
		            // 最小值
		            min: 0,
		            // 最大值
		            max: 100,
		            // 分割段数，默认为10
		            splitNumber: 10,
		            // 坐标轴线
		            axisLine: {
		                // 默认显示，属性show控制显示与否
		                show: true,
		                lineStyle: {       // 属性lineStyle控制线条样式
		                    color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],
		                    width: 30
		                }
		            },
		            // 分隔线
		            splitLine: {
		                // 默认显示，属性show控制显示与否
		                show: true,
		                // 属性length控制线长
		                length: 30,
		                // 属性lineStyle（详见lineStyle）控制线条样式
		                lineStyle: {
		                    color: '#eee',
		                    width: 2,
		                    type: 'solid'
		                }
		            },
		            // 坐标轴小标记
		            axisTick: {
		                // 属性show控制显示与否，默认不显示
		                show: true,
		                // 每份split细分多少段
		                splitNumber: 5,
		                // 属性length控制线长
		                length: 8,
		                // 属性lineStyle控制线条样式
		                lineStyle: {
		                    color: '#eee',
		                    width: 1,
		                    type: 'solid'
		                }
		            },
		            axisLabel: {
		                show: true,
		                // formatter: null,
		                textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
		                    color: 'auto'
		                }
		            },
		            pointer: {
		                show: true,
		                length: '80%',
		                width: 8
		            },
		            itemStyle: {
		                normal: {
		                    color: 'auto'
		                }
		            },
		            title: {
		                show: true,
		                // x, y，单位px
		                offsetCenter: [0, '-40%'],
		                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
		                textStyle: {
		                    color: '#333',
		                    fontSize: 15
		                }
		            },
		            detail: {
		                show: true,
		                backgroundColor: 'rgba(0,0,0,0)',
		                borderWidth: 0,
		                borderColor: '#ccc',
		                width: 100,
		                height: 40,
		                // x, y，单位px
		                offsetCenter: [0, '40%'],
		                // formatter: null,
		                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
		                textStyle: {
		                    color: 'auto',
		                    fontSize: 30
		                }
		            }
		        }
		    });

		    module.exports = GaugeSeries;


	/***/ },
	/* 209 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var PointerPath = __webpack_require__(210);

		    var graphic = __webpack_require__(42);
		    var numberUtil = __webpack_require__(7);
		    var parsePercent = numberUtil.parsePercent;

		    function parsePosition(seriesModel, api) {
		        var center = seriesModel.get('center');
		        var width = api.getWidth();
		        var height = api.getHeight();
		        var size = Math.min(width, height);
		        var cx = parsePercent(center[0], api.getWidth());
		        var cy = parsePercent(center[1], api.getHeight());
		        var r = parsePercent(seriesModel.get('radius'), size / 2);

		        return {
		            cx: cx,
		            cy: cy,
		            r: r
		        };
		    }

		    function formatLabel(label, labelFormatter) {
		        if (labelFormatter) {
		            if (typeof labelFormatter === 'string') {
		                label = labelFormatter.replace('{value}', label);
		            }
		            else if (typeof labelFormatter === 'function') {
		                label = labelFormatter(label);
		            }
		        }

		        return label;
		    }

		    var PI2 = Math.PI * 2;

		    var GaugeView = __webpack_require__(41).extend({

		        type: 'gauge',

		        render: function (seriesModel, ecModel, api) {

		            this.group.removeAll();

		            var colorList = seriesModel.get('axisLine.lineStyle.color');
		            var posInfo = parsePosition(seriesModel, api);

		            this._renderMain(
		                seriesModel, ecModel, api, colorList, posInfo
		            );
		        },

		        _renderMain: function (seriesModel, ecModel, api, colorList, posInfo) {
		            var group = this.group;

		            var axisLineModel = seriesModel.getModel('axisLine');
		            var lineStyleModel = axisLineModel.getModel('lineStyle');

		            var clockwise = seriesModel.get('clockwise');
		            var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;
		            var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;

		            var angleRangeSpan = (endAngle - startAngle) % PI2;

		            var prevEndAngle = startAngle;
		            var axisLineWidth = lineStyleModel.get('width');

		            for (var i = 0; i < colorList.length; i++) {
		                var endAngle = startAngle + angleRangeSpan * colorList[i][0];
		                var sector = new graphic.Sector({
		                    shape: {
		                        startAngle: prevEndAngle,
		                        endAngle: endAngle,
		                        cx: posInfo.cx,
		                        cy: posInfo.cy,
		                        clockwise: clockwise,
		                        r0: posInfo.r - axisLineWidth,
		                        r: posInfo.r
		                    },
		                    silent: true
		                });

		                sector.setStyle({
		                    fill: colorList[i][1]
		                });

		                sector.setStyle(lineStyleModel.getLineStyle(
		                    // Because we use sector to simulate arc
		                    // so the properties for stroking are useless
		                    ['color', 'borderWidth', 'borderColor']
		                ));

		                group.add(sector);

		                prevEndAngle = endAngle;
		            }

		            var getColor = function (percent) {
		                // Less than 0
		                if (percent <= 0) {
		                    return colorList[0][1];
		                }
		                for (var i = 0; i < colorList.length; i++) {
		                    if (colorList[i][0] >= percent
		                        && (i === 0 ? 0 : colorList[i - 1][0]) < percent
		                    ) {
		                        return colorList[i][1];
		                    }
		                }
		                // More than 1
		                return colorList[i - 1][1];
		            };

		            if (!clockwise) {
		                var tmp = startAngle;
		                startAngle = endAngle;
		                endAngle = tmp;
		            }

		            this._renderTicks(
		                seriesModel, ecModel, api, getColor, posInfo,
		                startAngle, endAngle, clockwise
		            );

		            this._renderPointer(
		                seriesModel, ecModel, api, getColor, posInfo,
		                startAngle, endAngle, clockwise
		            );

		            this._renderTitle(
		                seriesModel, ecModel, api, getColor, posInfo
		            );
		            this._renderDetail(
		                seriesModel, ecModel, api, getColor, posInfo
		            );
		        },

		        _renderTicks: function (
		            seriesModel, ecModel, api, getColor, posInfo,
		            startAngle, endAngle, clockwise
		        ) {
		            var group = this.group;
		            var cx = posInfo.cx;
		            var cy = posInfo.cy;
		            var r = posInfo.r;

		            var minVal = seriesModel.get('min');
		            var maxVal = seriesModel.get('max');

		            var splitLineModel = seriesModel.getModel('splitLine');
		            var tickModel = seriesModel.getModel('axisTick');
		            var labelModel = seriesModel.getModel('axisLabel');

		            var splitNumber = seriesModel.get('splitNumber');
		            var subSplitNumber = tickModel.get('splitNumber');

		            var splitLineLen = parsePercent(
		                splitLineModel.get('length'), r
		            );
		            var tickLen = parsePercent(
		                tickModel.get('length'), r
		            );

		            var angle = startAngle;
		            var step = (endAngle - startAngle) / splitNumber;
		            var subStep = step / subSplitNumber;

		            var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();
		            var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();
		            var textStyleModel = labelModel.getModel('textStyle');

		            for (var i = 0; i <= splitNumber; i++) {
		                var unitX = Math.cos(angle);
		                var unitY = Math.sin(angle);
		                // Split line
		                if (splitLineModel.get('show')) {
		                    var splitLine = new graphic.Line({
		                        shape: {
		                            x1: unitX * r + cx,
		                            y1: unitY * r + cy,
		                            x2: unitX * (r - splitLineLen) + cx,
		                            y2: unitY * (r - splitLineLen) + cy
		                        },
		                        style: splitLineStyle,
		                        silent: true
		                    });
		                    if (splitLineStyle.stroke === 'auto') {
		                        splitLine.setStyle({
		                            stroke: getColor(i / splitNumber)
		                        });
		                    }

		                    group.add(splitLine);
		                }

		                // Label
		                if (labelModel.get('show')) {
		                    var label = formatLabel(
		                        numberUtil.round(i / splitNumber * (maxVal - minVal) + minVal),
		                        labelModel.get('formatter')
		                    );

		                    var text = new graphic.Text({
		                        style: {
		                            text: label,
		                            x: unitX * (r - splitLineLen - 5) + cx,
		                            y: unitY * (r - splitLineLen - 5) + cy,
		                            fill: textStyleModel.getTextColor(),
		                            textFont: textStyleModel.getFont(),
		                            textVerticalAlign: unitY < -0.4 ? 'top' : (unitY > 0.4 ? 'bottom' : 'middle'),
		                            textAlign: unitX < -0.4 ? 'left' : (unitX > 0.4 ? 'right' : 'center')
		                        },
		                        silent: true
		                    });
		                    if (text.style.fill === 'auto') {
		                        text.setStyle({
		                            fill: getColor(i / splitNumber)
		                        });
		                    }

		                    group.add(text);
		                }

		                // Axis tick
		                if (tickModel.get('show') && i !== splitNumber) {
		                    for (var j = 0; j <= subSplitNumber; j++) {
		                        var unitX = Math.cos(angle);
		                        var unitY = Math.sin(angle);
		                        var tickLine = new graphic.Line({
		                            shape: {
		                                x1: unitX * r + cx,
		                                y1: unitY * r + cy,
		                                x2: unitX * (r - tickLen) + cx,
		                                y2: unitY * (r - tickLen) + cy
		                            },
		                            silent: true,
		                            style: tickLineStyle
		                        });

		                        if (tickLineStyle.stroke === 'auto') {
		                            tickLine.setStyle({
		                                stroke: getColor((i + j / subSplitNumber) / splitNumber)
		                            });
		                        }

		                        group.add(tickLine);
		                        angle += subStep;
		                    }
		                    angle -= subStep;
		                }
		                else {
		                    angle += step;
		                }
		            }
		        },

		        _renderPointer: function (
		            seriesModel, ecModel, api, getColor, posInfo,
		            startAngle, endAngle, clockwise
		        ) {
		            var linearMap = numberUtil.linearMap;
		            var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];
		            var angleExtent = [startAngle, endAngle];

		            if (!clockwise) {
		                angleExtent = angleExtent.reverse();
		            }

		            var data = seriesModel.getData();
		            var oldData = this._data;

		            var group = this.group;

		            data.diff(oldData)
		                .add(function (idx) {
		                    var pointer = new PointerPath({
		                        shape: {
		                            angle: startAngle
		                        }
		                    });

		                    graphic.updateProps(pointer, {
		                        shape: {
		                            angle: linearMap(data.get('value', idx), valueExtent, angleExtent)
		                        }
		                    }, seriesModel);

		                    group.add(pointer);
		                    data.setItemGraphicEl(idx, pointer);
		                })
		                .update(function (newIdx, oldIdx) {
		                    var pointer = oldData.getItemGraphicEl(oldIdx);

		                    graphic.updateProps(pointer, {
		                        shape: {
		                            angle: linearMap(data.get('value', newIdx), valueExtent, angleExtent)
		                        }
		                    }, seriesModel);

		                    group.add(pointer);
		                    data.setItemGraphicEl(newIdx, pointer);
		                })
		                .remove(function (idx) {
		                    var pointer = oldData.getItemGraphicEl(idx);
		                    group.remove(pointer);
		                })
		                .execute();

		            data.eachItemGraphicEl(function (pointer, idx) {
		                var itemModel = data.getItemModel(idx);
		                var pointerModel = itemModel.getModel('pointer');

		                pointer.attr({
		                    shape: {
		                        x: posInfo.cx,
		                        y: posInfo.cy,
		                        width: parsePercent(
		                            pointerModel.get('width'), posInfo.r
		                        ),
		                        r: parsePercent(pointerModel.get('length'), posInfo.r)
		                    },
		                    style: itemModel.getModel('itemStyle.normal').getItemStyle()
		                });

		                if (pointer.style.fill === 'auto') {
		                    pointer.setStyle('fill', getColor(
		                        (data.get('value', idx) - valueExtent[0]) / (valueExtent[1] - valueExtent[0])
		                    ));
		                }

		                graphic.setHoverStyle(
		                    pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle()
		                );
		            });

		            this._data = data;
		        },

		        _renderTitle: function (
		            seriesModel, ecModel, api, getColor, posInfo
		        ) {
		            var titleModel = seriesModel.getModel('title');
		            if (titleModel.get('show')) {
		                var textStyleModel = titleModel.getModel('textStyle');
		                var offsetCenter = titleModel.get('offsetCenter');
		                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
		                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
		                var text = new graphic.Text({
		                    style: {
		                        x: x,
		                        y: y,
		                        // FIXME First data name ?
		                        text: seriesModel.getData().getName(0),
		                        fill: textStyleModel.getTextColor(),
		                        textFont: textStyleModel.getFont(),
		                        textAlign: 'center',
		                        textVerticalAlign: 'middle'
		                    }
		                });
		                this.group.add(text);
		            }
		        },

		        _renderDetail: function (
		            seriesModel, ecModel, api, getColor, posInfo
		        ) {
		            var detailModel = seriesModel.getModel('detail');
		            var minVal = seriesModel.get('min');
		            var maxVal = seriesModel.get('max');
		            if (detailModel.get('show')) {
		                var textStyleModel = detailModel.getModel('textStyle');
		                var offsetCenter = detailModel.get('offsetCenter');
		                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
		                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
		                var width = parsePercent(detailModel.get('width'), posInfo.r);
		                var height = parsePercent(detailModel.get('height'), posInfo.r);
		                var value = seriesModel.getData().get('value', 0);
		                var rect = new graphic.Rect({
		                    shape: {
		                        x: x - width / 2,
		                        y: y - height / 2,
		                        width: width,
		                        height: height
		                    },
		                    style: {
		                        text: formatLabel(
		                            // FIXME First data name ?
		                            value, detailModel.get('formatter')
		                        ),
		                        fill: detailModel.get('backgroundColor'),
		                        textFill: textStyleModel.getTextColor(),
		                        textFont: textStyleModel.getFont()
		                    }
		                });
		                if (rect.style.textFill === 'auto') {
		                    rect.setStyle('textFill', getColor((value - minVal) / (maxVal - minVal)));
		                }
		                rect.setStyle(detailModel.getItemStyle(['color']));
		                this.group.add(rect);
		            }
		        }
		    });

		    module.exports = GaugeView;


	/***/ },
	/* 210 */
	/***/ function(module, exports, __webpack_require__) {

		

		    module.exports = __webpack_require__(44).extend({

		        type: 'echartsGaugePointer',

		        shape: {
		            angle: 0,

		            width: 10,

		            r: 10,

		            x: 0,

		            y: 0
		        },

		        buildPath: function (ctx, shape) {
		            var mathCos = Math.cos;
		            var mathSin = Math.sin;

		            var r = shape.r;
		            var width = shape.width;
		            var angle = shape.angle;
		            var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);
		            var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);

		            angle = shape.angle - Math.PI / 2;
		            ctx.moveTo(x, y);
		            ctx.lineTo(
		                shape.x + mathCos(angle) * width,
		                shape.y + mathSin(angle) * width
		            );
		            ctx.lineTo(
		                shape.x + mathCos(shape.angle) * r,
		                shape.y + mathSin(shape.angle) * r
		            );
		            ctx.lineTo(
		                shape.x - mathCos(angle) * width,
		                shape.y - mathSin(angle) * width
		            );
		            ctx.lineTo(x, y);
		            return;
		        }
		    });


	/***/ },
	/* 211 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var echarts = __webpack_require__(1);

		    __webpack_require__(212);
		    __webpack_require__(213);

		    echarts.registerVisualCoding(
		        'chart',  zrUtil.curry(__webpack_require__(137), 'funnel')
		    );
		    echarts.registerLayout(__webpack_require__(214));

		    echarts.registerProcessor(
		        'filter', zrUtil.curry(__webpack_require__(140), 'funnel')
		    );


	/***/ },
	/* 212 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var List = __webpack_require__(94);
		    var modelUtil = __webpack_require__(5);
		    var completeDimensions = __webpack_require__(96);

		    var FunnelSeries = __webpack_require__(1).extendSeriesModel({

		        type: 'series.funnel',

		        init: function (option) {
		            FunnelSeries.superApply(this, 'init', arguments);

		            // Enable legend selection for each data item
		            // Use a function instead of direct access because data reference may changed
		            this.legendDataProvider = function () {
		                return this._dataBeforeProcessed;
		            };
		            // Extend labelLine emphasis
		            this._defaultLabelLine(option);
		        },

		        getInitialData: function (option, ecModel) {
		            var dimensions = completeDimensions(['value'], option.data);
		            var list = new List(dimensions, this);
		            list.initData(option.data);
		            return list;
		        },

		        _defaultLabelLine: function (option) {
		            // Extend labelLine emphasis
		            modelUtil.defaultEmphasis(option.labelLine, ['show']);

		            var labelLineNormalOpt = option.labelLine.normal;
		            var labelLineEmphasisOpt = option.labelLine.emphasis;
		            // Not show label line if `label.normal.show = false`
		            labelLineNormalOpt.show = labelLineNormalOpt.show
		                && option.label.normal.show;
		            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show
		                && option.label.emphasis.show;
		        },

		        defaultOption: {
		            zlevel: 0,                  // 一级层叠
		            z: 2,                       // 二级层叠
		            legendHoverLink: true,
		            left: 80,
		            top: 60,
		            right: 80,
		            bottom: 60,
		            // width: {totalWidth} - left - right,
		            // height: {totalHeight} - top - bottom,

		            // 默认取数据最小最大值
		            // min: 0,
		            // max: 100,
		            minSize: '0%',
		            maxSize: '100%',
		            sort: 'descending', // 'ascending', 'descending'
		            gap: 0,
		            funnelAlign: 'center',
		            label: {
		                normal: {
		                    show: true,
		                    position: 'outer'
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		                },
		                emphasis: {
		                    show: true
		                }
		            },
		            labelLine: {
		                normal: {
		                    show: true,
		                    length: 20,
		                    lineStyle: {
		                        // color: 各异,
		                        width: 1,
		                        type: 'solid'
		                    }
		                },
		                emphasis: {}
		            },
		            itemStyle: {
		                normal: {
		                    // color: 各异,
		                    borderColor: '#fff',
		                    borderWidth: 1
		                },
		                emphasis: {
		                    // color: 各异,
		                }
		            }
		        }
		    });

		    module.exports = FunnelSeries;


	/***/ },
	/* 213 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);

		    /**
		     * Piece of pie including Sector, Label, LabelLine
		     * @constructor
		     * @extends {module:zrender/graphic/Group}
		     */
		    function FunnelPiece(data, idx) {

		        graphic.Group.call(this);

		        var polygon = new graphic.Polygon();
		        var labelLine = new graphic.Polyline();
		        var text = new graphic.Text();
		        this.add(polygon);
		        this.add(labelLine);
		        this.add(text);

		        this.updateData(data, idx, true);

		        // Hover to change label and labelLine
		        function onEmphasis() {
		            labelLine.ignore = labelLine.hoverIgnore;
		            text.ignore = text.hoverIgnore;
		        }
		        function onNormal() {
		            labelLine.ignore = labelLine.normalIgnore;
		            text.ignore = text.normalIgnore;
		        }
		        this.on('emphasis', onEmphasis)
		            .on('normal', onNormal)
		            .on('mouseover', onEmphasis)
		            .on('mouseout', onNormal);
		    }

		    var funnelPieceProto = FunnelPiece.prototype;

		    function getLabelStyle(data, idx, state, labelModel) {
		        var textStyleModel = labelModel.getModel('textStyle');
		        var position = labelModel.get('position');
		        var isLabelInside = position === 'inside' || position === 'inner' || position === 'center';
		        return {
		            fill: textStyleModel.getTextColor()
		                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
		            textFont: textStyleModel.getFont(),
		            text: zrUtil.retrieve(
		                data.hostModel.getFormattedLabel(idx, state),
		                data.getName(idx)
		            )
		        };
		    }

		    var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];
		    funnelPieceProto.updateData = function (data, idx, firstCreate) {

		        var polygon = this.childAt(0);

		        var seriesModel = data.hostModel;
		        var itemModel = data.getItemModel(idx);
		        var layout = data.getItemLayout(idx);
		        var opacity = data.getItemModel(idx).get(opacityAccessPath);
		        opacity = opacity == null ? 1 : opacity;
		        if (firstCreate) {
		            polygon.setShape({
		                points: layout.points
		            });
		            polygon.setStyle({ opacity : 0 });
		            graphic.updateProps(polygon, {
		                style: {
		                    opacity: opacity
		                }
		            }, seriesModel);
		        }
		        else {
		            graphic.initProps(polygon, {
		                shape: {
		                    points: layout.points
		                }
		            }, seriesModel);
		        }

		        // Update common style
		        var itemStyleModel = itemModel.getModel('itemStyle');
		        var visualColor = data.getItemVisual(idx, 'color');

		        polygon.setStyle(
		            zrUtil.defaults(
		                {
		                    fill: visualColor
		                },
		                itemStyleModel.getModel('normal').getItemStyle()
		            )
		        );
		        polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

		        this._updateLabel(data, idx);

		        graphic.setHoverStyle(this);
		    };

		    funnelPieceProto._updateLabel = function (data, idx) {

		        var labelLine = this.childAt(1);
		        var labelText = this.childAt(2);

		        var seriesModel = data.hostModel;
		        var itemModel = data.getItemModel(idx);
		        var layout = data.getItemLayout(idx);
		        var labelLayout = layout.label;
		        var visualColor = data.getItemVisual(idx, 'color');

		        graphic.updateProps(labelLine, {
		            shape: {
		                points: labelLayout.linePoints || labelLayout.linePoints
		            }
		        }, seriesModel);

		        graphic.updateProps(labelText, {
		            style: {
		                x: labelLayout.x,
		                y: labelLayout.y
		            }
		        }, seriesModel);
		        labelText.attr({
		            style: {
		                textAlign: labelLayout.textAlign,
		                textVerticalAlign: labelLayout.verticalAlign,
		                textFont: labelLayout.font
		            },
		            rotation: labelLayout.rotation,
		            origin: [labelLayout.x, labelLayout.y],
		            z2: 10
		        });

		        var labelModel = itemModel.getModel('label.normal');
		        var labelHoverModel = itemModel.getModel('label.emphasis');
		        var labelLineModel = itemModel.getModel('labelLine.normal');
		        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');

		        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel));

		        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
		        labelText.hoverIgnore = !labelHoverModel.get('show');

		        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
		        labelLine.hoverIgnore = !labelLineHoverModel.get('show');

		        // Default use item visual color
		        labelLine.setStyle({
		            stroke: visualColor
		        });
		        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());

		        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel);
		        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
		    };

		    zrUtil.inherits(FunnelPiece, graphic.Group);


		    var Funnel = __webpack_require__(41).extend({

		        type: 'funnel',

		        render: function (seriesModel, ecModel, api) {
		            var data = seriesModel.getData();
		            var oldData = this._data;

		            var group = this.group;

		            data.diff(oldData)
		                .add(function (idx) {
		                    var funnelPiece = new FunnelPiece(data, idx);

		                    data.setItemGraphicEl(idx, funnelPiece);

		                    group.add(funnelPiece);
		                })
		                .update(function (newIdx, oldIdx) {
		                    var piePiece = oldData.getItemGraphicEl(oldIdx);

		                    piePiece.updateData(data, newIdx);

		                    group.add(piePiece);
		                    data.setItemGraphicEl(newIdx, piePiece);
		                })
		                .remove(function (idx) {
		                    var piePiece = oldData.getItemGraphicEl(idx);
		                    group.remove(piePiece);
		                })
		                .execute();

		            this._data = data;
		        },

		        remove: function () {
		            this.group.removeAll();
		            this._data = null;
		        }
		    });

		    module.exports = Funnel;


	/***/ },
	/* 214 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var layout = __webpack_require__(21);
		    var number = __webpack_require__(7);

		    var parsePercent = number.parsePercent;

		    function getViewRect(seriesModel, api) {
		        return layout.getLayoutRect(
		            seriesModel.getBoxLayoutParams(), {
		                width: api.getWidth(),
		                height: api.getHeight()
		            }
		        );
		    }

		    function getSortedIndices(data, sort) {
		        var valueArr = data.mapArray('value', function (val) {
		            return val;
		        });
		        var indices = [];
		        var isAscending = sort === 'ascending';
		        for (var i = 0, len = data.count(); i < len; i++) {
		            indices[i] = i;
		        }
		        indices.sort(function (a, b) {
		            return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];
		        });
		        return indices;
		    }

		    function labelLayout (data) {
		        data.each(function (idx) {
		            var itemModel = data.getItemModel(idx);
		            var labelModel = itemModel.getModel('label.normal');
		            var labelPosition = labelModel.get('position');

		            var labelLineModel = itemModel.getModel('labelLine.normal');

		            var layout = data.getItemLayout(idx);
		            var points = layout.points;

		            var isLabelInside = labelPosition === 'inner'
		                || labelPosition === 'inside' || labelPosition === 'center';

		            var textAlign;
		            var textX;
		            var textY;
		            var linePoints;

		            if (isLabelInside) {
		                textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;
		                textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;
		                textAlign = 'center';
		                linePoints = [
		                    [textX, textY], [textX, textY]
		                ];
		            }
		            else {
		                var x1;
		                var y1;
		                var x2;
		                var labelLineLen = labelLineModel.get('length');
		                if (labelPosition === 'left') {
		                    // Left side
		                    x1 = (points[3][0] + points[0][0]) / 2;
		                    y1 = (points[3][1] + points[0][1]) / 2;
		                    x2 = x1 - labelLineLen;
		                    textX = x2 - 5;
		                    textAlign = 'right';
		                }
		                else {
		                    // Right side
		                    x1 = (points[1][0] + points[2][0]) / 2;
		                    y1 = (points[1][1] + points[2][1]) / 2;
		                    x2 = x1 + labelLineLen;
		                    textX = x2 + 5;
		                    textAlign = 'left';
		                }
		                var y2 = y1;

		                linePoints = [[x1, y1], [x2, y2]];
		                textY = y2;
		            }

		            layout.label = {
		                linePoints: linePoints,
		                x: textX,
		                y: textY,
		                verticalAlign: 'middle',
		                textAlign: textAlign,
		                inside: isLabelInside
		            };
		        });
		    }

		    module.exports = function (ecModel, api) {
		        ecModel.eachSeriesByType('funnel', function (seriesModel) {
		            var data = seriesModel.getData();
		            var sort = seriesModel.get('sort');
		            var viewRect = getViewRect(seriesModel, api);
		            var indices = getSortedIndices(data, sort);

		            var sizeExtent = [
		                parsePercent(seriesModel.get('minSize'), viewRect.width),
		                parsePercent(seriesModel.get('maxSize'), viewRect.width)
		            ];
		            var dataExtent = data.getDataExtent('value');
		            var min = seriesModel.get('min');
		            var max = seriesModel.get('max');
		            if (min == null) {
		                min = Math.min(dataExtent[0], 0);
		            }
		            if (max == null) {
		                max = dataExtent[1];
		            }

		            var funnelAlign = seriesModel.get('funnelAlign');
		            var gap = seriesModel.get('gap');
		            var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();

		            var y = viewRect.y;

		            var getLinePoints = function (idx, offY) {
		                // End point index is data.count() and we assign it 0
		                var val = data.get('value', idx) || 0;
		                var itemWidth = number.linearMap(val, [min, max], sizeExtent, true);
		                var x0;
		                switch (funnelAlign) {
		                    case 'left':
		                        x0 = viewRect.x;
		                        break;
		                    case 'center':
		                        x0 = viewRect.x + (viewRect.width - itemWidth) / 2;
		                        break;
		                    case 'right':
		                        x0 = viewRect.x + viewRect.width - itemWidth;
		                        break;
		                }
		                return [
		                    [x0, offY],
		                    [x0 + itemWidth, offY]
		                ];
		            };

		            if (sort === 'ascending') {
		                // From bottom to top
		                itemHeight = -itemHeight;
		                gap = -gap;
		                y += viewRect.height;
		                indices = indices.reverse();
		            }

		            for (var i = 0; i < indices.length; i++) {
		                var idx = indices[i];
		                var nextIdx = indices[i + 1];
		                var start = getLinePoints(idx, y);
		                var end = getLinePoints(nextIdx, y + itemHeight);

		                y += itemHeight + gap;

		                data.setItemLayout(idx, {
		                    points: start.concat(end.slice().reverse())
		                });
		            }

		            labelLayout(data);
		        });
		    };


	/***/ },
	/* 215 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);

		    __webpack_require__(216);

		    __webpack_require__(227);
		    __webpack_require__(228);

		    echarts.registerVisualCoding('chart', __webpack_require__(229));



	/***/ },
	/* 216 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(217);
		    __webpack_require__(220);
		    __webpack_require__(222);

		    var echarts = __webpack_require__(1);

		    // Parallel view
		    echarts.extendComponentView({
		        type: 'parallel'
		    });

		    echarts.registerPreprocessor(
		        __webpack_require__(226)
		    );



	/***/ },
	/* 217 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Parallel coordinate system creater.
		 */


		    var Parallel = __webpack_require__(218);

		    function create(ecModel, api) {
		        var coordSysList = [];

		        ecModel.eachComponent('parallel', function (parallelModel, idx) {
		            var coordSys = new Parallel(parallelModel, ecModel, api);

		            coordSys.name = 'parallel_' + idx;
		            coordSys.resize(parallelModel, api);

		            parallelModel.coordinateSystem = coordSys;
		            coordSys.model = parallelModel;

		            coordSysList.push(coordSys);
		        });

		        // Inject the coordinateSystems into seriesModel
		        ecModel.eachSeries(function (seriesModel) {
		            if (seriesModel.get('coordinateSystem') === 'parallel') {
		                var parallelIndex = seriesModel.get('parallelIndex');
		                seriesModel.coordinateSystem = coordSysList[parallelIndex];
		            }
		        });

		        return coordSysList;
		    }

		    __webpack_require__(25).register('parallel', {create: create});



	/***/ },
	/* 218 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Parallel Coordinates
		 * <https://en.wikipedia.org/wiki/Parallel_coordinates>
		 */


		    var layout = __webpack_require__(21);
		    var axisHelper = __webpack_require__(108);
		    var zrUtil = __webpack_require__(3);
		    var ParallelAxis = __webpack_require__(219);
		    var matrix = __webpack_require__(17);
		    var vector = __webpack_require__(16);

		    var each = zrUtil.each;

		    var PI = Math.PI;

		    function Parallel(parallelModel, ecModel, api) {

		        /**
		         * key: dimension
		         * @type {Object.<string, module:echarts/coord/parallel/Axis>}
		         * @private
		         */
		        this._axesMap = {};

		        /**
		         * key: dimension
		         * value: {position: [], rotation, }
		         * @type {Object.<string, Object>}
		         * @private
		         */
		        this._axesLayout = {};

		        /**
		         * Always follow axis order.
		         * @type {Array.<string>}
		         * @readOnly
		         */
		        this.dimensions = parallelModel.dimensions;

		        /**
		         * @type {module:zrender/core/BoundingRect}
		         */
		        this._rect;

		        /**
		         * @type {module:echarts/coord/parallel/ParallelModel}
		         */
		        this._model = parallelModel;

		        this._init(parallelModel, ecModel, api);
		    }

		    Parallel.prototype = {

		        type: 'parallel',

		        constructor: Parallel,

		        /**
		         * Initialize cartesian coordinate systems
		         * @private
		         */
		        _init: function (parallelModel, ecModel, api) {

		            var dimensions = parallelModel.dimensions;
		            var parallelAxisIndex = parallelModel.parallelAxisIndex;

		            each(dimensions, function (dim, idx) {

		                var axisIndex = parallelAxisIndex[idx];
		                var axisModel = ecModel.getComponent('parallelAxis', axisIndex);

		                var axis = this._axesMap[dim] = new ParallelAxis(
		                    dim,
		                    axisHelper.createScaleByModel(axisModel),
		                    [0, 0],
		                    axisModel.get('type'),
		                    axisIndex
		                );

		                var isCategory = axis.type === 'category';
		                axis.onBand = isCategory && axisModel.get('boundaryGap');
		                axis.inverse = axisModel.get('inverse');

		                // Inject axis into axisModel
		                axisModel.axis = axis;

		                // Inject axisModel into axis
		                axis.model = axisModel;
		            }, this);
		        },

		        /**
		         * Update axis scale after data processed
		         * @param  {module:echarts/model/Global} ecModel
		         * @param  {module:echarts/ExtensionAPI} api
		         */
		        update: function (ecModel, api) {
		            this._updateAxesFromSeries(this._model, ecModel);
		        },

		        /**
		         * Update properties from series
		         * @private
		         */
		        _updateAxesFromSeries: function (parallelModel, ecModel) {
		            ecModel.eachSeries(function (seriesModel) {

		                if (!parallelModel.contains(seriesModel, ecModel)) {
		                    return;
		                }

		                var data = seriesModel.getData();

		                each(this.dimensions, function (dim) {
		                    var axis = this._axesMap[dim];
		                    axis.scale.unionExtent(data.getDataExtent(dim));
		                    axisHelper.niceScaleExtent(axis, axis.model);
		                }, this);
		            }, this);
		        },

		        /**
		         * Resize the parallel coordinate system.
		         * @param {module:echarts/coord/parallel/ParallelModel} parallelModel
		         * @param {module:echarts/ExtensionAPI} api
		         */
		        resize: function (parallelModel, api) {
		            this._rect = layout.getLayoutRect(
		                parallelModel.getBoxLayoutParams(),
		                {
		                    width: api.getWidth(),
		                    height: api.getHeight()
		                }
		            );

		            this._layoutAxes(parallelModel);
		        },

		        /**
		         * @return {module:zrender/core/BoundingRect}
		         */
		        getRect: function () {
		            return this._rect;
		        },

		        /**
		         * @private
		         */
		        _layoutAxes: function (parallelModel) {
		            var rect = this._rect;
		            var layout = parallelModel.get('layout');
		            var axes = this._axesMap;
		            var dimensions = this.dimensions;

		            var size = [rect.width, rect.height];
		            var sizeIdx = layout === 'horizontal' ? 0 : 1;
		            var layoutLength = size[sizeIdx];
		            var axisLength = size[1 - sizeIdx];
		            var axisExtent = [0, axisLength];

		            each(axes, function (axis) {
		                var idx = axis.inverse ? 1 : 0;
		                axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);
		            });

		            each(dimensions, function (dim, idx) {
		                var pos = layoutLength * idx / (dimensions.length - 1);

		                var positionTable = {
		                    horizontal: {
		                        x: pos,
		                        y: axisLength
		                    },
		                    vertical: {
		                        x: 0,
		                        y: pos
		                    }
		                };
		                var rotationTable = {
		                    horizontal: PI / 2,
		                    vertical: 0
		                };

		                var position = [
		                    positionTable[layout].x + rect.x,
		                    positionTable[layout].y + rect.y
		                ];

		                var rotation = rotationTable[layout];
		                var transform = matrix.create();
		                matrix.rotate(transform, transform, rotation);
		                matrix.translate(transform, transform, position);

		                // TODO
		                // tick等排布信息。

		                // TODO
		                // 根据axis order 更新 dimensions顺序。

		                this._axesLayout[dim] = {
		                    position: position,
		                    rotation: rotation,
		                    transform: transform,
		                    tickDirection: 1,
		                    labelDirection: 1
		                };
		            }, this);
		        },

		        /**
		         * Get axis by dim.
		         * @param {string} dim
		         * @return {module:echarts/coord/parallel/ParallelAxis} [description]
		         */
		        getAxis: function (dim) {
		            return this._axesMap[dim];
		        },

		        /**
		         * Convert a dim value of a single item of series data to Point.
		         * @param {*} value
		         * @param {string} dim
		         * @return {Array}
		         */
		        dataToPoint: function (value, dim) {
		            return this.axisCoordToPoint(
		                this._axesMap[dim].dataToCoord(value),
		                dim
		            );
		        },

		        /**
		         * @param {module:echarts/data/List} data
		         * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'
		         *                            {number} dataIndex
		         * @param {Object} context
		         */
		        eachActiveState: function (data, callback, context) {
		            var dimensions = this.dimensions;
		            var axesMap = this._axesMap;
		            var hasActiveSet = false;

		            for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
		                if (axesMap[dimensions[j]].model.getActiveState() !== 'normal') {
		                    hasActiveSet = true;
		                }
		            }

		            for (var i = 0, len = data.count(); i < len; i++) {
		                var values = data.getValues(dimensions, i);
		                var activeState;

		                if (!hasActiveSet) {
		                    activeState = 'normal';
		                }
		                else {
		                    activeState = 'active';
		                    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
		                        var dimName = dimensions[j];
		                        var state = axesMap[dimName].model.getActiveState(values[j], j);

		                        if (state === 'inactive') {
		                            activeState = 'inactive';
		                            break;
		                        }
		                    }
		                }

		                callback.call(context, activeState, i);
		            }
		        },

		        /**
		         * Convert coords of each axis to Point.
		         *  Return point. For example: [10, 20]
		         * @param {Array.<number>} coords
		         * @param {string} dim
		         * @return {Array.<number>}
		         */
		        axisCoordToPoint: function (coord, dim) {
		            var axisLayout = this._axesLayout[dim];
		            var point = [coord, 0];
		            vector.applyTransform(point, point, axisLayout.transform);
		            return point;
		        },

		        /**
		         * Get axis layout.
		         */
		        getAxisLayout: function (dim) {
		            return zrUtil.clone(this._axesLayout[dim]);
		        }

		    };

		    module.exports = Parallel;


	/***/ },
	/* 219 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var Axis = __webpack_require__(117);

		    /**
		     * @constructor module:echarts/coord/parallel/ParallelAxis
		     * @extends {module:echarts/coord/Axis}
		     * @param {string} dim
		     * @param {*} scale
		     * @param {Array.<number>} coordExtent
		     * @param {string} axisType
		     */
		    var ParallelAxis = function (dim, scale, coordExtent, axisType, axisIndex) {

		        Axis.call(this, dim, scale, coordExtent);

		        /**
		         * Axis type
		         *  - 'category'
		         *  - 'value'
		         *  - 'time'
		         *  - 'log'
		         * @type {string}
		         */
		        this.type = axisType || 'value';

		        /**
		         * @type {number}
		         * @readOnly
		         */
		        this.axisIndex = axisIndex;
		    };

		    ParallelAxis.prototype = {

		        constructor: ParallelAxis,

		        /**
		         * Axis model
		         * @param {module:echarts/coord/parallel/AxisModel}
		         */
		        model: null

		    };

		    zrUtil.inherits(ParallelAxis, Axis);

		    module.exports = ParallelAxis;


	/***/ },
	/* 220 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var Component = __webpack_require__(19);

		    __webpack_require__(221);

		    Component.extend({

		        type: 'parallel',

		        dependencies: ['parallelAxis'],

		        /**
		         * @type {module:echarts/coord/parallel/Parallel}
		         */
		        coordinateSystem: null,

		        /**
		         * Each item like: 'dim0', 'dim1', 'dim2', ...
		         * @type {Array.<string>}
		         * @readOnly
		         */
		        dimensions: null,

		        /**
		         * Coresponding to dimensions.
		         * @type {Array.<number>}
		         * @readOnly
		         */
		        parallelAxisIndex: null,

		        defaultOption: {
		            zlevel: 0,                  // 一级层叠
		            z: 0,                       // 二级层叠
		            left: 80,
		            top: 60,
		            right: 80,
		            bottom: 60,
		            // width: {totalWidth} - left - right,
		            // height: {totalHeight} - top - bottom,

		            layout: 'horizontal',      // 'horizontal' or 'vertical'

		            parallelAxisDefault: null
		        },

		        /**
		         * @override
		         */
		        init: function () {
		            Component.prototype.init.apply(this, arguments);

		            this.mergeOption({});
		        },

		        /**
		         * @override
		         */
		        mergeOption: function (newOption) {
		            var thisOption = this.option;

		            newOption && zrUtil.merge(thisOption, newOption, true);

		            this._initDimensions();
		        },

		        /**
		         * Whether series or axis is in this coordinate system.
		         * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model
		         * @param {module:echarts/model/Global} ecModel
		         */
		        contains: function (model, ecModel) {
		            var parallelIndex = model.get('parallelIndex');
		            return parallelIndex != null
		                && ecModel.getComponent('parallel', parallelIndex) === this;
		        },

		        /**
		         * @private
		         */
		        _initDimensions: function () {
		            var dimensions = this.dimensions = [];
		            var parallelAxisIndex = this.parallelAxisIndex = [];

		            var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {
		                // Can not use this.contains here, because
		                // initialization has not been completed yet.
		                return axisModel.get('parallelIndex') === this.componentIndex;
		            });

		            zrUtil.each(axisModels, function (axisModel) {
		                dimensions.push('dim' + axisModel.get('dim'));
		                parallelAxisIndex.push(axisModel.componentIndex);
		            });
		        }

		    });



	/***/ },
	/* 221 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var ComponentModel = __webpack_require__(19);
		    var zrUtil = __webpack_require__(3);
		    var makeStyleMapper = __webpack_require__(11);
		    var axisModelCreator = __webpack_require__(121);
		    var numberUtil = __webpack_require__(7);

		    var AxisModel = ComponentModel.extend({

		        type: 'baseParallelAxis',

		        /**
		         * @type {module:echarts/coord/parallel/Axis}
		         */
		        axis: null,

		        /**
		         * @type {Array.<Array.<number>}
		         * @readOnly
		         */
		        activeIntervals: [],

		        /**
		         * @return {Object}
		         */
		        getAreaSelectStyle: function () {
		            return makeStyleMapper(
		                [
		                    ['fill', 'color'],
		                    ['lineWidth', 'borderWidth'],
		                    ['stroke', 'borderColor'],
		                    ['width', 'width'],
		                    ['opacity', 'opacity']
		                ]
		            ).call(this.getModel('areaSelectStyle'));
		        },

		        /**
		         * The code of this feature is put on AxisModel but not ParallelAxis,
		         * because axisModel can be alive after echarts updating but instance of
		         * ParallelAxis having been disposed. this._activeInterval should be kept
		         * when action dispatched (i.e. legend click).
		         *
		         * @param {Array.<Array<number>>} intervals interval.length === 0
		         *                                          means set all active.
		         * @public
		         */
		        setActiveIntervals: function (intervals) {
		            var activeIntervals = this.activeIntervals = zrUtil.clone(intervals);

		            // Normalize
		            if (activeIntervals) {
		                for (var i = activeIntervals.length - 1; i >= 0; i--) {
		                    numberUtil.asc(activeIntervals[i]);
		                }
		            }
		        },

		        /**
		         * @param {number|string} [value] When attempting to detect 'no activeIntervals set',
		         *                         value can not be input.
		         * @return {string} 'normal': no activeIntervals set,
		         *                  'active',
		         *                  'inactive'.
		         * @public
		         */
		        getActiveState: function (value) {
		            var activeIntervals = this.activeIntervals;

		            if (!activeIntervals.length) {
		                return 'normal';
		            }

		            if (value == null) {
		                return 'inactive';
		            }

		            for (var i = 0, len = activeIntervals.length; i < len; i++) {
		                if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {
		                    return 'active';
		                }
		            }
		            return 'inactive';
		        }

		    });

		    var defaultOption = {

		        type: 'value',

		        /**
		         * @type {Array.<number>}
		         */
		        dim: null, // 0, 1, 2, ...

		        parallelIndex: null,

		        areaSelectStyle: {
		            width: 20,
		            borderWidth: 1,
		            borderColor: 'rgba(160,197,232)',
		            color: 'rgba(160,197,232)',
		            opacity: 0.3
		        },

		        z: 10
		    };

		    zrUtil.merge(AxisModel.prototype, __webpack_require__(123));

		    function getAxisType(axisName, option) {
		        return option.type || (option.data ? 'category' : 'value');
		    }

		    axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);

		    module.exports = AxisModel;


	/***/ },
	/* 222 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(217);
		    __webpack_require__(223);
		    __webpack_require__(224);



	/***/ },
	/* 223 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);

		    var actionInfo = {
		        type: 'axisAreaSelect',
		        event: 'axisAreaSelected',
		        update: 'updateVisual'
		    };

		    /**
		     * @payload
		     * @property {string} parallelAxisId
		     * @property {Array.<Array.<number>>} intervals
		     */
		    echarts.registerAction(actionInfo, function (payload, ecModel) {
		        ecModel.eachComponent(
		            {mainType: 'parallelAxis', query: payload},
		            function (parallelAxisModel) {
		                parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);
		            }
		        );

		    });


	/***/ },
	/* 224 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var AxisBuilder = __webpack_require__(126);
		    var SelectController = __webpack_require__(225);

		    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];

		    var AxisView = __webpack_require__(1).extendComponentView({

		        type: 'parallelAxis',

		        /**
		         * @type {module:echarts/component/helper/SelectController}
		         */
		        _selectController: null,

		        /**
		         * @override
		         */
		        render: function (axisModel, ecModel, api, payload) {
		            if (fromAxisAreaSelect(axisModel, ecModel, payload)) {
		                return;
		            }

		            this.axisModel = axisModel;
		            this.api = api;

		            this.group.removeAll();

		            if (!axisModel.get('show')) {
		                return;
		            }

		            var coordSys = ecModel.getComponent(
		                'parallel', axisModel.get('parallelIndex')
		            ).coordinateSystem;

		            var areaSelectStyle = axisModel.getAreaSelectStyle();
		            var areaWidth = areaSelectStyle.width;

		            var axisLayout = coordSys.getAxisLayout(axisModel.axis.dim);
		            var builderOpt = zrUtil.extend(
		                {
		                    strokeContainThreshold: areaWidth,
		                    // lineWidth === 0 or no value.
		                    silent: !(areaWidth > 0) // jshint ignore:line
		                },
		                axisLayout
		            );

		            var axisBuilder = new AxisBuilder(axisModel, builderOpt);

		            zrUtil.each(elementList, axisBuilder.add, axisBuilder);

		            var axisGroup = axisBuilder.getGroup();

		            this.group.add(axisGroup);

		            this._buildSelectController(
		                axisGroup, areaSelectStyle, axisModel, api
		            );
		        },

		        _buildSelectController: function (axisGroup, areaSelectStyle, axisModel, api) {

		            var axis = axisModel.axis;
		            var selectController = this._selectController;

		            if (!selectController) {
		                selectController = this._selectController = new SelectController(
		                    'line',
		                    api.getZr(),
		                    areaSelectStyle
		                );

		                selectController.on('selected', zrUtil.bind(this._onSelected, this));
		            }

		            selectController.enable(axisGroup);

		            // After filtering, axis may change, select area needs to be update.
		            var ranges = zrUtil.map(axisModel.activeIntervals, function (interval) {
		                return [
		                    axis.dataToCoord(interval[0], true),
		                    axis.dataToCoord(interval[1], true)
		                ];
		            });
		            selectController.update(ranges);
		        },

		        _onSelected: function (ranges) {
		            // Do not cache these object, because the mey be changed.
		            var axisModel = this.axisModel;
		            var axis = axisModel.axis;

		            var intervals = zrUtil.map(ranges, function (range) {
		                return [
		                    axis.coordToData(range[0], true),
		                    axis.coordToData(range[1], true)
		                ];
		            });
		            this.api.dispatchAction({
		                type: 'axisAreaSelect',
		                parallelAxisId: axisModel.id,
		                intervals: intervals
		            });
		        },

		        /**
		         * @override
		         */
		        remove: function () {
		            this._selectController && this._selectController.disable();
		        },

		        /**
		         * @override
		         */
		        dispose: function () {
		            if (this._selectController) {
		                this._selectController.dispose();
		                this._selectController = null;
		            }
		        }
		    });

		    function fromAxisAreaSelect(axisModel, ecModel, payload) {
		        return payload
		            && payload.type === 'axisAreaSelect'
		            && ecModel.findComponents(
		                {mainType: 'parallelAxis', query: payload}
		            )[0] === axisModel;
		    }

		    module.exports = AxisView;


	/***/ },
	/* 225 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Box selection tool.
		 *
		 * @module echarts/component/helper/SelectController
		 */



		    var Eventful = __webpack_require__(32);
		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var bind = zrUtil.bind;
		    var each = zrUtil.each;
		    var mathMin = Math.min;
		    var mathMax = Math.max;
		    var mathPow = Math.pow;

		    var COVER_Z = 10000;
		    var UNSELECT_THRESHOLD = 2;
		    var EVENTS = ['mousedown', 'mousemove', 'mouseup'];

		    /**
		     * @alias module:echarts/component/helper/SelectController
		     * @constructor
		     * @mixin {module:zrender/mixin/Eventful}
		     *
		     * @param {string} type 'line', 'rect'
		     * @param {module:zrender/zrender~ZRender} zr
		     * @param {Object} [opt]
		     * @param {number} [opt.width]
		     * @param {number} [opt.lineWidth]
		     * @param {string} [opt.stroke]
		     * @param {string} [opt.fill]
		     */
		    function SelectController(type, zr, opt) {

		        Eventful.call(this);

		        /**
		         * @type {string}
		         * @readOnly
		         */
		        this.type = type;

		        /**
		         * @type {module:zrender/zrender~ZRender}
		         */
		        this.zr = zr;

		        /**
		         * @type {Object}
		         * @readOnly
		         */
		        this.opt = zrUtil.clone(opt);

		        /**
		         * @type {module:zrender/container/Group}
		         * @readOnly
		         */
		        this.group = new graphic.Group();

		        /**
		         * @type {module:zrender/core/BoundingRect}
		         */
		        this._containerRect = null;

		        /**
		         * @type {Array.<nubmer>}
		         * @private
		         */
		        this._track = [];

		        /**
		         * @type {boolean}
		         */
		        this._dragging;

		        /**
		         * @type {module:zrender/Element}
		         * @private
		         */
		        this._cover;

		        /**
		         * @type {boolean}
		         * @private
		         */
		        this._disabled = true;

		        /**
		         * @type {Object}
		         * @private
		         */
		        this._handlers = {
		            mousedown: bind(mousedown, this),
		            mousemove: bind(mousemove, this),
		            mouseup: bind(mouseup, this)
		        };

		        each(EVENTS, function (eventName) {
		            this.zr.on(eventName, this._handlers[eventName]);
		        }, this);
		    }

		    SelectController.prototype = {

		        constructor: SelectController,

		        /**
		         * @param {module:zrender/mixin/Transformable} container
		         * @param {module:zrender/core/BoundingRect|boolean} [rect] If not specified,
		         *                                                  use container.getBoundingRect().
		         *                                                  If false, do not use containerRect.
		         */
		        enable: function (container, rect) {

		            this._disabled = false;

		            // Remove from old container.
		            removeGroup.call(this);

		            // boundingRect will change when dragging, so we have
		            // to keep initial boundingRect.
		            this._containerRect = rect !== false
		            ? (rect || container.getBoundingRect()) : null;

		            // Add to new container.
		            container.add(this.group);
		        },

		        /**
		         * Update cover location.
		         * @param {Array.<number>|Object} ranges If null/undefined, remove cover.
		         */
		        update: function (ranges) {
		            // TODO
		            // Only support one interval yet.
		            renderCover.call(this, ranges && zrUtil.clone(ranges));
		        },

		        disable: function () {
		            this._disabled = true;

		            removeGroup.call(this);
		        },

		        dispose: function () {
		            this.disable();

		            each(EVENTS, function (eventName) {
		                this.zr.off(eventName, this._handlers[eventName]);
		            }, this);
		        }
		    };


		    zrUtil.mixin(SelectController, Eventful);

		    function updateZ(group) {
		        group.traverse(function (el) {
		            el.z = COVER_Z;
		        });
		    }

		    function isInContainer(x, y) {
		        var localPos = this.group.transformCoordToLocal(x, y);
		        return !this._containerRect
		            || this._containerRect.contain(localPos[0], localPos[1]);
		    }

		    function preventDefault(e) {
		        var rawE = e.event;
		        rawE.preventDefault && rawE.preventDefault();
		    }

		    function mousedown(e) {
		        if (this._disabled || (e.target && e.target.draggable)) {
		            return;
		        }

		        preventDefault(e);

		        var x = e.offsetX;
		        var y = e.offsetY;

		        if (isInContainer.call(this, x, y)) {
		            this._dragging = true;
		            this._track = [[x, y]];
		        }
		    }

		    function mousemove(e) {
		        if (!this._dragging || this._disabled) {
		            return;
		        }

		        preventDefault(e);

		        updateViewByCursor.call(this, e);
		    }

		    function mouseup(e) {
		        if (!this._dragging || this._disabled) {
		            return;
		        }

		        preventDefault(e);

		        updateViewByCursor.call(this, e, true);

		        this._dragging = false;
		        this._track = [];
		    }

		    function updateViewByCursor(e, isEnd) {
		        var x = e.offsetX;
		        var y = e.offsetY;

		        if (isInContainer.call(this, x, y)) {
		            this._track.push([x, y]);

		            // Create or update cover.
		            var ranges = shouldShowCover.call(this)
		                ? coverRenderers[this.type].getRanges.call(this)
		                // Remove cover.
		                : [];

		            renderCover.call(this, ranges);

		            this.trigger('selected', zrUtil.clone(ranges));

		            if (isEnd) {
		                this.trigger('selectEnd', zrUtil.clone(ranges));
		            }
		        }
		    }

		    function shouldShowCover() {
		        var track = this._track;

		        if (!track.length) {
		            return false;
		        }

		        var p2 = track[track.length - 1];
		        var p1 = track[0];
		        var dx = p2[0] - p1[0];
		        var dy = p2[1] - p1[1];
		        var dist = mathPow(dx * dx + dy * dy, 0.5);

		        return dist > UNSELECT_THRESHOLD;
		    }

		    function renderCover(ranges) {
		        var coverRenderer = coverRenderers[this.type];

		        if (ranges && ranges.length) {
		            if (!this._cover) {
		                this._cover = coverRenderer.create.call(this);
		                this.group.add(this._cover);
		            }
		            coverRenderer.update.call(this, ranges);
		        }
		        else {
		            this.group.remove(this._cover);
		            this._cover = null;
		        }

		        updateZ(this.group);
		    }

		    function removeGroup() {
		        // container may 'removeAll' outside.
		        var group = this.group;
		        var container = group.parent;
		        if (container) {
		            container.remove(group);
		        }
		    }

		    function createRectCover() {
		        var opt = this.opt;
		        return new graphic.Rect({
		            // FIXME
		            // customize style.
		            style: {
		                stroke: opt.stroke,
		                fill: opt.fill,
		                lineWidth: opt.lineWidth,
		                opacity: opt.opacity
		            }
		        });
		    }

		    function getLocalTrack() {
		        return zrUtil.map(this._track, function (point) {
		            return this.group.transformCoordToLocal(point[0], point[1]);
		        }, this);
		    }

		    function getLocalTrackEnds() {
		        var localTrack = getLocalTrack.call(this);
		        var tail = localTrack.length - 1;
		        tail < 0 && (tail = 0);
		        return [localTrack[0], localTrack[tail]];
		    }

		    /**
		     * key: this.type
		     * @type {Object}
		     */
		    var coverRenderers = {

		        line: {

		            create: createRectCover,

		            getRanges: function () {
		                var ends = getLocalTrackEnds.call(this);
		                var min = mathMin(ends[0][0], ends[1][0]);
		                var max = mathMax(ends[0][0], ends[1][0]);

		                return [[min, max]];
		            },

		            update: function (ranges) {
		                var range = ranges[0];
		                var width = this.opt.width;
		                this._cover.setShape({
		                    x: range[0],
		                    y: -width / 2,
		                    width: range[1] - range[0],
		                    height: width
		                });
		            }
		        },

		        rect: {

		            create: createRectCover,

		            getRanges: function () {
		                var ends = getLocalTrackEnds.call(this);

		                var min = [
		                    mathMin(ends[1][0], ends[0][0]),
		                    mathMin(ends[1][1], ends[0][1])
		                ];
		                var max = [
		                    mathMax(ends[1][0], ends[0][0]),
		                    mathMax(ends[1][1], ends[0][1])
		                ];

		                return [[
		                    [min[0], max[0]], // x range
		                    [min[1], max[1]] // y range
		                ]];
		            },

		            update: function (ranges) {
		                var range = ranges[0];
		                this._cover.setShape({
		                    x: range[0][0],
		                    y: range[1][0],
		                    width: range[0][1] - range[0][0],
		                    height: range[1][1] - range[1][0]
		                });
		            }
		        }
		    };

		    module.exports = SelectController;


	/***/ },
	/* 226 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);

		    module.exports = function (option) {
		        createParallelIfNeeded(option);
		        mergeAxisOptionFromParallel(option);
		    };

		    /**
		     * Create a parallel coordinate if not exists.
		     * @inner
		     */
		    function createParallelIfNeeded(option) {
		        if (option.parallel) {
		            return;
		        }

		        var hasParallelSeries = false;

		        zrUtil.each(option.series, function (seriesOpt) {
		            if (seriesOpt && seriesOpt.type === 'parallel') {
		                hasParallelSeries = true;
		            }
		        });

		        if (hasParallelSeries) {
		            option.parallel = [{}];
		        }
		    }

		    /**
		     * Merge aixs definition from parallel option (if exists) to axis option.
		     * @inner
		     */
		    function mergeAxisOptionFromParallel(option) {
		        var axes = modelUtil.normalizeToArray(option.parallelAxis);

		        zrUtil.each(axes, function (axisOption) {
		            if (!zrUtil.isObject(axisOption)) {
		                return;
		            }

		            var parallelIndex = axisOption.parallelIndex || 0;
		            var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];

		            if (parallelOption && parallelOption.parallelAxisDefault) {
		                zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);
		            }
		        });
		    }



	/***/ },
	/* 227 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var List = __webpack_require__(94);
		    var zrUtil = __webpack_require__(3);
		    var SeriesModel = __webpack_require__(27);

		    module.exports = SeriesModel.extend({

		        type: 'series.parallel',

		        dependencies: ['parallel'],

		        getInitialData: function (option, ecModel) {
		            var parallelModel = ecModel.getComponent(
		                'parallel', this.get('parallelIndex')
		            );
		            var dimensions = parallelModel.dimensions;
		            var parallelAxisIndices = parallelModel.parallelAxisIndex;

		            var rawData = option.data;

		            var dimensionsInfo = zrUtil.map(dimensions, function (dim, index) {
		                var axisModel = ecModel.getComponent(
		                    'parallelAxis', parallelAxisIndices[index]
		                );
		                if (axisModel.get('type') === 'category') {
		                    translateCategoryValue(axisModel, dim, rawData);
		                    return {name: dim, type: 'ordinal'};
		                }
		                else {
		                    return dim;
		                }
		            });

		            var list = new List(dimensionsInfo, this);
		            list.initData(rawData);

		            return list;
		        },

		        /**
		         * User can get data raw indices on 'axisAreaSelected' event received.
		         *
		         * @public
		         * @param {string} activeState 'active' or 'inactive' or 'normal'
		         * @return {Array.<number>} Raw indices
		         */
		        getRawIndicesByActiveState: function (activeState) {
		            var coordSys = this.coordinateSystem;
		            var data = this.getData();
		            var indices = [];

		            coordSys.eachActiveState(data, function (theActiveState, dataIndex) {
		                if (activeState === theActiveState) {
		                    indices.push(data.getRawIndex(dataIndex));
		                }
		            });

		            return indices;
		        },

		        defaultOption: {
		            zlevel: 0,                  // 一级层叠
		            z: 2,                       // 二级层叠

		            coordinateSystem: 'parallel',
		            parallelIndex: 0,

		            // FIXME 尚无用
		            label: {
		                normal: {
		                    show: false
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
		                    //           'inside'|'left'|'right'|'top'|'bottom'
		                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		                },
		                emphasis: {
		                    show: false
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
		                    //           'inside'|'left'|'right'|'top'|'bottom'
		                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
		                }
		            },

		            inactiveOpacity: 0.05,
		            activeOpacity: 1,

		            lineStyle: {
		                normal: {
		                    width: 2,
		                    opacity: 0.45,
		                    type: 'solid'
		                }
		            },
		            // smooth: false

		            animationEasing: 'linear'
		        }
		    });

		    function translateCategoryValue(axisModel, dim, rawData) {
		        var axisData = axisModel.get('data');
		        var numberDim = +dim.replace('dim', '');

		        if (axisData && axisData.length) {
		            zrUtil.each(rawData, function (dataItem) {
		                if (!dataItem) {
		                    return;
		                }
		                var index = zrUtil.indexOf(axisData, dataItem[numberDim]);
		                dataItem[numberDim] = index >= 0 ? index : NaN;
		            });
		        }
		        // FIXME
		        // 如果没有设置axis data, 应自动算出，或者提示。
		    }


	/***/ },
	/* 228 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);

		    var ParallelView = __webpack_require__(41).extend({

		        type: 'parallel',

		        init: function () {

		            /**
		             * @type {module:zrender/container/Group}
		             * @private
		             */
		            this._dataGroup = new graphic.Group();

		            this.group.add(this._dataGroup);
		            /**
		             * @type {module:echarts/data/List}
		             */
		            this._data;
		        },

		        /**
		         * @override
		         */
		        render: function (seriesModel, ecModel, api, payload) {

		            var dataGroup = this._dataGroup;
		            var data = seriesModel.getData();
		            var oldData = this._data;
		            var coordSys = seriesModel.coordinateSystem;
		            var dimensions = coordSys.dimensions;

		            data.diff(oldData)
		                .add(add)
		                .update(update)
		                .remove(remove)
		                .execute();

		            // Update style
		            data.eachItemGraphicEl(function (elGroup, idx) {
		                var itemModel = data.getItemModel(idx);
		                var lineStyleModel = itemModel.getModel('lineStyle.normal');
		                elGroup.eachChild(function (child) {
		                    child.setStyle(zrUtil.extend(
		                        lineStyleModel.getLineStyle(),
		                        {
		                            stroke: data.getItemVisual(idx, 'color'),
		                            opacity: data.getItemVisual(idx, 'opacity')
		                        }
		                    ));
		                });
		            });

		            // First create
		            if (!this._data) {
		                dataGroup.setClipPath(createGridClipShape(
		                    coordSys, seriesModel, function () {
		                        dataGroup.removeClipPath();
		                    }
		                ));
		            }

		            this._data = data;

		            function add(newDataIndex) {
		                var values = data.getValues(dimensions, newDataIndex);
		                var elGroup = new graphic.Group();
		                dataGroup.add(elGroup);

		                eachAxisPair(
		                    values, dimensions, coordSys,
		                    function (pointPair, pairIndex) {
		                        // FIXME
		                        // init animation
		                        if (pointPair) {
		                            elGroup.add(createEl(pointPair));
		                        }
		                    }
		                );

		                data.setItemGraphicEl(newDataIndex, elGroup);
		            }

		            function update(newDataIndex, oldDataIndex) {
		                var values = data.getValues(dimensions, newDataIndex);
		                var elGroup = oldData.getItemGraphicEl(oldDataIndex);
		                var newEls = [];
		                var elGroupIndex = 0;

		                eachAxisPair(
		                    values, dimensions, coordSys,
		                    function (pointPair, pairIndex) {
		                        var el = elGroup.childAt(elGroupIndex++);

		                        if (pointPair && !el) {
		                            newEls.push(createEl(pointPair));
		                        }
		                        else if (pointPair) {
		                            graphic.updateProps(el, {
		                                shape: {
		                                    points: pointPair
		                                }
		                            }, seriesModel);
		                        }
		                    }
		                );

		                // Remove redundent els
		                for (var i = elGroup.childCount() - 1; i >= elGroupIndex; i--) {
		                    elGroup.remove(elGroup.childAt(i));
		                }

		                // Add new els
		                for (var i = 0, len = newEls.length; i < len; i++) {
		                    elGroup.add(newEls[i]);
		                }

		                data.setItemGraphicEl(newDataIndex, elGroup);
		            }

		            function remove(oldDataIndex) {
		                var elGroup = oldData.getItemGraphicEl(oldDataIndex);
		                dataGroup.remove(elGroup);
		            }
		        },

		        /**
		         * @override
		         */
		        remove: function () {
		            this._dataGroup && this._dataGroup.removeAll();
		            this._data = null;
		        }
		    });

		    function createGridClipShape(coordSys, seriesModel, cb) {
		        var parallelModel = coordSys.model;
		        var rect = coordSys.getRect();
		        var rectEl = new graphic.Rect({
		            shape: {
		                x: rect.x,
		                y: rect.y,
		                width: rect.width,
		                height: rect.height
		            }
		        });
		        var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';
		        rectEl.setShape(dim, 0);
		        graphic.initProps(rectEl, {
		            shape: {
		                width: rect.width,
		                height: rect.height
		            }
		        }, seriesModel, cb);
		        return rectEl;
		    }

		    function eachAxisPair(values, dimensions, coordSys, cb) {
		        for (var i = 0, len = dimensions.length - 1; i < len; i++) {
		            var dimA = dimensions[i];
		            var dimB = dimensions[i + 1];
		            var valueA = values[i];
		            var valueB = values[i + 1];

		            cb(
		                (isEmptyValue(valueA, coordSys.getAxis(dimA).type)
		                    || isEmptyValue(valueB, coordSys.getAxis(dimB).type)
		                )
		                    ? null
		                    : [
		                        coordSys.dataToPoint(valueA, dimA),
		                        coordSys.dataToPoint(valueB, dimB)
		                    ],
		                i
		            );
		        }
		    }

		    function createEl(pointPair) {
		        return new graphic.Polyline({
		            shape: {points: pointPair},
		            silent: true
		        });
		    }


		    // FIXME
		    // 公用方法?
		    function isEmptyValue(val, axisType) {
		        return axisType === 'category'
		            ? val == null
		            : (val == null || isNaN(val)); // axisType === 'value'
		    }

		    module.exports = ParallelView;


	/***/ },
	/* 229 */
	/***/ function(module, exports) {

		

		    /**
		     * @payload
		     * @property {string} parallelAxisId
		     * @property {Array.<number>} extent
		     */
		    module.exports = function (ecModel, payload) {

		        ecModel.eachSeriesByType('parallel', function (seriesModel) {

		            var itemStyleModel = seriesModel.getModel('itemStyle.normal');
		            var globalColors = ecModel.get('color');

		            var color = itemStyleModel.get('color')
		                || globalColors[seriesModel.seriesIndex % globalColors.length];
		            var inactiveOpacity = seriesModel.get('inactiveOpacity');
		            var activeOpacity = seriesModel.get('activeOpacity');
		            var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();

		            var coordSys = seriesModel.coordinateSystem;
		            var data = seriesModel.getData();

		            var opacityMap = {
		                normal: lineStyle.opacity,
		                active: activeOpacity,
		                inactive: inactiveOpacity
		            };

		            coordSys.eachActiveState(data, function (activeState, dataIndex) {
		                data.setItemVisual(dataIndex, 'opacity', opacityMap[activeState]);
		            });

		            data.setVisual('color', color);
		        });
		    };


	/***/ },
	/* 230 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);

		    __webpack_require__(231);
		    __webpack_require__(232);
		    echarts.registerLayout(__webpack_require__(233));
		    echarts.registerVisualCoding('chart', __webpack_require__(235));


	/***/ },
	/* 231 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var SeriesModel = __webpack_require__(27);
		    var createGraphFromNodeEdge = __webpack_require__(191);

		    module.exports = SeriesModel.extend({

		        type: 'series.sankey',

		        layoutInfo: null,

		        getInitialData: function (option, ecModel) {
		            var links = option.edges || option.links;
		            var nodes = option.data || option.nodes;
		            if (nodes && links) {
		                var graph = createGraphFromNodeEdge(nodes, links, this, true);
		                return graph.data;
		            }
		        },

		        /**
		         * @return {module:echarts/data/Graph}
		         */
		        getGraph: function () {
		            return this.getData().graph;
		        },

		        /**
		         * return {module:echarts/data/List}
		         */
		        getEdgeData: function() {
		            return this.getGraph().edgeData;
		        },

		        defaultOption: {
		            zlevel: 0,
		            z: 2,

		            coordinateSystem: 'view',

		            layout : null,

		            // the position of the whole view
		            left: '5%',
		            top: '5%',
		            right: '20%',
		            bottom: '5%',

		            // the dx of the node
		            nodeWidth: 20,

		            // the distance between two nodes
		            nodeGap: 8,

		            // the number of iterations to change the position of the node
		            layoutIterations: 32,

		            label: {
		                normal: {
		                    show: true,
		                    position: 'right',
		                    textStyle: {
		                        color: '#000',
		                        fontSize: 12
		                    }
		                },
		                emphasis: {
		                    show: true
		                }
		            },

		            itemStyle: {
		                normal: {
		                    borderWidth: 1,
		                    borderColor: '#aaa'
		                }
		            },

		            lineStyle: {
		                normal: {
		                    color: '#314656',
		                    opacity: 0.2,
		                    curveness: 0.5
		                },
		                emphasis: {
		                    opacity: 0.6
		                }
		            },


		            // colorEncoded node

		            color: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b','#ffffbf',
		                    '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],

		            animationEasing: 'linear',

		            animationDuration: 1000
		        }

		    });



	/***/ },
	/* 232 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var modelUtil = __webpack_require__(5);
		    var zrUtil = __webpack_require__(3);

		    var SankeyShape = graphic.extendShape({
		        shape: {
		            x1: 0, y1: 0,
		            x2: 0, y2: 0,
		            cpx1: 0, cpy1: 0,
		            cpx2: 0, cpy2: 0,

		            extent: 0
		        },

		        buildPath: function (ctx, shape) {
		            var halfExtent = shape.extent / 2;
		            ctx.moveTo(shape.x1, shape.y1 - halfExtent);
		            ctx.bezierCurveTo(
		                shape.cpx1, shape.cpy1 - halfExtent,
		                shape.cpx2, shape.cpy2 - halfExtent,
		                shape.x2, shape.y2 - halfExtent
		            );
		            ctx.lineTo(shape.x2, shape.y2 + halfExtent);
		            ctx.bezierCurveTo(
		                shape.cpx2, shape.cpy2 + halfExtent,
		                shape.cpx1, shape.cpy1 + halfExtent,
		                shape.x1, shape.y1 + halfExtent
		            );
		            ctx.closePath();
		        }
		    });

		    module.exports = __webpack_require__(1).extendChartView({

		        type: 'sankey',

		        /**
		         * @private
		         * @type {module:echarts/chart/sankey/SankeySeries}
		         */
		        _model: null,

		        render: function(seriesModel, ecModel, api) {
		            var graph = seriesModel.getGraph();
		            var group = this.group;
		            var layoutInfo = seriesModel.layoutInfo;

		            this._model = seriesModel;

		            group.removeAll();

		            group.position = [layoutInfo.x, layoutInfo.y];

		            var edgeData = graph.edgeData;
		            var rawOption = seriesModel.option;
		            var formatModel = modelUtil.createDataFormatModel(
		                seriesModel, edgeData, rawOption.edges || rawOption.links
		            );

		            formatModel.formatTooltip = function (dataIndex) {
		                var params = this.getDataParams(dataIndex);
		                var rawDataOpt = params.data;
		                var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;
		                if (params.value) {
		                    html += ':' + params.value;
		                }
		                return html;
		            };

		            // generate a rect  for each node
		            graph.eachNode(function (node) {
		                var layout = node.getLayout();
		                var itemModel = node.getModel();
		                var labelModel = itemModel.getModel('label.normal');
		                var textStyleModel = labelModel.getModel('textStyle');
		                var labelHoverModel = itemModel.getModel('label.emphasis');
		                var textStyleHoverModel = labelHoverModel.getModel('textStyle');

		                var rect = new graphic.Rect({
		                    shape: {
		                        x: layout.x,
		                        y: layout.y,
		                        width: node.getLayout().dx,
		                        height: node.getLayout().dy
		                    },
		                    style: {
		                        // Get formatted label in label.normal option. Use node id if it is not specified
		                        text: labelModel.get('show')
		                            ? seriesModel.getFormattedLabel(node.dataIndex, 'normal') || node.id
		                            // Use empty string to hide the label
		                            : '',
		                        textFont: textStyleModel.getFont(),
		                        textFill: textStyleModel.getTextColor(),
		                        textPosition: labelModel.get('position')
		                    }
		                });

		                rect.setStyle(zrUtil.defaults(
		                    {
		                        fill: node.getVisual('color')
		                    },
		                    itemModel.getModel('itemStyle.normal').getItemStyle()
		                ));

		                graphic.setHoverStyle(rect, zrUtil.extend(
		                    node.getModel('itemStyle.emphasis'),
		                    {
		                        text: labelHoverModel.get('show')
		                            ? seriesModel.getFormattedLabel(node.dataIndex, 'emphasis') || node.id
		                            : '',
		                        textFont: textStyleHoverModel.getFont(),
		                        textFill: textStyleHoverModel.getTextColor(),
		                        textPosition: labelHoverModel.get('position')
		                    }
		                ));

		                group.add(rect);
		            });

		            // generate a bezire Curve for each edge
		            graph.eachEdge(function (edge) {
		                var curve = new SankeyShape();

		                curve.dataIndex = edge.dataIndex;
		                curve.dataModel = formatModel;

		                var lineStyleModel = edge.getModel('lineStyle.normal');
		                var curvature = lineStyleModel.get('curveness');
		                var n1Layout = edge.node1.getLayout();
		                var n2Layout = edge.node2.getLayout();
		                var edgeLayout = edge.getLayout();

		                curve.shape.extent = Math.max(1, edgeLayout.dy);

		                var x1 = n1Layout.x + n1Layout.dx;
		                var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;
		                var x2 = n2Layout.x;
		                var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy /2;
		                var cpx1 = x1 * (1 - curvature) + x2 * curvature;
		                var cpy1 = y1;
		                var cpx2 = x1 * curvature + x2 * (1 - curvature);
		                var cpy2 = y2;

		                curve.setShape({
		                    x1: x1,
		                    y1: y1,
		                    x2: x2,
		                    y2: y2,
		                    cpx1: cpx1,
		                    cpy1: cpy1,
		                    cpx2: cpx2,
		                    cpy2: cpy2
		                });

		                curve.setStyle(lineStyleModel.getItemStyle());
		                graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());

		                group.add(curve);

		            });
		            if (!this._data) {
		                group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {
		                    group.removeClipPath();
		                }));
		            }
		            this._data = seriesModel.getData();
		        }
		    });

		    //add animation to the view
		    function createGridClipShape(rect, seriesModel, cb) {
		        var rectEl = new graphic.Rect({
		            shape: {
		                x: rect.x - 10,
		                y: rect.y - 10,
		                width: 0,
		                height: rect.height + 20
		            }
		        });
		        graphic.initProps(rectEl, {
		            shape: {
		                width: rect.width + 20,
		                height: rect.height + 20
		            }
		        }, seriesModel, cb);

		        return rectEl;
		    }


	/***/ },
	/* 233 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var layout = __webpack_require__(21);
		    var nest = __webpack_require__(234);
		    var zrUtil = __webpack_require__(3);

		    module.exports = function (ecModel, api) {

		        ecModel.eachSeriesByType('sankey', function (seriesModel) {

		            var nodeWidth = seriesModel.get('nodeWidth');
		            var nodeGap = seriesModel.get('nodeGap');

		            var layoutInfo = getViewRect(seriesModel, api);

		            seriesModel.layoutInfo = layoutInfo;

		            var width = layoutInfo.width;
		            var height = layoutInfo.height;

		            var graph = seriesModel.getGraph();

		            var nodes = graph.nodes;
		            var edges = graph.edges;

		            computeNodeValues(nodes);

		            var filteredNodes = nodes.filter(function (node) {
		                return node.getLayout().value === 0;
		            });

		            var iterations = filteredNodes.length !== 0
		                ? 0 : seriesModel.get('layoutIterations');

		            layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);
		        });
		    };

		    /**
		     * get the layout position of the whole view.
		     */
		    function getViewRect(seriesModel, api) {
		        return layout.getLayoutRect(
		            seriesModel.getBoxLayoutParams(), {
		                width: api.getWidth(),
		                height: api.getHeight()
		            }
		        );
		    }

		    function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {
		        computeNodeBreadths(nodes, nodeWidth, width);
		        computeNodeDepths(nodes, edges, height, nodeGap, iterations);
		        computeEdgeDepths(nodes);
		    }

		    /**
		     * compute the value of each node by summing the associated edge's value.
		     * @param {module:echarts/data/Graph~Node} nodes
		     */
		    function computeNodeValues(nodes) {
		        zrUtil.each(nodes, function (node) {
		            var value1 = sum(node.outEdges, getEdgeValue);
		            var value2 = sum(node.inEdges, getEdgeValue);
		            var value = Math.max(value1, value2);
		            node.setLayout({value: value}, true);
		        });
		    }

		    /**
		     * compute the x-position for each node.
		     * @param {module:echarts/data/Graph~Node} nodes
		     * @param  {number} nodeWidth
		     * @param  {number} width
		     */
		    function computeNodeBreadths(nodes, nodeWidth, width) {
		        var remainNodes = nodes;
		        var nextNode = null;
		        var x = 0;
		        var kx = 0;

		        while (remainNodes.length) {
		            nextNode = [];

		            for (var i = 0, len = remainNodes.length; i < len; i++) {
		                var node = remainNodes[i];
		                node.setLayout({x: x}, true);
		                node.setLayout({dx: nodeWidth}, true);

		                for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {
		                    nextNode.push(node.outEdges[j].node2);
		                }
		            }
		            remainNodes = nextNode;
		            ++x;
		        }

		        moveSinksRight(nodes, x);
		        kx = (width - nodeWidth) / (x - 1);

		        scaleNodeBreadths(nodes, kx);
		    }

		    /**
		     * all the node without outEgdes are assigned maximum breadth and
		     * be aligned in the last column.
		     * @param {module:echarts/data/Graph~Node} nodes
		     * @param {number} x
		     */
		    function moveSinksRight(nodes, x) {
		        zrUtil.each(nodes, function (node) {
		            if(!node.outEdges.length) {
		                node.setLayout({x: x-1}, true);
		            }
		        });
		    }

		    /**
		     * scale node x-position to the width.
		     * @param {module:echarts/data/Graph~Node} nodes
		     * @param {number} kx
		     */
		    function scaleNodeBreadths(nodes, kx) {
		        zrUtil.each(nodes, function(node) {
		            var nodeX = node.getLayout().x * kx;
		            node.setLayout({x: nodeX}, true);
		        });
		    }

		    /**
		     * using Gauss-Seidel iterations method to compute the node depth(y-position).
		     * @param {module:echarts/data/Graph~Node} nodes
		     * @param {module:echarts/data/Graph~Edge} edges
		     * @param {number} height
		     * @param {numbber} nodeGap
		     * @param {number} iterations
		     */
		    function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {
		        var nodesByBreadth = nest()
		            .key(function (d) {
		                return d.getLayout().x;
		            })
		            .sortKeys(ascending)
		            .entries(nodes)
		            .map(function (d) {
		                return d.values;
		            });

		        initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);
		        resolveCollisions(nodesByBreadth, nodeGap, height);

		        for (var alpha = 1; iterations > 0; iterations--) {
		            alpha *= 0.99;
		            relaxRightToLeft(nodesByBreadth, alpha);
		            resolveCollisions(nodesByBreadth, nodeGap, height);
		            relaxLeftToRight(nodesByBreadth, alpha);
		            resolveCollisions(nodesByBreadth, nodeGap, height);
		        }
		    }

		    /**
		     * compute the original y-position for each node.
		     * @param {module:echarts/data/Graph~Node} nodes
		     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
		     * @param {module:echarts/data/Graph~Edge} edges
		     * @param {number} height
		     * @param {number} nodeGap
		     */
		    function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {
		        var kyArray = [];
		        zrUtil.each(nodesByBreadth, function (nodes) {
		            var n = nodes.length;
		            var sum = 0;
		            zrUtil.each(nodes, function (node) {
		                sum += node.getLayout().value;
		            });
		            var ky = (height - (n-1) * nodeGap) / sum;
		            kyArray.push(ky);
		        });
		        kyArray.sort(function (a, b) {
		            return a - b;
		        });
		        var ky0 = kyArray[0];

		        zrUtil.each(nodesByBreadth, function (nodes) {
		            zrUtil.each(nodes, function (node, i) {
		                node.setLayout({y: i}, true);
		                var nodeDy = node.getLayout().value * ky0;
		                node.setLayout({dy: nodeDy}, true);
		            });
		        });

		        zrUtil.each(edges, function (edge) {
		            var edgeDy = +edge.getValue() * ky0;
		            edge.setLayout({dy: edgeDy}, true);
		        });
		    }

		    /**
		     * resolve the collision of initialized depth.
		     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
		     * @param {number} nodeGap
		     * @param {number} height
		     */
		    function resolveCollisions(nodesByBreadth, nodeGap, height) {
		        zrUtil.each(nodesByBreadth, function (nodes) {
		            var node;
		            var dy;
		            var y0 = 0;
		            var n = nodes.length;
		            var i;

		            nodes.sort(ascendingDepth);

		            for (i = 0; i < n; i++) {
		                node = nodes[i];
		                dy = y0 - node.getLayout().y;
		                if(dy > 0) {
		                    var nodeY = node.getLayout().y + dy;
		                    node.setLayout({y: nodeY}, true);
		                }
		                y0 = node.getLayout().y + node.getLayout().dy + nodeGap;
		            }

		            // if the bottommost node goes outside the biunds, push it back up
		            dy = y0 - nodeGap - height;
		            if (dy > 0) {
		                var nodeY = node.getLayout().y -dy;
		                node.setLayout({y: nodeY}, true);
		                y0 = node.getLayout().y;
		                for (i = n - 2; i >= 0; --i) {
		                    node = nodes[i];
		                    dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;
		                    if (dy > 0) {
		                        nodeY = node.getLayout().y - dy;
		                        node.setLayout({y: nodeY}, true);
		                    }
		                    y0 = node.getLayout().y;
		                }
		            }
		        });
		    }

		    /**
		     * change the y-position of the nodes, except most the right side nodes.
		     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
		     * @param {number} alpha
		     */
		    function relaxRightToLeft(nodesByBreadth, alpha) {
		        zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {
		            zrUtil.each(nodes, function (node) {
		                if (node.outEdges.length) {
		                    var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);
		                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;
		                    node.setLayout({y: nodeY}, true);
		                }
		            });
		        });
		    }

		    function weightedTarget(edge) {
		        return center(edge.node2) * edge.getValue();
		    }

		    /**
		     * change the y-position of the nodes, except most the left side nodes.
		     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
		     * @param {number} alpha
		     */
		    function relaxLeftToRight(nodesByBreadth, alpha) {
		        zrUtil.each(nodesByBreadth, function (nodes) {
		            zrUtil.each(nodes, function (node) {
		                if (node.inEdges.length) {
		                    var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);
		                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;
		                    node.setLayout({y: nodeY}, true);
		                }
		            });
		        });
		    }

		    function weightedSource(edge) {
		        return center(edge.node1) * edge.getValue();
		    }

		    /**
		     * compute the depth(y-position) of each edge.
		     * @param {module:echarts/data/Graph~Node} nodes
		     */
		    function computeEdgeDepths(nodes) {
		        zrUtil.each(nodes, function (node) {
		            node.outEdges.sort(ascendingTargetDepth);
		            node.inEdges.sort(ascendingSourceDepth);
		        });
		        zrUtil.each(nodes, function (node) {
		            var sy = 0;
		            var ty = 0;
		            zrUtil.each(node.outEdges, function (edge) {
		                edge.setLayout({sy: sy}, true);
		                sy += edge.getLayout().dy;
		            });
		            zrUtil.each(node.inEdges, function (edge) {
		                edge.setLayout({ty: ty}, true);
		                ty += edge.getLayout().dy;
		            });
		        });
		    }

		    function ascendingTargetDepth(a, b) {
		        return a.node2.getLayout().y - b.node2.getLayout().y;
		    }

		    function ascendingSourceDepth(a, b) {
		        return a.node1.getLayout().y - b.node1.getLayout().y;
		    }

		    function sum(array, f) {
		        var s = 0;
		        var n = array.length;
		        var a;
		        var i = -1;
		        if (arguments.length === 1) {
		            while (++i < n) {
		                a = +array[i];
		                if (!isNaN(a)) {
		                    s += a;
		                }
		            }
		        }
		        else {
		            while (++i < n) {
		                a = +f.call(array, array[i], i);
		                if(!isNaN(a)) {
		                    s += a;
		                }
		            }
		        }
		        return s;
		    }

		    function center(node) {
		        return node.getLayout().y + node.getLayout().dy / 2;
		    }

		    function ascendingDepth(a, b) {
		        return a.getLayout().y - b.getLayout().y;
		    }

		    function ascending(a, b) {
		        return a < b ? -1 : a > b ? 1 : a == b ? 0 : NaN;
		    }

		    function getEdgeValue(edge) {
		        return edge.getValue();
		    }



	/***/ },
	/* 234 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    /**
		     * nest helper used to group by the array.
		     * can specified the keys and sort the keys.
		     */
		    function nest() {

		        var keysFunction = [];
		        var sortKeysFunction = [];

		        /**
		         * map an Array into the mapObject.
		         * @param {Array} array
		         * @param {number} depth
		         */
		        function map(array, depth) {
		            if (depth >= keysFunction.length) {
		                return array;
		            }
		            var i = -1;
		            var n = array.length;
		            var keyFunction = keysFunction[depth++];
		            var mapObject = {};
		            var valuesByKey = {};

		            while (++i < n) {
		                var keyValue = keyFunction(array[i]);
		                var values = valuesByKey[keyValue];

		                if (values) {
		                    values.push(array[i]);
		                }
		                else {
		                    valuesByKey[keyValue] = [array[i]];
		                }
		            }

		            zrUtil.each(valuesByKey, function (value, key) {
		                mapObject[key] = map(value, depth);
		            });

		            return mapObject;
		        }

		        /**
		         * transform the Map Object to multidimensional Array
		         * @param {Object} map
		         * @param {number} depth
		         */
		        function entriesMap(mapObject, depth) {
		            if (depth >= keysFunction.length) {
		                return mapObject;
		            }
		            var array = [];
		            var sortKeyFunction = sortKeysFunction[depth++];

		            zrUtil.each(mapObject, function (value, key) {
		                array.push({
		                    key: key, values: entriesMap(value, depth)
		                });
		            });

		            if (sortKeyFunction) {
		                return array.sort(function (a, b) {
		                    return sortKeyFunction(a.key, b.key);
		                });
		            }
		            else {
		                return array;
		            }
		        }

		        return {
		            /**
		             * specified the key to groupby the arrays.
		             * users can specified one more keys.
		             * @param {Function} d
		             */
		            key: function (d) {
		                keysFunction.push(d);
		                return this;
		            },

		            /**
		             * specified the comparator to sort the keys
		             * @param {Function} order
		             */
		            sortKeys: function (order) {
		                sortKeysFunction[keysFunction.length - 1] = order;
		                return this;
		            },

		            /**
		             * the array to be grouped by.
		             * @param {Array} array
		             */
		            entries: function (array) {
		                return entriesMap(map(array, 0), 0);
		            }
		        };
		    }
		    module.exports = nest;


	/***/ },
	/* 235 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var VisualMapping = __webpack_require__(187);

		    module.exports = function (ecModel, payload) {
		        ecModel.eachSeriesByType('sankey', function (seriesModel) {
		            var graph = seriesModel.getGraph();
		            var nodes = graph.nodes;

		            nodes.sort(function (a, b) {
		                return a.getLayout().value - b.getLayout().value;
		            });

		            var minValue = nodes[0].getLayout().value;
		            var maxValue = nodes[nodes.length - 1].getLayout().value;

		            nodes.forEach(function (node) {
		                var mapping = new VisualMapping({
		                    type: 'color',
		                    mappingMethod: 'linear',
		                    dataExtent: [minValue, maxValue],
		                    visual: seriesModel.get('color')
		                });

		                var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);
		                node.setVisual('color', mapValueToColor);
		            });

		        }) ;   
		    };  


	/***/ },
	/* 236 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);

		    __webpack_require__(237);
		    __webpack_require__(240);

		    echarts.registerVisualCoding('chart', __webpack_require__(241));
		    echarts.registerLayout(__webpack_require__(242));



	/***/ },
	/* 237 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var SeriesModel = __webpack_require__(27);
		    var whiskerBoxCommon = __webpack_require__(238);

		    var BoxplotSeries = SeriesModel.extend({

		        type: 'series.boxplot',

		        dependencies: ['xAxis', 'yAxis', 'grid'],

		        // TODO
		        // box width represents group size, so dimension should have 'size'.

		        /**
		         * @see <https://en.wikipedia.org/wiki/Box_plot>
		         * The meanings of 'min' and 'max' depend on user,
		         * and echarts do not need to know it.
		         * @readOnly
		         */
		        valueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],

		        /**
		         * @type {Array.<string>}
		         * @readOnly
		         */
		        dimensions: null,

		        /**
		         * @override
		         */
		        defaultOption: {
		            zlevel: 0,                  // 一级层叠
		            z: 2,                       // 二级层叠
		            coordinateSystem: 'cartesian2d',
		            legendHoverLink: true,

		            hoverAnimation: true,

		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            layout: null,               // 'horizontal' or 'vertical'
		            boxWidth: [7, 50],       // [min, max] can be percent of band width.

		            itemStyle: {
		                normal: {
		                    color: '#fff',
		                    borderWidth: 1
		                },
		                emphasis: {
		                    borderWidth: 2,
		                    shadowBlur: 5,
		                    shadowOffsetX: 2,
		                    shadowOffsetY: 2,
		                    shadowColor: 'rgba(0,0,0,0.4)'
		                }
		            },

		            animationEasing: 'elasticOut',
		            animationDuration: 800
		        }
		    });

		    zrUtil.mixin(BoxplotSeries, whiskerBoxCommon.seriesModelMixin, true);

		    module.exports = BoxplotSeries;



	/***/ },
	/* 238 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var List = __webpack_require__(94);
		    var completeDimensions = __webpack_require__(96);
		    var WhiskerBoxDraw = __webpack_require__(239);
		    var zrUtil = __webpack_require__(3);

		    function getItemValue(item) {
		        return item.value == null ? item : item.value;
		    }

		    var seriesModelMixin = {

		        /**
		         * @private
		         * @type {string}
		         */
		        _baseAxisDim: null,

		        /**
		         * @override
		         */
		        getInitialData: function (option, ecModel) {
		            // When both types of xAxis and yAxis are 'value', layout is
		            // needed to be specified by user. Otherwise, layout can be
		            // judged by which axis is category.

		            var categories;

		            var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));
		            var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));
		            var xAxisType = xAxisModel.get('type');
		            var yAxisType = yAxisModel.get('type');
		            var addOrdinal;

		            // FIXME
		            // 考虑时间轴

		            if (xAxisType === 'category') {
		                option.layout = 'horizontal';
		                categories = xAxisModel.getCategories();
		                addOrdinal = true;
		            }
		            else if (yAxisType  === 'category') {
		                option.layout = 'vertical';
		                categories = yAxisModel.getCategories();
		                addOrdinal = true;
		            }
		            else {
		                option.layout = option.layout || 'horizontal';
		            }

		            this._baseAxisDim = option.layout === 'horizontal' ? 'x' : 'y';

		            var data = option.data;
		            var dimensions = this.dimensions = ['base'].concat(this.valueDimensions);
		            completeDimensions(dimensions, data);

		            var list = new List(dimensions, this);
		            list.initData(data, categories ? categories.slice() : null, function (dataItem, dimName, idx, dimIdx) {
		                var value = getItemValue(dataItem);
		                return addOrdinal ? (dimName === 'base' ? idx : value[dimIdx - 1]) : value[dimIdx];
		            });

		            return list;
		        },

		        /**
		         * Used by Gird.
		         * @param {string} axisDim 'x' or 'y'
		         * @return {Array.<string>} dimensions on the axis.
		         */
		        coordDimToDataDim: function (axisDim) {
		            var dims = this.valueDimensions.slice();
		            var baseDim = ['base'];
		            var map = {
		                horizontal: {x: baseDim, y: dims},
		                vertical: {x: dims, y: baseDim}
		            };
		            return map[this.get('layout')][axisDim];
		        },

		        /**
		         * @override
		         * @param {string|number} dataDim
		         * @return {string} coord dimension
		         */
		        dataDimToCoordDim: function (dataDim) {
		            var dim;

		            zrUtil.each(['x', 'y'], function (coordDim, index) {
		                var dataDims = this.coordDimToDataDim(coordDim);
		                if (zrUtil.indexOf(dataDims, dataDim) >= 0) {
		                    dim = coordDim;
		                }
		            }, this);

		            return dim;
		        },

		        /**
		         * If horizontal, base axis is x, otherwise y.
		         * @override
		         */
		        getBaseAxis: function () {
		            var dim = this._baseAxisDim;
		            return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;
		        }
		    };

		    var viewMixin = {

		        init: function () {
		            /**
		             * Old data.
		             * @private
		             * @type {module:echarts/chart/helper/WhiskerBoxDraw}
		             */
		            var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(
		                this.getStyleUpdater()
		            );
		            this.group.add(whiskerBoxDraw.group);
		        },

		        render: function (seriesModel, ecModel, api) {
		            this._whiskerBoxDraw.updateData(seriesModel.getData());
		        },

		        remove: function (ecModel) {
		            this._whiskerBoxDraw.remove();
		        }
		    };

		    module.exports = {
		        seriesModelMixin: seriesModelMixin,
		        viewMixin: viewMixin
		    };


	/***/ },
	/* 239 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/chart/helper/Symbol
		 */


		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var Path = __webpack_require__(44);

		    var WhiskerPath = Path.extend({

		        type: 'whiskerInBox',

		        shape: {},

		        buildPath: function (ctx, shape) {
		            for (var i in shape) {
		                if (i.indexOf('ends') === 0) {
		                    var pts = shape[i];
		                    ctx.moveTo(pts[0][0], pts[0][1]);
		                    ctx.lineTo(pts[1][0], pts[1][1]);
		                }
		            }
		        }
		    });

		    /**
		     * @constructor
		     * @alias {module:echarts/chart/helper/WhiskerBox}
		     * @param {module:echarts/data/List} data
		     * @param {number} idx
		     * @param {Function} styleUpdater
		     * @param {boolean} isInit
		     * @extends {module:zrender/graphic/Group}
		     */
		    function WhiskerBox(data, idx, styleUpdater, isInit) {
		        graphic.Group.call(this);

		        /**
		         * @type {number}
		         * @readOnly
		         */
		        this.bodyIndex;

		        /**
		         * @type {number}
		         * @readOnly
		         */
		        this.whiskerIndex;

		        /**
		         * @type {Function}
		         */
		        this.styleUpdater = styleUpdater;

		        this._createContent(data, idx, isInit);

		        this.updateData(data, idx, isInit);

		        /**
		         * Last series model.
		         * @type {module:echarts/model/Series}
		         */
		        this._seriesModel;
		    }

		    var whiskerBoxProto = WhiskerBox.prototype;

		    whiskerBoxProto._createContent = function (data, idx, isInit) {
		        var itemLayout = data.getItemLayout(idx);
		        var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;
		        var count = 0;

		        // Whisker element.
		        this.add(new graphic.Polygon({
		            shape: {
		                points: isInit
		                    ? transInit(itemLayout.bodyEnds, constDim, itemLayout)
		                    : itemLayout.bodyEnds
		            },
		            style: {strokeNoScale: true},
		            z2: 100
		        }));
		        this.bodyIndex = count++;

		        // Box element.
		        var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {
		            return isInit ? transInit(ends, constDim, itemLayout) : ends;
		        });
		        this.add(new WhiskerPath({
		            shape: makeWhiskerEndsShape(whiskerEnds),
		            style: {strokeNoScale: true},
		            z2: 100
		        }));
		        this.whiskerIndex = count++;
		    };

		    function transInit(points, dim, itemLayout) {
		        return zrUtil.map(points, function (point) {
		            point = point.slice();
		            point[dim] = itemLayout.initBaseline;
		            return point;
		        });
		    }

		    function makeWhiskerEndsShape(whiskerEnds) {
		        // zr animation only support 2-dim array.
		        var shape = {};
		        zrUtil.each(whiskerEnds, function (ends, i) {
		            shape['ends' + i] = ends;
		        });
		        return shape;
		    }

		    /**
		     * Update symbol properties
		     * @param  {module:echarts/data/List} data
		     * @param  {number} idx
		     */
		    whiskerBoxProto.updateData = function (data, idx, isInit) {
		        var seriesModel = this._seriesModel = data.hostModel;
		        var itemLayout = data.getItemLayout(idx);
		        var updateMethod = graphic[isInit ? 'initProps' : 'updateProps'];
		        // this.childAt(this.bodyIndex).stopAnimation(true);
		        // this.childAt(this.whiskerIndex).stopAnimation(true);
		        updateMethod(
		            this.childAt(this.bodyIndex),
		            {shape: {points: itemLayout.bodyEnds}},
		            seriesModel
		        );
		        updateMethod(
		            this.childAt(this.whiskerIndex),
		            {shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)},
		            seriesModel
		        );

		        this.styleUpdater.call(null, this, data, idx);
		    };

		    zrUtil.inherits(WhiskerBox, graphic.Group);


		    /**
		     * @constructor
		     * @alias module:echarts/chart/helper/WhiskerBoxDraw
		     */
		    function WhiskerBoxDraw(styleUpdater) {
		        this.group = new graphic.Group();
		        this.styleUpdater = styleUpdater;
		    }

		    var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;

		    /**
		     * Update symbols draw by new data
		     * @param {module:echarts/data/List} data
		     */
		    whiskerBoxDrawProto.updateData = function (data) {
		        var group = this.group;
		        var oldData = this._data;
		        var styleUpdater = this.styleUpdater;

		        data.diff(oldData)
		            .add(function (newIdx) {
		                if (data.hasValue(newIdx)) {
		                    var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);
		                    data.setItemGraphicEl(newIdx, symbolEl);
		                    group.add(symbolEl);
		                }
		            })
		            .update(function (newIdx, oldIdx) {
		                var symbolEl = oldData.getItemGraphicEl(oldIdx);

		                // Empty data
		                if (!data.hasValue(newIdx)) {
		                    group.remove(symbolEl);
		                    return;
		                }

		                if (!symbolEl) {
		                    symbolEl = new WhiskerBox(data, newIdx, styleUpdater);
		                }
		                else {
		                    symbolEl.updateData(data, newIdx);
		                }

		                // Add back
		                group.add(symbolEl);

		                data.setItemGraphicEl(newIdx, symbolEl);
		            })
		            .remove(function (oldIdx) {
		                var el = oldData.getItemGraphicEl(oldIdx);
		                el && group.remove(el);
		            })
		            .execute();

		        this._data = data;
		    };

		    /**
		     * Remove symbols.
		     * @param {module:echarts/data/List} data
		     */
		    whiskerBoxDrawProto.remove = function () {
		        var group = this.group;
		        var data = this._data;
		        this._data = null;
		        data && data.eachItemGraphicEl(function (el) {
		            el && group.remove(el);
		        });
		    };

		    module.exports = WhiskerBoxDraw;


	/***/ },
	/* 240 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var ChartView = __webpack_require__(41);
		    var graphic = __webpack_require__(42);
		    var whiskerBoxCommon = __webpack_require__(238);

		    var BoxplotView = ChartView.extend({

		        type: 'boxplot',

		        getStyleUpdater: function () {
		            return updateStyle;
		        }
		    });

		    zrUtil.mixin(BoxplotView, whiskerBoxCommon.viewMixin, true);

		    // Update common properties
		    var normalStyleAccessPath = ['itemStyle', 'normal'];
		    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

		    function updateStyle(itemGroup, data, idx) {
		        var itemModel = data.getItemModel(idx);
		        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
		        var borderColor = data.getItemVisual(idx, 'color');

		        // Exclude borderColor.
		        var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);

		        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
		        whiskerEl.style.set(itemStyle);
		        whiskerEl.style.stroke = borderColor;
		        whiskerEl.dirty();

		        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
		        bodyEl.style.set(itemStyle);
		        bodyEl.style.stroke = borderColor;
		        bodyEl.dirty();

		        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
		        graphic.setHoverStyle(itemGroup, hoverStyle);
		    }

		    module.exports = BoxplotView;



	/***/ },
	/* 241 */
	/***/ function(module, exports) {

		

		    var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];

		    module.exports = function (ecModel, api) {

		        var globalColors = ecModel.get('color');

		        ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {

		            var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];
		            var data = seriesModel.getData();

		            data.setVisual({
		                legendSymbol: 'roundRect',
		                // Use name 'color' but not 'borderColor' for legend usage and
		                // visual coding from other component like dataRange.
		                color: seriesModel.get(borderColorQuery) || defaulColor
		            });

		            // Only visible series has each data be visual encoded
		            if (!ecModel.isSeriesFiltered(seriesModel)) {
		                data.each(function (idx) {
		                    var itemModel = data.getItemModel(idx);
		                    data.setItemVisual(
		                        idx,
		                        {color: itemModel.get(borderColorQuery, true)}
		                    );
		                });
		            }
		        });

		    };


	/***/ },
	/* 242 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var parsePercent = numberUtil.parsePercent;
		    var each = zrUtil.each;

		    module.exports = function (ecModel, api) {

		        var groupResult = groupSeriesByAxis(ecModel);

		        each(groupResult, function (groupItem) {
		            var seriesModels = groupItem.seriesModels;

		            if (!seriesModels.length) {
		                return;
		            }

		            calculateBase(groupItem);

		            each(seriesModels, function (seriesModel, idx) {
		                layoutSingleSeries(
		                    seriesModel,
		                    groupItem.boxOffsetList[idx],
		                    groupItem.boxWidthList[idx]
		                );
		            });
		        });
		    };

		    /**
		     * Group series by axis.
		     */
		    function groupSeriesByAxis(ecModel) {
		        var result = [];
		        var axisList = [];

		        ecModel.eachSeriesByType('boxplot', function (seriesModel) {
		            var baseAxis = seriesModel.getBaseAxis();
		            var idx = zrUtil.indexOf(axisList, baseAxis);

		            if (idx < 0) {
		                idx = axisList.length;
		                axisList[idx] = baseAxis;
		                result[idx] = {axis: baseAxis, seriesModels: []};
		            }

		            result[idx].seriesModels.push(seriesModel);
		        });

		        return result;
		    }

		    /**
		     * Calculate offset and box width for each series.
		     */
		    function calculateBase(groupItem) {
		        var extent;
		        var baseAxis = groupItem.axis;
		        var seriesModels = groupItem.seriesModels;
		        var seriesCount = seriesModels.length;

		        var boxWidthList = groupItem.boxWidthList = [];
		        var boxOffsetList = groupItem.boxOffsetList = [];
		        var boundList = [];

		        var bandWidth;
		        if (baseAxis.type === 'category') {
		            bandWidth = baseAxis.getBandWidth();
		        }
		        else {
		            var maxDataCount = 0;
		            each(seriesModels, function (seriesModel) {
		                maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());
		            });
		            extent = baseAxis.getExtent(),
		            Math.abs(extent[1] - extent[0]) / maxDataCount;
		        }

		        each(seriesModels, function (seriesModel) {
		            var boxWidthBound = seriesModel.get('boxWidth');
		            if (!zrUtil.isArray(boxWidthBound)) {
		                boxWidthBound = [boxWidthBound, boxWidthBound];
		            }
		            boundList.push([
		                parsePercent(boxWidthBound[0], bandWidth) || 0,
		                parsePercent(boxWidthBound[1], bandWidth) || 0
		            ]);
		        });

		        var availableWidth = bandWidth * 0.8 - 2;
		        var boxGap = availableWidth / seriesCount * 0.3;
		        var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;
		        var base = boxWidth / 2 - availableWidth / 2;

		        each(seriesModels, function (seriesModel, idx) {
		            boxOffsetList.push(base);
		            base += boxGap + boxWidth;

		            boxWidthList.push(
		                Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1])
		            );
		        });
		    }

		    /**
		     * Calculate points location for each series.
		     */
		    function layoutSingleSeries(seriesModel, offset, boxWidth) {
		        var coordSys = seriesModel.coordinateSystem;
		        var data = seriesModel.getData();
		        var dimensions = seriesModel.dimensions;
		        var chartLayout = seriesModel.get('layout');
		        var halfWidth = boxWidth / 2;

		        data.each(dimensions, function () {
		            var args = arguments;
		            var dimLen = dimensions.length;
		            var axisDimVal = args[0];
		            var idx = args[dimLen];
		            var variableDim = chartLayout === 'horizontal' ? 0 : 1;
		            var constDim = 1 - variableDim;

		            var median = getPoint(args[3]);
		            var end1 = getPoint(args[1]);
		            var end5 = getPoint(args[5]);
		            var whiskerEnds = [
		                [end1, getPoint(args[2])],
		                [end5, getPoint(args[4])]
		            ];
		            layEndLine(end1);
		            layEndLine(end5);
		            layEndLine(median);

		            var bodyEnds = [];
		            addBodyEnd(whiskerEnds[0][1], 0);
		            addBodyEnd(whiskerEnds[1][1], 1);

		            data.setItemLayout(idx, {
		                chartLayout: chartLayout,
		                initBaseline: median[constDim],
		                median: median,
		                bodyEnds: bodyEnds,
		                whiskerEnds: whiskerEnds
		            });

		            function getPoint(val) {
		                var p = [];
		                p[variableDim] = axisDimVal;
		                p[constDim] = val;
		                var point;
		                if (isNaN(axisDimVal) || isNaN(val)) {
		                    point = [NaN, NaN];
		                }
		                else {
		                    point = coordSys.dataToPoint(p);
		                    point[variableDim] += offset;
		                }
		                return point;
		            }

		            function addBodyEnd(point, start) {
		                var point1 = point.slice();
		                var point2 = point.slice();
		                point1[variableDim] += halfWidth;
		                point2[variableDim] -= halfWidth;
		                start
		                    ? bodyEnds.push(point1, point2)
		                    : bodyEnds.push(point2, point1);
		            }

		            function layEndLine(endCenter) {
		                var line = [endCenter.slice(), endCenter.slice()];
		                line[0][variableDim] -= halfWidth;
		                line[1][variableDim] += halfWidth;
		                whiskerEnds.push(line);
		            }
		        });
		    }



	/***/ },
	/* 243 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);

		    __webpack_require__(244);
		    __webpack_require__(245);

		    echarts.registerPreprocessor(
		        __webpack_require__(246)
		    );

		    echarts.registerVisualCoding('chart', __webpack_require__(247));
		    echarts.registerLayout(__webpack_require__(248));



	/***/ },
	/* 244 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var SeriesModel = __webpack_require__(27);
		    var whiskerBoxCommon = __webpack_require__(238);
		    var formatUtil = __webpack_require__(6);
		    var encodeHTML = formatUtil.encodeHTML;
		    var addCommas = formatUtil.addCommas;

		    var CandlestickSeries = SeriesModel.extend({

		        type: 'series.candlestick',

		        dependencies: ['xAxis', 'yAxis', 'grid'],

		        /**
		         * @readOnly
		         */
		        valueDimensions: ['open', 'close', 'lowest', 'highest'],

		        /**
		         * @type {Array.<string>}
		         * @readOnly
		         */
		        dimensions: null,

		        /**
		         * @override
		         */
		        defaultOption: {
		            zlevel: 0,                  // 一级层叠
		            z: 2,                       // 二级层叠
		            coordinateSystem: 'cartesian2d',
		            legendHoverLink: true,

		            hoverAnimation: true,

		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            layout: null, // 'horizontal' or 'vertical'

		            itemStyle: {
		                normal: {
		                    color: '#c23531', // 阳线 positive
		                    color0: '#314656', // 阴线 negative     '#c23531', '#314656'
		                    borderWidth: 1,
		                    // FIXME
		                    // ec2中使用的是lineStyle.color 和 lineStyle.color0
		                    borderColor: '#c23531',
		                    borderColor0: '#314656'
		                },
		                emphasis: {
		                    borderWidth: 2
		                }
		            },

		            animationUpdate: false,
		            animationEasing: 'linear',
		            animationDuration: 300
		        },

		        /**
		         * Get dimension for shadow in dataZoom
		         * @return {string} dimension name
		         */
		        getShadowDim: function () {
		            return 'open';
		        },

		        /**
		         * @override
		         */
		        formatTooltip: function (dataIndex, mutipleSeries) {
		            // It rearly use mutiple candlestick series in one cartesian,
		            // so only consider one series in this default tooltip.
		            var valueHTMLArr = zrUtil.map(this.valueDimensions, function (dim) {
		                return dim + ': ' + addCommas(this._data.get(dim, dataIndex));
		            }, this);

		            return encodeHTML(this.name) + '<br />' + valueHTMLArr.join('<br />');
		        }

		    });

		    zrUtil.mixin(CandlestickSeries, whiskerBoxCommon.seriesModelMixin, true);

		    module.exports = CandlestickSeries;



	/***/ },
	/* 245 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var ChartView = __webpack_require__(41);
		    var graphic = __webpack_require__(42);
		    var whiskerBoxCommon = __webpack_require__(238);

		    var CandlestickView = ChartView.extend({

		        type: 'candlestick',

		        getStyleUpdater: function () {
		            return updateStyle;
		        }

		    });

		    zrUtil.mixin(CandlestickView, whiskerBoxCommon.viewMixin, true);

		    // Update common properties
		    var normalStyleAccessPath = ['itemStyle', 'normal'];
		    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

		    function updateStyle(itemGroup, data, idx) {
		        var itemModel = data.getItemModel(idx);
		        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
		        var color = data.getItemVisual(idx, 'color');
		        var borderColor = data.getItemVisual(idx, 'borderColor');

		        // Color must be excluded.
		        // Because symbol provide setColor individually to set fill and stroke
		        var itemStyle = normalItemStyleModel.getItemStyle(
		            ['color', 'color0', 'borderColor', 'borderColor0']
		        );

		        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
		        whiskerEl.style.set(itemStyle);
		        whiskerEl.style.stroke = borderColor;
		        whiskerEl.dirty();

		        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
		        bodyEl.style.set(itemStyle);
		        bodyEl.style.fill = color;
		        bodyEl.style.stroke = borderColor;
		        bodyEl.dirty();

		        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
		        graphic.setHoverStyle(itemGroup, hoverStyle);
		    }


		    module.exports = CandlestickView;



	/***/ },
	/* 246 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);

		    module.exports = function (option) {
		        if (!option || !zrUtil.isArray(option.series)) {
		            return;
		        }

		        // Translate 'k' to 'candlestick'.
		        zrUtil.each(option.series, function (seriesItem) {
		            if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {
		                seriesItem.type = 'candlestick';
		            }
		        });
		    };



	/***/ },
	/* 247 */
	/***/ function(module, exports) {

		

		    var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];
		    var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];
		    var positiveColorQuery = ['itemStyle', 'normal', 'color'];
		    var negativeColorQuery = ['itemStyle', 'normal', 'color0'];

		    module.exports = function (ecModel, api) {

		        ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {

		            var data = seriesModel.getData();

		            data.setVisual({
		                legendSymbol: 'roundRect'
		            });

		            // Only visible series has each data be visual encoded
		            if (!ecModel.isSeriesFiltered(seriesModel)) {
		                data.each(function (idx) {
		                    var itemModel = data.getItemModel(idx);
		                    var sign = data.getItemLayout(idx).sign;

		                    data.setItemVisual(
		                        idx,
		                        {
		                            color: itemModel.get(
		                                sign > 0 ? positiveColorQuery : negativeColorQuery
		                            ),
		                            borderColor: itemModel.get(
		                                sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery
		                            )
		                        }
		                    );
		                });
		            }
		        });

		    };


	/***/ },
	/* 248 */
	/***/ function(module, exports) {

		

		    var CANDLE_MIN_WIDTH = 2;
		    var CANDLE_MIN_NICE_WIDTH = 5;
		    var GPA_MIN = 4;

		    module.exports = function (ecModel, api) {

		        ecModel.eachSeriesByType('candlestick', function (seriesModel) {

		            var coordSys = seriesModel.coordinateSystem;
		            var data = seriesModel.getData();
		            var dimensions = seriesModel.dimensions;
		            var chartLayout = seriesModel.get('layout');

		            var candleWidth = calculateCandleWidth(seriesModel, data);

		            data.each(dimensions, function () {
		                var args = arguments;
		                var dimLen = dimensions.length;
		                var axisDimVal = args[0];
		                var idx = args[dimLen];
		                var variableDim = chartLayout === 'horizontal' ? 0 : 1;
		                var constDim = 1 - variableDim;

		                var openVal = args[1];
		                var closeVal = args[2];
		                var lowestVal = args[3];
		                var highestVal = args[4];

		                var ocLow = Math.min(openVal, closeVal);
		                var ocHigh = Math.max(openVal, closeVal);

		                var ocLowPoint = getPoint(ocLow);
		                var ocHighPoint = getPoint(ocHigh);
		                var lowestPoint = getPoint(lowestVal);
		                var highestPoint = getPoint(highestVal);

		                var whiskerEnds = [
		                    [highestPoint, ocHighPoint],
		                    [lowestPoint, ocLowPoint]
		                ];

		                var bodyEnds = [];
		                addBodyEnd(ocHighPoint, 0);
		                addBodyEnd(ocLowPoint, 1);

		                data.setItemLayout(idx, {
		                    chartLayout: chartLayout,
		                    sign: openVal > closeVal ? -1 : openVal < closeVal ? 1 : 0,
		                    initBaseline: openVal > closeVal
		                        ? ocHighPoint[constDim] : ocLowPoint[constDim], // open point.
		                    bodyEnds: bodyEnds,
		                    whiskerEnds: whiskerEnds
		                });

		                function getPoint(val) {
		                    var p = [];
		                    p[variableDim] = axisDimVal;
		                    p[constDim] = val;
		                    return (isNaN(axisDimVal) || isNaN(val))
		                        ? [NaN, NaN]
		                        : coordSys.dataToPoint(p);
		                }

		                function addBodyEnd(point, start) {
		                    var point1 = point.slice();
		                    var point2 = point.slice();
		                    point1[variableDim] += candleWidth / 2;
		                    point2[variableDim] -= candleWidth / 2;
		                    start
		                        ? bodyEnds.push(point1, point2)
		                        : bodyEnds.push(point2, point1);
		                }

		            }, true);
		        });
		    };

		    function calculateCandleWidth(seriesModel, data) {
		        var baseAxis = seriesModel.getBaseAxis();
		        var extent;

		        var bandWidth = baseAxis.type === 'category'
		            ? baseAxis.getBandWidth()
		            : (
		                extent = baseAxis.getExtent(),
		                Math.abs(extent[1] - extent[0]) / data.count()
		            );

		        // Half band width is perfect when space is enouph, otherwise
		        // try not to be smaller than CANDLE_MIN_NICE_WIDTH (and only
		        // gap is compressed), otherwise ensure not to be smaller than
		        // CANDLE_MIN_WIDTH in spite of overlap.

		        return bandWidth / 2 - 2 > CANDLE_MIN_NICE_WIDTH // "- 2" is minus border width
		            ? bandWidth / 2 - 2
		            : bandWidth - CANDLE_MIN_NICE_WIDTH > GPA_MIN
		            ? CANDLE_MIN_NICE_WIDTH
		            : Math.max(bandWidth - GPA_MIN, CANDLE_MIN_WIDTH);
		    }



	/***/ },
	/* 249 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var echarts = __webpack_require__(1);

		    __webpack_require__(250);
		    __webpack_require__(251);

		    echarts.registerVisualCoding('chart', zrUtil.curry(
		        __webpack_require__(103), 'effectScatter', 'circle', null
		    ));
		    echarts.registerLayout(zrUtil.curry(
		        __webpack_require__(104), 'effectScatter'
		    ));


	/***/ },
	/* 250 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var createListFromArray = __webpack_require__(93);
		    var SeriesModel = __webpack_require__(27);

		    module.exports = SeriesModel.extend({

		        type: 'series.effectScatter',

		        dependencies: ['grid', 'polar'],

		        getInitialData: function (option, ecModel) {
		            var list = createListFromArray(option.data, this, ecModel);
		            return list;
		        },

		        defaultOption: {
		            coordinateSystem: 'cartesian2d',
		            zlevel: 0,
		            z: 2,
		            legendHoverLink: true,

		            effectType: 'ripple',

		            // When to show the effect, option: 'render'|'emphasis'
		            showEffectOn: 'render',

		            // Ripple effect config
		            rippleEffect: {
		                period: 4,
		                // Scale of ripple
		                scale: 2.5,
		                // Brush type can be fill or stroke
		                brushType: 'fill'
		            },

		            // Cartesian coordinate system
		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            // Polar coordinate system
		            polarIndex: 0,

		            // Geo coordinate system
		            geoIndex: 0,

		            // symbol: null,        // 图形类型
		            symbolSize: 10          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
		            // symbolRotate: null,  // 图形旋转控制

		            // large: false,
		            // Available when large is true
		            // largeThreshold: 2000,

		            // itemStyle: {
		            //     normal: {
		            //         opacity: 1
		            //     }
		            // }
		        }
		    });


	/***/ },
	/* 251 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var SymbolDraw = __webpack_require__(98);
		    var EffectSymbol = __webpack_require__(252);

		    __webpack_require__(1).extendChartView({

		        type: 'effectScatter',

		        init: function () {
		            this._symbolDraw = new SymbolDraw(EffectSymbol);
		        },

		        render: function (seriesModel, ecModel, api) {
		            var data = seriesModel.getData();
		            var effectSymbolDraw = this._symbolDraw;
		            effectSymbolDraw.updateData(data);
		            this.group.add(effectSymbolDraw.group);
		        },

		        updateLayout: function () {
		            this._symbolDraw.updateLayout();
		        },

		        remove: function (ecModel, api) {
		            this._symbolDraw && this._symbolDraw.remove(api);
		        }
		    });


	/***/ },
	/* 252 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Symbol with ripple effect
		 * @module echarts/chart/helper/EffectSymbol
		 */


		    var zrUtil = __webpack_require__(3);
		    var symbolUtil = __webpack_require__(100);
		    var graphic = __webpack_require__(42);
		    var numberUtil = __webpack_require__(7);
		    var Symbol = __webpack_require__(99);
		    var Group = graphic.Group;

		    var EFFECT_RIPPLE_NUMBER = 3;

		    function normalizeSymbolSize(symbolSize) {
		        if (!zrUtil.isArray(symbolSize)) {
		            symbolSize = [+symbolSize, +symbolSize];
		        }
		        return symbolSize;
		    }
		    /**
		     * @constructor
		     * @param {module:echarts/data/List} data
		     * @param {number} idx
		     * @extends {module:zrender/graphic/Group}
		     */
		    function EffectSymbol(data, idx) {
		        Group.call(this);

		        var symbol = new Symbol(data, idx);
		        var rippleGroup = new Group();
		        this.add(symbol);
		        this.add(rippleGroup);

		        rippleGroup.beforeUpdate = function () {
		            this.attr(symbol.getScale());
		        };
		        this.updateData(data, idx);
		    }

		    var effectSymbolProto = EffectSymbol.prototype;

		    effectSymbolProto.stopEffectAnimation = function () {
		        this.childAt(1).removeAll();
		    };

		    effectSymbolProto.startEffectAnimation = function (
		        period, brushType, rippleScale, effectOffset, z, zlevel
		    ) {
		        var symbolType = this._symbolType;
		        var color = this._color;

		        var rippleGroup = this.childAt(1);

		        for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {
		            var ripplePath = symbolUtil.createSymbol(
		                symbolType, -0.5, -0.5, 1, 1, color
		            );
		            ripplePath.attr({
		                style: {
		                    stroke: brushType === 'stroke' ? color : null,
		                    fill: brushType === 'fill' ? color : null,
		                    strokeNoScale: true
		                },
		                z2: 99,
		                silent: true,
		                scale: [1, 1],
		                z: z,
		                zlevel: zlevel
		            });

		            var delay = -i / EFFECT_RIPPLE_NUMBER * period + effectOffset;
		            // TODO Configurable period
		            ripplePath.animate('', true)
		                .when(period, {
		                    scale: [rippleScale, rippleScale]
		                })
		                .delay(delay)
		                .start();
		            ripplePath.animateStyle(true)
		                .when(period, {
		                    opacity: 0
		                })
		                .delay(delay)
		                .start();

		            rippleGroup.add(ripplePath);
		        }
		    };

		    /**
		     * Highlight symbol
		     */
		    effectSymbolProto.highlight = function () {
		        this.trigger('emphasis');
		    };

		    /**
		     * Downplay symbol
		     */
		    effectSymbolProto.downplay = function () {
		        this.trigger('normal');
		    };

		    /**
		     * Update symbol properties
		     * @param  {module:echarts/data/List} data
		     * @param  {number} idx
		     */
		    effectSymbolProto.updateData = function (data, idx) {
		        var seriesModel = data.hostModel;

		        this.childAt(0).updateData(data, idx);

		        var rippleGroup = this.childAt(1);
		        var itemModel = data.getItemModel(idx);
		        var symbolType = data.getItemVisual(idx, 'symbol');
		        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
		        var color = data.getItemVisual(idx, 'color');

		        rippleGroup.attr('scale', symbolSize);

		        rippleGroup.traverse(function (ripplePath) {
		            ripplePath.attr({
		                fill: color
		            });
		        });

		        var symbolOffset = itemModel.getShallow('symbolOffset');
		        if (symbolOffset) {
		            var pos = rippleGroup.position;
		            pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
		            pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
		        }

		        this._symbolType = symbolType;
		        this._color = color;

		        var showEffectOn = seriesModel.get('showEffectOn');
		        var rippleScale = itemModel.get('rippleEffect.scale');
		        var brushType = itemModel.get('rippleEffect.brushType');
		        var effectPeriod = itemModel.get('rippleEffect.period') * 1000;
		        var effectOffset = idx / data.count();
		        var z = itemModel.getShallow('z') || 0;
		        var zlevel = itemModel.getShallow('zlevel') || 0;

		        this.stopEffectAnimation();
		        if (showEffectOn === 'render') {
		            this.startEffectAnimation(
		                effectPeriod, brushType, rippleScale, effectOffset, z, zlevel
		            );
		        }
		        var symbol = this.childAt(0);
		        function onEmphasis() {
		            symbol.trigger('emphasis');
		            if (showEffectOn !== 'render') {
		                this.startEffectAnimation(
		                    effectPeriod, brushType, rippleScale, effectOffset, z, zlevel
		                );
		            }
		        }
		        function onNormal() {
		            symbol.trigger('normal');
		            if (showEffectOn !== 'render') {
		                this.stopEffectAnimation();
		            }
		        }
		        this.on('mouseover', onEmphasis, this)
		            .on('mouseout', onNormal, this)
		            .on('emphasis', onEmphasis, this)
		            .on('normal', onNormal, this);
		    };

		    effectSymbolProto.fadeOut = function (cb) {
		        cb && cb();
		    };

		    zrUtil.inherits(EffectSymbol, Group);

		    module.exports = EffectSymbol;


	/***/ },
	/* 253 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(254);
		    __webpack_require__(255);

		    var zrUtil = __webpack_require__(3);
		    var echarts = __webpack_require__(1);
		    echarts.registerLayout(
		        __webpack_require__(257)
		    );

		    echarts.registerVisualCoding(
		        'chart', zrUtil.curry(__webpack_require__(88), 'lines', 'lineStyle')
		    );


	/***/ },
	/* 254 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var SeriesModel = __webpack_require__(27);
		    var List = __webpack_require__(94);
		    var zrUtil = __webpack_require__(3);
		    var CoordinateSystem = __webpack_require__(25);

		    module.exports = SeriesModel.extend({

		        type: 'series.lines',

		        dependencies: ['grid', 'polar'],

		        getInitialData: function (option, ecModel) {
		            var fromDataArr = [];
		            var toDataArr = [];
		            var lineDataArr = [];
		            zrUtil.each(option.data, function (opt) {
		                fromDataArr.push(opt[0]);
		                toDataArr.push(opt[1]);
		                lineDataArr.push(zrUtil.extend(
		                    zrUtil.extend({}, zrUtil.isArray(opt[0]) ? null : opt[0]),
		                    zrUtil.isArray(opt[1]) ? null : opt[1]
		                ));
		            });

		            // var coordSys = option.coordinateSystem;
		            // if (coordSys !== 'cartesian2d' && coordSys !== 'geo') {
		            //     throw new Error('Coordinate system can only be cartesian2d or geo in lines');
		            // }

		            // var dimensions = coordSys === 'geo' ? ['lng', 'lat'] : ['x', 'y'];
		            var coordSys = CoordinateSystem.get(option.coordinateSystem);
		            if (!coordSys) {
		                throw new Error('Invalid coordinate system');
		            }
		            var dimensions = coordSys.dimensions;

		            var fromData = new List(dimensions, this);
		            var toData = new List(dimensions, this);
		            var lineData = new List(['value'], this);

		            function geoCoordGetter(item, dim, dataIndex, dimIndex) {
		                return item.coord && item.coord[dimIndex];
		            }

		            fromData.initData(fromDataArr, null, geoCoordGetter);
		            toData.initData(toDataArr, null, geoCoordGetter);
		            lineData.initData(lineDataArr);

		            this.fromData = fromData;
		            this.toData = toData;

		            return lineData;
		        },

		        formatTooltip: function (dataIndex) {
		            var fromName = this.fromData.getName(dataIndex);
		            var toName = this.toData.getName(dataIndex);
		            return fromName + ' > ' + toName;
		        },

		        defaultOption: {
		            coordinateSystem: 'geo',
		            zlevel: 0,
		            z: 2,
		            legendHoverLink: true,

		            hoverAnimation: true,
		            // Cartesian coordinate system
		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            // Geo coordinate system
		            geoIndex: 0,

		            // symbol: null,
		            // symbolSize: 10,
		            // symbolRotate: null,

		            effect: {
		                show: false,
		                period: 4,
		                symbol: 'circle',
		                symbolSize: 3,
		                // Length of trail, 0 - 1
		                trailLength: 0.2
		                // Same with lineStyle.normal.color
		                // color
		            },

		            large: false,
		            // Available when large is true
		            largeThreshold: 2000,

		            label: {
		                normal: {
		                    show: false,
		                    position: 'end'
		                    // distance: 5,
		                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
		                }
		            },
		            // itemStyle: {
		            //     normal: {
		            //     }
		            // },
		            lineStyle: {
		                normal: {
		                    opacity: 0.5
		                }
		            }
		        }
		    });


	/***/ },
	/* 255 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var LineDraw = __webpack_require__(194);
		    var EffectLine = __webpack_require__(256);
		    var Line = __webpack_require__(195);

		    __webpack_require__(1).extendChartView({

		        type: 'lines',

		        init: function () {},

		        render: function (seriesModel, ecModel, api) {
		            var data = seriesModel.getData();
		            var lineDraw = this._lineDraw;

		            var hasEffect = seriesModel.get('effect.show');
		            if (hasEffect !== this._hasEffet) {
		                if (lineDraw) {
		                    lineDraw.remove();
		                }
		                lineDraw = this._lineDraw = new LineDraw(
		                    hasEffect ? EffectLine : Line
		                );
		                this._hasEffet = hasEffect;
		            }

		            var zlevel = seriesModel.get('zlevel');
		            var trailLength = seriesModel.get('effect.trailLength');

		            var zr = api.getZr();
		            // Avoid the drag cause ghost shadow
		            // FIXME Better way ?
		            zr.painter.getLayer(zlevel).clear(true);
		            // Config layer with motion blur
		            if (this._lastZlevel != null) {
		                zr.configLayer(this._lastZlevel, {
		                    motionBlur: false
		                });
		            }
		            if (hasEffect && trailLength) {
		                zr.configLayer(zlevel, {
		                    motionBlur: true,
		                    lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)
		                });
		            }

		            this.group.add(lineDraw.group);

		            lineDraw.updateData(data);

		            this._lastZlevel = zlevel;
		        },

		        updateLayout: function (seriesModel, ecModel, api) {
		            this._lineDraw.updateLayout();
		            // Not use motion when dragging or zooming
		            var zr = api.getZr();
		            zr.painter.getLayer(this._lastZlevel).clear(true);
		        },

		        remove: function (ecModel, api) {
		            this._lineDraw && this._lineDraw.remove(api, true);
		        }
		    });


	/***/ },
	/* 256 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/chart/helper/EffectLine
		 */


		    var graphic = __webpack_require__(42);
		    var Line = __webpack_require__(195);
		    var zrUtil = __webpack_require__(3);
		    var symbolUtil = __webpack_require__(100);

		    var curveUtil = __webpack_require__(49);

		    /**
		     * @constructor
		     * @extends {module:zrender/graphic/Group}
		     * @alias {module:echarts/chart/helper/Line}
		     */
		    function EffectLine(lineData, fromData, toData, idx) {
		        graphic.Group.call(this);

		        var line = new Line(lineData, fromData, toData, idx);
		        this.add(line);

		        this._updateEffectSymbol(lineData, idx);
		    }

		    var effectLineProto = EffectLine.prototype;

		    function setAnimationPoints(symbol, points) {
		        symbol.__p1 = points[0];
		        symbol.__p2 = points[1];
		        symbol.__cp1 = points[2] || [
		            (points[0][0] + points[1][0]) / 2,
		            (points[0][1] + points[1][1]) / 2
		        ];
		    }

		    function updateSymbolPosition() {
		        var p1 = this.__p1;
		        var p2 = this.__p2;
		        var cp1 = this.__cp1;
		        var t = this.__t;
		        var pos = this.position;
		        var quadraticAt = curveUtil.quadraticAt;
		        var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;
		        pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);
		        pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t);

		        // Tangent
		        var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);
		        var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);

		        this.rotation = -Math.atan2(ty, tx) - Math.PI / 2;

		        this.ignore = false;
		    }

		    effectLineProto._updateEffectSymbol = function (lineData, idx) {
		        var itemModel = lineData.getItemModel(idx);
		        var effectModel = itemModel.getModel('effect');
		        var size = effectModel.get('symbolSize');
		        var symbolType = effectModel.get('symbol');
		        if (!zrUtil.isArray(size)) {
		            size = [size, size];
		        }
		        var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');
		        var symbol = this.childAt(1);
		        var period = effectModel.get('period') * 1000;
		        if (this._symbolType !== symbolType || period !== this._period) {
		            symbol = symbolUtil.createSymbol(
		                symbolType, -0.5, -0.5, 1, 1, color
		            );
		            symbol.ignore = true;
		            symbol.z2 = 100;
		            this._symbolType = symbolType;
		            this._period = period;

		            this.add(symbol);

		            symbol.__t = 0;
		            symbol.animate('', true)
		                .when(period, {
		                    __t: 1
		                })
		                .delay(idx / lineData.count() * period / 2)
		                .during(zrUtil.bind(updateSymbolPosition, symbol))
		                .start();
		        }
		        // Shadow color is same with color in default
		        symbol.setStyle('shadowColor', color);
		        symbol.setStyle(effectModel.getItemStyle(['color']));

		        symbol.attr('scale', size);
		        var points = lineData.getItemLayout(idx);
		        setAnimationPoints(symbol, points);

		        symbol.setColor(color);
		        symbol.attr('scale', size);
		    };

		    effectLineProto.updateData = function (lineData, fromData, toData, idx) {
		        this.childAt(0).updateData(lineData, fromData, toData, idx);
		        this._updateEffectSymbol(lineData, idx);
		    };

		    effectLineProto.updateLayout = function (lineData, fromData, toData, idx) {
		        this.childAt(0).updateLayout(lineData, fromData, toData, idx);
		        var symbol = this.childAt(1);
		        var points = lineData.getItemLayout(idx);
		        setAnimationPoints(symbol, points);
		    };

		    zrUtil.inherits(EffectLine, graphic.Group);

		    module.exports = EffectLine;


	/***/ },
	/* 257 */
	/***/ function(module, exports) {

		

		    module.exports = function (ecModel) {
		        ecModel.eachSeriesByType('lines', function (seriesModel) {
		            var coordSys = seriesModel.coordinateSystem;
		            var fromData = seriesModel.fromData;
		            var toData = seriesModel.toData;
		            var lineData = seriesModel.getData();

		            var dims = coordSys.dimensions;
		            fromData.each(dims, function (x, y, idx) {
		                fromData.setItemLayout(idx, coordSys.dataToPoint([x, y]));
		            });
		            toData.each(dims, function (x, y, idx) {
		                toData.setItemLayout(idx, coordSys.dataToPoint([x, y]));
		            });
		            lineData.each(function (idx) {
		                var p1 = fromData.getItemLayout(idx);
		                var p2 = toData.getItemLayout(idx);
		                var curveness = lineData.getItemModel(idx).get('lineStyle.normal.curveness');
		                var cp1;
		                if (curveness > 0) {
		                    cp1 = [
		                        (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness,
		                        (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness
		                    ];
		                }
		                lineData.setItemLayout(idx, [p1, p2, cp1]);
		            });
		        });
		    };


	/***/ },
	/* 258 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(259);
		    __webpack_require__(260);


	/***/ },
	/* 259 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var SeriesModel = __webpack_require__(27);
		    var createListFromArray = __webpack_require__(93);

		    module.exports = SeriesModel.extend({
		        type: 'series.heatmap',

		        getInitialData: function (option, ecModel) {
		            return createListFromArray(option.data, this, ecModel);
		        },

		        defaultOption: {

		            // Cartesian2D or geo
		            coordinateSystem: 'cartesian2d',

		            zlevel: 0,

		            z: 2,

		            // Cartesian coordinate system
		            xAxisIndex: 0,
		            yAxisIndex: 0,

		            // Geo coordinate system
		            geoIndex: 0,

		            blurSize: 30,

		            pointSize: 20,

		            maxOpacity: 1,

		            minOpacity: 0
		        }
		    });


	/***/ },
	/* 260 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var graphic = __webpack_require__(42);
		    var HeatmapLayer = __webpack_require__(261);
		    var zrUtil = __webpack_require__(3);

		    function getIsInPiecewiseRange(dataExtent, pieceList, selected) {
		        var dataSpan = dataExtent[1] - dataExtent[0];
		        pieceList = zrUtil.map(pieceList, function (piece) {
		            return {
		                interval: [
		                    (piece.interval[0] - dataExtent[0]) / dataSpan,
		                    (piece.interval[1] - dataExtent[0]) / dataSpan
		                ]
		            };
		        });
		        var len = pieceList.length;
		        var lastIndex = 0;
		        return function (val) {
		            // Try to find in the location of the last found
		            for (var i = lastIndex; i < len; i++) {
		                var interval = pieceList[i].interval;
		                if (interval[0] <= val && val <= interval[1]) {
		                    lastIndex = i;
		                    break;
		                }
		            }
		            if (i === len) { // Not found, back interation
		                for (var i = lastIndex - 1; i >= 0; i--) {
		                    var interval = pieceList[i].interval;
		                    if (interval[0] <= val && val <= interval[1]) {
		                        lastIndex = i;
		                        break;
		                    }
		                }
		            }
		            return i >= 0 && i < len && selected[i];
		        };
		    }

		    function getIsInContinuousRange(dataExtent, range) {
		        var dataSpan = dataExtent[1] - dataExtent[0];
		        range = [
		            (range[0] - dataExtent[0]) / dataSpan,
		            (range[1] - dataExtent[0]) / dataSpan
		        ];
		        return function (val) {
		            return val >= range[0] && val <= range[1];
		        };
		    }

		    function isGeoCoordSys(coordSys) {
		        var dimensions = coordSys.dimensions;
		        // Not use coorSys.type === 'geo' because coordSys maybe extended
		        return dimensions[0] === 'lng' && dimensions[1] === 'lat';
		    }

		    module.exports = __webpack_require__(1).extendChartView({

		        type: 'heatmap',

		        render: function (seriesModel, ecModel, api) {
		            var visualMapOfThisSeries;
		            ecModel.eachComponent('visualMap', function (visualMap) {
		                visualMap.eachTargetSeries(function (targetSeries) {
		                    if (targetSeries === seriesModel) {
		                        visualMapOfThisSeries = visualMap;
		                    }
		                });
		            });

		            if (!visualMapOfThisSeries) {
		                throw new Error('Heatmap must use with visualMap');
		            }

		            this.group.removeAll();
		            var coordSys = seriesModel.coordinateSystem;
		            if (coordSys.type === 'cartesian2d') {
		                this._renderOnCartesian(coordSys, seriesModel, api);
		            }
		            else if (isGeoCoordSys(coordSys)) {
		                this._renderOnGeo(
		                    coordSys, seriesModel, visualMapOfThisSeries, api
		                );
		            }
		        },

		        _renderOnCartesian: function (cartesian, seriesModel, api) {
		            var xAxis = cartesian.getAxis('x');
		            var yAxis = cartesian.getAxis('y');
		            var group = this.group;

		            if (!(xAxis.type === 'category' && yAxis.type === 'category')) {
		                throw new Error('Heatmap on cartesian must have two category axes');
		            }
		            if (!(xAxis.onBand && yAxis.onBand)) {
		                throw new Error('Heatmap on cartesian must have two axes with boundaryGap true');
		            }
		            var width = xAxis.getBandWidth();
		            var height = yAxis.getBandWidth();

		            var data = seriesModel.getData();
		            data.each(['x', 'y', 'z'], function (x, y, z, idx) {
		                var itemModel = data.getItemModel(idx);
		                var point = cartesian.dataToPoint([x, y]);
		                // Ignore empty data
		                if (isNaN(z)) {
		                    return;
		                }
		                var rect = new graphic.Rect({
		                    shape: {
		                        x: point[0] - width / 2,
		                        y: point[1] - height / 2,
		                        width: width,
		                        height: height
		                    },
		                    style: {
		                        fill: data.getItemVisual(idx, 'color')
		                    }
		                });
		                var style = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
		                var hoverStl = itemModel.getModel('itemStyle.emphasis').getItemStyle();
		                var labelModel = itemModel.getModel('label.normal');
		                var hoverLabelModel = itemModel.getModel('label.emphasis');

		                var rawValue = seriesModel.getRawValue(idx);
		                var defaultText = '-';
		                if (rawValue && rawValue[2] != null) {
		                    defaultText = rawValue[2];
		                }
		                if (labelModel.get('show')) {
		                    graphic.setText(style, labelModel);
		                    style.text = seriesModel.getFormattedLabel(idx, 'normal') || defaultText;
		                }
		                if (hoverLabelModel.get('show')) {
		                    graphic.setText(hoverStl, hoverLabelModel);
		                    hoverStl.text = seriesModel.getFormattedLabel(idx, 'emphasis') || defaultText;
		                }

		                rect.setStyle(style);

		                graphic.setHoverStyle(rect, hoverStl);

		                group.add(rect);
		                data.setItemGraphicEl(idx, rect);
		            });
		        },

		        _renderOnGeo: function (geo, seriesModel, visualMapModel, api) {
		            var inRangeVisuals = visualMapModel.targetVisuals.inRange;
		            var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;
		            // if (!visualMapping) {
		            //     throw new Error('Data range must have color visuals');
		            // }

		            var data = seriesModel.getData();
		            var hmLayer = this._hmLayer || (this._hmLayer || new HeatmapLayer());
		            hmLayer.blurSize = seriesModel.get('blurSize');
		            hmLayer.pointSize = seriesModel.get('pointSize');
		            hmLayer.minOpacity = seriesModel.get('minOpacity');
		            hmLayer.maxOpacity = seriesModel.get('maxOpacity');

		            var rect = geo.getViewRect().clone();
		            var roamTransform = geo.getRoamTransform();
		            rect.applyTransform(roamTransform);

		            // Clamp on viewport
		            var x = Math.max(rect.x, 0);
		            var y = Math.max(rect.y, 0);
		            var x2 = Math.min(rect.width + rect.x, api.getWidth());
		            var y2 = Math.min(rect.height + rect.y, api.getHeight());
		            var width = x2 - x;
		            var height = y2 - y;

		            var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {
		                var pt = geo.dataToPoint([lng, lat]);
		                pt[0] -= x;
		                pt[1] -= y;
		                pt.push(value);
		                return pt;
		            });

		            var dataExtent = visualMapModel.getExtent();
		            var isInRange = visualMapModel.type === 'visualMap.continuous'
		                ? getIsInContinuousRange(dataExtent, visualMapModel.option.range)
		                : getIsInPiecewiseRange(
		                    dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected
		                );

		            hmLayer.update(
		                points, width, height,
		                inRangeVisuals.color.getNormalizer(),
		                {
		                    inRange: inRangeVisuals.color.getColorMapper(),
		                    outOfRange: outOfRangeVisuals.color.getColorMapper()
		                },
		                isInRange
		            );
		            var img = new graphic.Image({
		                style: {
		                    width: width,
		                    height: height,
		                    x: x,
		                    y: y,
		                    image: hmLayer.canvas
		                },
		                silent: true
		            });
		            this.group.add(img);
		        }
		    });


	/***/ },
	/* 261 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file defines echarts Heatmap Chart
		 * @author Ovilia (me@zhangwenli.com)
		 * Inspired by https://github.com/mourner/simpleheat
		 *
		 * @module
		 */


		    var GRADIENT_LEVELS = 256;
		    var zrUtil = __webpack_require__(3);

		    /**
		     * Heatmap Chart
		     *
		     * @class
		     */
		    function Heatmap() {
		        var canvas = zrUtil.createCanvas();
		        this.canvas = canvas;

		        this.blurSize = 30;
		        this.pointSize = 20;

		        this.maxOpacity = 1;
		        this.minOpacity = 0;

		        this._gradientPixels = {};
		    }

		    Heatmap.prototype = {
		        /**
		         * Renders Heatmap and returns the rendered canvas
		         * @param {Array} data array of data, each has x, y, value
		         * @param {number} width canvas width
		         * @param {number} height canvas height
		         */
		        update: function(data, width, height, normalize, colorFunc, isInRange) {
		            var brush = this._getBrush();
		            var gradientInRange = this._getGradient(data, colorFunc, 'inRange');
		            var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');
		            var r = this.pointSize + this.blurSize;

		            var canvas = this.canvas;
		            var ctx = canvas.getContext('2d');
		            var len = data.length;
		            canvas.width = width;
		            canvas.height = height;
		            for (var i = 0; i < len; ++i) {
		                var p = data[i];
		                var x = p[0];
		                var y = p[1];
		                var value = p[2];

		                // calculate alpha using value
		                var alpha = normalize(value);

		                // draw with the circle brush with alpha
		                ctx.globalAlpha = alpha;
		                ctx.drawImage(brush, x - r, y - r);
		            }

		            // colorize the canvas using alpha value and set with gradient
		            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
		            var pixels = imageData.data;
		            var offset = 0;
		            var pixelLen = pixels.length;
		            var minOpacity = this.minOpacity;
		            var maxOpacity = this.maxOpacity;
		            var diffOpacity = maxOpacity - minOpacity;

		            while(offset < pixelLen) {
		                var alpha = pixels[offset + 3] / 256;
		                var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;
		                // Simple optimize to ignore the empty data
		                if (alpha > 0) {
		                    var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;
		                    // Any alpha > 0 will be mapped to [minOpacity, maxOpacity]
		                    alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);
		                    pixels[offset++] = gradient[gradientOffset];
		                    pixels[offset++] = gradient[gradientOffset + 1];
		                    pixels[offset++] = gradient[gradientOffset + 2];
		                    pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;
		                }
		                else {
		                    offset += 4;
		                }
		            }
		            ctx.putImageData(imageData, 0, 0);

		            return canvas;
		        },

		        /**
		         * get canvas of a black circle brush used for canvas to draw later
		         * @private
		         * @returns {Object} circle brush canvas
		         */
		        _getBrush: function() {
		            var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas());
		            // set brush size
		            var r = this.pointSize + this.blurSize;
		            var d = r * 2;
		            brushCanvas.width = d;
		            brushCanvas.height = d;

		            var ctx = brushCanvas.getContext('2d');
		            ctx.clearRect(0, 0, d, d);

		            // in order to render shadow without the distinct circle,
		            // draw the distinct circle in an invisible place,
		            // and use shadowOffset to draw shadow in the center of the canvas
		            ctx.shadowOffsetX = d;
		            ctx.shadowBlur = this.blurSize;
		            // draw the shadow in black, and use alpha and shadow blur to generate
		            // color in color map
		            ctx.shadowColor = '#000';

		            // draw circle in the left to the canvas
		            ctx.beginPath();
		            ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);
		            ctx.closePath();
		            ctx.fill();
		            return brushCanvas;
		        },

		        /**
		         * get gradient color map
		         * @private
		         */
		        _getGradient: function (data, colorFunc, state) {
		            var gradientPixels = this._gradientPixels;
		            var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));
		            var color = [];
		            var off = 0;
		            for (var i = 0; i < 256; i++) {
		                colorFunc[state](i / 255, true, color);
		                pixelsSingleState[off++] = color[0];
		                pixelsSingleState[off++] = color[1];
		                pixelsSingleState[off++] = color[2];
		                pixelsSingleState[off++] = color[3];
		            }
		            return pixelsSingleState;
		        }
		    };

		    module.exports = Heatmap;



	/***/ },
	/* 262 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Legend component entry file8
		 */


		    __webpack_require__(263);
		    __webpack_require__(264);
		    __webpack_require__(265);

		    var echarts = __webpack_require__(1);
		    // Series Filter
		    echarts.registerProcessor('filter', __webpack_require__(267));


	/***/ },
	/* 263 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var Model = __webpack_require__(8);

		    var LegendModel = __webpack_require__(1).extendComponentModel({

		        type: 'legend',

		        dependencies: ['series'],

		        layoutMode: {
		            type: 'box',
		            ignoreSize: true
		        },

		        init: function (option, parentModel, ecModel) {
		            this.mergeDefaultAndTheme(option, ecModel);

		            option.selected = option.selected || {};

		            this._updateData(ecModel);

		            var legendData = this._data;
		            // If has any selected in option.selected
		            var selectedMap = this.option.selected;
		            // If selectedMode is single, try to select one
		            if (legendData[0] && this.get('selectedMode') === 'single') {
		                var hasSelected = false;
		                for (var name in selectedMap) {
		                    if (selectedMap[name]) {
		                        this.select(name);
		                        hasSelected = true;
		                    }
		                }
		                // Try select the first if selectedMode is single
		                !hasSelected && this.select(legendData[0].get('name'));
		            }
		        },

		        mergeOption: function (option) {
		            LegendModel.superCall(this, 'mergeOption', option);

		            this._updateData(this.ecModel);
		        },

		        _updateData: function (ecModel) {
		            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
		                if (typeof dataItem === 'string') {
		                    dataItem = {
		                        name: dataItem
		                    };
		                }
		                return new Model(dataItem, this, this.ecModel);
		            }, this);
		            this._data = legendData;

		            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
		                return series.name;
		            });
		            ecModel.eachSeries(function (seriesModel) {
		                if (seriesModel.legendDataProvider) {
		                    var data = seriesModel.legendDataProvider();
		                    availableNames = availableNames.concat(data.mapArray(data.getName));
		                }
		            });
		            /**
		             * @type {Array.<string>}
		             * @private
		             */
		            this._availableNames = availableNames;
		        },

		        /**
		         * @return {Array.<module:echarts/model/Model>}
		         */
		        getData: function () {
		            return this._data;
		        },

		        /**
		         * @param {string} name
		         */
		        select: function (name) {
		            var selected = this.option.selected;
		            var selectedMode = this.get('selectedMode');
		            if (selectedMode === 'single') {
		                var data = this._data;
		                zrUtil.each(data, function (dataItem) {
		                    selected[dataItem.get('name')] = false;
		                });
		            }
		            selected[name] = true;
		        },

		        /**
		         * @param {string} name
		         */
		        unSelect: function (name) {
		            if (this.get('selectedMode') !== 'single') {
		                this.option.selected[name] = false;
		            }
		        },

		        /**
		         * @param {string} name
		         */
		        toggleSelected: function (name) {
		            var selected = this.option.selected;
		            // Default is true
		            if (!(name in selected)) {
		                selected[name] = true;
		            }
		            this[selected[name] ? 'unSelect' : 'select'](name);
		        },

		        /**
		         * @param {string} name
		         */
		        isSelected: function (name) {
		            var selected = this.option.selected;
		            return !((name in selected) && !selected[name])
		                && zrUtil.indexOf(this._availableNames, name) >= 0;
		        },

		        defaultOption: {
		            // 一级层叠
		            zlevel: 0,
		            // 二级层叠
		            z: 4,
		            show: true,

		            // 布局方式，默认为水平布局，可选为：
		            // 'horizontal' | 'vertical'
		            orient: 'horizontal',

		            left: 'center',
		            // right: 'center',

		            top: 'top',
		            // bottom: 'top',

		            // 水平对齐
		            // 'auto' | 'left' | 'right'
		            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
		            align: 'auto',

		            backgroundColor: 'rgba(0,0,0,0)',
		            // 图例边框颜色
		            borderColor: '#ccc',
		            // 图例边框线宽，单位px，默认为0（无边框）
		            borderWidth: 0,
		            // 图例内边距，单位px，默认各方向内边距为5，
		            // 接受数组分别设定上右下左边距，同css
		            padding: 5,
		            // 各个item之间的间隔，单位px，默认为10，
		            // 横向布局时为水平间隔，纵向布局时为纵向间隔
		            itemGap: 10,
		            // 图例图形宽度
		            itemWidth: 25,
		            // 图例图形高度
		            itemHeight: 14,
		            textStyle: {
		                // 图例文字颜色
		                color: '#333'
		            },
		            // formatter: '',
		            // 选择模式，默认开启图例开关
		            selectedMode: true
		            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
		            // selected: null,
		            // 图例内容（详见legend.data，数组中每一项代表一个item
		            // data: [],
		        }
		    });

		    module.exports = LegendModel;


	/***/ },
	/* 264 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Legend action
		 */


		    var echarts = __webpack_require__(1);
		    var zrUtil = __webpack_require__(3);

		    function legendSelectActionHandler(methodName, payload, ecModel) {
		        var selectedMap = {};
		        var isToggleSelect = methodName === 'toggleSelected';
		        var isSelected;
		        // Update all legend components
		        ecModel.eachComponent('legend', function (legendModel) {
		            if (isToggleSelect && isSelected != null) {
		                // Force other legend has same selected status
		                // Or the first is toggled to true and other are toggled to false
		                // In the case one legend has some item unSelected in option. And if other legend
		                // doesn't has the item, they will assume it is selected.
		                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
		            }
		            else {
		                legendModel[methodName](payload.name);
		                isSelected = legendModel.isSelected(payload.name);
		            }
		            var legendData = legendModel.getData();
		            zrUtil.each(legendData, function (model) {
		                var name = model.get('name');
		                // Wrap element
		                if (name === '\n' || name === '') {
		                    return;
		                }
		                var isItemSelected = legendModel.isSelected(name);
		                if (name in selectedMap) {
		                    // Unselected if any legend is unselected
		                    selectedMap[name] = selectedMap[name] && isItemSelected;
		                }
		                else {
		                    selectedMap[name] = isItemSelected;
		                }
		            });
		        });
		        // Return the event explicitly
		        return {
		            name: payload.name,
		            selected: selectedMap
		        };
		    }
		    /**
		     * @event legendToggleSelect
		     * @type {Object}
		     * @property {string} type 'legendToggleSelect'
		     * @property {string} [from]
		     * @property {string} name Series name or data item name
		     */
		    echarts.registerAction(
		        'legendToggleSelect', 'legendselectchanged',
		        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')
		    );

		    /**
		     * @event legendSelect
		     * @type {Object}
		     * @property {string} type 'legendSelect'
		     * @property {string} name Series name or data item name
		     */
		    echarts.registerAction(
		        'legendSelect', 'legendselected',
		        zrUtil.curry(legendSelectActionHandler, 'select')
		    );

		    /**
		     * @event legendUnSelect
		     * @type {Object}
		     * @property {string} type 'legendUnSelect'
		     * @property {string} name Series name or data item name
		     */
		    echarts.registerAction(
		        'legendUnSelect', 'legendunselected',
		        zrUtil.curry(legendSelectActionHandler, 'unSelect')
		    );


	/***/ },
	/* 265 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var symbolCreator = __webpack_require__(100);
		    var graphic = __webpack_require__(42);
		    var listComponentHelper = __webpack_require__(266);

		    var curry = zrUtil.curry;

		    var LEGEND_DISABLE_COLOR = '#ccc';

		    function dispatchSelectAction(name, api) {
		        api.dispatchAction({
		            type: 'legendToggleSelect',
		            name: name
		        });
		    }

		    function dispatchHighlightAction(seriesModel, dataName, api) {
		        seriesModel.get('legendHoverLink') && api.dispatchAction({
		            type: 'highlight',
		            seriesName: seriesModel.name,
		            name: dataName
		        });
		    }

		    function dispatchDownplayAction(seriesModel, dataName, api) {
		        seriesModel.get('legendHoverLink') && api.dispatchAction({
		            type: 'downplay',
		            seriesName: seriesModel.name,
		            name: dataName
		        });
		    }

		    module.exports = __webpack_require__(1).extendComponentView({

		        type: 'legend',

		        init: function () {
		            this._symbolTypeStore = {};
		        },

		        render: function (legendModel, ecModel, api) {
		            var group = this.group;
		            group.removeAll();

		            if (!legendModel.get('show')) {
		                return;
		            }

		            var selectMode = legendModel.get('selectedMode');
		            var itemAlign = legendModel.get('align');

		            if (itemAlign === 'auto') {
		                itemAlign = (legendModel.get('left') === 'right'
		                    && legendModel.get('orient') === 'vertical')
		                    ? 'right' : 'left';
		            }

		            var legendItemMap = {};
		            var legendDrawedMap = {};
		            zrUtil.each(legendModel.getData(), function (itemModel) {
		                var seriesName = itemModel.get('name');
		                // Use empty string or \n as a newline string
		                if (seriesName === '' || seriesName === '\n') {
		                    group.add(new graphic.Group({
		                        newline: true
		                    }));
		                }

		                var seriesModel = ecModel.getSeriesByName(seriesName)[0];

		                legendItemMap[seriesName] = itemModel;

		                if (!seriesModel || legendDrawedMap[seriesName]) {
		                    // Series not exists
		                    return;
		                }

		                var data = seriesModel.getData();
		                var color = data.getVisual('color');

		                // If color is a callback function
		                if (typeof color === 'function') {
		                    // Use the first data
		                    color = color(seriesModel.getDataParams(0));
		                }

		                // Using rect symbol defaultly
		                var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
		                var symbolType = data.getVisual('symbol');

		                var itemGroup = this._createItem(
		                    seriesName, itemModel, legendModel,
		                    legendSymbolType, symbolType,
		                    itemAlign, color,
		                    selectMode
		                );

		                itemGroup.on('click', curry(dispatchSelectAction, seriesName, api))
		                    .on('mouseover', curry(dispatchHighlightAction, seriesModel, '', api))
		                    .on('mouseout', curry(dispatchDownplayAction, seriesModel, '', api));

		                legendDrawedMap[seriesName] = true;
		            }, this);

		            ecModel.eachRawSeries(function (seriesModel) {
		                if (seriesModel.legendDataProvider) {
		                    var data = seriesModel.legendDataProvider();
		                    data.each(function (idx) {
		                        var name = data.getName(idx);

		                        // Avoid mutiple series use the same data name
		                        if (!legendItemMap[name] || legendDrawedMap[name]) {
		                            return;
		                        }

		                        var color = data.getItemVisual(idx, 'color');

		                        var legendSymbolType = 'roundRect';

		                        var itemGroup = this._createItem(
		                            name, legendItemMap[name], legendModel,
		                            legendSymbolType, null,
		                            itemAlign, color,
		                            selectMode
		                        );

		                        itemGroup.on('click', curry(dispatchSelectAction, name, api))
		                            // FIXME Should not specify the series name
		                            .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))
		                            .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));

		                        legendDrawedMap[name] = true;
		                    }, false, this);
		                }
		            }, this);

		            listComponentHelper.layout(group, legendModel, api);
		            // Render background after group is layout
		            // FIXME
		            listComponentHelper.addBackground(group, legendModel);
		        },

		        _createItem: function (
		            name, itemModel, legendModel,
		            legendSymbolType, symbolType,
		            itemAlign, color, selectMode
		        ) {
		            var itemWidth = legendModel.get('itemWidth');
		            var itemHeight = legendModel.get('itemHeight');

		            var isSelected = legendModel.isSelected(name);
		            var itemGroup = new graphic.Group();

		            var textStyleModel = itemModel.getModel('textStyle');

		            var itemIcon = itemModel.get('icon');

		            // Use user given icon first
		            legendSymbolType = itemIcon || legendSymbolType;
		            itemGroup.add(symbolCreator.createSymbol(
		                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : LEGEND_DISABLE_COLOR
		            ));

		            // Compose symbols
		            // PENDING
		            if (!itemIcon && symbolType
		                // At least show one symbol, can't be all none
		                && ((symbolType !== legendSymbolType) || symbolType == 'none')
		            ) {
		                var size = itemHeight * 0.8;
		                if (symbolType === 'none') {
		                    symbolType = 'circle';
		                }
		                // Put symbol in the center
		                itemGroup.add(symbolCreator.createSymbol(
		                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,
		                    isSelected ? color : LEGEND_DISABLE_COLOR
		                ));
		            }

		            // Text
		            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
		            var textAlign = itemAlign;

		            var formatter = legendModel.get('formatter');
		            if (typeof formatter === 'string' && formatter) {
		                name = formatter.replace('{name}', name);
		            }
		            else if (typeof formatter === 'function') {
		                name = formatter(name);
		            }

		            var text = new graphic.Text({
		                style: {
		                    text: name,
		                    x: textX,
		                    y: itemHeight / 2,
		                    fill: isSelected ? textStyleModel.getTextColor() : LEGEND_DISABLE_COLOR,
		                    textFont: textStyleModel.getFont(),
		                    textAlign: textAlign,
		                    textVerticalAlign: 'middle'
		                }
		            });
		            itemGroup.add(text);

		            // Add a invisible rect to increase the area of mouse hover
		            itemGroup.add(new graphic.Rect({
		                shape: itemGroup.getBoundingRect(),
		                invisible: true
		            }));

		            itemGroup.eachChild(function (child) {
		                child.silent = !selectMode;
		            });

		            this.group.add(itemGroup);

		            graphic.setHoverStyle(itemGroup);

		            return itemGroup;
		        }
		    });


	/***/ },
	/* 266 */
	/***/ function(module, exports, __webpack_require__) {

		
		    // List layout
		    var layout = __webpack_require__(21);
		    var formatUtil = __webpack_require__(6);
		    var graphic = __webpack_require__(42);

		    function positionGroup(group, model, api) {
		        layout.positionGroup(
		            group, model.getBoxLayoutParams(),
		            {
		                width: api.getWidth(),
		                height: api.getHeight()
		            },
		            model.get('padding')
		        );
		    }

		    module.exports = {
		        /**
		         * Layout list like component.
		         * It will box layout each items in group of component and then position the whole group in the viewport
		         * @param {module:zrender/group/Group} group
		         * @param {module:echarts/model/Component} componentModel
		         * @param {module:echarts/ExtensionAPI}
		         */
		        layout: function (group, componentModel, api) {
		            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {
		                width: api.getWidth(),
		                height: api.getHeight()
		            }, componentModel.get('padding'));
		            layout.box(
		                componentModel.get('orient'),
		                group,
		                componentModel.get('itemGap'),
		                rect.width,
		                rect.height
		            );

		            positionGroup(group, componentModel, api);
		        },

		        addBackground: function (group, componentModel) {
		            var padding = formatUtil.normalizeCssArray(
		                componentModel.get('padding')
		            );
		            var boundingRect = group.getBoundingRect();
		            var style = componentModel.getItemStyle(['color', 'opacity']);
		            style.fill = componentModel.get('backgroundColor');
		            var rect = new graphic.Rect({
		                shape: {
		                    x: boundingRect.x - padding[3],
		                    y: boundingRect.y - padding[0],
		                    width: boundingRect.width + padding[1] + padding[3],
		                    height: boundingRect.height + padding[0] + padding[2]
		                },
		                style: style,
		                silent: true,
		                z2: -1
		            });
		            graphic.subPixelOptimizeRect(rect);

		            group.add(rect);
		        }
		    };


	/***/ },
	/* 267 */
	/***/ function(module, exports) {

		
		   module.exports = function (ecModel) {
		        var legendModels = ecModel.findComponents({
		            mainType: 'legend'
		        });
		        if (legendModels && legendModels.length) {
		            ecModel.filterSeries(function (series) {
		                // If in any legend component the status is not selected.
		                // Because in legend series is assumed selected when it is not in the legend data.
		                for (var i = 0; i < legendModels.length; i++) {
		                    if (!legendModels[i].isSelected(series.name)) {
		                        return false;
		                    }
		                }
		                return true;
		            });
		        }
		    };


	/***/ },
	/* 268 */
	/***/ function(module, exports, __webpack_require__) {

		// FIXME Better way to pack data in graphic element


		    __webpack_require__(269);

		    __webpack_require__(270);

		    // Show tip action
		    /**
		     * @action
		     * @property {string} type
		     * @property {number} seriesIndex
		     * @property {number} dataIndex
		     * @property {number} [x]
		     * @property {number} [y]
		     */
		    __webpack_require__(1).registerAction(
		        {
		            type: 'showTip',
		            event: 'showTip',
		            update: 'none'
		        },
		        // noop
		        function () {}
		    );
		    // Hide tip action
		    __webpack_require__(1).registerAction(
		        {
		            type: 'hideTip',
		            event: 'hideTip',
		            update: 'none'
		        },
		        // noop
		        function () {}
		    );


	/***/ },
	/* 269 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(1).extendComponentModel({

		        type: 'tooltip',

		        defaultOption: {
		            zlevel: 0,

		            z: 8,

		            show: true,

		            // tooltip主体内容
		            showContent: true,

		            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
		            trigger: 'item',

		            // 触发条件，支持 'click' | 'mousemove'
		            triggerOn: 'mousemove',

		            // 是否永远显示 content
		            alwaysShowContent: false,

		            // 位置 {Array} | {Function}
		            // position: null

		            // 内容格式器：{string}（Template） ¦ {Function}
		            // formatter: null

		            // 隐藏延迟，单位ms
		            hideDelay: 100,

		            // 动画变换时间，单位s
		            transitionDuration: 0.4,

		            enterable: false,

		            // 提示背景颜色，默认为透明度为0.7的黑色
		            backgroundColor: 'rgba(50,50,50,0.7)',

		            // 提示边框颜色
		            borderColor: '#333',

		            // 提示边框圆角，单位px，默认为4
		            borderRadius: 4,

		            // 提示边框线宽，单位px，默认为0（无边框）
		            borderWidth: 0,

		            // 提示内边距，单位px，默认各方向内边距为5，
		            // 接受数组分别设定上右下左边距，同css
		            padding: 5,

		            // Extra css text
		            extraCssText: '',

		            // 坐标轴指示器，坐标轴触发有效
		            axisPointer: {
		                // 默认为直线
		                // 可选为：'line' | 'shadow' | 'cross'
		                type: 'line',

		                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
		                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
		                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
		                // 极坐标系会默认选择 angle 轴
		                axis: 'auto',

		                animation: true,
		                animationDurationUpdate: 200,
		                animationEasingUpdate: 'exponentialOut',

		                // 直线指示器样式设置
		                lineStyle: {
		                    color: '#555',
		                    width: 1,
		                    type: 'solid'
		                },

		                crossStyle: {
		                    color: '#555',
		                    width: 1,
		                    type: 'dashed',

		                    // TODO formatter
		                    textStyle: {}
		                },

		                // 阴影指示器样式设置
		                shadowStyle: {
		                    color: 'rgba(150,150,150,0.3)'
		                }
		            },
		            textStyle: {
		                color: '#fff',
		                fontSize: 14
		            }
		        }
		    });


	/***/ },
	/* 270 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var TooltipContent = __webpack_require__(271);
		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);
		    var formatUtil = __webpack_require__(6);
		    var numberUtil = __webpack_require__(7);
		    var parsePercent = numberUtil.parsePercent;
		    var env = __webpack_require__(78);

		    function dataEqual(a, b) {
		        if (!a || !b) {
		            return false;
		        }
		        var round = numberUtil.round;
		        return round(a[0]) === round(b[0])
		            && round(a[1]) === round(b[1]);
		    }
		    /**
		     * @inner
		     */
		    function makeLineShape(x1, y1, x2, y2) {
		        return {
		            x1: x1,
		            y1: y1,
		            x2: x2,
		            y2: y2
		        };
		    }

		    /**
		     * @inner
		     */
		    function makeRectShape(x, y, width, height) {
		        return {
		            x: x,
		            y: y,
		            width: width,
		            height: height
		        };
		    }

		    /**
		     * @inner
		     */
		    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
		        return {
		            cx: cx,
		            cy: cy,
		            r0: r0,
		            r: r,
		            startAngle: startAngle,
		            endAngle: endAngle,
		            clockwise: true
		        };
		    }

		    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
		        var width = el.clientWidth;
		        var height = el.clientHeight;
		        var gap = 20;

		        if (x + width + gap > viewWidth) {
		            x -= width + gap;
		        }
		        else {
		            x += gap;
		        }
		        if (y + height + gap > viewHeight) {
		            y -= height + gap;
		        }
		        else {
		            y += gap;
		        }
		        return [x, y];
		    }

		    function calcTooltipPosition(position, rect, dom) {
		        var domWidth = dom.clientWidth;
		        var domHeight = dom.clientHeight;
		        var gap = 5;
		        var x = 0;
		        var y = 0;
		        var rectWidth = rect.width;
		        var rectHeight = rect.height;
		        switch (position) {
		            case 'inside':
		                x = rect.x + rectWidth / 2 - domWidth / 2;
		                y = rect.y + rectHeight / 2 - domHeight / 2;
		                break;
		            case 'top':
		                x = rect.x + rectWidth / 2 - domWidth / 2;
		                y = rect.y - domHeight - gap;
		                break;
		            case 'bottom':
		                x = rect.x + rectWidth / 2 - domWidth / 2;
		                y = rect.y + rectHeight + gap;
		                break;
		            case 'left':
		                x = rect.x - domWidth - gap;
		                y = rect.y + rectHeight / 2 - domHeight / 2;
		                break;
		            case 'right':
		                x = rect.x + rectWidth + gap;
		                y = rect.y + rectHeight / 2 - domHeight / 2;
		        }
		        return [x, y];
		    }

		    /**
		     * @param  {string|Function|Array.<number>} positionExpr
		     * @param  {number} x Mouse x
		     * @param  {number} y Mouse y
		     * @param  {module:echarts/component/tooltip/TooltipContent} content
		     * @param  {Object|<Array.<Object>} params
		     * @param  {module:zrender/Element} el target element
		     * @param  {module:echarts/ExtensionAPI} api
		     * @return {Array.<number>}
		     */
		    function updatePosition(positionExpr, x, y, content, params, el, api) {
		        var viewWidth = api.getWidth();
		        var viewHeight = api.getHeight();

		        var rect = el && el.getBoundingRect().clone();
		        el && rect.applyTransform(el.transform);
		        if (typeof positionExpr === 'function') {
		            // Callback of position can be an array or a string specify the positiont
		            positionExpr = positionExpr([x, y], params, rect);
		        }

		        if (zrUtil.isArray(positionExpr)) {
		            x = parsePercent(positionExpr[0], viewWidth);
		            y = parsePercent(positionExpr[1], viewHeight);
		        }
		        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
		        else if (typeof positionExpr === 'string' && el) {
		            var pos = calcTooltipPosition(
		                positionExpr, rect, content.el
		            );
		            x = pos[0];
		            y = pos[1];
		        }
		        else {
		            var pos = refixTooltipPosition(
		                x, y, content.el, viewWidth, viewHeight
		            );
		            x = pos[0];
		            y = pos[1];
		        }

		        content.moveTo(x, y);
		    }

		    function ifSeriesSupportAxisTrigger(seriesModel) {
		        var coordSys = seriesModel.coordinateSystem;
		        var trigger = seriesModel.get('tooltip.trigger', true);
		        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or
		        return !(!coordSys
		            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'single')
		            || trigger === 'item');
		    }

		    __webpack_require__(1).extendComponentView({

		        type: 'tooltip',

		        _axisPointers: {},

		        init: function (ecModel, api) {
		            if (env.node) {
		                return;
		            }
		            var tooltipContent = new TooltipContent(api.getDom(), api);
		            this._tooltipContent = tooltipContent;

		            api.on('showTip', this._manuallyShowTip, this);
		            api.on('hideTip', this._manuallyHideTip, this);
		        },

		        render: function (tooltipModel, ecModel, api) {
		            if (env.node) {
		                return;
		            }

		            // Reset
		            this.group.removeAll();

		            /**
		             * @type {Object}
		             * @private
		             */
		            this._axisPointers = {};

		            /**
		             * @private
		             * @type {module:echarts/component/tooltip/TooltipModel}
		             */
		            this._tooltipModel = tooltipModel;

		            /**
		             * @private
		             * @type {module:echarts/model/Global}
		             */
		            this._ecModel = ecModel;

		            /**
		             * @private
		             * @type {module:echarts/ExtensionAPI}
		             */
		            this._api = api;

		            /**
		             * @type {Object}
		             * @private
		             */
		            this._lastHover = {
		                // data
		                // payloadBatch
		            };

		            var tooltipContent = this._tooltipContent;
		            tooltipContent.update();
		            tooltipContent.enterable = tooltipModel.get('enterable');
		            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');

		            /**
		             * @type {Object.<string, Array>}
		             */
		            this._seriesGroupByAxis = this._prepareAxisTriggerData(
		                tooltipModel, ecModel
		            );

		            var crossText = this._crossText;
		            if (crossText) {
		                this.group.add(crossText);
		            }

		            // Try to keep the tooltip show when refreshing
		            if (this._lastX != null && this._lastY != null) {
		                var self = this;
		                clearTimeout(this._refreshUpdateTimeout);
		                this._refreshUpdateTimeout = setTimeout(function () {
		                    // Show tip next tick after other charts are rendered
		                    // In case highlight action has wrong result
		                    // FIXME
		                    self._manuallyShowTip({
		                        x: self._lastX,
		                        y: self._lastY
		                    });
		                });
		            }

		            var zr = this._api.getZr();
		            var tryShow = this._tryShow;
		            zr.off('click', tryShow);
		            zr.off('mousemove', tryShow);
		            zr.off('mouseout', this._hide);
		            if (tooltipModel.get('triggerOn') === 'click') {
		                zr.on('click', tryShow, this);
		            }
		            else {
		                zr.on('mousemove', tryShow, this);
		                zr.on('mouseout', this._hide, this);
		            }

		        },

		        /**
		         * Show tip manually by
		         *  dispatchAction({
		         *      type: 'showTip',
		         *      x: 10,
		         *      y: 10
		         *  });
		         * Or
		         *  dispatchAction({
		         *      type: 'showTip',
		         *      seriesIndex: 0,
		         *      dataIndex: 1
		         *  });
		         *
		         *  TODO Batch
		         */
		        _manuallyShowTip: function (event) {
		            // From self
		            if (event.from === this.uid) {
		                return;
		            }

		            var ecModel = this._ecModel;
		            var seriesIndex = event.seriesIndex;
		            var dataIndex = event.dataIndex;
		            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
		            var api = this._api;

		            if (event.x == null || event.y == null) {
		                if (!seriesModel) {
		                    // Find the first series can use axis trigger
		                    ecModel.eachSeries(function (_series) {
		                        if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {
		                            seriesModel = _series;
		                        }
		                    });
		                }
		                if (seriesModel) {
		                    var data = seriesModel.getData();
		                    if (dataIndex == null) {
		                        dataIndex = data.indexOfName(event.name);
		                    }
		                    var el = data.getItemGraphicEl(dataIndex);
		                    var cx, cy;
		                    // Try to get the point in coordinate system
		                    var coordSys = seriesModel.coordinateSystem;
		                    if (coordSys && coordSys.dataToPoint) {
		                        var point = coordSys.dataToPoint(
		                            data.getValues(coordSys.dimensions, dataIndex, true)
		                        );
		                        cx = point && point[0];
		                        cy = point && point[1];
		                    }
		                    else if (el) {
		                        // Use graphic bounding rect
		                        var rect = el.getBoundingRect().clone();
		                        rect.applyTransform(el.transform);
		                        cx = rect.x + rect.width / 2;
		                        cy = rect.y + rect.height / 2;
		                    }
		                    if (cx != null && cy != null) {
		                        this._tryShow({
		                            offsetX: cx,
		                            offsetY: cy,
		                            target: el,
		                            event: {}
		                        });
		                    }
		                }
		            }
		            else {
		                var el = api.getZr().handler.findHover(event.x, event.y);
		                this._tryShow({
		                    offsetX: event.x,
		                    offsetY: event.y,
		                    target: el,
		                    event: {}
		                });
		            }
		        },

		        _manuallyHideTip: function (e) {
		            if (e.from === this.uid) {
		                return;
		            }

		            this._hide();
		        },

		        _prepareAxisTriggerData: function (tooltipModel, ecModel) {
		            // Prepare data for axis trigger
		            var seriesGroupByAxis = {};
		            ecModel.eachSeries(function (seriesModel) {
		                if (ifSeriesSupportAxisTrigger(seriesModel)) {
		                    var coordSys = seriesModel.coordinateSystem;
		                    var baseAxis;
		                    var key;

		                    // Only cartesian2d, polar and single support axis trigger
		                    if (coordSys.type === 'cartesian2d') {
		                        // FIXME `axisPointer.axis` is not baseAxis
		                        baseAxis = coordSys.getBaseAxis();
		                        key = baseAxis.dim + baseAxis.index;
		                    }
		                    else if (coordSys.type === 'single') {
		                        baseAxis = coordSys.getAxis();
		                        key = baseAxis.dim + baseAxis.type;
		                    }
		                    else {
		                        baseAxis = coordSys.getBaseAxis();
		                        key = baseAxis.dim + coordSys.name;
		                    }

		                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {
		                        coordSys: [],
		                        series: []
		                    };
		                    seriesGroupByAxis[key].coordSys.push(coordSys);
		                    seriesGroupByAxis[key].series.push(seriesModel);
		                }
		            }, this);

		            return seriesGroupByAxis;
		        },

		        /**
		         * mousemove handler
		         * @param {Object} e
		         * @private
		         */
		        _tryShow: function (e) {
		            var el = e.target;
		            var tooltipModel = this._tooltipModel;
		            var globalTrigger = tooltipModel.get('trigger');
		            var ecModel = this._ecModel;
		            var api = this._api;

		            if (!tooltipModel) {
		                return;
		            }

		            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
		            this._lastX = e.offsetX;
		            this._lastY = e.offsetY;

		            // Always show item tooltip if mouse is on the element with dataIndex
		            if (el && el.dataIndex != null) {
		                // Use dataModel in element if possible
		                // Used when mouseover on a element like markPoint or edge
		                // In which case, the data is not main data in series.
		                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
		                var dataIndex = el.dataIndex;
		                var itemModel = dataModel.getData().getItemModel(dataIndex);
		                // Series or single data may use item trigger when global is axis trigger
		                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {
		                    this._showAxisTooltip(tooltipModel, ecModel, e);
		                }
		                else {
		                    // Reset ticket
		                    this._ticket = '';
		                    // If either single data or series use item trigger
		                    this._hideAxisPointer();
		                    // Reset last hover and dispatch downplay action
		                    this._resetLastHover();

		                    this._showItemTooltipContent(dataModel, dataIndex, e);
		                }

		                api.dispatchAction({
		                    type: 'showTip',
		                    from: this.uid,
		                    dataIndex: el.dataIndex,
		                    seriesIndex: el.seriesIndex
		                });
		            }
		            else {
		                if (globalTrigger === 'item') {
		                    this._hide();
		                }
		                else {
		                    // Try show axis tooltip
		                    this._showAxisTooltip(tooltipModel, ecModel, e);
		                }

		                // Action of cross pointer
		                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method
		                if (tooltipModel.get('axisPointer.type') === 'cross') {
		                    api.dispatchAction({
		                        type: 'showTip',
		                        from: this.uid,
		                        x: e.offsetX,
		                        y: e.offsetY
		                    });
		                }
		            }
		        },

		        /**
		         * Show tooltip on axis
		         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel
		         * @param {module:echarts/model/Global} ecModel
		         * @param {Object} e
		         * @private
		         */
		        _showAxisTooltip: function (tooltipModel, ecModel, e) {
		            var axisPointerModel = tooltipModel.getModel('axisPointer');
		            var axisPointerType = axisPointerModel.get('type');

		            if (axisPointerType === 'cross') {
		                var el = e.target;
		                if (el && el.dataIndex != null) {
		                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);
		                    var dataIndex = el.dataIndex;
		                    this._showItemTooltipContent(seriesModel, dataIndex, e);
		                }
		            }

		            this._showAxisPointer();
		            var allNotShow = true;
		            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {
		                // Try show the axis pointer
		                var allCoordSys = seriesCoordSysSameAxis.coordSys;
		                var coordSys = allCoordSys[0];

		                // If mouse position is not in the grid or polar
		                var point = [e.offsetX, e.offsetY];

		                if (!coordSys.containPoint(point)) {
		                    // Hide axis pointer
		                    this._hideAxisPointer(coordSys.name);
		                    return;
		                }

		                allNotShow = false;
		                // Make sure point is discrete on cateogry axis
		                var dimensions = coordSys.dimensions;
		                var value = coordSys.pointToData(point, true);
		                point = coordSys.dataToPoint(value);
		                var baseAxis = coordSys.getBaseAxis();
		                var axisType = axisPointerModel.get('axis');
		                if (axisType === 'auto') {
		                    axisType = baseAxis.dim;
		                }

		                var contentNotChange = false;
		                var lastHover = this._lastHover;
		                if (axisPointerType === 'cross') {
		                    // If hover data not changed
		                    // Possible when two axes are all category
		                    if (dataEqual(lastHover.data, value)) {
		                        contentNotChange = true;
		                    }
		                    lastHover.data = value;
		                }
		                else {
		                    var valIndex = zrUtil.indexOf(dimensions, axisType);

		                    // If hover data not changed on the axis dimension
		                    if (lastHover.data === value[valIndex]) {
		                        contentNotChange = true;
		                    }
		                    lastHover.data = value[valIndex];
		                }

		                if (coordSys.type === 'cartesian2d' && !contentNotChange) {
		                    this._showCartesianPointer(
		                        axisPointerModel, coordSys, axisType, point
		                    );
		                }
		                else if (coordSys.type === 'polar' && !contentNotChange) {
		                    this._showPolarPointer(
		                        axisPointerModel, coordSys, axisType, point
		                    );
		                }
		                else if (coordSys.type === 'single' && !contentNotChange) {
		                    this._showSinglePointer(
		                        axisPointerModel, coordSys, axisType, point
		                    );
		                }

		                if (axisPointerType !== 'cross') {
		                    this._dispatchAndShowSeriesTooltipContent(
		                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange
		                    );
		                }
		            }, this);

		            if (allNotShow) {
		                this._hide();
		            }
		        },

		        /**
		         * Show tooltip on axis of cartesian coordinate
		         * @param {module:echarts/model/Model} axisPointerModel
		         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians
		         * @param {string} axisType
		         * @param {Array.<number>} point
		         * @private
		         */
		        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point) {
		            var self = this;

		            var axisPointerType = axisPointerModel.get('type');
		            var moveAnimation = axisPointerType !== 'cross';

		            if (axisPointerType === 'cross') {
		                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());
		                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());

		                this._updateCrossText(cartesian, point, axisPointerModel);
		            }
		            else {
		                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');
		                var otherExtent = otherAxis.getGlobalExtent();

		                if (cartesian.type === 'cartesian2d') {
		                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(
		                        axisType, point, otherExtent
		                    );
		                }
		            }

		            /**
		             * @inner
		             */
		            function moveGridLine(axisType, point, otherExtent) {
		                var targetShape = axisType === 'x'
		                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
		                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

		                var pointerEl = self._getPointerElement(
		                    cartesian, axisPointerModel, axisType, targetShape
		                );
		                moveAnimation
		                    ? graphic.updateProps(pointerEl, {
		                        shape: targetShape
		                    }, axisPointerModel)
		                    :  pointerEl.attr({
		                        shape: targetShape
		                    });
		            }

		            /**
		             * @inner
		             */
		            function moveGridShadow(axisType, point, otherExtent) {
		                var axis = cartesian.getAxis(axisType);
		                var bandWidth = axis.getBandWidth();
		                var span = otherExtent[1] - otherExtent[0];
		                var targetShape = axisType === 'x'
		                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)
		                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);

		                var pointerEl = self._getPointerElement(
		                    cartesian, axisPointerModel, axisType, targetShape
		                );
		                moveAnimation
		                    ? graphic.updateProps(pointerEl, {
		                        shape: targetShape
		                    }, axisPointerModel)
		                    :  pointerEl.attr({
		                        shape: targetShape
		                    });
		            }
		        },

		        _showSinglePointer: function (axisPointerModel, single, axisType, point) {
		            var self = this;
		            var axisPointerType = axisPointerModel.get('type');
		            var moveAnimation = axisPointerType !== 'cross';
		            var rect = single.getRect();
		            var otherExtent = [rect.y, rect.y + rect.height];

		            moveSingleLine(axisType, point, otherExtent);

		            /**
		             * @inner
		             */
		            function moveSingleLine(axisType, point, otherExtent) {
		                var axis = single.getAxis();
		                var orient = axis.orient;

		                var targetShape = orient === 'horizontal'
		                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
		                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

		                var pointerEl = self._getPointerElement(
		                    single, axisPointerModel, axisType, targetShape
		                );
		                moveAnimation
		                    ? graphic.updateProps(pointerEl, {
		                        shape: targetShape
		                    }, axisPointerModel)
		                    :  pointerEl.attr({
		                        shape: targetShape
		                    });
		            }

		        },

		        /**
		         * Show tooltip on axis of polar coordinate
		         * @param {module:echarts/model/Model} axisPointerModel
		         * @param {Array.<module:echarts/coord/polar/Polar>} polar
		         * @param {string} axisType
		         * @param {Array.<number>} point
		         */
		        _showPolarPointer: function (axisPointerModel, polar, axisType, point) {
		            var self = this;

		            var axisPointerType = axisPointerModel.get('type');

		            var angleAxis = polar.getAngleAxis();
		            var radiusAxis = polar.getRadiusAxis();

		            var moveAnimation = axisPointerType !== 'cross';

		            if (axisPointerType === 'cross') {
		                movePolarLine('angle', point, radiusAxis.getExtent());
		                movePolarLine('radius', point, angleAxis.getExtent());

		                this._updateCrossText(polar, point, axisPointerModel);
		            }
		            else {
		                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');
		                var otherExtent = otherAxis.getExtent();

		                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(
		                    axisType, point, otherExtent
		                );
		            }
		            /**
		             * @inner
		             */
		            function movePolarLine(axisType, point, otherExtent) {
		                var mouseCoord = polar.pointToCoord(point);

		                var targetShape;

		                if (axisType === 'angle') {
		                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);
		                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);
		                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);
		                }
		                else {
		                    targetShape = {
		                        cx: polar.cx,
		                        cy: polar.cy,
		                        r: mouseCoord[0]
		                    };
		                }

		                var pointerEl = self._getPointerElement(
		                    polar, axisPointerModel, axisType, targetShape
		                );

		                moveAnimation
		                    ? graphic.updateProps(pointerEl, {
		                        shape: targetShape
		                    }, axisPointerModel)
		                    :  pointerEl.attr({
		                        shape: targetShape
		                    });
		            }

		            /**
		             * @inner
		             */
		            function movePolarShadow(axisType, point, otherExtent) {
		                var axis = polar.getAxis(axisType);
		                var bandWidth = axis.getBandWidth();

		                var mouseCoord = polar.pointToCoord(point);

		                var targetShape;

		                var radian = Math.PI / 180;

		                if (axisType === 'angle') {
		                    targetShape = makeSectorShape(
		                        polar.cx, polar.cy,
		                        otherExtent[0], otherExtent[1],
		                        // In ECharts y is negative if angle is positive
		                        (-mouseCoord[1] - bandWidth / 2) * radian,
		                        (-mouseCoord[1] + bandWidth / 2) * radian
		                    );
		                }
		                else {
		                    targetShape = makeSectorShape(
		                        polar.cx, polar.cy,
		                        mouseCoord[0] - bandWidth / 2,
		                        mouseCoord[0] + bandWidth / 2,
		                        0, Math.PI * 2
		                    );
		                }

		                var pointerEl = self._getPointerElement(
		                    polar, axisPointerModel, axisType, targetShape
		                );
		                moveAnimation
		                    ? graphic.updateProps(pointerEl, {
		                        shape: targetShape
		                    }, axisPointerModel)
		                    :  pointerEl.attr({
		                        shape: targetShape
		                    });
		            }
		        },

		        _updateCrossText: function (coordSys, point, axisPointerModel) {
		            var crossStyleModel = axisPointerModel.getModel('crossStyle');
		            var textStyleModel = crossStyleModel.getModel('textStyle');

		            var tooltipModel = this._tooltipModel;

		            var text = this._crossText;
		            if (!text) {
		                text = this._crossText = new graphic.Text({
		                    style: {
		                        textAlign: 'left',
		                        textVerticalAlign: 'bottom'
		                    }
		                });
		                this.group.add(text);
		            }

		            var value = coordSys.pointToData(point);

		            var dims = coordSys.dimensions;
		            value = zrUtil.map(value, function (val, idx) {
		                var axis = coordSys.getAxis(dims[idx]);
		                if (axis.type === 'category' || axis.type === 'time') {
		                    val = axis.scale.getLabel(val);
		                }
		                else {
		                    val = formatUtil.addCommas(
		                        val.toFixed(axis.getPixelPrecision())
		                    );
		                }
		                return val;
		            });

		            text.setStyle({
		                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),
		                textFont: textStyleModel.getFont(),
		                text: value.join(', '),
		                x: point[0] + 5,
		                y: point[1] - 5
		            });
		            text.z = tooltipModel.get('z');
		            text.zlevel = tooltipModel.get('zlevel');
		        },

		        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {
		            var tooltipModel = this._tooltipModel;
		            var z = tooltipModel.get('z');
		            var zlevel = tooltipModel.get('zlevel');
		            var axisPointers = this._axisPointers;
		            var coordSysName = coordSys.name;
		            axisPointers[coordSysName] = axisPointers[coordSysName] || {};
		            if (axisPointers[coordSysName][axisType]) {
		                return axisPointers[coordSysName][axisType];
		            }

		            // Create if not exists
		            var pointerType = pointerModel.get('type');
		            var styleModel = pointerModel.getModel(pointerType + 'Style');
		            var isShadow = pointerType === 'shadow';
		            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();

		            var elementType = coordSys.type === 'polar'
		                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))
		                : (isShadow ? 'Rect' : 'Line');

		           isShadow ? (style.stroke = null) : (style.fill = null);

		            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({
		                style: style,
		                z: z,
		                zlevel: zlevel,
		                silent: true,
		                shape: initShape
		            });

		            this.group.add(el);
		            return el;
		        },

		        /**
		         * Dispatch actions and show tooltip on series
		         * @param {Array.<module:echarts/model/Series>} seriesList
		         * @param {Array.<number>} point
		         * @param {Array.<number>} value
		         * @param {boolean} contentNotChange
		         * @param {Object} e
		         */
		        _dispatchAndShowSeriesTooltipContent: function (
		            coordSys, seriesList, point, value, contentNotChange
		        ) {

		            var rootTooltipModel = this._tooltipModel;
		            var tooltipContent = this._tooltipContent;

		            var baseAxis = coordSys.getBaseAxis();

		            var payloadBatch = zrUtil.map(seriesList, function (series) {
		                return {
		                    seriesIndex: series.seriesIndex,
		                    dataIndex: series.getAxisTooltipDataIndex
		                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)
		                        : series.getData().indexOfNearest(
		                            series.coordDimToDataDim(baseAxis.dim)[0],
		                            value[baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1]
		                        )
		                };
		            });

		            var lastHover = this._lastHover;
		            var api = this._api;
		            // Dispatch downplay action
		            if (lastHover.payloadBatch && !contentNotChange) {
		                api.dispatchAction({
		                    type: 'downplay',
		                    batch: lastHover.payloadBatch
		                });
		            }
		            // Dispatch highlight action
		            if (!contentNotChange) {
		                api.dispatchAction({
		                    type: 'highlight',
		                    batch: payloadBatch
		                });
		                lastHover.payloadBatch = payloadBatch;
		            }
		            // Dispatch showTip action
		            api.dispatchAction({
		                type: 'showTip',
		                dataIndex: payloadBatch[0].dataIndex,
		                seriesIndex: payloadBatch[0].seriesIndex,
		                from: this.uid
		            });

		            if (baseAxis && rootTooltipModel.get('showContent')) {

		                var formatter = rootTooltipModel.get('formatter');
		                var positionExpr = rootTooltipModel.get('position');
		                var html;

		                var paramsList = zrUtil.map(seriesList, function (series, index) {
		                    return series.getDataParams(payloadBatch[index].dataIndex);
		                });
		                // If only one series
		                // FIXME
		                // if (paramsList.length === 1) {
		                //     paramsList = paramsList[0];
		                // }

		                tooltipContent.show(rootTooltipModel);

		                // Update html content
		                var firstDataIndex = payloadBatch[0].dataIndex;
		                if (!contentNotChange) {
		                    // Reset ticket
		                    this._ticket = '';
		                    if (!formatter) {
		                        // Default tooltip content
		                        // FIXME
		                        // (1) shold be the first data which has name?
		                        // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
		                        var firstLine = seriesList[0].getData().getName(firstDataIndex);
		                        html = (firstLine ? firstLine + '<br />' : '')
		                            + zrUtil.map(seriesList, function (series, index) {
		                                return series.formatTooltip(payloadBatch[index].dataIndex, true);
		                            }).join('<br />');
		                    }
		                    else {
		                        if (typeof formatter === 'string') {
		                            html = formatUtil.formatTpl(formatter, paramsList);
		                        }
		                        else if (typeof formatter === 'function') {
		                            var self = this;
		                            var ticket = 'axis_' + coordSys.name + '_' + firstDataIndex;
		                            var callback = function (cbTicket, html) {
		                                if (cbTicket === self._ticket) {
		                                    tooltipContent.setContent(html);

		                                    updatePosition(
		                                        positionExpr, point[0], point[1],
		                                        tooltipContent, paramsList, null, api
		                                    );
		                                }
		                            };
		                            self._ticket = ticket;
		                            html = formatter(paramsList, ticket, callback);
		                        }
		                    }

		                    tooltipContent.setContent(html);
		                }

		                updatePosition(
		                    positionExpr, point[0], point[1],
		                    tooltipContent, paramsList, null, api
		                );
		            }
		        },

		        /**
		         * Show tooltip on item
		         * @param {module:echarts/model/Series} seriesModel
		         * @param {number} dataIndex
		         * @param {Object} e
		         */
		        _showItemTooltipContent: function (seriesModel, dataIndex, e) {
		            // FIXME Graph data
		            var api = this._api;
		            var data = seriesModel.getData();
		            var itemModel = data.getItemModel(dataIndex);

		            var rootTooltipModel = this._tooltipModel;

		            var tooltipContent = this._tooltipContent;

		            var tooltipModel = itemModel.getModel('tooltip');

		            // If series model
		            if (tooltipModel.parentModel) {
		                tooltipModel.parentModel.parentModel = rootTooltipModel;
		            }
		            else {
		                tooltipModel.parentModel = this._tooltipModel;
		            }

		            if (tooltipModel.get('showContent')) {
		                var formatter = tooltipModel.get('formatter');
		                var positionExpr = tooltipModel.get('position');
		                var params = seriesModel.getDataParams(dataIndex);
		                var html;
		                if (!formatter) {
		                    html = seriesModel.formatTooltip(dataIndex);
		                }
		                else {
		                    if (typeof formatter === 'string') {
		                        html = formatUtil.formatTpl(formatter, params);
		                    }
		                    else if (typeof formatter === 'function') {
		                        var self = this;
		                        var ticket = 'item_' + seriesModel.name + '_' + dataIndex;
		                        var callback = function (cbTicket, html) {
		                            if (cbTicket === self._ticket) {
		                                tooltipContent.setContent(html);

		                                updatePosition(
		                                    positionExpr, e.offsetX, e.offsetY,
		                                    tooltipContent, params, e.target, api
		                                );
		                            }
		                        };
		                        self._ticket = ticket;
		                        html = formatter(params, ticket, callback);
		                    }
		                }

		                tooltipContent.show(tooltipModel);
		                tooltipContent.setContent(html);

		                updatePosition(
		                    positionExpr, e.offsetX, e.offsetY,
		                    tooltipContent, params, e.target, api
		                );
		            }
		        },

		        /**
		         * Show axis pointer
		         * @param {string} [coordSysName]
		         */
		        _showAxisPointer: function (coordSysName) {
		            if (coordSysName) {
		                var axisPointers = this._axisPointers[coordSysName];
		                axisPointers && zrUtil.each(axisPointers, function (el) {
		                    el.show();
		                });
		            }
		            else {
		                this.group.eachChild(function (child) {
		                    child.show();
		                });
		                this.group.show();
		            }
		        },

		        _resetLastHover: function () {
		            var lastHover = this._lastHover;
		            if (lastHover.payloadBatch) {
		                this._api.dispatchAction({
		                    type: 'downplay',
		                    batch: lastHover.payloadBatch
		                });
		            }
		            // Reset lastHover
		            this._lastHover = {};
		        },
		        /**
		         * Hide axis pointer
		         * @param {string} [coordSysName]
		         */
		        _hideAxisPointer: function (coordSysName) {
		            if (coordSysName) {
		                var axisPointers = this._axisPointers[coordSysName];
		                axisPointers && zrUtil.each(axisPointers, function (el) {
		                    el.hide();
		                });
		            }
		            else {
		                this.group.hide();
		            }
		        },

		        _hide: function () {
		            this._hideAxisPointer();
		            this._resetLastHover();
		            if (!this._alwaysShowContent) {
		                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
		            }

		            this._api.dispatchAction({
		                type: 'hideTip',
		                from: this.uid
		            });
		        },

		        dispose: function (ecModel, api) {
		            if (env.node) {
		                return;
		            }
		            var zr = api.getZr();
		            this._tooltipContent.hide();

		            zr.off('click', this._tryShow);
		            zr.off('mousemove', this._tryShow);
		            zr.off('mouseout', this._hide);

		            api.off('showTip', this._manuallyShowTip);
		            api.off('hideTip', this._manuallyHideTip);
		        }
		    });


	/***/ },
	/* 271 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/component/tooltip/TooltipContent
		 */


		    var zrUtil = __webpack_require__(3);
		    var zrColor = __webpack_require__(38);
		    var eventUtil = __webpack_require__(80);
		    var formatUtil = __webpack_require__(6);
		    var each = zrUtil.each;
		    var toCamelCase = formatUtil.toCamelCase;

		    var vendors = ['', '-webkit-', '-moz-', '-o-'];

		    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';

		    /**
		     * @param {number} duration
		     * @return {string}
		     * @inner
		     */
		    function assembleTransition(duration) {
		        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
		        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','
		                            + 'top ' + duration + 's ' + transitionCurve;
		        return zrUtil.map(vendors, function (vendorPrefix) {
		            return vendorPrefix + 'transition:' + transitionText;
		        }).join(';');
		    }

		    /**
		     * @param {Object} textStyle
		     * @return {string}
		     * @inner
		     */
		    function assembleFont(textStyleModel) {
		        var cssText = [];

		        var fontSize = textStyleModel.get('fontSize');
		        var color = textStyleModel.getTextColor();

		        color && cssText.push('color:' + color);

		        cssText.push('font:' + textStyleModel.getFont());

		        fontSize &&
		            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');

		        each(['decoration', 'align'], function (name) {
		            var val = textStyleModel.get(name);
		            val && cssText.push('text-' + name + ':' + val);
		        });

		        return cssText.join(';');
		    }

		    /**
		     * @param {Object} tooltipModel
		     * @return {string}
		     * @inner
		     */
		    function assembleCssText(tooltipModel) {

		        tooltipModel = tooltipModel;

		        var cssText = [];

		        var transitionDuration = tooltipModel.get('transitionDuration');
		        var backgroundColor = tooltipModel.get('backgroundColor');
		        var textStyleModel = tooltipModel.getModel('textStyle');
		        var padding = tooltipModel.get('padding');

		        // Animation transition
		        transitionDuration &&
		            cssText.push(assembleTransition(transitionDuration));

		        if (backgroundColor) {
		            // for ie
		            cssText.push(
		                'background-Color:' + zrColor.toHex(backgroundColor)
		            );
		            cssText.push('filter:alpha(opacity=70)');
		            cssText.push('background-Color:' + backgroundColor);
		        }

		        // Border style
		        each(['width', 'color', 'radius'], function (name) {
		            var borderName = 'border-' + name;
		            var camelCase = toCamelCase(borderName);
		            var val = tooltipModel.get(camelCase);
		            val != null &&
		                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
		        });

		        // Text style
		        cssText.push(assembleFont(textStyleModel));

		        // Padding
		        if (padding != null) {
		            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
		        }

		        return cssText.join(';') + ';';
		    }

		    /**
		     * @alias module:echarts/component/tooltip/TooltipContent
		     * @constructor
		     */
		    function TooltipContent(container, api) {
		        var el = document.createElement('div');
		        var zr = api.getZr();

		        this.el = el;

		        this._x = api.getWidth() / 2;
		        this._y = api.getHeight() / 2;

		        container.appendChild(el);

		        this._container = container;

		        this._show = false;

		        /**
		         * @private
		         */
		        this._hideTimeout;

		        var self = this;
		        el.onmouseenter = function () {
		            // clear the timeout in hideLater and keep showing tooltip
		            if (self.enterable) {
		                clearTimeout(self._hideTimeout);
		                self._show = true;
		            }
		            self._inContent = true;
		        };
		        el.onmousemove = function (e) {
		            if (!self.enterable) {
		                // Try trigger zrender event to avoid mouse
		                // in and out shape too frequently
		                var handler = zr.handler;
		                eventUtil.normalizeEvent(container, e);
		                handler.dispatch('mousemove', e);
		            }
		        };
		        el.onmouseleave = function () {
		            if (self.enterable) {
		                if (self._show) {
		                    self.hideLater(self._hideDelay);
		                }
		            }
		            self._inContent = false;
		        };

		        compromiseMobile(el, container);
		    }

		    function compromiseMobile(tooltipContentEl, container) {
		        // Prevent default behavior on mobile. For example,
		        // defuault pinch gesture will cause browser zoom.
		        // We do not preventing event on tooltip contnet el,
		        // because user may need customization in tooltip el.
		        eventUtil.addEventListener(container, 'touchstart', preventDefault);
		        eventUtil.addEventListener(container, 'touchmove', preventDefault);
		        eventUtil.addEventListener(container, 'touchend', preventDefault);

		        function preventDefault(e) {
		            if (contains(e.target)) {
		                e.preventDefault();
		            }
		        }

		        function contains(targetEl) {
		            while (targetEl && targetEl !== container) {
		                if (targetEl === tooltipContentEl) {
		                    return true;
		                }
		                targetEl = targetEl.parentNode;
		            }
		        }
		    }

		    TooltipContent.prototype = {

		        constructor: TooltipContent,

		        enterable: true,

		        /**
		         * Update when tooltip is rendered
		         */
		        update: function () {
		            var container = this._container;
		            var stl = container.currentStyle
		                || document.defaultView.getComputedStyle(container);
		            var domStyle = container.style;
		            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
		                domStyle.position = 'relative';
		            }
		            // Hide the tooltip
		            // PENDING
		            // this.hide();
		        },

		        show: function (tooltipModel) {
		            clearTimeout(this._hideTimeout);

		            this.el.style.cssText = gCssText + assembleCssText(tooltipModel)
		                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
		                + ';left:' + this._x + 'px;top:' + this._y + 'px;'
		                + (tooltipModel.get('extraCssText') || '');

		            this._show = true;
		        },

		        setContent: function (content) {
		            var el = this.el;
		            el.innerHTML = content;
		            el.style.display = content ? 'block' : 'none';
		        },

		        moveTo: function (x, y) {
		            var style = this.el.style;
		            style.left = x + 'px';
		            style.top = y + 'px';

		            this._x = x;
		            this._y = y;
		        },

		        hide: function () {
		            this.el.style.display = 'none';
		            this._show = false;
		        },

		        // showLater: function ()

		        hideLater: function (time) {
		            if (this._show && !(this._inContent && this.enterable)) {
		                if (time) {
		                    this._hideDelay = time;
		                    // Set show false to avoid invoke hideLater mutiple times
		                    this._show = false;
		                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
		                }
		                else {
		                    this.hide();
		                }
		            }
		        },

		        isShow: function () {
		            return this._show;
		        }
		    };

		    module.exports = TooltipContent;


	/***/ },
	/* 272 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    __webpack_require__(273);
		    __webpack_require__(279);
		    __webpack_require__(281);

		    // Polar view
		    __webpack_require__(1).extendComponentView({
		        type: 'polar'
		    });


	/***/ },
	/* 273 */
	/***/ function(module, exports, __webpack_require__) {

		// TODO Axis scale


		    var Polar = __webpack_require__(274);
		    var numberUtil = __webpack_require__(7);

		    var axisHelper = __webpack_require__(108);
		    var niceScaleExtent = axisHelper.niceScaleExtent;

		    // 依赖 PolarModel 做预处理
		    __webpack_require__(277);

		    /**
		     * Resize method bound to the polar
		     * @param {module:echarts/coord/polar/PolarModel} polarModel
		     * @param {module:echarts/ExtensionAPI} api
		     */
		    function resizePolar(polarModel, api) {
		        var center = polarModel.get('center');
		        var radius = polarModel.get('radius');
		        var width = api.getWidth();
		        var height = api.getHeight();
		        var parsePercent = numberUtil.parsePercent;

		        this.cx = parsePercent(center[0], width);
		        this.cy = parsePercent(center[1], height);

		        var radiusAxis = this.getRadiusAxis();
		        var size = Math.min(width, height) / 2;
		        // var idx = radiusAxis.inverse ? 1 : 0;
		        radiusAxis.setExtent(0, parsePercent(radius, size));
		    }

		    /**
		     * Update polar
		     */
		    function updatePolarScale(ecModel, api) {
		        var polar = this;
		        var angleAxis = polar.getAngleAxis();
		        var radiusAxis = polar.getRadiusAxis();
		        // Reset scale
		        angleAxis.scale.setExtent(Infinity, -Infinity);
		        radiusAxis.scale.setExtent(Infinity, -Infinity);

		        ecModel.eachSeries(function (seriesModel) {
		            if (seriesModel.coordinateSystem === polar) {
		                var data = seriesModel.getData();
		                radiusAxis.scale.unionExtent(
		                    data.getDataExtent('radius', radiusAxis.type !== 'category')
		                );
		                angleAxis.scale.unionExtent(
		                    data.getDataExtent('angle', angleAxis.type !== 'category')
		                );
		            }
		        });

		        niceScaleExtent(angleAxis, angleAxis.model);
		        niceScaleExtent(radiusAxis, radiusAxis.model);

		        // Fix extent of category angle axis
		        if (angleAxis.type === 'category' && !angleAxis.onBand) {
		            var extent = angleAxis.getExtent();
		            var diff = 360 / angleAxis.scale.count();
		            angleAxis.inverse ? (extent[1] += diff) : (extent[1] -= diff);
		            angleAxis.setExtent(extent[0], extent[1]);
		        }
		    }

		    /**
		     * Set common axis properties
		     * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
		     * @param {module:echarts/coord/polar/AxisModel}
		     * @inner
		     */
		    function setAxis(axis, axisModel) {
		        axis.type = axisModel.get('type');
		        axis.scale = axisHelper.createScaleByModel(axisModel);
		        axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';

		        // FIXME Radius axis not support inverse axis
		        if (axisModel.mainType === 'angleAxis') {
		            var startAngle = axisModel.get('startAngle');
		            axis.inverse = axisModel.get('inverse') ^ axisModel.get('clockwise');
		            axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));
		        }

		        // Inject axis instance
		        axisModel.axis = axis;
		        axis.model = axisModel;
		    }


		    var polarCreator = {

		        dimensions: Polar.prototype.dimensions,

		        create: function (ecModel, api) {
		            var polarList = [];
		            ecModel.eachComponent('polar', function (polarModel, idx) {
		                var polar = new Polar(idx);
		                // Inject resize and update method
		                polar.resize = resizePolar;
		                polar.update = updatePolarScale;

		                var radiusAxis = polar.getRadiusAxis();
		                var angleAxis = polar.getAngleAxis();

		                var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
		                var angleAxisModel = polarModel.findAxisModel('angleAxis');

		                setAxis(radiusAxis, radiusAxisModel);
		                setAxis(angleAxis, angleAxisModel);

		                polar.resize(polarModel, api);
		                polarList.push(polar);

		                polarModel.coordinateSystem = polar;
		            });
		            // Inject coordinateSystem to series
		            ecModel.eachSeries(function (seriesModel) {
		                if (seriesModel.get('coordinateSystem') === 'polar') {
		                    seriesModel.coordinateSystem = polarList[seriesModel.get('polarIndex')];
		                }
		            });

		            return polarList;
		        }
		    };

		    __webpack_require__(25).register('polar', polarCreator);


	/***/ },
	/* 274 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		/**
		 * @module echarts/coord/polar/Polar
		 */


		    var RadiusAxis = __webpack_require__(275);
		    var AngleAxis = __webpack_require__(276);

		    /**
		     * @alias {module:echarts/coord/polar/Polar}
		     * @constructor
		     * @param {string} name
		     */
		    var Polar = function (name) {

		        /**
		         * @type {string}
		         */
		        this.name = name || '';

		        /**
		         * x of polar center
		         * @type {number}
		         */
		        this.cx = 0;

		        /**
		         * y of polar center
		         * @type {number}
		         */
		        this.cy = 0;

		        /**
		         * @type {module:echarts/coord/polar/RadiusAxis}
		         * @private
		         */
		        this._radiusAxis = new RadiusAxis();

		        /**
		         * @type {module:echarts/coord/polar/AngleAxis}
		         * @private
		         */
		        this._angleAxis = new AngleAxis();
		    };

		    Polar.prototype = {

		        constructor: Polar,

		        type: 'polar',

		        /**
		         * @param {Array.<string>}
		         * @readOnly
		         */
		        dimensions: ['radius', 'angle'],

		        /**
		         * If contain coord
		         * @param {Array.<number>} point
		         * @return {boolean}
		         */
		        containPoint: function (point) {
		            var coord = this.pointToCoord(point);
		            return this._radiusAxis.contain(coord[0])
		                && this._angleAxis.contain(coord[1]);
		        },

		        /**
		         * If contain data
		         * @param {Array.<number>} data
		         * @return {boolean}
		         */
		        containData: function (data) {
		            return this._radiusAxis.containData(data[0])
		                && this._angleAxis.containData(data[1]);
		        },

		        /**
		         * @param {string} axisType
		         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
		         */
		        getAxis: function (axisType) {
		            return this['_' + axisType + 'Axis'];
		        },

		        /**
		         * Get axes by type of scale
		         * @param {string} scaleType
		         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
		         */
		        getAxesByScale: function (scaleType) {
		            var axes = [];
		            var angleAxis = this._angleAxis;
		            var radiusAxis = this._radiusAxis;
		            angleAxis.scale.type === scaleType && axes.push(angleAxis);
		            radiusAxis.scale.type === scaleType && axes.push(radiusAxis);

		            return axes;
		        },

		        /**
		         * @return {module:echarts/coord/polar/AngleAxis}
		         */
		        getAngleAxis: function () {
		            return this._angleAxis;
		        },

		        /**
		         * @return {module:echarts/coord/polar/RadiusAxis}
		         */
		        getRadiusAxis: function () {
		            return this._radiusAxis;
		        },

		        /**
		         * @param {module:echarts/coord/polar/Axis}
		         * @return {module:echarts/coord/polar/Axis}
		         */
		        getOtherAxis: function (axis) {
		            var angleAxis = this._angleAxis;
		            return axis === angleAxis ? this._radiusAxis : angleAxis;
		        },

		        /**
		         * Base axis will be used on stacking.
		         *
		         * @return {module:echarts/coord/polar/Axis}
		         */
		        getBaseAxis: function () {
		            return this.getAxesByScale('ordinal')[0]
		                || this.getAxesByScale('time')[0]
		                || this.getAngleAxis();
		        },

		        /**
		         * Convert series data to a list of (x, y) points
		         * @param {module:echarts/data/List} data
		         * @return {Array}
		         *  Return list of coordinates. For example:
		         *  `[[10, 10], [20, 20], [30, 30]]`
		         */
		        dataToPoints: function (data) {
		            return data.mapArray(this.dimensions, function (radius, angle) {
		                return this.dataToPoint([radius, angle]);
		            }, this);
		        },

		        /**
		         * Convert a single data item to (x, y) point.
		         * Parameter data is an array which the first element is radius and the second is angle
		         * @param {Array.<number>} data
		         * @param {boolean} [clamp=false]
		         * @return {Array.<number>}
		         */
		        dataToPoint: function (data, clamp) {
		            return this.coordToPoint([
		                this._radiusAxis.dataToRadius(data[0], clamp),
		                this._angleAxis.dataToAngle(data[1], clamp)
		            ]);
		        },

		        /**
		         * Convert a (x, y) point to data
		         * @param {Array.<number>} point
		         * @param {boolean} [clamp=false]
		         * @return {Array.<number>}
		         */
		        pointToData: function (point, clamp) {
		            var coord = this.pointToCoord(point);
		            return [
		                this._radiusAxis.radiusToData(coord[0], clamp),
		                this._angleAxis.angleToData(coord[1], clamp)
		            ];
		        },

		        /**
		         * Convert a (x, y) point to (radius, angle) coord
		         * @param {Array.<number>} point
		         * @return {Array.<number>}
		         */
		        pointToCoord: function (point) {
		            var dx = point[0] - this.cx;
		            var dy = point[1] - this.cy;
		            var angleAxis = this.getAngleAxis();
		            var extent = angleAxis.getExtent();
		            var minAngle = Math.min(extent[0], extent[1]);
		            var maxAngle = Math.max(extent[0], extent[1]);
		            // Fix fixed extent in polarCreator
		            // FIXME
		            angleAxis.inverse
		                ? (minAngle = maxAngle - 360)
		                : (maxAngle = minAngle + 360);

		            var radius = Math.sqrt(dx * dx + dy * dy);
		            dx /= radius;
		            dy /= radius;

		            var radian = Math.atan2(-dy, dx) / Math.PI * 180;

		            // move to angleExtent
		            var dir = radian < minAngle ? 1 : -1;
		            while (radian < minAngle || radian > maxAngle) {
		                radian += dir * 360;
		            }

		            return [radius, radian];
		        },

		        /**
		         * Convert a (radius, angle) coord to (x, y) point
		         * @param {Array.<number>} coord
		         * @return {Array.<number>}
		         */
		        coordToPoint: function (coord) {
		            var radius = coord[0];
		            var radian = coord[1] / 180 * Math.PI;
		            var x = Math.cos(radian) * radius + this.cx;
		            // Inverse the y
		            var y = -Math.sin(radian) * radius + this.cy;

		            return [x, y];
		        }
		    };

		    module.exports = Polar;


	/***/ },
	/* 275 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var Axis = __webpack_require__(117);

		    function RadiusAxis(scale, radiusExtent) {

		        Axis.call(this, 'radius', scale, radiusExtent);

		        /**
		         * Axis type
		         *  - 'category'
		         *  - 'value'
		         *  - 'time'
		         *  - 'log'
		         * @type {string}
		         */
		        this.type = 'category';
		    }

		    RadiusAxis.prototype = {

		        constructor: RadiusAxis,

		        dataToRadius: Axis.prototype.dataToCoord,

		        radiusToData: Axis.prototype.coordToData
		    };

		    zrUtil.inherits(RadiusAxis, Axis);

		    module.exports = RadiusAxis;


	/***/ },
	/* 276 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var Axis = __webpack_require__(117);

		    function AngleAxis(scale, angleExtent) {

		        angleExtent = angleExtent || [0, 360];

		        Axis.call(this, 'angle', scale, angleExtent);

		        /**
		         * Axis type
		         *  - 'category'
		         *  - 'value'
		         *  - 'time'
		         *  - 'log'
		         * @type {string}
		         */
		        this.type = 'category';
		    }

		    AngleAxis.prototype = {

		        constructor: AngleAxis,

		        dataToAngle: Axis.prototype.dataToCoord,

		        angleToData: Axis.prototype.coordToData
		    };

		    zrUtil.inherits(AngleAxis, Axis);

		    module.exports = AngleAxis;


	/***/ },
	/* 277 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    __webpack_require__(278);

		    __webpack_require__(1).extendComponentModel({

		        type: 'polar',

		        dependencies: ['polarAxis', 'angleAxis'],

		        /**
		         * @type {module:echarts/coord/polar/Polar}
		         */
		        coordinateSystem: null,

		        /**
		         * @param {string} axisType
		         * @return {module:echarts/coord/polar/AxisModel}
		         */
		        findAxisModel: function (axisType) {
		            var angleAxisModel;
		            var ecModel = this.ecModel;
		            ecModel.eachComponent(axisType, function (axisModel) {
		                if (ecModel.getComponent(
		                        'polar', axisModel.getShallow('polarIndex')
		                    ) === this) {
		                    angleAxisModel = axisModel;
		                }
		            }, this);
		            return angleAxisModel;
		        },

		        defaultOption: {

		            zlevel: 0,

		            z: 0,

		            center: ['50%', '50%'],

		            radius: '80%'
		        }
		    });


	/***/ },
	/* 278 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var ComponentModel = __webpack_require__(19);
		    var axisModelCreator = __webpack_require__(121);

		    var PolarAxisModel = ComponentModel.extend({
		        type: 'polarAxis',
		        /**
		         * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
		         */
		        axis: null
		    });

		    zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(123));

		    var polarAxisDefaultExtendedOption = {
		        angle: {
		            polarIndex: 0,

		            startAngle: 90,

		            clockwise: true,

		            splitNumber: 12,

		            axisLabel: {
		                rotate: false
		            }
		        },
		        radius: {
		            polarIndex: 0,

		            splitNumber: 5
		        }
		    };

		    function getAxisType(axisDim, option) {
		        // Default axis with data is category axis
		        return option.type || (option.data ? 'category' : 'value');
		    }

		    axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);
		    axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);



	/***/ },
	/* 279 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    __webpack_require__(273);

		    __webpack_require__(280);


	/***/ },
	/* 280 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var Model = __webpack_require__(8);

		    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];

		    function getAxisLineShape(polar, r0, r, angle) {
		        var start = polar.coordToPoint([r0, angle]);
		        var end = polar.coordToPoint([r, angle]);

		        return {
		            x1: start[0],
		            y1: start[1],
		            x2: end[0],
		            y2: end[1]
		        };
		    }
		    __webpack_require__(1).extendComponentView({

		        type: 'angleAxis',

		        render: function (angleAxisModel, ecModel) {
		            this.group.removeAll();
		            if (!angleAxisModel.get('show')) {
		                return;
		            }

		            var polarModel = ecModel.getComponent('polar', angleAxisModel.get('polarIndex'));
		            var angleAxis = angleAxisModel.axis;
		            var polar = polarModel.coordinateSystem;
		            var radiusExtent = polar.getRadiusAxis().getExtent();
		            var ticksAngles = angleAxis.getTicksCoords();

		            if (angleAxis.type !== 'category') {
		                // Remove the last tick which will overlap the first tick
		                ticksAngles.pop();
		            }

		            zrUtil.each(elementList, function (name) {
		                if (angleAxisModel.get(name +'.show')) {
		                    this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);
		                }
		            }, this);
		        },

		        /**
		         * @private
		         */
		        _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
		            var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');

		            var circle = new graphic.Circle({
		                shape: {
		                    cx: polar.cx,
		                    cy: polar.cy,
		                    r: radiusExtent[1]
		                },
		                style: lineStyleModel.getLineStyle(),
		                z2: 1,
		                silent: true
		            });
		            circle.style.fill = null;

		            this.group.add(circle);
		        },

		        /**
		         * @private
		         */
		        _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
		            var tickModel = angleAxisModel.getModel('axisTick');

		            var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');

		            var lines = zrUtil.map(ticksAngles, function (tickAngle) {
		                return new graphic.Line({
		                    shape: getAxisLineShape(polar, radiusExtent[1], radiusExtent[1] + tickLen, tickAngle)
		                });
		            });
		            this.group.add(graphic.mergePath(
		                lines, {
		                    style: tickModel.getModel('lineStyle').getLineStyle()
		                }
		            ));
		        },

		        /**
		         * @private
		         */
		        _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
		            var axis = angleAxisModel.axis;

		            var categoryData = angleAxisModel.get('data');

		            var labelModel = angleAxisModel.getModel('axisLabel');
		            var axisTextStyleModel = labelModel.getModel('textStyle');

		            var labels = angleAxisModel.getFormattedLabels();

		            var labelMargin = labelModel.get('margin');
		            var labelsAngles = axis.getLabelsCoords();

		            // Use length of ticksAngles because it may remove the last tick to avoid overlapping
		            for (var i = 0; i < ticksAngles.length; i++) {
		                var r = radiusExtent[1];
		                var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);
		                var cx = polar.cx;
		                var cy = polar.cy;

		                var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3
		                    ? 'center' : (p[0] > cx ? 'left' : 'right');
		                var labelTextBaseline = Math.abs(p[1] - cy) / r < 0.3
		                    ? 'middle' : (p[1] > cy ? 'top' : 'bottom');

		                var textStyleModel = axisTextStyleModel;
		                if (categoryData && categoryData[i] && categoryData[i].textStyle) {
		                    textStyleModel = new Model(
		                        categoryData[i].textStyle, axisTextStyleModel
		                    );
		                }
		                this.group.add(new graphic.Text({
		                    style: {
		                        x: p[0],
		                        y: p[1],
		                        fill: textStyleModel.getTextColor(),
		                        text: labels[i],
		                        textAlign: labelTextAlign,
		                        textVerticalAlign: labelTextBaseline,
		                        textFont: textStyleModel.getFont()
		                    },
		                    silent: true
		                }));
		            }
		        },

		        /**
		         * @private
		         */
		        _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
		            var splitLineModel = angleAxisModel.getModel('splitLine');
		            var lineStyleModel = splitLineModel.getModel('lineStyle');
		            var lineColors = lineStyleModel.get('color');
		            var lineCount = 0;

		            lineColors = lineColors instanceof Array ? lineColors : [lineColors];

		            var splitLines = [];

		            for (var i = 0; i < ticksAngles.length; i++) {
		                var colorIndex = (lineCount++) % lineColors.length;
		                splitLines[colorIndex] = splitLines[colorIndex] || [];
		                splitLines[colorIndex].push(new graphic.Line({
		                    shape: getAxisLineShape(polar, radiusExtent[0], radiusExtent[1], ticksAngles[i])
		                }));
		            }

		            // Simple optimization
		            // Batching the lines if color are the same
		            for (var i = 0; i < splitLines.length; i++) {
		                this.group.add(graphic.mergePath(splitLines[i], {
		                    style: zrUtil.defaults({
		                        stroke: lineColors[i % lineColors.length]
		                    }, lineStyleModel.getLineStyle()),
		                    silent: true,
		                    z: angleAxisModel.get('z')
		                }));
		            }
		        },

		        /**
		         * @private
		         */
		        _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {

		            var splitAreaModel = angleAxisModel.getModel('splitArea');
		            var areaStyleModel = splitAreaModel.getModel('areaStyle');
		            var areaColors = areaStyleModel.get('color');
		            var lineCount = 0;

		            areaColors = areaColors instanceof Array ? areaColors : [areaColors];

		            var splitAreas = [];

		            var RADIAN = Math.PI / 180;
		            var prevAngle = -ticksAngles[0] * RADIAN;
		            var r0 = Math.min(radiusExtent[0], radiusExtent[1]);
		            var r1 = Math.max(radiusExtent[0], radiusExtent[1]);

		            var clockwise = angleAxisModel.get('clockwise');

		            for (var i = 1; i < ticksAngles.length; i++) {
		                var colorIndex = (lineCount++) % areaColors.length;
		                splitAreas[colorIndex] = splitAreas[colorIndex] || [];
		                splitAreas[colorIndex].push(new graphic.Sector({
		                    shape: {
		                        cx: polar.cx,
		                        cy: polar.cy,
		                        r0: r0,
		                        r: r1,
		                        startAngle: prevAngle,
		                        endAngle: -ticksAngles[i] * RADIAN,
		                        clockwise: clockwise
		                    },
		                    silent: true
		                }));
		                prevAngle = -ticksAngles[i] * RADIAN;
		            }

		            // Simple optimization
		            // Batching the lines if color are the same
		            for (var i = 0; i < splitAreas.length; i++) {
		                this.group.add(graphic.mergePath(splitAreas[i], {
		                    style: zrUtil.defaults({
		                        fill: areaColors[i % areaColors.length]
		                    }, areaStyleModel.getAreaStyle()),
		                    silent: true
		                }));
		            }
		        }
		    });


	/***/ },
	/* 281 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(273);

		    __webpack_require__(282);


	/***/ },
	/* 282 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var AxisBuilder = __webpack_require__(126);

		    var axisBuilderAttrs = [
		        'axisLine', 'axisLabel', 'axisTick', 'axisName'
		    ];
		    var selfBuilderAttrs = [
		        'splitLine', 'splitArea'
		    ];

		    __webpack_require__(1).extendComponentView({

		        type: 'radiusAxis',

		        render: function (radiusAxisModel, ecModel) {
		            this.group.removeAll();
		            if (!radiusAxisModel.get('show')) {
		                return;
		            }
		            var polarModel = ecModel.getComponent('polar', radiusAxisModel.get('polarIndex'));
		            var angleAxis = polarModel.coordinateSystem.getAngleAxis();
		            var radiusAxis = radiusAxisModel.axis;
		            var polar = polarModel.coordinateSystem;
		            var ticksCoords = radiusAxis.getTicksCoords();
		            var axisAngle = angleAxis.getExtent()[0];
		            var radiusExtent = radiusAxis.getExtent();

		            var layout = layoutAxis(polar, radiusAxisModel, axisAngle);
		            var axisBuilder = new AxisBuilder(radiusAxisModel, layout);
		            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
		            this.group.add(axisBuilder.getGroup());

		            zrUtil.each(selfBuilderAttrs, function (name) {
		                if (radiusAxisModel.get(name +'.show')) {
		                    this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);
		                }
		            }, this);
		        },

		        /**
		         * @private
		         */
		        _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
		            var splitLineModel = radiusAxisModel.getModel('splitLine');
		            var lineStyleModel = splitLineModel.getModel('lineStyle');
		            var lineColors = lineStyleModel.get('color');
		            var lineCount = 0;

		            lineColors = lineColors instanceof Array ? lineColors : [lineColors];

		            var splitLines = [];

		            for (var i = 0; i < ticksCoords.length; i++) {
		                var colorIndex = (lineCount++) % lineColors.length;
		                splitLines[colorIndex] = splitLines[colorIndex] || [];
		                splitLines[colorIndex].push(new graphic.Circle({
		                    shape: {
		                        cx: polar.cx,
		                        cy: polar.cy,
		                        r: ticksCoords[i]
		                    },
		                    silent: true
		                }));
		            }

		            // Simple optimization
		            // Batching the lines if color are the same
		            for (var i = 0; i < splitLines.length; i++) {
		                this.group.add(graphic.mergePath(splitLines[i], {
		                    style: zrUtil.defaults({
		                        stroke: lineColors[i % lineColors.length],
		                        fill: null
		                    }, lineStyleModel.getLineStyle()),
		                    silent: true
		                }));
		            }
		        },

		        /**
		         * @private
		         */
		        _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {

		            var splitAreaModel = radiusAxisModel.getModel('splitArea');
		            var areaStyleModel = splitAreaModel.getModel('areaStyle');
		            var areaColors = areaStyleModel.get('color');
		            var lineCount = 0;

		            areaColors = areaColors instanceof Array ? areaColors : [areaColors];

		            var splitAreas = [];

		            var prevRadius = ticksCoords[0];
		            for (var i = 1; i < ticksCoords.length; i++) {
		                var colorIndex = (lineCount++) % areaColors.length;
		                splitAreas[colorIndex] = splitAreas[colorIndex] || [];
		                splitAreas[colorIndex].push(new graphic.Sector({
		                    shape: {
		                        cx: polar.cx,
		                        cy: polar.cy,
		                        r0: prevRadius,
		                        r: ticksCoords[i],
		                        startAngle: 0,
		                        endAngle: Math.PI * 2
		                    },
		                    silent: true
		                }));
		                prevRadius = ticksCoords[i];
		            }

		            // Simple optimization
		            // Batching the lines if color are the same
		            for (var i = 0; i < splitAreas.length; i++) {
		                this.group.add(graphic.mergePath(splitAreas[i], {
		                    style: zrUtil.defaults({
		                        fill: areaColors[i % areaColors.length]
		                    }, areaStyleModel.getAreaStyle()),
		                    silent: true
		                }));
		            }
		        }
		    });

		    /**
		     * @inner
		     */
		    function layoutAxis(polar, radiusAxisModel, axisAngle) {
		        return {
		            position: [polar.cx, polar.cy],
		            rotation: axisAngle / 180 * Math.PI,
		            labelDirection: -1,
		            tickDirection: -1,
		            nameDirection: 1,
		            labelRotation: radiusAxisModel.getModel('axisLabel').get('rotate'),
		            // Over splitLine and splitArea
		            z2: 1
		        };
		    }


	/***/ },
	/* 283 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(163);

		    __webpack_require__(284);

		    __webpack_require__(161);


	/***/ },
	/* 284 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var MapDraw = __webpack_require__(158);

		    module.exports = __webpack_require__(1).extendComponentView({

		        type: 'geo',

		        init: function (ecModel, api) {
		            var mapDraw = new MapDraw(api, true);
		            this._mapDraw = mapDraw;

		            this.group.add(mapDraw.group);
		        },

		        render: function (geoModel, ecModel, api) {
		            geoModel.get('show') &&
		                this._mapDraw.draw(geoModel, ecModel, api);
		        }
		    });


	/***/ },
	/* 285 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var echarts = __webpack_require__(1);
		    var graphic = __webpack_require__(42);
		    var layout = __webpack_require__(21);

		    // Model
		    echarts.extendComponentModel({

		        type: 'title',

		        layoutMode: {type: 'box', ignoreSize: true},

		        defaultOption: {
		            // 一级层叠
		            zlevel: 0,
		            // 二级层叠
		            z: 6,
		            show: true,

		            text: '',
		            // 超链接跳转
		            // link: null,
		            // 仅支持self | blank
		            target: 'blank',
		            subtext: '',

		            // 超链接跳转
		            // sublink: null,
		            // 仅支持self | blank
		            subtarget: 'blank',

		            // 'center' ¦ 'left' ¦ 'right'
		            // ¦ {number}（x坐标，单位px）
		            left: 0,
		            // 'top' ¦ 'bottom' ¦ 'center'
		            // ¦ {number}（y坐标，单位px）
		            top: 0,

		            // 水平对齐
		            // 'auto' | 'left' | 'right'
		            // 默认根据 x 的位置判断是左对齐还是右对齐
		            //textAlign: null

		            backgroundColor: 'rgba(0,0,0,0)',

		            // 标题边框颜色
		            borderColor: '#ccc',

		            // 标题边框线宽，单位px，默认为0（无边框）
		            borderWidth: 0,

		            // 标题内边距，单位px，默认各方向内边距为5，
		            // 接受数组分别设定上右下左边距，同css
		            padding: 5,

		            // 主副标题纵向间隔，单位px，默认为10，
		            itemGap: 10,
		            textStyle: {
		                fontSize: 18,
		                fontWeight: 'bolder',
		                // 主标题文字颜色
		                color: '#333'
		            },
		            subtextStyle: {
		                // 副标题文字颜色
		                color: '#aaa'
		            }
		        }
		    });

		    // View
		    echarts.extendComponentView({

		        type: 'title',

		        render: function (titleModel, ecModel, api) {
		            this.group.removeAll();

		            if (!titleModel.get('show')) {
		                return;
		            }

		            var group = this.group;

		            var textStyleModel = titleModel.getModel('textStyle');
		            var subtextStyleModel = titleModel.getModel('subtextStyle');

		            var textAlign = titleModel.get('textAlign');

		            var textEl = new graphic.Text({
		                style: {
		                    text: titleModel.get('text'),
		                    textFont: textStyleModel.getFont(),
		                    fill: textStyleModel.getTextColor(),
		                    textBaseline: 'top'
		                },
		                z2: 10
		            });

		            var textRect = textEl.getBoundingRect();

		            var subText = titleModel.get('subtext');
		            var subTextEl = new graphic.Text({
		                style: {
		                    text: subText,
		                    textFont: subtextStyleModel.getFont(),
		                    fill: subtextStyleModel.getTextColor(),
		                    y: textRect.height + titleModel.get('itemGap'),
		                    textBaseline: 'top'
		                },
		                z2: 10
		            });

		            var link = titleModel.get('link');
		            var sublink = titleModel.get('sublink');

		            textEl.silent = !link;
		            subTextEl.silent = !sublink;

		            if (link) {
		                textEl.on('click', function () {
		                    window.open(link, titleModel.get('target'));
		                });
		            }
		            if (sublink) {
		                subTextEl.on('click', function () {
		                    window.open(sublink, titleModel.get('subtarget'));
		                });
		            }

		            group.add(textEl);
		            subText && group.add(subTextEl);
		            // If no subText, but add subTextEl, there will be an empty line.

		            var groupRect = group.getBoundingRect();
		            var layoutOption = titleModel.getBoxLayoutParams();
		            layoutOption.width = groupRect.width;
		            layoutOption.height = groupRect.height;
		            var layoutRect = layout.getLayoutRect(
		                layoutOption, {
		                    width: api.getWidth(),
		                    height: api.getHeight()
		                }, titleModel.get('padding')
		            );
		            // Adjust text align based on position
		            if (!textAlign) {
		                // Align left if title is on the left. center and right is same
		                textAlign = titleModel.get('left') || titleModel.get('right');
		                if (textAlign === 'middle') {
		                    textAlign = 'center';
		                }
		                // Adjust layout by text align
		                if (textAlign === 'right') {
		                    layoutRect.x += layoutRect.width;
		                }
		                else if (textAlign === 'center') {
		                    layoutRect.x += layoutRect.width / 2;
		                }
		            }
		            group.position = [layoutRect.x, layoutRect.y];
		            textEl.setStyle('textAlign', textAlign);
		            subTextEl.setStyle('textAlign', textAlign);

		            // Render background
		            // Get groupRect again because textAlign has been changed
		            groupRect = group.getBoundingRect();
		            var padding = layoutRect.margin;
		            var style = titleModel.getItemStyle(['color', 'opacity']);
		            style.fill = titleModel.get('backgroundColor');
		            var rect = new graphic.Rect({
		                shape: {
		                    x: groupRect.x - padding[3],
		                    y: groupRect.y - padding[0],
		                    width: groupRect.width + padding[1] + padding[3],
		                    height: groupRect.height + padding[0] + padding[2]
		                },
		                style: style,
		                silent: true
		            });
		            graphic.subPixelOptimizeRect(rect);

		            group.add(rect);
		        }
		    });


	/***/ },
	/* 286 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * DataZoom component entry
		 */


		    __webpack_require__(287);

		    __webpack_require__(288);
		    __webpack_require__(290);

		    __webpack_require__(291);
		    __webpack_require__(292);

		    __webpack_require__(295);
		    __webpack_require__(296);

		    __webpack_require__(298);
		    __webpack_require__(299);



	/***/ },
	/* 287 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(19).registerSubTypeDefaulter('dataZoom', function (option) {
		        // Default 'slider' when no type specified.
		        return 'slider';
		    });



	/***/ },
	/* 288 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data zoom model
		 */


		    var zrUtil = __webpack_require__(3);
		    var env = __webpack_require__(78);
		    var echarts = __webpack_require__(1);
		    var modelUtil = __webpack_require__(5);
		    var AxisProxy = __webpack_require__(289);
		    var each = zrUtil.each;
		    var eachAxisDim = modelUtil.eachAxisDim;

		    var DataZoomModel = echarts.extendComponentModel({

		        type: 'dataZoom',

		        dependencies: [
		            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'series'
		        ],

		        /**
		         * @protected
		         */
		        defaultOption: {
		            zlevel: 0,
		            z: 4,                   // Higher than normal component (z: 2).
		            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
		            xAxisIndex: null,       // Default all horizontal category axis.
		            yAxisIndex: null,       // Default all vertical category axis.
		            angleAxisIndex: null,
		            radiusAxisIndex: null,
		            filterMode: 'filter',   // Possible values: 'filter' or 'empty'.
		                                    // 'filter': data items which are out of window will be removed.
		                                    //           This option is applicable when filtering outliers.
		                                    // 'empty': data items which are out of window will be set to empty.
		                                    //          This option is applicable when user should not neglect
		                                    //          that there are some data items out of window.
		                                    // Taking line chart as an example, line will be broken in
		                                    // the filtered points when filterModel is set to 'empty', but
		                                    // be connected when set to 'filter'.

		            throttle: 100,          // Dispatch action by the fixed rate, avoid frequency.
		                                    // default 100. Do not throttle when use null/undefined.
		            start: 0,               // Start percent. 0 ~ 100
		            end: 100,               // End percent. 0 ~ 100
		            startValue: null,       // Start value. If startValue specified, start is ignored.
		            endValue: null          // End value. If endValue specified, end is ignored.
		        },

		        /**
		         * @override
		         */
		        init: function (option, parentModel, ecModel) {

		            /**
		             * key like x_0, y_1
		             * @private
		             * @type {Object}
		             */
		            this._dataIntervalByAxis = {};

		            /**
		             * @private
		             */
		            this._dataInfo = {};

		            /**
		             * key like x_0, y_1
		             * @private
		             */
		            this._axisProxies = {};

		            /**
		             * @readOnly
		             */
		            this.textStyleModel;

		            var rawOption = retrieveRaw(option);

		            this.mergeDefaultAndTheme(option, ecModel);

		            this.doInit(rawOption);
		        },

		        /**
		         * @override
		         */
		        mergeOption: function (newOption) {
		            var rawOption = retrieveRaw(newOption);

		            //FIX #2591
		            zrUtil.merge(this.option, newOption, true);

		            this.doInit(rawOption);
		        },

		        /**
		         * @protected
		         */
		        doInit: function (rawOption) {
		            var thisOption = this.option;

		            // Disable realtime view update if canvas is not supported.
		            if (!env.canvasSupported) {
		                thisOption.realtime = false;
		            }

		            processRangeProp('start', 'startValue', rawOption, thisOption);
		            processRangeProp('end', 'endValue', rawOption, thisOption);

		            this.textStyleModel = this.getModel('textStyle');

		            this._resetTarget();

		            this._giveAxisProxies();
		        },

		        /**
		         * @private
		         */
		        _giveAxisProxies: function () {
		            var axisProxies = this._axisProxies;

		            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
		                var axisModel = this.dependentModels[dimNames.axis][axisIndex];

		                // If exists, share axisProxy with other dataZoomModels.
		                var axisProxy = axisModel.__dzAxisProxy || (
		                    // Use the first dataZoomModel as the main model of axisProxy.
		                    axisModel.__dzAxisProxy = new AxisProxy(
		                        dimNames.name, axisIndex, this, ecModel
		                    )
		                );
		                // FIXME
		                // dispose __dzAxisProxy

		                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
		            }, this);
		        },

		        /**
		         * @private
		         */
		        _resetTarget: function () {
		            var thisOption = this.option;

		            var autoMode = this._judgeAutoMode();

		            eachAxisDim(function (dimNames) {
		                var axisIndexName = dimNames.axisIndex;
		                thisOption[axisIndexName] = modelUtil.normalizeToArray(
		                    thisOption[axisIndexName]
		                );
		            }, this);

		            if (autoMode === 'axisIndex') {
		                this._autoSetAxisIndex();
		            }
		            else if (autoMode === 'orient') {
		                this._autoSetOrient();
		            }
		        },

		        /**
		         * @private
		         */
		        _judgeAutoMode: function () {
		            // Auto set only works for setOption at the first time.
		            // The following is user's reponsibility. So using merged
		            // option is OK.
		            var thisOption = this.option;

		            var hasIndexSpecified = false;
		            eachAxisDim(function (dimNames) {
		                // When user set axisIndex as a empty array, we think that user specify axisIndex
		                // but do not want use auto mode. Because empty array may be encountered when
		                // some error occured.
		                if (thisOption[dimNames.axisIndex] != null) {
		                    hasIndexSpecified = true;
		                }
		            }, this);

		            var orient = thisOption.orient;

		            if (orient == null && hasIndexSpecified) {
		                return 'orient';
		            }
		            else if (!hasIndexSpecified) {
		                if (orient == null) {
		                    thisOption.orient = 'horizontal';
		                }
		                return 'axisIndex';
		            }
		        },

		        /**
		         * @private
		         */
		        _autoSetAxisIndex: function () {
		            var autoAxisIndex = true;
		            var orient = this.get('orient', true);
		            var thisOption = this.option;

		            if (autoAxisIndex) {
		                // Find axis that parallel to dataZoom as default.
		                var dimNames = orient === 'vertical'
		                    ? {dim: 'y', axisIndex: 'yAxisIndex', axis: 'yAxis'}
		                    : {dim: 'x', axisIndex: 'xAxisIndex', axis: 'xAxis'};

		                if (this.dependentModels[dimNames.axis].length) {
		                    thisOption[dimNames.axisIndex] = [0];
		                    autoAxisIndex = false;
		                }
		            }

		            if (autoAxisIndex) {
		                // Find the first category axis as default. (consider polar)
		                eachAxisDim(function (dimNames) {
		                    if (!autoAxisIndex) {
		                        return;
		                    }
		                    var axisIndices = [];
		                    var axisModels = this.dependentModels[dimNames.axis];
		                    if (axisModels.length && !axisIndices.length) {
		                        for (var i = 0, len = axisModels.length; i < len; i++) {
		                            if (axisModels[i].get('type') === 'category') {
		                                axisIndices.push(i);
		                            }
		                        }
		                    }
		                    thisOption[dimNames.axisIndex] = axisIndices;
		                    if (axisIndices.length) {
		                        autoAxisIndex = false;
		                    }
		                }, this);
		            }

		            if (autoAxisIndex) {
		                // FIXME
		                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
		                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？

		                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
		                // dataZoom component auto adopts series that reference to
		                // both xAxis and yAxis which type is 'value'.
		                this.ecModel.eachSeries(function (seriesModel) {
		                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
		                        eachAxisDim(function (dimNames) {
		                            var axisIndices = thisOption[dimNames.axisIndex];
		                            var axisIndex = seriesModel.get(dimNames.axisIndex);
		                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
		                                axisIndices.push(axisIndex);
		                            }
		                        });
		                    }
		                }, this);
		            }
		        },

		        /**
		         * @private
		         */
		        _autoSetOrient: function () {
		            var dim;

		            // Find the first axis
		            this.eachTargetAxis(function (dimNames) {
		                !dim && (dim = dimNames.name);
		            }, this);

		            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
		        },

		        /**
		         * @private
		         */
		        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {
		            // FIXME
		            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
		            // 例如series.type === scatter时。

		            var is = true;
		            eachAxisDim(function (dimNames) {
		                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
		                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];

		                if (!axisModel || axisModel.get('type') !== axisType) {
		                    is = false;
		                }
		            }, this);
		            return is;
		        },

		        /**
		         * @public
		         */
		        getFirstTargetAxisModel: function () {
		            var firstAxisModel;
		            eachAxisDim(function (dimNames) {
		                if (firstAxisModel == null) {
		                    var indices = this.get(dimNames.axisIndex);
		                    if (indices.length) {
		                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
		                    }
		                }
		            }, this);

		            return firstAxisModel;
		        },

		        /**
		         * @public
		         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
		         */
		        eachTargetAxis: function (callback, context) {
		            var ecModel = this.ecModel;
		            eachAxisDim(function (dimNames) {
		                each(
		                    this.get(dimNames.axisIndex),
		                    function (axisIndex) {
		                        callback.call(context, dimNames, axisIndex, this, ecModel);
		                    },
		                    this
		                );
		            }, this);
		        },

		        getAxisProxy: function (dimName, axisIndex) {
		            return this._axisProxies[dimName + '_' + axisIndex];
		        },

		        /**
		         * If not specified, set to undefined.
		         *
		         * @public
		         * @param {Object} opt
		         * @param {number} [opt.start]
		         * @param {number} [opt.end]
		         * @param {number} [opt.startValue]
		         * @param {number} [opt.endValue]
		         */
		        setRawRange: function (opt) {
		            each(['start', 'end', 'startValue', 'endValue'], function (name) {
		                // If any of those prop is null/undefined, we should alos set
		                // them, because only one pair between start/end and
		                // startValue/endValue can work.
		                this.option[name] = opt[name];
		            }, this);
		        },

		        /**
		         * @public
		         * @return {Array.<number>} [startPercent, endPercent]
		         */
		        getPercentRange: function () {
		            var axisProxy = this.findRepresentativeAxisProxy();
		            if (axisProxy) {
		                return axisProxy.getDataPercentWindow();
		            }
		        },

		        /**
		         * @public
		         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
		         *
		         * @param {string} [axisDimName]
		         * @param {number} [axisIndex]
		         * @return {Array.<number>} [startValue, endValue]
		         */
		        getValueRange: function (axisDimName, axisIndex) {
		            if (axisDimName == null && axisIndex == null) {
		                var axisProxy = this.findRepresentativeAxisProxy();
		                if (axisProxy) {
		                    return axisProxy.getDataValueWindow();
		                }
		            }
		            else {
		                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
		            }
		        },

		        /**
		         * @public
		         * @return {module:echarts/component/dataZoom/AxisProxy}
		         */
		        findRepresentativeAxisProxy: function () {
		            // Find the first hosted axisProxy
		            var axisProxies = this._axisProxies;
		            for (var key in axisProxies) {
		                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
		                    return axisProxies[key];
		                }
		            }

		            // If no hosted axis find not hosted axisProxy.
		            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
		            // and the option.start or option.end settings are different. The percentRange
		            // should follow axisProxy.
		            // (We encounter this problem in toolbox data zoom.)
		            for (var key in axisProxies) {
		                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
		                    return axisProxies[key];
		                }
		            }
		        }

		    });

		    function retrieveRaw(option) {
		        var ret = {};
		        each(
		            ['start', 'end', 'startValue', 'endValue'],
		            function (name) {
		                ret[name] = option[name];
		            }
		        );
		        return ret;
		    }

		    function processRangeProp(percentProp, valueProp, rawOption, thisOption) {
		        // start/end has higher priority over startValue/endValue,
		        // but we should make chart.setOption({endValue: 1000}) effective,
		        // rather than chart.setOption({endValue: 1000, end: null}).
		        if (rawOption[valueProp] != null && rawOption[percentProp] == null) {
		            thisOption[percentProp] = null;
		        }
		        // Otherwise do nothing and use the merge result.
		    }

		    module.exports = DataZoomModel;



	/***/ },
	/* 289 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Axis operator
		 */


		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var each = zrUtil.each;
		    var asc = numberUtil.asc;

		    /**
		     * Operate single axis.
		     * One axis can only operated by one axis operator.
		     * Different dataZoomModels may be defined to operate the same axis.
		     * (i.e. 'inside' data zoom and 'slider' data zoom components)
		     * So dataZoomModels share one axisProxy in that case.
		     *
		     * @class
		     */
		    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {

		        /**
		         * @private
		         * @type {string}
		         */
		        this._dimName = dimName;

		        /**
		         * @private
		         */
		        this._axisIndex = axisIndex;

		        /**
		         * @private
		         * @type {Array.<number>}
		         */
		        this._valueWindow;

		        /**
		         * @private
		         * @type {Array.<number>}
		         */
		        this._percentWindow;

		        /**
		         * @private
		         * @type {Array.<number>}
		         */
		        this._dataExtent;

		        /**
		         * @readOnly
		         * @type {module: echarts/model/Global}
		         */
		        this.ecModel = ecModel;

		        /**
		         * @private
		         * @type {module: echarts/component/dataZoom/DataZoomModel}
		         */
		        this._dataZoomModel = dataZoomModel;
		    };

		    AxisProxy.prototype = {

		        constructor: AxisProxy,

		        /**
		         * Whether the axisProxy is hosted by dataZoomModel.
		         *
		         * @public
		         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
		         * @return {boolean}
		         */
		        hostedBy: function (dataZoomModel) {
		            return this._dataZoomModel === dataZoomModel;
		        },

		        /**
		         * @return {Array.<number>}
		         */
		        getDataExtent: function () {
		            return this._dataExtent.slice();
		        },

		        /**
		         * @return {Array.<number>}
		         */
		        getDataValueWindow: function () {
		            return this._valueWindow.slice();
		        },

		        /**
		         * @return {Array.<number>}
		         */
		        getDataPercentWindow: function () {
		            return this._percentWindow.slice();
		        },

		        /**
		         * @public
		         * @param {number} axisIndex
		         * @return {Array} seriesModels
		         */
		        getTargetSeriesModels: function () {
		            var seriesModels = [];

		            this.ecModel.eachSeries(function (seriesModel) {
		                if (this._axisIndex === seriesModel.get(this._dimName + 'AxisIndex')) {
		                    seriesModels.push(seriesModel);
		                }
		            }, this);

		            return seriesModels;
		        },

		        getAxisModel: function () {
		            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
		        },

		        getOtherAxisModel: function () {
		            var axisDim = this._dimName;
		            var ecModel = this.ecModel;
		            var axisModel = this.getAxisModel();
		            var isCartesian = axisDim === 'x' || axisDim === 'y';
		            var otherAxisDim;
		            var coordSysIndexName;
		            if (isCartesian) {
		                coordSysIndexName = 'gridIndex';
		                otherAxisDim = axisDim === 'x' ? 'y' : 'x';
		            }
		            else {
		                coordSysIndexName = 'polarIndex';
		                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
		            }
		            var foundOtherAxisModel;
		            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
		                if ((otherAxisModel.get(coordSysIndexName) || 0)
		                    === (axisModel.get(coordSysIndexName) || 0)) {
		                    foundOtherAxisModel = otherAxisModel;
		                }
		            });
		            return foundOtherAxisModel;
		        },

		        /**
		         * Notice: reset should not be called before series.restoreData() called,
		         * so it is recommanded to be called in "process stage" but not "model init
		         * stage".
		         *
		         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
		         */
		        reset: function (dataZoomModel) {
		            if (dataZoomModel !== this._dataZoomModel) {
		                return;
		            }

		            // Culculate data window and data extent, and record them.
		            var dataExtent = this._dataExtent = calculateDataExtent(
		                this._dimName, this.getTargetSeriesModels()
		            );
		            var dataWindow = calculateDataWindow(
		                dataZoomModel.option, dataExtent, this
		            );
		            this._valueWindow = dataWindow.valueWindow;
		            this._percentWindow = dataWindow.percentWindow;

		            // Update axis setting then.
		            setAxisModel(this);
		        },

		        /**
		         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
		         */
		        restore: function (dataZoomModel) {
		            if (dataZoomModel !== this._dataZoomModel) {
		                return;
		            }

		            this._valueWindow = this._percentWindow = null;
		            setAxisModel(this, true);
		        },

		        /**
		         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
		         */
		        filterData: function (dataZoomModel) {
		            if (dataZoomModel !== this._dataZoomModel) {
		                return;
		            }

		            var axisDim = this._dimName;
		            var seriesModels = this.getTargetSeriesModels();
		            var filterMode = dataZoomModel.get('filterMode');
		            var valueWindow = this._valueWindow;

		            // FIXME
		            // Toolbox may has dataZoom injected. And if there are stacked bar chart
		            // with NaN data. NaN will be filtered and stack will be wrong.
		            // So we need to force the mode to be set empty
		            var otherAxisModel = this.getOtherAxisModel();
		            if (dataZoomModel.get('$fromToolbox')
		                && otherAxisModel && otherAxisModel.get('type') === 'category') {
		                filterMode = 'empty';
		            }
		            // Process series data
		            each(seriesModels, function (seriesModel) {
		                var seriesData = seriesModel.getData();
		                if (!seriesData) {
		                    return;
		                }

		                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
		                    if (filterMode === 'empty') {
		                        seriesModel.setData(
		                            seriesData.map(dim, function (value) {
		                                return !isInWindow(value) ? NaN : value;
		                            })
		                        );
		                    }
		                    else {
		                        seriesData.filterSelf(dim, isInWindow);
		                    }
		                });
		            });

		            function isInWindow(value) {
		                return value >= valueWindow[0] && value <= valueWindow[1];
		            }
		        }
		    };

		    function calculateDataExtent(axisDim, seriesModels) {
		        var dataExtent = [Infinity, -Infinity];

		        each(seriesModels, function (seriesModel) {
		            var seriesData = seriesModel.getData();
		            if (seriesData) {
		                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
		                    var seriesExtent = seriesData.getDataExtent(dim);
		                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
		                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
		                });
		            }
		        }, this);

		        return dataExtent;
		    }

		    function calculateDataWindow(opt, dataExtent, axisProxy) {
		        var axisModel = axisProxy.getAxisModel();
		        var scale = axisModel.axis.scale;
		        var percentExtent = [0, 100];
		        var percentWindow = [
		            opt.start,
		            opt.end
		        ];
		        var valueWindow = [];

		        // In percent range is used and axis min/max/scale is set,
		        // window should be based on min/max/0, but should not be
		        // based on the extent of filtered data.
		        dataExtent = dataExtent.slice();
		        fixExtendByAxis(dataExtent, axisModel, scale);

		        each(['startValue', 'endValue'], function (prop) {
		            valueWindow.push(
		                opt[prop] != null
		                    ? scale.parse(opt[prop])
		                    : null
		            );
		        });

		        // Normalize bound.
		        each([0, 1], function (idx) {
		            var boundValue = valueWindow[idx];
		            var boundPercent = percentWindow[idx];

		            // start/end has higher priority over startValue/endValue,
		            // because start/end can be consistent among different type
		            // of axis but startValue/endValue not.

		            if (boundPercent != null || boundValue == null) {
		                if (boundPercent == null) {
		                    boundPercent = percentExtent[idx];
		                }
		                // Use scale.parse to math round for category or time axis.
		                boundValue = scale.parse(numberUtil.linearMap(
		                    boundPercent, percentExtent, dataExtent, true
		                ));
		            }
		            else { // boundPercent == null && boundValue != null
		                boundPercent = numberUtil.linearMap(
		                    boundValue, dataExtent, percentExtent, true
		                );
		            }
		            // Avoid rounding error
		            valueWindow[idx] = numberUtil.round(boundValue);
		            percentWindow[idx] = numberUtil.round(boundPercent);
		        });

		        return {
		            valueWindow: asc(valueWindow),
		            percentWindow: asc(percentWindow)
		        };
		    }

		    function fixExtendByAxis(dataExtent, axisModel, scale) {
		        each(['min', 'max'], function (minMax, index) {
		            var axisMax = axisModel.get(minMax, true);
		            // Consider 'dataMin', 'dataMax'
		            if (axisMax != null && (axisMax + '').toLowerCase() !== 'data' + minMax) {
		                dataExtent[index] = scale.parse(axisMax);
		            }
		        });

		        if (!axisModel.get('scale', true)) {
		            dataExtent[0] > 0 && (dataExtent[0] = 0);
		            dataExtent[1] < 0 && (dataExtent[1] = 0);
		        }

		        return dataExtent;
		    }

		    function setAxisModel(axisProxy, isRestore) {
		        var axisModel = axisProxy.getAxisModel();

		        var percentWindow = axisProxy._percentWindow;
		        var valueWindow = axisProxy._valueWindow;

		        if (!percentWindow) {
		            return;
		        }

		        var isFull = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);
		        // [0, 500]: arbitrary value, guess axis extent.
		        var precision = !isRestore && numberUtil.getPixelPrecision(valueWindow, [0, 500]);
		        // toFixed() digits argument must be between 0 and 20
		        var invalidPrecision = !isRestore && !(precision < 20 && precision >= 0);

		        var useOrigin = isRestore || isFull || invalidPrecision;

		        axisModel.setRange && axisModel.setRange(
		            useOrigin ? null : +valueWindow[0].toFixed(precision),
		            useOrigin ? null : +valueWindow[1].toFixed(precision)
		        );
		    }

		    module.exports = AxisProxy;



	/***/ },
	/* 290 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var ComponentView = __webpack_require__(28);

		    module.exports = ComponentView.extend({

		        type: 'dataZoom',

		        render: function (dataZoomModel, ecModel, api, payload) {
		            this.dataZoomModel = dataZoomModel;
		            this.ecModel = ecModel;
		            this.api = api;
		        },

		        /**
		         * Find the first target coordinate system.
		         *
		         * @protected
		         * @return {Object} {
		         *                   cartesians: [
		         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
		         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
		         *                       ...
		         *                   ],  // cartesians must not be null/undefined.
		         *                   polars: [
		         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
		         *                       ...
		         *                   ],  // polars must not be null/undefined.
		         *                   axisModels: [axis0, axis1, axis2, axis3, axis4]
		         *                       // axisModels must not be null/undefined.
		         *                  }
		         */
		        getTargetInfo: function () {
		            var dataZoomModel = this.dataZoomModel;
		            var ecModel = this.ecModel;
		            var cartesians = [];
		            var polars = [];
		            var axisModels = [];

		            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
		                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);
		                if (axisModel) {
		                    axisModels.push(axisModel);

		                    var gridIndex = axisModel.get('gridIndex');
		                    var polarIndex = axisModel.get('polarIndex');

		                    if (gridIndex != null) {
		                        var coordModel = ecModel.getComponent('grid', gridIndex);
		                        save(coordModel, axisModel, cartesians, gridIndex);
		                    }
		                    else if (polarIndex != null) {
		                        var coordModel = ecModel.getComponent('polar', polarIndex);
		                        save(coordModel, axisModel, polars, polarIndex);
		                    }
		                }
		            }, this);

		            function save(coordModel, axisModel, store, coordIndex) {
		                var item;
		                for (var i = 0; i < store.length; i++) {
		                    if (store[i].model === coordModel) {
		                        item = store[i];
		                        break;
		                    }
		                }
		                if (!item) {
		                    store.push(item = {
		                        model: coordModel, axisModels: [], coordIndex: coordIndex
		                    });
		                }
		                item.axisModels.push(axisModel);
		            }

		            return {
		                cartesians: cartesians,
		                polars: polars,
		                axisModels: axisModels
		            };
		        }

		    });



	/***/ },
	/* 291 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data zoom model
		 */


		    var DataZoomModel = __webpack_require__(288);
		    var layout = __webpack_require__(21);
		    var zrUtil = __webpack_require__(3);

		    var SliderZoomModel = DataZoomModel.extend({

		        type: 'dataZoom.slider',

		        layoutMode: 'box',

		        /**
		         * @protected
		         */
		        defaultOption: {
		            show: true,

		            // ph => placeholder. Using placehoder here because
		            // deault value can only be drived in view stage.
		            right: 'ph',  // Default align to grid rect.
		            top: 'ph',    // Default align to grid rect.
		            width: 'ph',  // Default align to grid rect.
		            height: 'ph', // Default align to grid rect.
		            left: null,   // Default align to grid rect.
		            bottom: null, // Default align to grid rect.

		            backgroundColor: 'rgba(47,69,84,0)',    // Background of slider zoom component.
		            dataBackgroundColor: '#ddd',            // Background of data shadow.
		            fillerColor: 'rgba(47,69,84,0.15)',     // Color of selected area.
		            handleColor: 'rgba(148,164,165,0.95)',     // Color of handle.
		            handleSize: 10,

		            labelPrecision: null,
		            labelFormatter: null,
		            showDetail: true,
		            showDataShadow: 'auto',                 // Default auto decision.
		            realtime: true,
		            zoomLock: false,                        // Whether disable zoom.
		            textStyle: {
		                color: '#333'
		            }
		        },

		        /**
		         * @override
		         */
		        mergeOption: function (option) {
		            SliderZoomModel.superApply(this, 'mergeOption', arguments);
		        }

		    });

		    module.exports = SliderZoomModel;



	/***/ },
	/* 292 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var throttle = __webpack_require__(293);
		    var DataZoomView = __webpack_require__(290);
		    var Rect = graphic.Rect;
		    var numberUtil = __webpack_require__(7);
		    var linearMap = numberUtil.linearMap;
		    var layout = __webpack_require__(21);
		    var sliderMove = __webpack_require__(294);
		    var asc = numberUtil.asc;
		    var bind = zrUtil.bind;
		    var mathRound = Math.round;
		    var mathMax = Math.max;
		    var each = zrUtil.each;

		    // Constants
		    var DEFAULT_LOCATION_EDGE_GAP = 7;
		    var DEFAULT_FRAME_BORDER_WIDTH = 1;
		    var DEFAULT_FILLER_SIZE = 30;
		    var HORIZONTAL = 'horizontal';
		    var VERTICAL = 'vertical';
		    var LABEL_GAP = 5;
		    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];

		    var SliderZoomView = DataZoomView.extend({

		        type: 'dataZoom.slider',

		        init: function (ecModel, api) {

		            /**
		             * @private
		             * @type {Object}
		             */
		            this._displayables = {};

		            /**
		             * @private
		             * @type {string}
		             */
		            this._orient;

		            /**
		             * [0, 100]
		             * @private
		             */
		            this._range;

		            /**
		             * [coord of the first handle, coord of the second handle]
		             * @private
		             */
		            this._handleEnds;

		            /**
		             * [length, thick]
		             * @private
		             * @type {Array.<number>}
		             */
		            this._size;

		            /**
		             * @private
		             * @type {number}
		             */
		            this._halfHandleSize;

		            /**
		             * @private
		             */
		            this._location;

		            /**
		             * @private
		             */
		            this._dragging;

		            /**
		             * @private
		             */
		            this._dataShadowInfo;

		            this.api = api;
		        },

		        /**
		         * @override
		         */
		        render: function (dataZoomModel, ecModel, api, payload) {
		            SliderZoomView.superApply(this, 'render', arguments);

		            throttle.createOrUpdate(
		                this,
		                '_dispatchZoomAction',
		                this.dataZoomModel.get('throttle'),
		                'fixRate'
		            );

		            this._orient = dataZoomModel.get('orient');
		            this._halfHandleSize = mathRound(dataZoomModel.get('handleSize') / 2);

		            if (this.dataZoomModel.get('show') === false) {
		                this.group.removeAll();
		                return;
		            }

		            // Notice: this._resetInterval() should not be executed when payload.type
		            // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
		            // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,
		            if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
		                this._buildView();
		            }

		            this._updateView();
		        },

		        /**
		         * @override
		         */
		        remove: function () {
		            SliderZoomView.superApply(this, 'remove', arguments);
		            throttle.clear(this, '_dispatchZoomAction');
		        },

		        /**
		         * @override
		         */
		        dispose: function () {
		            SliderZoomView.superApply(this, 'dispose', arguments);
		            throttle.clear(this, '_dispatchZoomAction');
		        },

		        _buildView: function () {
		            var thisGroup = this.group;

		            thisGroup.removeAll();

		            this._resetLocation();
		            this._resetInterval();

		            var barGroup = this._displayables.barGroup = new graphic.Group();

		            this._renderBackground();
		            this._renderDataShadow();
		            this._renderHandle();

		            thisGroup.add(barGroup);

		            this._positionGroup();
		        },

		        /**
		         * @private
		         */
		        _resetLocation: function () {
		            var dataZoomModel = this.dataZoomModel;
		            var api = this.api;

		            // If some of x/y/width/height are not specified,
		            // auto-adapt according to target grid.
		            var coordRect = this._findCoordRect();
		            var ecSize = {width: api.getWidth(), height: api.getHeight()};
		            // Default align by coordinate system rect.
		            var positionInfo = this._orient === HORIZONTAL
		                ? {
		                    // Why using 'right', because right should be used in vertical,
		                    // and it is better to be consistent for dealing with position param merge.
		                    right: ecSize.width - coordRect.x - coordRect.width,
		                    top: (ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP),
		                    width: coordRect.width,
		                    height: DEFAULT_FILLER_SIZE
		                }
		                : { // vertical
		                    right: DEFAULT_LOCATION_EDGE_GAP,
		                    top: coordRect.y,
		                    width: DEFAULT_FILLER_SIZE,
		                    height: coordRect.height
		                };

		            // Do not write back to option and replace value 'ph', because
		            // the 'ph' value should be recalculated when resize.
		            var layoutParams = layout.getLayoutParams(dataZoomModel.option);

		            // Replace the placeholder value.
		            zrUtil.each(['right', 'top', 'width', 'height'], function (name) {
		                if (layoutParams[name] === 'ph') {
		                    layoutParams[name] = positionInfo[name];
		                }
		            });

		            var layoutRect = layout.getLayoutRect(
		                layoutParams,
		                ecSize,
		                dataZoomModel.padding
		            );

		            this._location = {x: layoutRect.x, y: layoutRect.y};
		            this._size = [layoutRect.width, layoutRect.height];
		            this._orient === VERTICAL && this._size.reverse();
		        },

		        /**
		         * @private
		         */
		        _positionGroup: function () {
		            var thisGroup = this.group;
		            var location = this._location;
		            var orient = this._orient;

		            // Just use the first axis to determine mapping.
		            var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
		            var inverse = targetAxisModel && targetAxisModel.get('inverse');

		            var barGroup = this._displayables.barGroup;
		            var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;

		            // Transform barGroup.
		            barGroup.attr(
		                (orient === HORIZONTAL && !inverse)
		                ? {scale: otherAxisInverse ? [1, 1] : [1, -1]}
		                : (orient === HORIZONTAL && inverse)
		                ? {scale: otherAxisInverse ? [-1, 1] : [-1, -1]}
		                : (orient === VERTICAL && !inverse)
		                ? {scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2}
		                // Dont use Math.PI, considering shadow direction.
		                : {scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2}
		            );

		            // Position barGroup
		            var rect = thisGroup.getBoundingRect([barGroup]);
		            thisGroup.position[0] = location.x - rect.x;
		            thisGroup.position[1] = location.y - rect.y;
		        },

		        /**
		         * @private
		         */
		        _getViewExtent: function () {
		            // View total length.
		            var halfHandleSize = this._halfHandleSize;
		            var totalLength = mathMax(this._size[0], halfHandleSize * 4);
		            var extent = [halfHandleSize, totalLength - halfHandleSize];

		            return extent;
		        },

		        _renderBackground : function () {
		            var dataZoomModel = this.dataZoomModel;
		            var size = this._size;

		            this._displayables.barGroup.add(new Rect({
		                silent: true,
		                shape: {
		                    x: 0, y: 0, width: size[0], height: size[1]
		                },
		                style: {
		                    fill: dataZoomModel.get('backgroundColor')
		                }
		            }));
		        },

		        _renderDataShadow: function () {
		            var info = this._dataShadowInfo = this._prepareDataShadowInfo();

		            if (!info) {
		                return;
		            }

		            var size = this._size;
		            var seriesModel = info.series;
		            var data = seriesModel.getRawData();
		            var otherDim = seriesModel.getShadowDim
		                ? seriesModel.getShadowDim() // @see candlestick
		                : info.otherDim;

		            var otherDataExtent = data.getDataExtent(otherDim);
		            // Nice extent.
		            var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
		            otherDataExtent = [
		                otherDataExtent[0] - otherOffset,
		                otherDataExtent[1] + otherOffset
		            ];
		            var otherShadowExtent = [0, size[1]];

		            var thisShadowExtent = [0, size[0]];

		            var points = [[size[0], 0], [0, 0]];
		            var step = thisShadowExtent[1] / (data.count() - 1);
		            var thisCoord = 0;

		            // Optimize for large data shadow
		            var stride = Math.round(data.count() / size[0]);
		            data.each([otherDim], function (value, index) {
		                if (stride > 0 && (index % stride)) {
		                    thisCoord += step;
		                    return;
		                }
		                // FIXME
		                // 应该使用统计的空判断？还是在list里进行空判断？
		                var otherCoord = (value == null || isNaN(value) || value === '')
		                    ? null
		                    : linearMap(value, otherDataExtent, otherShadowExtent, true);
		                otherCoord != null && points.push([thisCoord, otherCoord]);

		                thisCoord += step;
		            });

		            this._displayables.barGroup.add(new graphic.Polyline({
		                shape: {points: points},
		                style: {fill: this.dataZoomModel.get('dataBackgroundColor'), lineWidth: 0},
		                silent: true,
		                z2: -20
		            }));
		        },

		        _prepareDataShadowInfo: function () {
		            var dataZoomModel = this.dataZoomModel;
		            var showDataShadow = dataZoomModel.get('showDataShadow');

		            if (showDataShadow === false) {
		                return;
		            }

		            // Find a representative series.
		            var result;
		            var ecModel = this.ecModel;

		            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
		                var seriesModels = dataZoomModel
		                    .getAxisProxy(dimNames.name, axisIndex)
		                    .getTargetSeriesModels();

		                zrUtil.each(seriesModels, function (seriesModel) {
		                    if (result) {
		                        return;
		                    }

		                    if (showDataShadow !== true && zrUtil.indexOf(
		                            SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')
		                        ) < 0
		                    ) {
		                        return;
		                    }

		                    var otherDim = getOtherDim(dimNames.name);

		                    var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;

		                    result = {
		                        thisAxis: thisAxis,
		                        series: seriesModel,
		                        thisDim: dimNames.name,
		                        otherDim: otherDim,
		                        otherAxisInverse: seriesModel
		                            .coordinateSystem.getOtherAxis(thisAxis).inverse
		                    };

		                }, this);

		            }, this);

		            return result;
		        },

		        _renderHandle: function () {
		            var displaybles = this._displayables;
		            var handles = displaybles.handles = [];
		            var handleLabels = displaybles.handleLabels = [];
		            var barGroup = this._displayables.barGroup;
		            var size = this._size;

		            barGroup.add(displaybles.filler = new Rect({
		                draggable: true,
		                cursor: 'move',
		                drift: bind(this._onDragMove, this, 'all'),
		                ondragend: bind(this._onDragEnd, this),
		                onmouseover: bind(this._showDataInfo, this, true),
		                onmouseout: bind(this._showDataInfo, this, false),
		                style: {
		                    fill: this.dataZoomModel.get('fillerColor'),
		                    // text: ':::',
		                    textPosition : 'inside'
		                }
		            }));

		            // Frame border.
		            barGroup.add(new Rect(graphic.subPixelOptimizeRect({
		                silent: true,
		                shape: {
		                    x: 0,
		                    y: 0,
		                    width: size[0],
		                    height: size[1]
		                },
		                style: {
		                    stroke: this.dataZoomModel.get('dataBackgroundColor'),
		                    lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
		                    fill: 'rgba(0,0,0,0)'
		                }
		            })));

		            each([0, 1], function (handleIndex) {

		                barGroup.add(handles[handleIndex] = new Rect({
		                    style: {
		                        fill: this.dataZoomModel.get('handleColor')
		                    },
		                    cursor: 'move',
		                    draggable: true,
		                    drift: bind(this._onDragMove, this, handleIndex),
		                    ondragend: bind(this._onDragEnd, this),
		                    onmouseover: bind(this._showDataInfo, this, true),
		                    onmouseout: bind(this._showDataInfo, this, false)
		                }));

		                var textStyleModel = this.dataZoomModel.textStyleModel;

		                this.group.add(
		                    handleLabels[handleIndex] = new graphic.Text({
		                    silent: true,
		                    invisible: true,
		                    style: {
		                        x: 0, y: 0, text: '',
		                        textVerticalAlign: 'middle',
		                        textAlign: 'center',
		                        fill: textStyleModel.getTextColor(),
		                        textFont: textStyleModel.getFont()
		                    }
		                }));

		            }, this);
		        },

		        /**
		         * @private
		         */
		        _resetInterval: function () {
		            var range = this._range = this.dataZoomModel.getPercentRange();
		            var viewExtent = this._getViewExtent();

		            this._handleEnds = [
		                linearMap(range[0], [0, 100], viewExtent, true),
		                linearMap(range[1], [0, 100], viewExtent, true)
		            ];
		        },

		        /**
		         * @private
		         * @param {(number|string)} handleIndex 0 or 1 or 'all'
		         * @param {number} dx
		         * @param {number} dy
		         */
		        _updateInterval: function (handleIndex, delta) {
		            var handleEnds = this._handleEnds;
		            var viewExtend = this._getViewExtent();

		            sliderMove(
		                delta,
		                handleEnds,
		                viewExtend,
		                (handleIndex === 'all' || this.dataZoomModel.get('zoomLock'))
		                    ? 'rigid' : 'cross',
		                handleIndex
		            );

		            this._range = asc([
		                linearMap(handleEnds[0], viewExtend, [0, 100], true),
		                linearMap(handleEnds[1], viewExtend, [0, 100], true)
		            ]);
		        },

		        /**
		         * @private
		         */
		        _updateView: function () {
		            var displaybles = this._displayables;
		            var handleEnds = this._handleEnds;
		            var handleInterval = asc(handleEnds.slice());
		            var size = this._size;
		            var halfHandleSize = this._halfHandleSize;

		            each([0, 1], function (handleIndex) {

		                // Handles
		                var handle = displaybles.handles[handleIndex];
		                handle.setShape({
		                    x: handleEnds[handleIndex] - halfHandleSize,
		                    y: -1,
		                    width: halfHandleSize * 2,
		                    height: size[1] + 2,
		                    r: 1
		                });

		            }, this);

		            // Filler
		            displaybles.filler.setShape({
		                x: handleInterval[0],
		                y: 0,
		                width: handleInterval[1] - handleInterval[0],
		                height: this._size[1]
		            });

		            this._updateDataInfo();
		        },

		        /**
		         * @private
		         */
		        _updateDataInfo: function () {
		            var dataZoomModel = this.dataZoomModel;
		            var displaybles = this._displayables;
		            var handleLabels = displaybles.handleLabels;
		            var orient = this._orient;
		            var labelTexts = ['', ''];

		            // FIXME
		            // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）
		            if (dataZoomModel.get('showDetail')) {
		                var dataInterval;
		                var axis;
		                dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
		                    // Using dataInterval of the first axis.
		                    if (!dataInterval) {
		                        dataInterval = dataZoomModel
		                            .getAxisProxy(dimNames.name, axisIndex)
		                            .getDataValueWindow();
		                        axis = this.ecModel.getComponent(dimNames.axis, axisIndex).axis;
		                    }
		                }, this);

		                if (dataInterval) {
		                    labelTexts = [
		                        this._formatLabel(dataInterval[0], axis),
		                        this._formatLabel(dataInterval[1], axis)
		                    ];
		                }
		            }

		            var orderedHandleEnds = asc(this._handleEnds.slice());

		            setLabel.call(this, 0);
		            setLabel.call(this, 1);

		            function setLabel(handleIndex) {
		                // Label
		                // Text should not transform by barGroup.
		                var barTransform = graphic.getTransform(
		                    displaybles.handles[handleIndex], this.group
		                );
		                var direction = graphic.transformDirection(
		                    handleIndex === 0 ? 'right' : 'left', barTransform
		                );
		                var offset = this._halfHandleSize + LABEL_GAP;
		                var textPoint = graphic.applyTransform(
		                    [
		                        orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),
		                        this._size[1] / 2
		                    ],
		                    barTransform
		                );
		                handleLabels[handleIndex].setStyle({
		                    x: textPoint[0],
		                    y: textPoint[1],
		                    textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
		                    textAlign: orient === HORIZONTAL ? direction : 'center',
		                    text: labelTexts[handleIndex]
		                });
		            }
		        },

		        /**
		         * @private
		         */
		        _formatLabel: function (value, axis) {
		            var dataZoomModel = this.dataZoomModel;
		            var labelFormatter = dataZoomModel.get('labelFormatter');
		            if (zrUtil.isFunction(labelFormatter)) {
		                return labelFormatter(value);
		            }

		            var labelPrecision = dataZoomModel.get('labelPrecision');
		            if (labelPrecision == null || labelPrecision === 'auto') {
		                labelPrecision = axis.getPixelPrecision();
		            }

		            value = (value == null && isNaN(value))
		                ? ''
		                // FIXME Glue code
		                : (axis.type === 'category' || axis.type === 'time')
		                    ? axis.scale.getLabel(Math.round(value))
		                    // param of toFixed should less then 20.
		                    : value.toFixed(Math.min(labelPrecision, 20));

		            if (zrUtil.isString(labelFormatter)) {
		                value = labelFormatter.replace('{value}', value);
		            }

		            return value;
		        },

		        /**
		         * @private
		         * @param {boolean} showOrHide true: show, false: hide
		         */
		        _showDataInfo: function (showOrHide) {
		            // Always show when drgging.
		            showOrHide = this._dragging || showOrHide;

		            var handleLabels = this._displayables.handleLabels;
		            handleLabels[0].attr('invisible', !showOrHide);
		            handleLabels[1].attr('invisible', !showOrHide);
		        },

		        _onDragMove: function (handleIndex, dx, dy) {
		            this._dragging = true;

		            // Transform dx, dy to bar coordination.
		            var vertex = this._applyBarTransform([dx, dy], true);

		            this._updateInterval(handleIndex, vertex[0]);
		            this._updateView();

		            if (this.dataZoomModel.get('realtime')) {
		                this._dispatchZoomAction();
		            }
		        },

		        _onDragEnd: function () {
		            this._dragging = false;
		            this._showDataInfo(false);
		            this._dispatchZoomAction();
		        },

		        /**
		         * This action will be throttled.
		         * @private
		         */
		        _dispatchZoomAction: function () {
		            var range = this._range;

		            this.api.dispatchAction({
		                type: 'dataZoom',
		                from: this.uid,
		                dataZoomId: this.dataZoomModel.id,
		                start: range[0],
		                end: range[1]
		            });
		        },

		        /**
		         * @private
		         */
		        _applyBarTransform: function (vertex, inverse) {
		            var barTransform = this._displayables.barGroup.getLocalTransform();
		            return graphic.applyTransform(vertex, barTransform, inverse);
		        },

		        /**
		         * @private
		         */
		        _findCoordRect: function () {
		            // Find the grid coresponding to the first axis referred by dataZoom.
		            var targetInfo = this.getTargetInfo();

		            // FIXME
		            // 判断是catesian还是polar
		            var rect;
		            if (targetInfo.cartesians.length) {
		                rect = targetInfo.cartesians[0].model.coordinateSystem.getRect();
		            }
		            else { // Polar
		                // FIXME
		                // 暂时随便写的
		                var width = this.api.getWidth();
		                var height = this.api.getHeight();
		                rect = {
		                    x: width * 0.2,
		                    y: height * 0.2,
		                    width: width * 0.6,
		                    height: height * 0.6
		                };
		            }

		            return rect;
		        }

		    });

		    function getOtherDim(thisDim) {
		        // FIXME
		        // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
		        return thisDim === 'x' ? 'y' : 'x';
		    }

		    module.exports = SliderZoomView;



	/***/ },
	/* 293 */
	/***/ function(module, exports) {

		

		    var lib = {};

		    var ORIGIN_METHOD = '\0__throttleOriginMethod';
		    var RATE = '\0__throttleRate';

		    /**
		     * 频率控制 返回函数连续调用时，fn 执行频率限定为每多少时间执行一次
		     * 例如常见效果：
		     * notifyWhenChangesStop
		     *      频繁调用时，只保证最后一次执行
		     *      配成：trailing：true；debounce：true 即可
		     * notifyAtFixRate
		     *      频繁调用时，按规律心跳执行
		     *      配成：trailing：true；debounce：false 即可
		     * 注意：
		     *     根据model更新view的时候，可以使用throttle，
		     *     但是根据view更新model的时候，避免使用这种延迟更新的方式。
		     *     因为这可能导致model和server同步出现问题。
		     *
		     * @public
		     * @param {(Function|Array.<Function>)} fn 需要调用的函数
		     *                                         如果fn为array，则表示可以对多个函数进行throttle。
		     *                                         他们共享同一个timer。
		     * @param {number} delay 延迟时间，单位毫秒
		     * @param {bool} trailing 是否保证最后一次触发的执行
		     *                        true：表示保证最后一次调用会触发执行。
		     *                        但任何调用后不可能立即执行，总会delay。
		     *                        false：表示不保证最后一次调用会触发执行。
		     *                        但只要间隔大于delay，调用就会立即执行。
		     * @param {bool} debounce 节流
		     *                        true：表示：频繁调用（间隔小于delay）时，根本不执行
		     *                        false：表示：频繁调用（间隔小于delay）时，按规律心跳执行
		     * @return {(Function|Array.<Function>)} 实际调用函数。
		     *                                       当输入的fn为array时，返回值也为array。
		     *                                       每项是Function。
		     */
		    lib.throttle = function (fn, delay, trailing, debounce) {

		        var currCall = (new Date()).getTime();
		        var lastCall = 0;
		        var lastExec = 0;
		        var timer = null;
		        var diff;
		        var scope;
		        var args;
		        var isSingle = typeof fn === 'function';
		        delay = delay || 0;

		        if (isSingle) {
		            return createCallback();
		        }
		        else {
		            var ret = [];
		            for (var i = 0; i < fn.length; i++) {
		                ret[i] = createCallback(i);
		            }
		            return ret;
		        }

		        function createCallback(index) {

		            function exec() {
		                lastExec = (new Date()).getTime();
		                timer = null;
		                (isSingle ? fn : fn[index]).apply(scope, args || []);
		            }

		            var cb = function () {
		                currCall = (new Date()).getTime();
		                scope = this;
		                args = arguments;
		                diff = currCall - (debounce ? lastCall : lastExec) - delay;

		                clearTimeout(timer);

		                if (debounce) {
		                    if (trailing) {
		                        timer = setTimeout(exec, delay);
		                    }
		                    else if (diff >= 0) {
		                        exec();
		                    }
		                }
		                else {
		                    if (diff >= 0) {
		                        exec();
		                    }
		                    else if (trailing) {
		                        timer = setTimeout(exec, -diff);
		                    }
		                }

		                lastCall = currCall;
		            };

		            /**
		             * Clear throttle.
		             * @public
		             */
		            cb.clear = function () {
		                if (timer) {
		                    clearTimeout(timer);
		                    timer = null;
		                }
		            };

		            return cb;
		        }
		    };

		    /**
		     * 按一定频率执行，最后一次调用总归会执行
		     *
		     * @public
		     */
		    lib.fixRate = function (fn, delay) {
		        return delay != null
		            ? lib.throttle(fn, delay, true, false)
		            : fn;
		    };

		    /**
		     * 直到不频繁调用了才会执行，最后一次调用总归会执行
		     *
		     * @public
		     */
		    lib.debounce = function (fn, delay) {
		        return delay != null
		             ? lib.throttle(fn, delay, true, true)
		             : fn;
		    };


		    /**
		     * Create throttle method or update throttle rate.
		     *
		     * @example
		     * ComponentView.prototype.render = function () {
		     *     ...
		     *     throttle.createOrUpdate(
		     *         this,
		     *         '_dispatchAction',
		     *         this.model.get('throttle'),
		     *         'fixRate'
		     *     );
		     * };
		     * ComponentView.prototype.remove = function () {
		     *     throttle.clear(this, '_dispatchAction');
		     * };
		     * ComponentView.prototype.dispose = function () {
		     *     throttle.clear(this, '_dispatchAction');
		     * };
		     *
		     * @public
		     * @param {Object} obj
		     * @param {string} fnAttr
		     * @param {number} rate
		     * @param {string} throttleType 'fixRate' or 'debounce'
		     */
		    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {
		        var fn = obj[fnAttr];

		        if (!fn || rate == null || !throttleType) {
		            return;
		        }

		        var originFn = fn[ORIGIN_METHOD] || fn;
		        var lastRate = fn[RATE];

		        if (lastRate !== rate) {
		            fn = obj[fnAttr] = lib[throttleType](originFn, rate);
		            fn[ORIGIN_METHOD] = originFn;
		            fn[RATE] = rate;
		        }
		    };

		    /**
		     * Clear throttle. Example see throttle.createOrUpdate.
		     *
		     * @public
		     * @param {Object} obj
		     * @param {string} fnAttr
		     */
		    lib.clear = function (obj, fnAttr) {
		        var fn = obj[fnAttr];
		        if (fn && fn[ORIGIN_METHOD]) {
		            obj[fnAttr] = fn[ORIGIN_METHOD];
		        }
		    };

		    module.exports = lib;



	/***/ },
	/* 294 */
	/***/ function(module, exports) {

		

		    /**
		     * Calculate slider move result.
		     *
		     * @param {number} delta Move length.
		     * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].
		     *                                    handleEnds will be modified in this method.
		     * @param {Array.<number>} extent handleEnds is restricted by extent.
		     *                                extent[0] should less or equals than extent[1].
		     * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,
		     *                      'cross' handleEnds[0] can be bigger then handleEnds[1],
		     *                      'push' handleEnds[0] can not be bigger then handleEnds[1],
		     *                              when they touch, one push other.
		     * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.
		     * @param {Array.<number>} The input handleEnds.
		     */
		    module.exports = function (delta, handleEnds, extent, mode, handleIndex) {
		        if (!delta) {
		            return handleEnds;
		        }

		        if (mode === 'rigid') {
		            delta = getRealDelta(delta, handleEnds, extent);
		            handleEnds[0] += delta;
		            handleEnds[1] += delta;
		        }
		        else {
		            delta = getRealDelta(delta, handleEnds[handleIndex], extent);
		            handleEnds[handleIndex] += delta;

		            if (mode === 'push' && handleEnds[0] > handleEnds[1]) {
		                handleEnds[1 - handleIndex] = handleEnds[handleIndex];
		            }
		        }

		        return handleEnds;

		        function getRealDelta(delta, handleEnds, extent) {
		            var handleMinMax = !handleEnds.length
		                ? [handleEnds, handleEnds]
		                : handleEnds.slice();
		            handleEnds[0] > handleEnds[1] && handleMinMax.reverse();

		            if (delta < 0 && handleMinMax[0] + delta < extent[0]) {
		                delta = extent[0] - handleMinMax[0];
		            }
		            if (delta > 0 && handleMinMax[1] + delta > extent[1]) {
		                delta = extent[1] - handleMinMax[1];
		            }
		            return delta;
		        }
		    };


	/***/ },
	/* 295 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data zoom model
		 */


		    module.exports = __webpack_require__(288).extend({

		        type: 'dataZoom.inside',

		        /**
		         * @protected
		         */
		        defaultOption: {
		            zoomLock: false // Whether disable zoom but only pan.
		        }
		    });


	/***/ },
	/* 296 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var DataZoomView = __webpack_require__(290);
		    var zrUtil = __webpack_require__(3);
		    var sliderMove = __webpack_require__(294);
		    var roams = __webpack_require__(297);
		    var bind = zrUtil.bind;

		    var InsideZoomView = DataZoomView.extend({

		        type: 'dataZoom.inside',

		        /**
		         * @override
		         */
		        init: function (ecModel, api) {
		            /**
		             * 'throttle' is used in this.dispatchAction, so we save range
		             * to avoid missing some 'pan' info.
		             * @private
		             * @type {Array.<number>}
		             */
		            this._range;
		        },

		        /**
		         * @override
		         */
		        render: function (dataZoomModel, ecModel, api, payload) {
		            InsideZoomView.superApply(this, 'render', arguments);

		            // Notice: origin this._range should be maintained, and should not be re-fetched
		            // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'
		            // info will be missed because of 'throttle' of this.dispatchAction.
		            if (roams.shouldRecordRange(payload, dataZoomModel.id)) {
		                this._range = dataZoomModel.getPercentRange();
		            }

		            // Reset controllers.
		            var coordInfoList = this.getTargetInfo().cartesians;
		            var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {
		                return roams.generateCoordId(coordInfo.model);
		            });
		            zrUtil.each(coordInfoList, function (coordInfo) {
		                var coordModel = coordInfo.model;
		                roams.register(
		                    api,
		                    {
		                        coordId: roams.generateCoordId(coordModel),
		                        allCoordIds: allCoordIds,
		                        coordinateSystem: coordModel.coordinateSystem,
		                        dataZoomId: dataZoomModel.id,
		                        throttleRage: dataZoomModel.get('throttle', true),
		                        panGetRange: bind(this._onPan, this, coordInfo),
		                        zoomGetRange: bind(this._onZoom, this, coordInfo)
		                    }
		                );
		            }, this);

		            // TODO
		            // polar支持
		        },

		        /**
		         * @override
		         */
		        remove: function () {
		            roams.unregister(this.api, this.dataZoomModel.id);
		            InsideZoomView.superApply(this, 'remove', arguments);
		            this._range = null;
		        },

		        /**
		         * @override
		         */
		        dispose: function () {
		            roams.unregister(this.api, this.dataZoomModel.id);
		            InsideZoomView.superApply(this, 'dispose', arguments);
		            this._range = null;
		        },

		        /**
		         * @private
		         */
		        _onPan: function (coordInfo, controller, dx, dy) {
		            return (
		                this._range = panCartesian(
		                    [dx, dy], this._range, controller, coordInfo
		                )
		            );
		        },

		        /**
		         * @private
		         */
		        _onZoom: function (coordInfo, controller, scale, mouseX, mouseY) {
		            var dataZoomModel = this.dataZoomModel;

		            if (dataZoomModel.option.zoomLock) {
		                return this._range;
		            }

		            return (
		                this._range = scaleCartesian(
		                    1 / scale, [mouseX, mouseY], this._range,
		                    controller, coordInfo, dataZoomModel
		                )
		            );
		        }

		    });

		    function panCartesian(pixelDeltas, range, controller, coordInfo) {
		        range = range.slice();

		        // Calculate transform by the first axis.
		        var axisModel = coordInfo.axisModels[0];
		        if (!axisModel) {
		            return;
		        }

		        var directionInfo = getDirectionInfo(pixelDeltas, axisModel, controller);

		        var percentDelta = directionInfo.signal
		            * (range[1] - range[0])
		            * directionInfo.pixel / directionInfo.pixelLength;

		        sliderMove(
		            percentDelta,
		            range,
		            [0, 100],
		            'rigid'
		        );

		        return range;
		    }

		    function scaleCartesian(scale, mousePoint, range, controller, coordInfo, dataZoomModel) {
		        range = range.slice();

		        // Calculate transform by the first axis.
		        var axisModel = coordInfo.axisModels[0];
		        if (!axisModel) {
		            return;
		        }

		        var directionInfo = getDirectionInfo(mousePoint, axisModel, controller);

		        var mouse = directionInfo.pixel - directionInfo.pixelStart;
		        var percentPoint = mouse / directionInfo.pixelLength * (range[1] - range[0]) + range[0];

		        scale = Math.max(scale, 0);
		        range[0] = (range[0] - percentPoint) * scale + percentPoint;
		        range[1] = (range[1] - percentPoint) * scale + percentPoint;

		        return fixRange(range);
		    }

		    function getDirectionInfo(xy, axisModel, controller) {
		        var axis = axisModel.axis;
		        var rect = controller.rect;
		        var ret = {};

		        if (axis.dim === 'x') {
		            ret.pixel = xy[0];
		            ret.pixelLength = rect.width;
		            ret.pixelStart = rect.x;
		            ret.signal = axis.inverse ? 1 : -1;
		        }
		        else { // axis.dim === 'y'
		            ret.pixel = xy[1];
		            ret.pixelLength = rect.height;
		            ret.pixelStart = rect.y;
		            ret.signal = axis.inverse ? -1 : 1;
		        }

		        return ret;
		    }

		    function fixRange(range) {
		        // Clamp, using !(<= or >=) to handle NaN.
		        // jshint ignore:start
		        var bound = [0, 100];
		        !(range[0] <= bound[1]) && (range[0] = bound[1]);
		        !(range[1] <= bound[1]) && (range[1] = bound[1]);
		        !(range[0] >= bound[0]) && (range[0] = bound[0]);
		        !(range[1] >= bound[0]) && (range[1] = bound[0]);
		        // jshint ignore:end

		        return range;
		    }

		    module.exports = InsideZoomView;


	/***/ },
	/* 297 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Roam controller manager.
		 */


		    // Only create one roam controller for each coordinate system.
		    // one roam controller might be refered by two inside data zoom
		    // components (for example, one for x and one for y). When user
		    // pan or zoom, only dispatch one action for those data zoom
		    // components.

		    var zrUtil = __webpack_require__(3);
		    var RoamController = __webpack_require__(159);
		    var throttle = __webpack_require__(293);
		    var curry = zrUtil.curry;

		    var ATTR = '\0_ec_dataZoom_roams';

		    var roams = {

		        /**
		         * @public
		         * @param {module:echarts/ExtensionAPI} api
		         * @param {Object} dataZoomInfo
		         * @param {string} dataZoomInfo.coordId
		         * @param {Object} dataZoomInfo.coordinateSystem
		         * @param {Array.<string>} dataZoomInfo.allCoordIds
		         * @param {string} dataZoomInfo.dataZoomId
		         * @param {number} dataZoomInfo.throttleRate
		         * @param {Function} dataZoomInfo.panGetRange
		         * @param {Function} dataZoomInfo.zoomGetRange
		         */
		        register: function (api, dataZoomInfo) {
		            var store = giveStore(api);
		            var theDataZoomId = dataZoomInfo.dataZoomId;
		            var theCoordId = dataZoomInfo.coordId;

		            // Do clean when a dataZoom changes its target coordnate system.
		            zrUtil.each(store, function (record, coordId) {
		                var dataZoomInfos = record.dataZoomInfos;
		                if (dataZoomInfos[theDataZoomId]
		                    && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0
		                ) {
		                    delete dataZoomInfos[theDataZoomId];
		                    record.count--;
		                }
		            });

		            cleanStore(store);

		            var record = store[theCoordId];

		            // Create if needed.
		            if (!record) {
		                record = store[theCoordId] = {
		                    coordId: theCoordId,
		                    dataZoomInfos: {},
		                    count: 0
		                };
		                record.controller = createController(api, dataZoomInfo, record);
		                record.dispatchAction = zrUtil.curry(dispatchAction, api);
		            }

		            // Consider resize, area should be always updated.
		            record.controller.rect = dataZoomInfo.coordinateSystem.getRect().clone();

		            // Update throttle.
		            throttle.createOrUpdate(
		                record,
		                'dispatchAction',
		                dataZoomInfo.throttleRate,
		                'fixRate'
		            );

		            // Update reference of dataZoom.
		            !(record.dataZoomInfos[theDataZoomId]) && record.count++;
		            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
		        },

		        /**
		         * @public
		         * @param {module:echarts/ExtensionAPI} api
		         * @param {string} dataZoomId
		         */
		        unregister: function (api, dataZoomId) {
		            var store = giveStore(api);

		            zrUtil.each(store, function (record) {
		                var dataZoomInfos = record.dataZoomInfos;
		                if (dataZoomInfos[dataZoomId]) {
		                    delete dataZoomInfos[dataZoomId];
		                    record.count--;
		                }
		            });

		            cleanStore(store);
		        },

		        /**
		         * @public
		         */
		        shouldRecordRange: function (payload, dataZoomId) {
		            if (payload && payload.type === 'dataZoom' && payload.batch) {
		                for (var i = 0, len = payload.batch.length; i < len; i++) {
		                    if (payload.batch[i].dataZoomId === dataZoomId) {
		                        return false;
		                    }
		                }
		            }
		            return true;
		        },

		        /**
		         * @public
		         */
		        generateCoordId: function (coordModel) {
		            return coordModel.type + '\0_' + coordModel.id;
		        }
		    };

		    /**
		     * Key: coordId, value: {dataZoomInfos: [], count, controller}
		     * @type {Array.<Object>}
		     */
		    function giveStore(api) {
		        // Mount store on zrender instance, so that we do not
		        // need to worry about dispose.
		        var zr = api.getZr();
		        return zr[ATTR] || (zr[ATTR] = {});
		    }

		    function createController(api, dataZoomInfo, newRecord) {
		        var controller = new RoamController(api.getZr());
		        controller.enable();
		        controller.on('pan', curry(onPan, newRecord));
		        controller.on('zoom', curry(onZoom, newRecord));

		        return controller;
		    }

		    function cleanStore(store) {
		        zrUtil.each(store, function (record, coordId) {
		            if (!record.count) {
		                record.controller.off('pan').off('zoom');
		                delete store[coordId];
		            }
		        });
		    }

		    function onPan(record, dx, dy) {
		        wrapAndDispatch(record, function (info) {
		            return info.panGetRange(record.controller, dx, dy);
		        });
		    }

		    function onZoom(record, scale, mouseX, mouseY) {
		        wrapAndDispatch(record, function (info) {
		            return info.zoomGetRange(record.controller, scale, mouseX, mouseY);
		        });
		    }

		    function wrapAndDispatch(record, getRange) {
		        var batch = [];

		        zrUtil.each(record.dataZoomInfos, function (info) {
		            var range = getRange(info);
		            range && batch.push({
		                dataZoomId: info.dataZoomId,
		                start: range[0],
		                end: range[1]
		            });
		        });

		        record.dispatchAction(batch);
		    }

		    /**
		     * This action will be throttled.
		     */
		    function dispatchAction(api, batch) {
		        api.dispatchAction({
		            type: 'dataZoom',
		            batch: batch
		        });
		    }

		    module.exports = roams;



	/***/ },
	/* 298 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data zoom processor
		 */


		    var echarts = __webpack_require__(1);

		    echarts.registerProcessor('filter', function (ecModel, api) {

		        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
		            // We calculate window and reset axis here but not in model
		            // init stage and not after action dispatch handler, because
		            // reset should be called after seriesData.restoreData.
		            dataZoomModel.eachTargetAxis(resetSingleAxis);

		            // Caution: data zoom filtering is order sensitive when using
		            // percent range and no min/max/scale set on axis.
		            // For example, we have dataZoom definition:
		            // [
		            //      {xAxisIndex: 0, start: 30, end: 70},
		            //      {yAxisIndex: 0, start: 20, end: 80}
		            // ]
		            // In this case, [20, 80] of y-dataZoom should be based on data
		            // that have filtered by x-dataZoom using range of [30, 70],
		            // but should not be based on full raw data. Thus sliding
		            // x-dataZoom will change both ranges of xAxis and yAxis,
		            // while sliding y-dataZoom will only change the range of yAxis.
		            // So we should filter x-axis after reset x-axis immediately,
		            // and then reset y-axis and filter y-axis.
		            dataZoomModel.eachTargetAxis(filterSingleAxis);
		        });

		        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
		            // Fullfill all of the range props so that user
		            // is able to get them from chart.getOption().
		            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
		            var percentRange = axisProxy.getDataPercentWindow();
		            var valueRange = axisProxy.getDataValueWindow();
		            dataZoomModel.setRawRange({
		                start: percentRange[0],
		                end: percentRange[1],
		                startValue: valueRange[0],
		                endValue: valueRange[1]
		            });
		        });
		    });

		    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {
		        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);
		    }

		    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {
		        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);
		    }




	/***/ },
	/* 299 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data zoom action
		 */


		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);
		    var echarts = __webpack_require__(1);


		    echarts.registerAction('dataZoom', function (payload, ecModel) {

		        var linkedNodesFinder = modelUtil.createLinkedNodesFinder(
		            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),
		            modelUtil.eachAxisDim,
		            function (model, dimNames) {
		                return model.get(dimNames.axisIndex);
		            }
		        );

		        var effectedModels = [];

		        ecModel.eachComponent(
		            {mainType: 'dataZoom', query: payload},
		            function (model, index) {
		                effectedModels.push.apply(
		                    effectedModels, linkedNodesFinder(model).nodes
		                );
		            }
		        );

		        zrUtil.each(effectedModels, function (dataZoomModel, index) {
		            dataZoomModel.setRawRange({
		                start: payload.start,
		                end: payload.end,
		                startValue: payload.startValue,
		                endValue: payload.endValue
		            });
		        });

		    });



	/***/ },
	/* 300 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * visualMap component entry
		 */


		    __webpack_require__(301);
		    __webpack_require__(312);



	/***/ },
	/* 301 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * DataZoom component entry
		 */


		    __webpack_require__(1).registerPreprocessor(
		        __webpack_require__(302)
		    );

		    __webpack_require__(303);
		    __webpack_require__(304);
		    __webpack_require__(305);
		    __webpack_require__(308);
		    __webpack_require__(311);



	/***/ },
	/* 302 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file VisualMap preprocessor
		 */


		    var zrUtil = __webpack_require__(3);
		    var each = zrUtil.each;

		    module.exports = function (option) {
		        var visualMap = option && option.visualMap;

		        if (!zrUtil.isArray(visualMap)) {
		            visualMap = visualMap ? [visualMap] : [];
		        }

		        each(visualMap, function (opt) {
		            if (!opt) {
		                return;
		            }

		            // rename splitList to pieces
		            if (has(opt, 'splitList') && !has(opt, 'pieces')) {
		                opt.pieces = opt.splitList;
		                delete opt.splitList;
		            }

		            var pieces = opt.pieces;
		            if (pieces && zrUtil.isArray(pieces)) {
		                each(pieces, function (piece) {
		                    if (zrUtil.isObject(piece)) {
		                        if (has(piece, 'start') && !has(piece, 'min')) {
		                            piece.min = piece.start;
		                        }
		                        if (has(piece, 'end') && !has(piece, 'max')) {
		                            piece.max = piece.end;
		                        }
		                    }
		                });
		            }
		        });
		    };

		    function has(obj, name) {
		        return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
		    }



	/***/ },
	/* 303 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(19).registerSubTypeDefaulter('visualMap', function (option) {
		        // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.
		        return (
		                !option.categories
		                && (
		                    !(
		                        option.pieces
		                            ? option.pieces.length > 0
		                            : option.splitNumber > 0
		                    )
		                    || option.calculable
		                )
		            )
		            ? 'continuous' : 'piecewise';
		    });



	/***/ },
	/* 304 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data range visual coding.
		 */


		    var echarts = __webpack_require__(1);
		    var VisualMapping = __webpack_require__(187);
		    var zrUtil = __webpack_require__(3);

		    echarts.registerVisualCoding('component', function (ecModel) {
		        ecModel.eachComponent('visualMap', function (visualMapModel) {
		            processSingleVisualMap(visualMapModel, ecModel);
		        });
		    });

		    function processSingleVisualMap(visualMapModel, ecModel) {
		        var visualMappings = visualMapModel.targetVisuals;
		        var visualTypesMap = {};
		        zrUtil.each(['inRange', 'outOfRange'], function (state) {
		            var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
		            visualTypesMap[state] = visualTypes;
		        });

		        visualMapModel.eachTargetSeries(function (seriesModel) {
		            var data = seriesModel.getData();
		            var dimension = visualMapModel.getDataDimension(data);
		            var dataIndex;

		            function getVisual(key) {
		                return data.getItemVisual(dataIndex, key);
		            }

		            function setVisual(key, value) {
		                data.setItemVisual(dataIndex, key, value);
		            }

		            data.each([dimension], function (value, index) {
		                // For performance consideration, do not use curry.
		                dataIndex = index;
		                var valueState = visualMapModel.getValueState(value);
		                var mappings = visualMappings[valueState];
		                var visualTypes = visualTypesMap[valueState];
		                for (var i = 0, len = visualTypes.length; i < len; i++) {
		                    var type = visualTypes[i];
		                    mappings[type] && mappings[type].applyVisual(value, getVisual, setVisual);
		                }
		            });
		        });
		    }




	/***/ },
	/* 305 */
	/***/ function(module, exports, __webpack_require__) {

		
		/**
		 * @file Data zoom model
		 */


		    var VisualMapModel = __webpack_require__(306);
		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);

		    // Constant
		    var DEFAULT_BAR_BOUND = [20, 140];

		    var ContinuousModel = VisualMapModel.extend({

		        type: 'visualMap.continuous',

		        /**
		         * @protected
		         */
		        defaultOption: {
		            handlePosition: 'auto',     // 'auto', 'left', 'right', 'top', 'bottom'
		            calculable: false,         // 是否值域漫游，启用后无视splitNumber和pieces，线性渐变
		            range: [-Infinity, Infinity], // 当前选中范围
		            hoverLink: true,
		            realtime: true,
		            itemWidth: null,            // 值域图形宽度
		            itemHeight: null            // 值域图形高度
		        },

		        /**
		         * @override
		         */
		        doMergeOption: function (newOption, isInit) {
		            ContinuousModel.superApply(this, 'doMergeOption', arguments);

		            this.resetTargetSeries(newOption, isInit);
		            this.resetExtent();

		            this.resetVisual(function (mappingOption) {
		                mappingOption.mappingMethod = 'linear';
		            });

		            this._resetRange();
		        },

		        /**
		         * @protected
		         * @override
		         */
		        resetItemSize: function () {
		            VisualMapModel.prototype.resetItemSize.apply(this, arguments);

		            var itemSize = this.itemSize;

		            this._orient === 'horizontal' && itemSize.reverse();

		            (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
		            (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
		        },

		        /**
		         * @private
		         */
		        _resetRange: function () {
		            var dataExtent = this.getExtent();
		            var range = this.option.range;
		            if (range[0] > range[1]) {
		                range.reverse();
		            }
		            range[0] = Math.max(range[0], dataExtent[0]);
		            range[1] = Math.min(range[1], dataExtent[1]);
		        },

		        /**
		         * @protected
		         * @override
		         */
		        completeVisualOption: function () {
		            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);

		            zrUtil.each(this.stateList, function (state) {
		                var symbolSize = this.option.controller[state].symbolSize;
		                if (symbolSize && symbolSize[0] !== symbolSize[1]) {
		                    symbolSize[0] = 0; // For good looking.
		                }
		            }, this);
		        },

		        /**
		         * @public
		         * @override
		         */
		        setSelected: function (selected) {
		            this.option.range = selected.slice();
		            this._resetRange();
		        },

		        /**
		         * @public
		         */
		        getSelected: function () {
		            var dataExtent = this.getExtent();

		            var dataInterval = numberUtil.asc(
		                (this.get('range') || []).slice()
		            );

		            // Clamp
		            dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
		            dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
		            dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
		            dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);

		            return dataInterval;
		        },

		        /**
		         * @public
		         * @override
		         */
		        getValueState: function (value) {
		            var range = this.option.range;
		            var dataExtent = this.getExtent();

		            // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.
		            // range[1] is processed likewise.
		            return (
		                (range[0] <= dataExtent[0] || range[0] <= value)
		                && (range[1] >= dataExtent[1] || value <= range[1])
		            ) ? 'inRange' : 'outOfRange';
		        }

		    });

		    module.exports = ContinuousModel;



	/***/ },
	/* 306 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data zoom model
		 */


		    var zrUtil = __webpack_require__(3);
		    var env = __webpack_require__(78);
		    var echarts = __webpack_require__(1);
		    var modelUtil = __webpack_require__(5);
		    var visualDefault = __webpack_require__(307);
		    var VisualMapping = __webpack_require__(187);
		    var mapVisual = VisualMapping.mapVisual;
		    var eachVisual = VisualMapping.eachVisual;
		    var numberUtil = __webpack_require__(7);
		    var isArray = zrUtil.isArray;
		    var each = zrUtil.each;
		    var asc = numberUtil.asc;
		    var linearMap = numberUtil.linearMap;

		    var VisualMapModel = echarts.extendComponentModel({

		        type: 'visualMap',

		        dependencies: ['series'],

		        /**
		         * [lowerBound, upperBound]
		         *
		         * @readOnly
		         * @type {Array.<number>}
		         */
		        dataBound: [-Infinity, Infinity],

		        /**
		         * @readOnly
		         * @type {Array.<string>}
		         */
		        stateList: ['inRange', 'outOfRange'],

		        /**
		         * @readOnly
		         * @type {string|Object}
		         */
		        layoutMode: {type: 'box', ignoreSize: true},

		        /**
		         * @protected
		         */
		        defaultOption: {
		            show: true,

		            zlevel: 0,
		            z: 4,

		                                    // set min: 0, max: 200, only for campatible with ec2.
		                                    // In fact min max should not have default value.
		            min: 0,                 // min value, must specified if pieces is not specified.
		            max: 200,               // max value, must specified if pieces is not specified.

		            dimension: null,
		            inRange: null,          // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',
		                                    // 'symbol', 'symbolSize'
		            outOfRange: null,       // 'color', 'colorHue', 'colorSaturation',
		                                    // 'colorLightness', 'colorAlpha',
		                                    // 'symbol', 'symbolSize'

		            left: 0,                // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)
		            right: null,            // The same as left.
		            top: null,              // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)
		            bottom: 0,              // The same as top.

		            itemWidth: null,
		            itemHeight: null,
		            inverse: false,
		            orient: 'vertical',        // 'horizontal' ¦ 'vertical'

		            seriesIndex: null,          // 所控制的series indices，默认所有有value的series.
		            backgroundColor: 'rgba(0,0,0,0)',
		            borderColor: '#ccc',       // 值域边框颜色
		            contentColor: '#5793f3',
		            inactiveColor: '#aaa',
		            borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）
		            padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，
		                                       // 接受数组分别设定上右下左边距，同css
		            textGap: 10,               //
		            precision: 0,              // 小数精度，默认为0，无小数点
		            color: ['#bf444c', '#d88273', '#f6efa6'], //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）

		            formatter: null,
		            text: null,                // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值
		            textStyle: {
		                color: '#333'          // 值域文字颜色
		            }
		        },

		        /**
		         * @protected
		         */
		        init: function (option, parentModel, ecModel) {
		            /**
		             * @private
		             * @type {boolean}
		             */
		            this._autoSeriesIndex = false;

		            /**
		             * @private
		             * @type {Array.<number>}
		             */
		            this._dataExtent;

		            /**
		             * @readOnly
		             */
		            this.controllerVisuals = {};

		            /**
		             * @readOnly
		             */
		            this.targetVisuals = {};

		            /**
		             * @readOnly
		             */
		            this.textStyleModel;

		            /**
		             * [width, height]
		             * @readOnly
		             * @type {Array.<number>}
		             */
		            this.itemSize;

		            this.mergeDefaultAndTheme(option, ecModel);

		            this.doMergeOption({}, true);
		        },

		        /**
		         * @public
		         */
		        mergeOption: function (option) {
		            VisualMapModel.superApply(this, 'mergeOption', arguments);
		            this.doMergeOption(option, false);
		        },

		        /**
		         * @protected
		         */
		        doMergeOption: function (newOption, isInit) {
		            var thisOption = this.option;

		            // Visual attributes merge is not supported, otherwise it
		            // brings overcomplicated merge logic. See #2853.
		            !isInit && replaceVisualOption(thisOption, newOption);

		            // FIXME
		            // necessary?
		            // Disable realtime view update if canvas is not supported.
		            if (!env.canvasSupported) {
		                thisOption.realtime = false;
		            }

		            this.textStyleModel = this.getModel('textStyle');

		            this.resetItemSize();

		            this.completeVisualOption();
		        },

		        /**
		         * @example
		         * this.formatValueText(someVal); // format single numeric value to text.
		         * this.formatValueText(someVal, true); // format single category value to text.
		         * this.formatValueText([min, max]); // format numeric min-max to text.
		         * this.formatValueText([this.dataBound[0], max]); // using data lower bound.
		         * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.
		         *
		         * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].
		         * @param {boolean} [isCategory=false] Only available when value is number.
		         * @return {string}
		         * @protected
		         */
		        formatValueText: function(value, isCategory) {
		            var option = this.option;
		            var precision = option.precision;
		            var dataBound = this.dataBound;
		            var formatter = option.formatter;
		            var isMinMax;
		            var textValue;

		            if (zrUtil.isArray(value)) {
		                value = value.slice();
		                isMinMax = true;
		            }

		            textValue = isCategory
		                ? value
		                : (isMinMax
		                    ? [toFixed(value[0]), toFixed(value[1])]
		                    : toFixed(value)
		                );

		            if (zrUtil.isString(formatter)) {
		                return formatter
		                    .replace('{value}', isMinMax ? textValue[0] : textValue)
		                    .replace('{value2}', isMinMax ? textValue[1] : textValue);
		            }
		            else if (zrUtil.isFunction(formatter)) {
		                return isMinMax
		                    ? formatter(value[0], value[1])
		                    : formatter(value);
		            }

		            if (isMinMax) {
		                if (value[0] === dataBound[0]) {
		                    return '< ' + textValue[1];
		                }
		                else if (value[1] === dataBound[1]) {
		                    return '> ' + textValue[0];
		                }
		                else {
		                    return textValue[0] + ' - ' + textValue[1];
		                }
		            }
		            else { // Format single value (includes category case).
		                return textValue;
		            }

		            function toFixed(val) {
		                return val === dataBound[0]
		                    ? 'min'
		                    : val === dataBound[1]
		                    ? 'max'
		                    : (+val).toFixed(precision);
		            }
		        },

		        /**
		         * @protected
		         */
		        resetTargetSeries: function (newOption, isInit) {
		            var thisOption = this.option;
		            var autoSeriesIndex = this._autoSeriesIndex =
		                (isInit ? thisOption : newOption).seriesIndex == null;
		            thisOption.seriesIndex = autoSeriesIndex
		                ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);

		            autoSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {
		                var data = seriesModel.getData();
		                // FIXME
		                // 只考虑了list，还没有考虑map等。

		                // FIXME
		                // 这里可能应该这么判断：data.dimensions中有超出其所属coordSystem的量。
		                if (data.type === 'list') {
		                    thisOption.seriesIndex.push(index);
		                }
		            });
		        },

		        /**
		         * @protected
		         */
		        resetExtent: function () {
		            var thisOption = this.option;

		            // Can not calculate data extent by data here.
		            // Because series and data may be modified in processing stage.
		            // So we do not support the feature "auto min/max".

		            var extent = asc([thisOption.min, thisOption.max]);

		            this._dataExtent = extent;
		        },

		        /**
		         * @protected
		         */
		        getDataDimension: function (list) {
		            var optDim = this.option.dimension;
		            return optDim != null
		                ? optDim : list.dimensions.length - 1;
		        },

		        /**
		         * @public
		         * @override
		         */
		        getExtent: function () {
		            return this._dataExtent.slice();
		        },

		        /**
		         * @protected
		         */
		        resetVisual: function (fillVisualOption) {
		            var dataExtent = this.getExtent();

		            doReset.call(this, 'controller', this.controllerVisuals);
		            doReset.call(this, 'target', this.targetVisuals);

		            function doReset(baseAttr, visualMappings) {
		                each(this.stateList, function (state) {
		                    var mappings = visualMappings[state] || (visualMappings[state] = {});
		                    var visaulOption = this.option[baseAttr][state] || {};
		                    each(visaulOption, function (visualData, visualType) {
		                        if (!VisualMapping.isValidType(visualType)) {
		                            return;
		                        }
		                        var mappingOption = {
		                            type: visualType,
		                            dataExtent: dataExtent,
		                            visual: visualData
		                        };
		                        fillVisualOption && fillVisualOption.call(this, mappingOption, state);
		                        mappings[visualType] = new VisualMapping(mappingOption);
		                    }, this);
		                }, this);
		            }
		        },

		        /**
		         * @protected
		         */
		        completeVisualOption: function () {
		            var thisOption = this.option;
		            var base = {inRange: thisOption.inRange, outOfRange: thisOption.outOfRange};

		            var target = thisOption.target || (thisOption.target = {});
		            var controller = thisOption.controller || (thisOption.controller = {});

		            zrUtil.merge(target, base); // Do not override
		            zrUtil.merge(controller, base); // Do not override

		            var isCategory = this.isCategory();

		            completeSingle.call(this, target);
		            completeSingle.call(this, controller);
		            completeInactive.call(this, target, 'inRange', 'outOfRange');
		            completeInactive.call(this, target, 'outOfRange', 'inRange');
		            completeController.call(this, controller);

		            function completeSingle(base) {
		                // Compatible with ec2 dataRange.color.
		                // The mapping order of dataRange.color is: [high value, ..., low value]
		                // whereas inRange.color and outOfRange.color is [low value, ..., high value]
		                // Notice: ec2 has no inverse.
		                if (isArray(thisOption.color)
		                    // If there has been inRange: {symbol: ...}, adding color is a mistake.
		                    // So adding color only when no inRange defined.
		                    && !base.inRange
		                ) {
		                    base.inRange = {color: thisOption.color.slice().reverse()};
		                }

		                // If using shortcut like: {inRange: 'symbol'}, complete default value.
		                each(this.stateList, function (state) {
		                    var visualType = base[state];

		                    if (zrUtil.isString(visualType)) {
		                        var defa = visualDefault.get(visualType, 'active', isCategory);
		                        if (defa) {
		                            base[state] = {};
		                            base[state][visualType] = defa;
		                        }
		                        else {
		                            // Mark as not specified.
		                            delete base[state];
		                        }
		                    }
		                }, this);
		            }

		            function completeInactive(base, stateExist, stateAbsent) {
		                var optExist = base[stateExist];
		                var optAbsent = base[stateAbsent];

		                if (optExist && !optAbsent) {
		                    optAbsent = base[stateAbsent] = {};
		                    each(optExist, function (visualData, visualType) {
		                        var defa = visualDefault.get(visualType, 'inactive', isCategory);
		                        if (VisualMapping.isValidType(visualType) && defa) {
		                            optAbsent[visualType] = defa;
		                        }
		                    });
		                }
		            }

		            function completeController(controller) {
		                var symbolExists = (controller.inRange || {}).symbol
		                    || (controller.outOfRange || {}).symbol;
		                var symbolSizeExists = (controller.inRange || {}).symbolSize
		                    || (controller.outOfRange || {}).symbolSize;
		                var inactiveColor = this.get('inactiveColor');

		                each(this.stateList, function (state) {

		                    var itemSize = this.itemSize;
		                    var visuals = controller[state];

		                    // Set inactive color for controller if no other color attr (like colorAlpha) specified.
		                    if (!visuals) {
		                        visuals = controller[state] = {
		                            color: isCategory ? inactiveColor : [inactiveColor]
		                        };
		                    }

		                    // Consistent symbol and symbolSize if not specified.
		                    if (!visuals.symbol) {
		                        visuals.symbol = symbolExists
		                            && zrUtil.clone(symbolExists)
		                            || (isCategory ? 'roundRect' : ['roundRect']);
		                    }
		                    if (!visuals.symbolSize) {
		                        visuals.symbolSize = symbolSizeExists
		                            && zrUtil.clone(symbolSizeExists)
		                            || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);
		                    }

		                    // Filter square and none.
		                    visuals.symbol = mapVisual(visuals.symbol, function (symbol) {
		                        return (symbol === 'none' || symbol === 'square') ? 'roundRect' : symbol;
		                    });

		                    // Normalize symbolSize
		                    var symbolSize = visuals.symbolSize;

		                    if (symbolSize) {
		                        var max = -Infinity;
		                        // symbolSize can be object when categories defined.
		                        eachVisual(symbolSize, function (value) {
		                            value > max && (max = value);
		                        });
		                        visuals.symbolSize = mapVisual(symbolSize, function (value) {
		                            return linearMap(value, [0, max], [0, itemSize[0]], true);
		                        });
		                    }

		                }, this);
		            }
		        },

		        /**
		         * @public
		         */
		        eachTargetSeries: function (callback, context) {
		            zrUtil.each(this.option.seriesIndex, function (seriesIndex) {
		                callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));
		            }, this);
		        },

		        /**
		         * @public
		         */
		        isCategory: function () {
		            return !!this.option.categories;
		        },

		        /**
		         * @protected
		         */
		        resetItemSize: function () {
		            this.itemSize = [
		                parseFloat(this.get('itemWidth')),
		                parseFloat(this.get('itemHeight'))
		            ];
		        },

		        /**
		         * @public
		         * @abstract
		         */
		        setSelected: zrUtil.noop,

		        /**
		         * @public
		         * @abstract
		         */
		        getValueState: zrUtil.noop

		    });

		    function replaceVisualOption(targetOption, sourceOption) {
		        zrUtil.each(
		            ['inRange', 'outOfRange', 'target', 'controller', 'color'],
		            function (key) {
		                if (sourceOption.hasOwnProperty(key)) {
		                    targetOption[key] = zrUtil.clone(sourceOption[key]);
		                }
		                else {
		                    delete targetOption[key];
		                }
		            }
		        );
		    }

		    module.exports = VisualMapModel;



	/***/ },
	/* 307 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Visual mapping.
		 */


		    var zrUtil = __webpack_require__(3);

		    var visualDefault = {

		        /**
		         * @public
		         */
		        get: function (visualType, key, isCategory) {
		            var value = zrUtil.clone(
		                (defaultOption[visualType] || {})[key]
		            );

		            return isCategory
		                ? (zrUtil.isArray(value) ? value[value.length - 1] : value)
		                : value;
		        }

		    };

		    var defaultOption = {

		        color: {
		            active: ['#006edd', '#e0ffff'],
		            inactive: ['rgba(0,0,0,0)']
		        },

		        colorHue: {
		            active: [0, 360],
		            inactive: [0, 0]
		        },

		        colorSaturation: {
		            active: [0.3, 1],
		            inactive: [0, 0]
		        },

		        colorLightness: {
		            active: [0.9, 0.5],
		            inactive: [0, 0]
		        },

		        colorAlpha: {
		            active: [0.3, 1],
		            inactive: [0, 0]
		        },

		        symbol: {
		            active: ['circle', 'roundRect', 'diamond'],
		            inactive: ['none']
		        },

		        symbolSize: {
		            active: [10, 50],
		            inactive: [0, 0]
		        }
		    };

		    module.exports = visualDefault;




	/***/ },
	/* 308 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var VisualMapView = __webpack_require__(309);
		    var graphic = __webpack_require__(42);
		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var sliderMove = __webpack_require__(294);
		    var linearMap = numberUtil.linearMap;
		    var LinearGradient = __webpack_require__(75);
		    var helper = __webpack_require__(310);
		    var each = zrUtil.each;

		    // Notice:
		    // Any "interval" should be by the order of [low, high].
		    // "handle0" (handleIndex === 0) maps to
		    // low data value: this._dataInterval[0] and has low coord.
		    // "handle1" (handleIndex === 1) maps to
		    // high data value: this._dataInterval[1] and has high coord.
		    // The logic of transform is implemented in this._createBarGroup.

		    var ContinuousVisualMapView = VisualMapView.extend({

		        type: 'visualMap.continuous',

		        /**
		         * @override
		         */
		        init: function () {

		            VisualMapView.prototype.init.apply(this, arguments);

		            /**
		             * @private
		             */
		            this._shapes = {};

		            /**
		             * @private
		             */
		            this._dataInterval = [];

		            /**
		             * @private
		             */
		            this._handleEnds = [];

		            /**
		             * @private
		             */
		            this._orient;

		            /**
		             * @private
		             */
		            this._useHandle;
		        },

		        /**
		         * @protected
		         * @override
		         */
		        doRender: function (visualMapModel, ecModel, api, payload) {
		            if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {
		                this._buildView();
		            }
		            else {
		                this._updateView();
		            }
		        },

		        /**
		         * @private
		         */
		        _buildView: function () {
		            this.group.removeAll();

		            var visualMapModel = this.visualMapModel;
		            var thisGroup = this.group;

		            this._orient = visualMapModel.get('orient');
		            this._useHandle = visualMapModel.get('calculable');

		            this._resetInterval();

		            this._renderBar(thisGroup);

		            var dataRangeText = visualMapModel.get('text');
		            this._renderEndsText(thisGroup, dataRangeText, 0);
		            this._renderEndsText(thisGroup, dataRangeText, 1);

		            // Do this for background size calculation.
		            this._updateView(true);

		            // After updating view, inner shapes is built completely,
		            // and then background can be rendered.
		            this.renderBackground(thisGroup);

		            // Real update view
		            this._updateView();

		            this.positionGroup(thisGroup);
		        },

		        /**
		         * @private
		         */
		        _renderEndsText: function (group, dataRangeText, endsIndex) {
		            if (!dataRangeText) {
		                return;
		            }

		            // Compatible with ec2, text[0] map to high value, text[1] map low value.
		            var text = dataRangeText[1 - endsIndex];
		            text = text != null ? text + '' : '';

		            var visualMapModel = this.visualMapModel;
		            var textGap = visualMapModel.get('textGap');
		            var itemSize = visualMapModel.itemSize;

		            var barGroup = this._shapes.barGroup;
		            var position = this._applyTransform(
		                [
		                    itemSize[0] / 2,
		                    endsIndex === 0 ? -textGap : itemSize[1] + textGap
		                ],
		                barGroup
		            );
		            var align = this._applyTransform(
		                endsIndex === 0 ? 'bottom' : 'top',
		                barGroup
		            );
		            var orient = this._orient;
		            var textStyleModel = this.visualMapModel.textStyleModel;

		            this.group.add(new graphic.Text({
		                style: {
		                    x: position[0],
		                    y: position[1],
		                    textVerticalAlign: orient === 'horizontal' ? 'middle' : align,
		                    textAlign: orient === 'horizontal' ? align : 'center',
		                    text: text,
		                    textFont: textStyleModel.getFont(),
		                    fill: textStyleModel.getTextColor()
		                }
		            }));
		        },

		        /**
		         * @private
		         */
		        _renderBar: function (targetGroup) {
		            var visualMapModel = this.visualMapModel;
		            var shapes = this._shapes;
		            var itemSize = visualMapModel.itemSize;
		            var orient = this._orient;
		            var useHandle = this._useHandle;
		            var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);
		            var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);

		            // Bar
		            barGroup.add(shapes.outOfRange = createPolygon());
		            barGroup.add(shapes.inRange = createPolygon(
		                null,
		                zrUtil.bind(this._modifyHandle, this, 'all'),
		                useHandle ? 'move' : null
		            ));

		            var textRect = visualMapModel.textStyleModel.getTextRect('国');
		            var textSize = Math.max(textRect.width, textRect.height);

		            // Handle
		            if (useHandle) {
		                shapes.handleGroups = [];
		                shapes.handleThumbs = [];
		                shapes.handleLabels = [];
		                shapes.handleLabelPoints = [];

		                this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);
		                this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);
		            }

		            // Indicator
		            // FIXME

		            targetGroup.add(barGroup);
		        },

		        /**
		         * @private
		         */
		        _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {
		            var handleGroup = new graphic.Group({position: [itemSize[0], 0]});
		            var handleThumb = createPolygon(
		                createHandlePoints(handleIndex, textSize),
		                zrUtil.bind(this._modifyHandle, this, handleIndex),
		                'move'
		            );
		            handleGroup.add(handleThumb);

		            // For text locating. Text is always horizontal layout
		            // but should not be effected by transform.
		            var handleLabelPoint = {
		                x: orient === 'horizontal'
		                    ? textSize / 2
		                    : textSize * 1.5,
		                y: orient === 'horizontal'
		                    ? (handleIndex === 0 ? -(textSize * 1.5) : (textSize * 1.5))
		                    : (handleIndex === 0 ? -textSize / 2 : textSize / 2)
		            };

		            var textStyleModel = this.visualMapModel.textStyleModel;
		            var handleLabel = new graphic.Text({
		                silent: true,
		                style: {
		                    x: 0, y: 0, text: '',
		                    textVerticalAlign: 'middle',
		                    textFont: textStyleModel.getFont(),
		                    fill: textStyleModel.getTextColor()
		                }
		            });

		            this.group.add(handleLabel); // Text do not transform

		            var shapes = this._shapes;
		            shapes.handleThumbs[handleIndex] = handleThumb;
		            shapes.handleGroups[handleIndex] = handleGroup;
		            shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
		            shapes.handleLabels[handleIndex] = handleLabel;

		            barGroup.add(handleGroup);
		        },

		        /**
		         * @private
		         */
		        _modifyHandle: function (handleIndex, dx, dy) {
		            if (!this._useHandle) {
		                return;
		            }

		            // Transform dx, dy to bar coordination.
		            var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);
		            this._updateInterval(handleIndex, vertex[1]);

		            this.api.dispatchAction({
		                type: 'selectDataRange',
		                from: this.uid,
		                visualMapId: this.visualMapModel.id,
		                selected: this._dataInterval.slice()
		            });
		        },

		        /**
		         * @private
		         */
		        _resetInterval: function () {
		            var visualMapModel = this.visualMapModel;

		            var dataInterval = this._dataInterval = visualMapModel.getSelected();
		            var dataExtent = visualMapModel.getExtent();
		            var sizeExtent = [0, visualMapModel.itemSize[1]];

		            this._handleEnds = [
		                linearMap(dataInterval[0], dataExtent, sizeExtent,true),
		                linearMap(dataInterval[1], dataExtent, sizeExtent,true)
		            ];
		        },

		        /**
		         * @private
		         * @param {(number|string)} handleIndex 0 or 1 or 'all'
		         * @param {number} dx
		         * @param {number} dy
		         */
		        _updateInterval: function (handleIndex, delta) {
		            delta = delta || 0;
		            var visualMapModel = this.visualMapModel;
		            var handleEnds = this._handleEnds;

		            sliderMove(
		                delta,
		                handleEnds,
		                [0, visualMapModel.itemSize[1]],
		                handleIndex === 'all' ? 'rigid' : 'push',
		                handleIndex
		            );
		            var dataExtent = visualMapModel.getExtent();
		            var sizeExtent = [0, visualMapModel.itemSize[1]];
		            // Update data interval.
		            this._dataInterval = [
		                linearMap(handleEnds[0], sizeExtent, dataExtent, true),
		                linearMap(handleEnds[1], sizeExtent, dataExtent, true)
		            ];
		        },

		        /**
		         * @private
		         */
		        _updateView: function (forSketch) {
		            var visualMapModel = this.visualMapModel;
		            var dataExtent = visualMapModel.getExtent();
		            var shapes = this._shapes;
		            var dataInterval = this._dataInterval;

		            var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
		            var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;

		            var visualInRange = this._createBarVisual(
		                dataInterval, dataExtent, inRangeHandleEnds, 'inRange'
		            );
		            var visualOutOfRange = this._createBarVisual(
		                dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange'
		            );

		            shapes.inRange
		                .setStyle('fill', visualInRange.barColor)
		                .setShape('points', visualInRange.barPoints);
		            shapes.outOfRange
		                .setStyle('fill', visualOutOfRange.barColor)
		                .setShape('points', visualOutOfRange.barPoints);

		            this._useHandle && each([0, 1], function (handleIndex) {

		                shapes.handleThumbs[handleIndex].setStyle(
		                    'fill', visualInRange.handlesColor[handleIndex]
		                );

		                shapes.handleLabels[handleIndex].setStyle({
		                    text: visualMapModel.formatValueText(dataInterval[handleIndex]),
		                    textAlign: this._applyTransform(
		                        this._orient === 'horizontal'
		                            ? (handleIndex === 0 ? 'bottom' : 'top')
		                            : 'left',
		                        shapes.barGroup
		                    )
		                });

		            }, this);

		            this._updateHandlePosition(inRangeHandleEnds);
		        },

		        /**
		         * @private
		         */
		        _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {
		            var colorStops = this.getControllerVisual(dataInterval, forceState, 'color').color;

		            var symbolSizes = [
		                this.getControllerVisual(dataInterval[0], forceState, 'symbolSize').symbolSize,
		                this.getControllerVisual(dataInterval[1], forceState, 'symbolSize').symbolSize
		            ];
		            var barPoints = this._createBarPoints(handleEnds, symbolSizes);

		            return {
		                barColor: new LinearGradient(0, 0, 1, 1, colorStops),
		                barPoints: barPoints,
		                handlesColor: [
		                    colorStops[0].color,
		                    colorStops[colorStops.length - 1].color
		                ]
		            };
		        },

		        /**
		         * @private
		         */
		        _createBarPoints: function (handleEnds, symbolSizes) {
		            var itemSize = this.visualMapModel.itemSize;

		            return [
		                [itemSize[0] - symbolSizes[0], handleEnds[0]],
		                [itemSize[0], handleEnds[0]],
		                [itemSize[0], handleEnds[1]],
		                [itemSize[0] - symbolSizes[1], handleEnds[1]]
		            ];
		        },

		        /**
		         * @private
		         */
		        _createBarGroup: function (itemAlign) {
		            var orient = this._orient;
		            var inverse = this.visualMapModel.get('inverse');

		            return new graphic.Group(
		                (orient === 'horizontal' && !inverse)
		                ? {scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2}
		                : (orient === 'horizontal' && inverse)
		                ? {scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2}
		                : (orient === 'vertical' && !inverse)
		                ? {scale: itemAlign === 'left' ? [1, -1] : [-1, -1]}
		                : {scale: itemAlign === 'left' ? [1, 1] : [-1, 1]}
		            );
		        },

		        /**
		         * @private
		         */
		        _updateHandlePosition: function (handleEnds) {
		            if (!this._useHandle) {
		                return;
		            }

		            var shapes = this._shapes;

		            each([0, 1], function (handleIndex) {
		                var handleGroup = shapes.handleGroups[handleIndex];
		                handleGroup.position[1] = handleEnds[handleIndex];

		                // Update handle label position.
		                var labelPoint = shapes.handleLabelPoints[handleIndex];
		                var textPoint = graphic.applyTransform(
		                    [labelPoint.x, labelPoint.y],
		                    graphic.getTransform(handleGroup, this.group)
		                );

		                shapes.handleLabels[handleIndex].setStyle({
		                    x: textPoint[0], y: textPoint[1]
		                });
		            }, this);
		        },

		        /**
		         * @private
		         */
		        _applyTransform: function (vertex, element, inverse) {
		            var transform = graphic.getTransform(element, this.group);

		            return graphic[
		                zrUtil.isArray(vertex)
		                    ? 'applyTransform' : 'transformDirection'
		            ](vertex, transform, inverse);
		        }

		    });

		    function createPolygon(points, onDrift, cursor) {
		        return new graphic.Polygon({
		            shape: {points: points},
		            draggable: !!onDrift,
		            cursor: cursor,
		            drift: onDrift
		        });
		    }

		    function createHandlePoints(handleIndex, textSize) {
		        return handleIndex === 0
		            ? [[0, 0], [textSize, 0], [textSize, -textSize]]
		            : [[0, 0], [textSize, 0], [textSize, textSize]];
		    }

		    module.exports = ContinuousVisualMapView;



	/***/ },
	/* 309 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var echarts = __webpack_require__(1);
		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var formatUtil = __webpack_require__(6);
		    var layout = __webpack_require__(21);
		    var VisualMapping = __webpack_require__(187);

		    module.exports = echarts.extendComponentView({

		        type: 'visualMap',

		        /**
		         * @readOnly
		         * @type {Object}
		         */
		        autoPositionValues: {left: 1, right: 1, top: 1, bottom: 1},

		        init: function (ecModel, api) {
		            /**
		             * @readOnly
		             * @type {module:echarts/model/Global}
		             */
		            this.ecModel = ecModel;

		            /**
		             * @readOnly
		             * @type {module:echarts/ExtensionAPI}
		             */
		            this.api = api;

		            /**
		             * @readOnly
		             * @type {module:echarts/component/visualMap/visualMapModel}
		             */
		            this.visualMapModel;

		            /**
		             * @private
		             * @type {Object}
		             */
		            this._updatableShapes = {};
		        },

		        /**
		         * @protected
		         */
		        render: function (visualMapModel, ecModel, api, payload) {
		            this.visualMapModel = visualMapModel;

		            if (visualMapModel.get('show') === false) {
		                this.group.removeAll();
		                return;
		            }

		            this.doRender.apply(this, arguments);
		        },

		        /**
		         * @protected
		         */
		        renderBackground: function (group) {
		            var visualMapModel = this.visualMapModel;
		            var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);
		            var rect = group.getBoundingRect();

		            group.add(new graphic.Rect({
		                z2: -1, // Lay background rect on the lowest layer.
		                silent: true,
		                shape: {
		                    x: rect.x - padding[3],
		                    y: rect.y - padding[0],
		                    width: rect.width + padding[3] + padding[1],
		                    height: rect.height + padding[0] + padding[2]
		                },
		                style: {
		                    fill: visualMapModel.get('backgroundColor'),
		                    stroke: visualMapModel.get('borderColor'),
		                    lineWidth: visualMapModel.get('borderWidth')
		                }
		            }));
		        },

		        /**
		         * @protected
		         * @param {(number|Array)} targetValue
		         * @param {string=} forceState Specify state, instead of using getValueState method.
		         * @param {string=} visualCluster Specify visual type, defualt all available visualClusters.
		         */
		        getControllerVisual: function (targetValue, forceState, visualCluster) {
		            var visualMapModel = this.visualMapModel;
		            var targetIsArray = zrUtil.isArray(targetValue);

		            // targetValue is array when caculate gradient color,
		            // where forceState is required.
		            if (targetIsArray && (!forceState || visualCluster !== 'color')) {
		                throw new Error(targetValue);
		            }

		            var mappings = visualMapModel.controllerVisuals[
		                forceState || visualMapModel.getValueState(targetValue)
		            ];
		            var defaultColor = visualMapModel.get('contentColor');
		            var visualObj = {
		                symbol: visualMapModel.get('itemSymbol'),
		                color: targetIsArray
		                    ? [{color: defaultColor, offset: 0}, {color: defaultColor, offset: 1}]
		                    : defaultColor
		            };

		            function getter(key) {
		                return visualObj[key];
		            }

		            function setter(key, value) {
		                visualObj[key] = value;
		            }

		            var visualTypes = VisualMapping.prepareVisualTypes(mappings);

		            zrUtil.each(visualTypes, function (type) {
		                var visualMapping = mappings[type];
		                if (!visualCluster || VisualMapping.isInVisualCluster(type, visualCluster)) {
		                    visualMapping && visualMapping.applyVisual(targetValue, getter, setter);
		                }
		            });

		            return visualObj;
		        },

		        /**
		         * @protected
		         */
		        positionGroup: function (group) {
		            var model = this.visualMapModel;
		            var api = this.api;

		            layout.positionGroup(
		                group,
		                model.getBoxLayoutParams(),
		                {width: api.getWidth(), height: api.getHeight()}
		            );
		        },

		        /**
		         * @protected
		         * @abstract
		         */
		        doRender: zrUtil.noop

		    });


	/***/ },
	/* 310 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var layout = __webpack_require__(21);

		    var helper = {

		        /**
		         * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\
		         * @param {module:echarts/ExtensionAPI} api
		         * @param {Array.<number>} itemSize always [short, long]
		         * @return {string} 'left' or 'right' or 'top' or 'bottom'
		         */
		        getItemAlign: function (visualMapModel, api, itemSize) {
		            var modelOption = visualMapModel.option;
		            var itemAlign = modelOption.align;

		            if (itemAlign != null && itemAlign !== 'auto') {
		                return itemAlign;
		            }

		            // Auto decision align.
		            var ecSize = {width: api.getWidth(), height: api.getHeight()};
		            var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;

		            var paramsSet = [
		                ['left', 'right', 'width'],
		                ['top', 'bottom', 'height']
		            ];
		            var reals = paramsSet[realIndex];
		            var fakeValue = [0, null, 10];

		            var layoutInput = {};
		            for (var i = 0; i < 3; i++) {
		                layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
		                layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
		            }

		            var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];
		            var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);

		            return reals[
		                (rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5
		                    < ecSize[rParam[1]] * 0.5 ? 0 : 1
		            ];
		        }
		    };

		    module.exports = helper;



	/***/ },
	/* 311 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data range action
		 */


		    var echarts = __webpack_require__(1);

		    var actionInfo = {
		        type: 'selectDataRange',
		        event: 'dataRangeSelected',
		        // FIXME use updateView appears wrong
		        update: 'update'
		    };

		    echarts.registerAction(actionInfo, function (payload, ecModel) {

		        ecModel.eachComponent({mainType: 'visualMap', query: payload}, function (model) {
		            model.setSelected(payload.selected);
		        });

		    });



	/***/ },
	/* 312 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * DataZoom component entry
		 */


		    __webpack_require__(1).registerPreprocessor(
		        __webpack_require__(302)
		    );

		    __webpack_require__(303);
		    __webpack_require__(304);
		    __webpack_require__(313);
		    __webpack_require__(314);
		    __webpack_require__(311);



	/***/ },
	/* 313 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var VisualMapModel = __webpack_require__(306);
		    var zrUtil = __webpack_require__(3);
		    var VisualMapping = __webpack_require__(187);

		    var PiecewiseModel = VisualMapModel.extend({

		        type: 'visualMap.piecewise',

		        /**
		         * Order Rule:
		         *
		         * option.categories / option.pieces / option.text / option.selected:
		         *     If !option.inverse,
		         *     Order when vertical: ['top', ..., 'bottom'].
		         *     Order when horizontal: ['left', ..., 'right'].
		         *     If option.inverse, the meaning of
		         *     the order should be reversed.
		         *
		         * this._pieceList:
		         *     The order is always [low, ..., high].
		         *
		         * Mapping from location to low-high:
		         *     If !option.inverse
		         *     When vertical, top is high.
		         *     When horizontal, right is high.
		         *     If option.inverse, reverse.
		         */

		        /**
		         * @protected
		         */
		        defaultOption: {
		            selected: null,             // Object. If not specified, means selected.
		                                        // When pieces and splitNumber: {'0': true, '5': true}
		                                        // When categories: {'cate1': false, 'cate3': true}
		                                        // When selected === false, means all unselected.
		            align: 'auto',              // 'auto', 'left', 'right'
		            itemWidth: 20,              // 值域图形宽度
		            itemHeight: 14,             // 值域图形高度
		            itemSymbol: 'roundRect',
		            pieceList: null,            // 值顺序：由高到低, item can be:
		                                        // {min, max, value, color, colorSaturation, colorAlpha, symbol, symbolSize}
		            categories: null,           // 描述 category 数据。如：['some1', 'some2', 'some3']，设置后，min max失效。
		            splitNumber: 5,             // 分割段数，默认为5，为0时为线性渐变 (continous)
		            selectedMode: 'multiple',
		            itemGap: 10                 // 各个item之间的间隔，单位px，默认为10，
		                                        // 横向布局时为水平间隔，纵向布局时为纵向间隔
		        },

		        /**
		         * @override
		         */
		        doMergeOption: function (newOption, isInit) {
		            PiecewiseModel.superApply(this, 'doMergeOption', arguments);

		            /**
		             * The order is always [low, ..., high].
		             * [{text: string, interval: Array.<number>}, ...]
		             * @private
		             * @type {Array.<Object>}
		             */
		            this._pieceList = [];

		            this.resetTargetSeries(newOption, isInit);
		            this.resetExtent();

		            /**
		             * 'pieces', 'categories', 'splitNumber'
		             * @type {string}
		             */
		            var mode = this._mode = this._decideMode();

		            resetMethods[this._mode].call(this);

		            this._resetSelected(newOption, isInit);

		            var categories = this.option.categories;
		            this.resetVisual(function (mappingOption, state) {
		                if (mode === 'categories') {
		                    mappingOption.mappingMethod = 'category';
		                    mappingOption.categories = zrUtil.clone(categories);
		                }
		                else {
		                    mappingOption.mappingMethod = 'piecewise';
		                    mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {
		                        var piece = zrUtil.clone(piece);
		                        if (state !== 'inRange') {
		                            piece.visual = null;
		                        }
		                        return piece;
		                    });
		                }
		            });
		        },

		        _resetSelected: function (newOption, isInit) {
		            var thisOption = this.option;
		            var pieceList = this._pieceList;

		            // Selected do not merge but all override.
		            var selected = (isInit ? thisOption : newOption).selected || {};
		            thisOption.selected = selected;

		            // Consider 'not specified' means true.
		            zrUtil.each(pieceList, function (piece, index) {
		                var key = this.getSelectedMapKey(piece);
		                if (!(key in selected)) {
		                    selected[key] = true;
		                }
		            }, this);

		            if (thisOption.selectedMode === 'single') {
		                // Ensure there is only one selected.
		                var hasSel = false;

		                zrUtil.each(pieceList, function (piece, index) {
		                    var key = this.getSelectedMapKey(piece);
		                    if (selected[key]) {
		                        hasSel
		                            ? (selected[key] = false)
		                            : (hasSel = true);
		                    }
		                }, this);
		            }
		            // thisOption.selectedMode === 'multiple', default: all selected.
		        },

		        /**
		         * @public
		         */
		        getSelectedMapKey: function (piece) {
		            return this._mode === 'categories'
		                ? piece.value + '' : piece.index + '';
		        },

		        /**
		         * @public
		         */
		        getPieceList: function () {
		            return this._pieceList;
		        },

		        /**
		         * @private
		         * @return {string}
		         */
		        _decideMode: function () {
		            var option = this.option;

		            return option.pieces && option.pieces.length > 0
		                ? 'pieces'
		                : this.option.categories
		                ? 'categories'
		                : 'splitNumber';
		        },

		        /**
		         * @public
		         * @override
		         */
		        setSelected: function (selected) {
		            this.option.selected = zrUtil.clone(selected);
		        },

		        /**
		         * @public
		         * @override
		         */
		        getValueState: function (value) {
		            var pieceList = this._pieceList;
		            var index = VisualMapping.findPieceIndex(value, pieceList);

		            return index != null
		                ? (this.option.selected[this.getSelectedMapKey(pieceList[index])]
		                    ? 'inRange' : 'outOfRange'
		                )
		                : 'outOfRange';
		        }

		    });

		    /**
		     * Key is this._mode
		     * @type {Object}
		     * @this {module:echarts/component/viusalMap/PiecewiseMode}
		     */
		    var resetMethods = {

		        splitNumber: function () {
		            var thisOption = this.option;
		            var precision = thisOption.precision;
		            var dataExtent = this.getExtent();
		            var splitNumber = thisOption.splitNumber;
		            splitNumber = Math.max(parseInt(splitNumber, 10), 1);
		            thisOption.splitNumber = splitNumber;

		            var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;
		            // Precision auto-adaption
		            while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
		                precision++;
		            }
		            thisOption.precision = precision;
		            splitStep = +splitStep.toFixed(precision);

		            for (var i = 0, curr = dataExtent[0]; i < splitNumber; i++, curr += splitStep) {
		                var max = i === splitNumber - 1 ? dataExtent[1] : (curr + splitStep);

		                this._pieceList.push({
		                    text: this.formatValueText([curr, max]),
		                    index: i,
		                    interval: [curr, max]
		                });
		            }
		        },

		        categories: function () {
		            var thisOption = this.option;
		            zrUtil.each(thisOption.categories, function (cate) {
		                // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。
		                // 是否改一致。
		                this._pieceList.push({
		                    text: this.formatValueText(cate, true),
		                    value: cate
		                });
		            }, this);

		            // See "Order Rule".
		            normalizeReverse(thisOption, this._pieceList);
		        },

		        pieces: function () {
		            var thisOption = this.option;
		            zrUtil.each(thisOption.pieces, function (pieceListItem, index) {

		                if (!zrUtil.isObject(pieceListItem)) {
		                    pieceListItem = {value: pieceListItem};
		                }

		                var item = {text: '', index: index};
		                var hasLabel;

		                if (pieceListItem.label != null) {
		                    item.text = pieceListItem.label;
		                    hasLabel = true;
		                }

		                if (pieceListItem.hasOwnProperty('value')) {
		                    item.value = pieceListItem.value;

		                    if (!hasLabel) {
		                        item.text = this.formatValueText(item.value);
		                    }
		                }
		                else {
		                    var min = pieceListItem.min;
		                    var max = pieceListItem.max;
		                    min == null && (min = -Infinity);
		                    max == null && (max = Infinity);
		                    if (min === max) {
		                        // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],
		                        // we use value to lift the priority when min === max
		                        item.value = min;
		                    }
		                    item.interval = [min, max];

		                    if (!hasLabel) {
		                        item.text = this.formatValueText([min, max]);
		                    }
		                }

		                item.visual = VisualMapping.retrieveVisuals(pieceListItem);

		                this._pieceList.push(item);

		            }, this);

		            // See "Order Rule".
		            normalizeReverse(thisOption, this._pieceList);
		        }
		    };

		    function normalizeReverse(thisOption, arr) {
		        var inverse = thisOption.inverse;
		        if (thisOption.orient === 'vertical' ? !inverse : inverse) {
		             arr.reverse();
		        }
		    }

		    module.exports = PiecewiseModel;



	/***/ },
	/* 314 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var VisualMapView = __webpack_require__(309);
		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var symbolCreators = __webpack_require__(100);
		    var layout = __webpack_require__(21);
		    var helper = __webpack_require__(310);

		    var PiecewiseVisualMapView = VisualMapView.extend({

		        type: 'visualMap.piecewise',

		        /**
		         * @protected
		         * @override
		         */
		        doRender: function () {
		            var thisGroup = this.group;

		            thisGroup.removeAll();

		            var visualMapModel = this.visualMapModel;
		            var textGap = visualMapModel.get('textGap');
		            var textStyleModel = visualMapModel.textStyleModel;
		            var textFont = textStyleModel.getFont();
		            var textFill = textStyleModel.getTextColor();
		            var itemAlign = this._getItemAlign();
		            var itemSize = visualMapModel.itemSize;

		            var viewData = this._getViewData();
		            var showLabel = !viewData.endsText;
		            var showEndsText = !showLabel;

		            showEndsText && this._renderEndsText(thisGroup, viewData.endsText[0], itemSize);

		            zrUtil.each(viewData.pieceList, renderItem, this);

		            showEndsText && this._renderEndsText(thisGroup, viewData.endsText[1], itemSize);

		            layout.box(
		                visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap')
		            );

		            this.renderBackground(thisGroup);

		            this.positionGroup(thisGroup);

		            function renderItem(item) {
		                var itemGroup = new graphic.Group();
		                itemGroup.onclick = zrUtil.bind(this._onItemClick, this, item.piece);

		                this._createItemSymbol(itemGroup, item.piece, [0, 0, itemSize[0], itemSize[1]]);

		                if (showLabel) {
		                    itemGroup.add(new graphic.Text({
		                        style: {
		                            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,
		                            y: itemSize[1] / 2,
		                            text: item.piece.text,
		                            textVerticalAlign: 'middle',
		                            textAlign: itemAlign,
		                            textFont: textFont,
		                            fill: textFill
		                        }
		                    }));
		                }

		                thisGroup.add(itemGroup);
		            }
		        },

		        /**
		         * @private
		         */
		        _getItemAlign: function () {
		            var visualMapModel = this.visualMapModel;
		            var modelOption = visualMapModel.option;
		            if (modelOption.orient === 'vertical') {
		                return helper.getItemAlign(
		                    visualMapModel, this.api, visualMapModel.itemSize
		                );
		            }
		            else { // horizontal, most case left unless specifying right.
		                var align = modelOption.align;
		                if (!align || align === 'auto') {
		                    align = 'left';
		                }
		                return align;
		            }
		        },

		        /**
		         * @private
		         */
		        _renderEndsText: function (group, text, itemSize) {
		            if (!text) {
		                return;
		            }
		            var itemGroup = new graphic.Group();
		            var textStyleModel = this.visualMapModel.textStyleModel;
		            itemGroup.add(new graphic.Text({
		                style: {
		                    x: itemSize[0] / 2,
		                    y: itemSize[1] / 2,
		                    textVerticalAlign: 'middle',
		                    textAlign: 'center',
		                    text: text,
		                    textFont: textStyleModel.getFont(),
		                    fill: textStyleModel.getTextColor()
		                }
		            }));

		            group.add(itemGroup);
		        },

		        /**
		         * @private
		         * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.
		         */
		        _getViewData: function () {
		            var visualMapModel = this.visualMapModel;

		            var pieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {
		                return {piece: piece, index: index};
		            });
		            var endsText = visualMapModel.get('text');

		            // Consider orient and inverse.
		            var orient = visualMapModel.get('orient');
		            var inverse = visualMapModel.get('inverse');

		            // Order of pieceList is always [low, ..., high]
		            if (orient === 'horizontal' ? inverse : !inverse) {
		                pieceList.reverse();
		            }
		            // Origin order of endsText is [high, low]
		            else if (endsText) {
		                endsText = endsText.slice().reverse();
		            }

		            return {pieceList: pieceList, endsText: endsText};
		        },

		        /**
		         * @private
		         */
		        _createItemSymbol: function (group, piece, shapeParam) {
		            var representValue;
		            if (this.visualMapModel.isCategory()) {
		                representValue = piece.value;
		            }
		            else {
		                if (piece.value != null) {
		                    representValue = piece.value;
		                }
		                else {
		                    var pieceInterval = piece.interval || [];
		                    representValue = (pieceInterval[0] + pieceInterval[1]) / 2;
		                }
		            }

		            var visualObj = this.getControllerVisual(representValue);

		            group.add(symbolCreators.createSymbol(
		                visualObj.symbol,
		                shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3],
		                visualObj.color
		            ));
		        },

		        /**
		         * @private
		         */
		        _onItemClick: function (piece) {
		            var visualMapModel = this.visualMapModel;
		            var option = visualMapModel.option;
		            var selected = zrUtil.clone(option.selected);
		            var newKey = visualMapModel.getSelectedMapKey(piece);

		            if (option.selectedMode === 'single') {
		                selected[newKey] = true;
		                zrUtil.each(selected, function (o, key) {
		                    selected[key] = key === newKey;
		                });
		            }
		            else {
		                selected[newKey] = !selected[newKey];
		            }

		            this.api.dispatchAction({
		                type: 'selectDataRange',
		                from: this.uid,
		                visualMapId: this.visualMapModel.id,
		                selected: selected
		            });
		        }
		    });

		    module.exports = PiecewiseVisualMapView;



	/***/ },
	/* 315 */
	/***/ function(module, exports, __webpack_require__) {

		// HINT Markpoint can't be used too much


		    __webpack_require__(316);
		    __webpack_require__(317);

		    __webpack_require__(1).registerPreprocessor(function (opt) {
		        // Make sure markPoint component is enabled
		        opt.markPoint = opt.markPoint || {};
		    });


	/***/ },
	/* 316 */
	/***/ function(module, exports, __webpack_require__) {

		
		    // Default enable markPoint
		    // var globalDefault = require('../../model/globalDefault');
		    var modelUtil = __webpack_require__(5);
		    // // Force to load markPoint component
		    // globalDefault.markPoint = {};

		    var MarkPointModel = __webpack_require__(1).extendComponentModel({

		        type: 'markPoint',

		        dependencies: ['series', 'grid', 'polar'],
		        /**
		         * @overrite
		         */
		        init: function (option, parentModel, ecModel, extraOpt) {
		            this.mergeDefaultAndTheme(option, ecModel);
		            this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
		        },

		        mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {
		            if (!createdBySelf) {
		                ecModel.eachSeries(function (seriesModel) {
		                    var markPointOpt = seriesModel.get('markPoint');
		                    var mpModel = seriesModel.markPointModel;
		                    if (!markPointOpt || !markPointOpt.data) {
		                        seriesModel.markPointModel = null;
		                        return;
		                    }
		                    if (!mpModel) {
		                        if (isInit) {
		                            // Default label emphasis `position` and `show`
		                            modelUtil.defaultEmphasis(
		                                markPointOpt.label,
		                                ['position', 'show', 'textStyle', 'distance', 'formatter']
		                            );
		                        }
		                        var opt = {
		                            // Use the same series index and name
		                            seriesIndex: seriesModel.seriesIndex,
		                            name: seriesModel.name,
		                            createdBySelf: true
		                        };
		                        mpModel = new MarkPointModel(
		                            markPointOpt, this, ecModel, opt
		                        );
		                    }
		                    else {
		                        mpModel.mergeOption(markPointOpt, ecModel, true);
		                    }
		                    seriesModel.markPointModel = mpModel;
		                }, this);
		            }
		        },

		        defaultOption: {
		            zlevel: 0,
		            z: 5,
		            symbol: 'pin',         // 标注类型
		            symbolSize: 50,  // 标注大小
		            // symbolRotate: null, // 标注旋转控制
		            tooltip: {
		                trigger: 'item'
		            },
		            label: {
		                normal: {
		                    show: true,
		                    // 标签文本格式器，同Tooltip.formatter，不支持回调
		                    // formatter: null,
		                    // 可选为'left'|'right'|'top'|'bottom'
		                    position: 'inside'
		                    // 默认使用全局文本样式，详见TEXTSTYLE
		                    // textStyle: null
		                },
		                emphasis: {
		                    show: true
		                    // 标签文本格式器，同Tooltip.formatter，不支持回调
		                    // formatter: null,
		                    // position: 'inside'  // 'left'|'right'|'top'|'bottom'
		                    // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE
		                }
		            },
		            itemStyle: {
		                normal: {
		                    // color: 各异，
		                    // 标注边线颜色，优先于color
		                    // borderColor: 各异,
		                    // 标注边线线宽，单位px，默认为1
		                    borderWidth: 2
		                },
		                emphasis: {
		                    // color: 各异
		                }
		            }
		        }
		    });

		    module.exports = MarkPointModel;


	/***/ },
	/* 317 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var SymbolDraw = __webpack_require__(98);
		    var zrUtil = __webpack_require__(3);
		    var formatUtil = __webpack_require__(6);
		    var modelUtil = __webpack_require__(5);
		    var numberUtil = __webpack_require__(7);

		    var addCommas = formatUtil.addCommas;
		    var encodeHTML = formatUtil.encodeHTML;

		    var List = __webpack_require__(94);

		    var markerHelper = __webpack_require__(318);

		    function updateMarkerLayout(mpData, seriesModel, api) {
		        var coordSys = seriesModel.coordinateSystem;
		        mpData.each(function (idx) {
		            var itemModel = mpData.getItemModel(idx);
		            var point;
		            var xPx = itemModel.getShallow('x');
		            var yPx = itemModel.getShallow('y');
		            if (xPx != null && yPx != null) {
		                point = [
		                    numberUtil.parsePercent(xPx, api.getWidth()),
		                    numberUtil.parsePercent(yPx, api.getHeight())
		                ];
		            }
		            // Chart like bar may have there own marker positioning logic
		            else if (seriesModel.getMarkerPosition) {
		                // Use the getMarkerPoisition
		                point = seriesModel.getMarkerPosition(
		                    mpData.getValues(mpData.dimensions, idx)
		                );
		            }
		            else if (coordSys) {
		                var x = mpData.get(coordSys.dimensions[0], idx);
		                var y = mpData.get(coordSys.dimensions[1], idx);
		                point = coordSys.dataToPoint([x, y]);
		            }

		            mpData.setItemLayout(idx, point);
		        });
		    }

		    // FIXME
		    var markPointFormatMixin = {
		        getRawDataArray: function () {
		            return this.option.data;
		        },

		        formatTooltip: function (dataIndex) {
		            var data = this.getData();
		            var value = this.getRawValue(dataIndex);
		            var formattedValue = zrUtil.isArray(value)
		                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
		            var name = data.getName(dataIndex);
		            return this.name + '<br />'
		                + ((name ? encodeHTML(name) + ' : ' : '') + formattedValue);
		        },

		        getData: function () {
		            return this._data;
		        },

		        setData: function (data) {
		            this._data = data;
		        }
		    };

		    zrUtil.defaults(markPointFormatMixin, modelUtil.dataFormatMixin);

		    __webpack_require__(1).extendComponentView({

		        type: 'markPoint',

		        init: function () {
		            this._symbolDrawMap = {};
		        },

		        render: function (markPointModel, ecModel, api) {
		            var symbolDrawMap = this._symbolDrawMap;
		            for (var name in symbolDrawMap) {
		                symbolDrawMap[name].__keep = false;
		            }

		            ecModel.eachSeries(function (seriesModel) {
		                var mpModel = seriesModel.markPointModel;
		                mpModel && this._renderSeriesMP(seriesModel, mpModel, api);
		            }, this);

		            for (var name in symbolDrawMap) {
		                if (!symbolDrawMap[name].__keep) {
		                    symbolDrawMap[name].remove();
		                    this.group.remove(symbolDrawMap[name].group);
		                }
		            }
		        },

		        updateLayout: function (markPointModel, ecModel, api) {
		            ecModel.eachSeries(function (seriesModel) {
		                var mpModel = seriesModel.markPointModel;
		                if (mpModel) {
		                    updateMarkerLayout(mpModel.getData(), seriesModel, api);
		                    this._symbolDrawMap[seriesModel.name].updateLayout(mpModel);
		                }
		            }, this);
		        },

		        _renderSeriesMP: function (seriesModel, mpModel, api) {
		            var coordSys = seriesModel.coordinateSystem;
		            var seriesName = seriesModel.name;
		            var seriesData = seriesModel.getData();

		            var symbolDrawMap = this._symbolDrawMap;
		            var symbolDraw = symbolDrawMap[seriesName];
		            if (!symbolDraw) {
		                symbolDraw = symbolDrawMap[seriesName] = new SymbolDraw();
		            }

		            var mpData = createList(coordSys, seriesModel, mpModel);

		            // FIXME
		            zrUtil.mixin(mpModel, markPointFormatMixin);
		            mpModel.setData(mpData);

		            updateMarkerLayout(mpModel.getData(), seriesModel, api);

		            mpData.each(function (idx) {
		                var itemModel = mpData.getItemModel(idx);
		                var symbolSize = itemModel.getShallow('symbolSize');
		                if (typeof symbolSize === 'function') {
		                    // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？
		                    symbolSize = symbolSize(
		                        mpModel.getRawValue(idx), mpModel.getDataParams(idx)
		                    );
		                }
		                mpData.setItemVisual(idx, {
		                    symbolSize: symbolSize,
		                    color: itemModel.get('itemStyle.normal.color')
		                        || seriesData.getVisual('color'),
		                    symbol: itemModel.getShallow('symbol')
		                });
		            });

		            // TODO Text are wrong
		            symbolDraw.updateData(mpData);
		            this.group.add(symbolDraw.group);

		            // Set host model for tooltip
		            // FIXME
		            mpData.eachItemGraphicEl(function (el) {
		                el.traverse(function (child) {
		                    child.dataModel = mpModel;
		                });
		            });

		            symbolDraw.__keep = true;
		        }
		    });

		    /**
		     * @inner
		     * @param {module:echarts/coord/*} [coordSys]
		     * @param {module:echarts/model/Series} seriesModel
		     * @param {module:echarts/model/Model} mpModel
		     */
		    function createList(coordSys, seriesModel, mpModel) {
		        var coordDimsInfos;
		        if (coordSys) {
		            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
		                var info = seriesModel.getData().getDimensionInfo(
		                    seriesModel.coordDimToDataDim(coordDim)[0]
		                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
		                info.name = coordDim;
		                return info;
		            });
		        }
		        else {
		            coordDimsInfos =[{
		                name: 'value',
		                type: 'float'
		            }];
		        }

		        var mpData = new List(coordDimsInfos, mpModel);
		        var dataOpt = zrUtil.map(mpModel.get('data'), zrUtil.curry(
		                markerHelper.dataTransform, seriesModel
		            ));
		        if (coordSys) {
		            dataOpt = zrUtil.filter(
		                dataOpt, zrUtil.curry(markerHelper.dataFilter, coordSys)
		            );
		        }

		        mpData.initData(dataOpt, null,
		            coordSys ? markerHelper.dimValueGetter : function (item) {
		                return item.value;
		            }
		        );
		        return mpData;
		    }



	/***/ },
	/* 318 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var indexOf = zrUtil.indexOf;

		    function getPrecision(data, valueAxisDim, dataIndex) {
		        var precision = -1;
		        do {
		            precision = Math.max(
		                numberUtil.getPrecision(data.get(
		                    valueAxisDim, dataIndex
		                )),
		                precision
		            );
		            data = data.stackedOn;
		        } while (data);

		        return precision;
		    }

		    function markerTypeCalculatorWithExtent(
		        mlType, data, baseDataDim, valueDataDim, baseCoordIndex, valueCoordIndex
		    ) {
		        var coordArr = [];
		        var value = numCalculate(data, valueDataDim, mlType);

		        var dataIndex = data.indexOfNearest(valueDataDim, value, true);
		        coordArr[baseCoordIndex] = data.get(baseDataDim, dataIndex, true);
		        coordArr[valueCoordIndex] = data.get(valueDataDim, dataIndex, true);

		        var precision = getPrecision(data, valueDataDim, dataIndex);
		        if (precision >= 0) {
		            coordArr[valueCoordIndex] = +coordArr[valueCoordIndex].toFixed(precision);
		        }

		        return coordArr;
		    }

		    var curry = zrUtil.curry;
		    // TODO Specified percent
		    var markerTypeCalculator = {
		        /**
		         * @method
		         * @param {module:echarts/data/List} data
		         * @param {string} baseAxisDim
		         * @param {string} valueAxisDim
		         */
		        min: curry(markerTypeCalculatorWithExtent, 'min'),
		        /**
		         * @method
		         * @param {module:echarts/data/List} data
		         * @param {string} baseAxisDim
		         * @param {string} valueAxisDim
		         */
		        max: curry(markerTypeCalculatorWithExtent, 'max'),
		        /**
		         * @method
		         * @param {module:echarts/data/List} data
		         * @param {string} baseAxisDim
		         * @param {string} valueAxisDim
		         */
		        average: curry(markerTypeCalculatorWithExtent, 'average')
		    };

		    /**
		     * Transform markPoint data item to format used in List by do the following
		     * 1. Calculate statistic like `max`, `min`, `average`
		     * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array
		     * @param  {module:echarts/model/Series} seriesModel
		     * @param  {module:echarts/coord/*} [coordSys]
		     * @param  {Object} item
		     * @return {Object}
		     */
		    var dataTransform = function (seriesModel, item) {
		        var data = seriesModel.getData();
		        var coordSys = seriesModel.coordinateSystem;

		        // 1. If not specify the position with pixel directly
		        // 2. If `coord` is not a data array. Which uses `xAxis`,
		        // `yAxis` to specify the coord on each dimension
		        if ((isNaN(item.x) || isNaN(item.y))
		            && !zrUtil.isArray(item.coord)
		            && coordSys
		        ) {
		            var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);

		            // Clone the option
		            // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value
		            item = zrUtil.clone(item);

		            if (item.type
		                && markerTypeCalculator[item.type]
		                && axisInfo.baseAxis && axisInfo.valueAxis
		            ) {
		                var dims = coordSys.dimensions;
		                var baseCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
		                var valueCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);

		                item.coord = markerTypeCalculator[item.type](
		                    data, axisInfo.baseDataDim, axisInfo.valueDataDim,
		                    baseCoordIndex, valueCoordIndex
		                );
		                // Force to use the value of calculated value.
		                item.value = item.coord[valueCoordIndex];
		            }
		            else {
		                // FIXME Only has one of xAxis and yAxis.
		                item.coord = [
		                    item.xAxis != null ? item.xAxis : item.radiusAxis,
		                    item.yAxis != null ? item.yAxis : item.angleAxis
		                ];
		            }
		        }
		        return item;
		    };

		    var getAxisInfo = function (item, data, coordSys, seriesModel) {
		        var ret = {};

		        if (item.valueIndex != null || item.valueDim != null) {
		            ret.valueDataDim = item.valueIndex != null
		                ? data.getDimension(item.valueIndex) : item.valueDim;
		            ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));
		            ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
		            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
		        }
		        else {
		            ret.baseAxis = seriesModel.getBaseAxis();
		            ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
		            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
		            ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];
		        }

		        return ret;
		    };

		    /**
		     * Filter data which is out of coordinateSystem range
		     * [dataFilter description]
		     * @param  {module:echarts/coord/*} [coordSys]
		     * @param  {Object} item
		     * @return {boolean}
		     */
		    var dataFilter = function (coordSys, item) {
		        // Alwalys return true if there is no coordSys
		        return (coordSys && coordSys.containData && item.coord && (item.x == null || item.y == null))
		            ? coordSys.containData(item.coord) : true;
		    };

		    var dimValueGetter = function (item, dimName, dataIndex, dimIndex) {
		        // x, y, radius, angle
		        if (dimIndex < 2) {
		            return item.coord && item.coord[dimIndex];
		        }
		        else {
		            return item.value;
		        }
		    };

		    var numCalculate = function (data, valueDataDim, mlType) {
		        return mlType === 'average'
		            ? data.getSum(valueDataDim, true) / data.count()
		            : data.getDataExtent(valueDataDim, true)[mlType === 'max' ? 1 : 0];
		    };

		    module.exports = {
		        dataTransform: dataTransform,
		        dataFilter: dataFilter,
		        dimValueGetter: dimValueGetter,
		        getAxisInfo: getAxisInfo,
		        numCalculate: numCalculate
		    };


	/***/ },
	/* 319 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(320);
		    __webpack_require__(321);

		    __webpack_require__(1).registerPreprocessor(function (opt) {
		        // Make sure markLine component is enabled
		        opt.markLine = opt.markLine || {};
		    });


	/***/ },
	/* 320 */
	/***/ function(module, exports, __webpack_require__) {

		

		    // Default enable markLine
		    // var globalDefault = require('../../model/globalDefault');
		    var modelUtil = __webpack_require__(5);

		    // // Force to load markLine component
		    // globalDefault.markLine = {};

		    var MarkLineModel = __webpack_require__(1).extendComponentModel({

		        type: 'markLine',

		        dependencies: ['series', 'grid', 'polar'],
		        /**
		         * @overrite
		         */
		        init: function (option, parentModel, ecModel, extraOpt) {
		            this.mergeDefaultAndTheme(option, ecModel);
		            this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
		        },

		        mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {
		            if (!createdBySelf) {
		                ecModel.eachSeries(function (seriesModel) {
		                    var markLineOpt = seriesModel.get('markLine');
		                    var mlModel = seriesModel.markLineModel;
		                    if (!markLineOpt || !markLineOpt.data) {
		                        seriesModel.markLineModel = null;
		                        return;
		                    }
		                    if (!mlModel) {
		                        if (isInit) {
		                            // Default label emphasis `position` and `show`
		                            modelUtil.defaultEmphasis(
		                                markLineOpt.label,
		                                ['position', 'show', 'textStyle', 'distance', 'formatter']
		                            );
		                        }
		                        var opt = {
		                            // Use the same series index and name
		                            seriesIndex: seriesModel.seriesIndex,
		                            name: seriesModel.name,
		                            createdBySelf: true
		                        };
		                        mlModel = new MarkLineModel(
		                            markLineOpt, this, ecModel, opt
		                        );
		                    }
		                    else {
		                        mlModel.mergeOption(markLineOpt, ecModel, true);
		                    }
		                    seriesModel.markLineModel = mlModel;
		                }, this);
		            }
		        },

		        defaultOption: {
		            zlevel: 0,
		            z: 5,
		            // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string
		            symbol: ['circle', 'arrow'],
		            // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
		            symbolSize: [8, 16],
		            // 标线起始和结束的symbol旋转控制
		            //symbolRotate: null,
		            //smooth: false,
		            precision: 2,
		            tooltip: {
		                trigger: 'item'
		            },
		            label: {
		                normal: {
		                    show: true,
		                    // 标签文本格式器，同Tooltip.formatter，不支持回调
		                    // formatter: null,
		                    // 可选为 'start'|'end'|'left'|'right'|'top'|'bottom'
		                    position: 'end'
		                    // 默认使用全局文本样式，详见TEXTSTYLE
		                    // textStyle: null
		                },
		                emphasis: {
		                    show: true
		                }
		            },
		            lineStyle: {
		                normal: {
		                    // color
		                    // width
		                    type: 'dashed'
		                    // shadowColor: 'rgba(0,0,0,0)',
		                    // shadowBlur: 0,
		                    // shadowOffsetX: 0,
		                    // shadowOffsetY: 0
		                },
		                emphasis: {
		                    width: 3
		                }
		            },
		            animationEasing: 'linear'
		        }
		    });

		    module.exports = MarkLineModel;


	/***/ },
	/* 321 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var List = __webpack_require__(94);
		    var formatUtil = __webpack_require__(6);
		    var modelUtil = __webpack_require__(5);
		    var numberUtil = __webpack_require__(7);

		    var addCommas = formatUtil.addCommas;
		    var encodeHTML = formatUtil.encodeHTML;

		    var markerHelper = __webpack_require__(318);

		    var LineDraw = __webpack_require__(194);

		    var markLineTransform = function (seriesModel, coordSys, mlModel, item) {
		        var data = seriesModel.getData();
		        // Special type markLine like 'min', 'max', 'average'
		        var mlType = item.type;

		        if (!zrUtil.isArray(item)
		            && (mlType === 'min' || mlType === 'max' || mlType === 'average')
		        ) {
		            var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);

		            var baseAxisKey = axisInfo.baseAxis.dim + 'Axis';
		            var valueAxisKey = axisInfo.valueAxis.dim + 'Axis';
		            var baseScaleExtent = axisInfo.baseAxis.scale.getExtent();

		            var mlFrom = zrUtil.clone(item);
		            var mlTo = {};

		            mlFrom.type = null;

		            // FIXME Polar should use circle
		            mlFrom[baseAxisKey] = baseScaleExtent[0];
		            mlTo[baseAxisKey] = baseScaleExtent[1];

		            var value = markerHelper.numCalculate(data, axisInfo.valueDataDim, mlType);

		            // Round if axis is cateogry
		            value = axisInfo.valueAxis.coordToData(axisInfo.valueAxis.dataToCoord(value));

		            var precision = mlModel.get('precision');
		            if (precision >= 0) {
		                value = +value.toFixed(precision);
		            }

		            mlFrom[valueAxisKey] = mlTo[valueAxisKey] = value;

		            item = [mlFrom, mlTo, { // Extra option for tooltip and label
		                type: mlType,
		                valueIndex: item.valueIndex,
		                // Force to use the value of calculated value.
		                value: value
		            }];
		        }

		        item = [
		            markerHelper.dataTransform(seriesModel, item[0]),
		            markerHelper.dataTransform(seriesModel, item[1]),
		            zrUtil.extend({}, item[2])
		        ];

		        // Avoid line data type is extended by from(to) data type
		        item[2].type = item[2].type || '';

		        // Merge from option and to option into line option
		        zrUtil.merge(item[2], item[0]);
		        zrUtil.merge(item[2], item[1]);

		        return item;
		    };

		    function markLineFilter(coordSys, item) {
		        return markerHelper.dataFilter(coordSys, item[0])
		            && markerHelper.dataFilter(coordSys, item[1]);
		    }

		    function updateSingleMarkerEndLayout(
		        data, idx, isFrom, mlType, valueIndex, seriesModel, api
		    ) {
		        var coordSys = seriesModel.coordinateSystem;
		        var itemModel = data.getItemModel(idx);

		        var point;
		        var xPx = itemModel.get('x');
		        var yPx = itemModel.get('y');
		        if (xPx != null && yPx != null) {
		            point = [
		                numberUtil.parsePercent(xPx, api.getWidth()),
		                numberUtil.parsePercent(yPx, api.getHeight())
		            ];
		        }
		        else {
		            // Chart like bar may have there own marker positioning logic
		            if (seriesModel.getMarkerPosition) {
		                // Use the getMarkerPoisition
		                point = seriesModel.getMarkerPosition(
		                    data.getValues(data.dimensions, idx)
		                );
		            }
		            else {
		                var dims = coordSys.dimensions;
		                var x = data.get(dims[0], idx);
		                var y = data.get(dims[1], idx);
		                point = coordSys.dataToPoint([x, y]);
		            }
		            // Expand min, max, average line to the edge of grid
		            // FIXME Glue code
		            if (mlType && coordSys.type === 'cartesian2d') {
		                var mlOnAxis = valueIndex != null
		                    ? coordSys.getAxis(valueIndex === 1 ? 'x' : 'y')
		                    : coordSys.getAxesByScale('ordinal')[0];
		                if (mlOnAxis && mlOnAxis.onBand) {
		                    point[mlOnAxis.dim === 'x' ? 0 : 1] =
		                        mlOnAxis.toGlobalCoord(mlOnAxis.getExtent()[isFrom ? 0 : 1]);
		                }
		            }
		        }

		        data.setItemLayout(idx, point);
		    }

		    var markLineFormatMixin = {
		        formatTooltip: function (dataIndex) {
		            var data = this._data;
		            var value = this.getRawValue(dataIndex);
		            var formattedValue = zrUtil.isArray(value)
		                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
		            var name = data.getName(dataIndex);
		            return this.name + '<br />'
		                + ((name ? encodeHTML(name) + ' : ' : '') + formattedValue);
		        },

		        getRawDataArray: function () {
		            return this.option.data;
		        },

		        getData: function () {
		            return this._data;
		        },

		        setData: function (data) {
		            this._data = data;
		        }
		    };

		    zrUtil.defaults(markLineFormatMixin, modelUtil.dataFormatMixin);

		    __webpack_require__(1).extendComponentView({

		        type: 'markLine',

		        init: function () {
		            /**
		             * Markline grouped by series
		             * @private
		             * @type {Object}
		             */
		            this._markLineMap = {};
		        },

		        render: function (markLineModel, ecModel, api) {
		            var lineDrawMap = this._markLineMap;
		            for (var name in lineDrawMap) {
		                lineDrawMap[name].__keep = false;
		            }

		            ecModel.eachSeries(function (seriesModel) {
		                var mlModel = seriesModel.markLineModel;
		                mlModel && this._renderSeriesML(seriesModel, mlModel, ecModel, api);
		            }, this);

		            for (var name in lineDrawMap) {
		                if (!lineDrawMap[name].__keep) {
		                    this.group.remove(lineDrawMap[name].group);
		                }
		            }
		        },

		        updateLayout: function (markLineModel, ecModel, api) {
		            ecModel.eachSeries(function (seriesModel) {
		                var mlModel = seriesModel.markLineModel;
		                if (mlModel) {
		                    var mlData = mlModel.getData();
		                    var fromData = mlModel.__from;
		                    var toData = mlModel.__to;
		                    // Update visual and layout of from symbol and to symbol
		                    fromData.each(function (idx) {
		                        var lineModel = mlData.getItemModel(idx);
		                        var mlType = lineModel.get('type');
		                        var valueIndex = lineModel.get('valueIndex');
		                        updateSingleMarkerEndLayout(fromData, idx, true, mlType, valueIndex, seriesModel, api);
		                        updateSingleMarkerEndLayout(toData, idx, false, mlType, valueIndex, seriesModel, api);
		                    });
		                    // Update layout of line
		                    mlData.each(function (idx) {
		                        mlData.setItemLayout(idx, [
		                            fromData.getItemLayout(idx),
		                            toData.getItemLayout(idx)
		                        ]);
		                    });

		                    this._markLineMap[seriesModel.name].updateLayout();
		                }
		            }, this);
		        },

		        _renderSeriesML: function (seriesModel, mlModel, ecModel, api) {
		            var coordSys = seriesModel.coordinateSystem;
		            var seriesName = seriesModel.name;
		            var seriesData = seriesModel.getData();

		            var lineDrawMap = this._markLineMap;
		            var lineDraw = lineDrawMap[seriesName];
		            if (!lineDraw) {
		                lineDraw = lineDrawMap[seriesName] = new LineDraw();
		            }
		            this.group.add(lineDraw.group);

		            var mlData = createList(coordSys, seriesModel, mlModel);

		            var fromData = mlData.from;
		            var toData = mlData.to;
		            var lineData = mlData.line;

		            mlModel.__from = fromData;
		            mlModel.__to = toData;
		            // Line data for tooltip and formatter
		            zrUtil.extend(mlModel, markLineFormatMixin);
		            mlModel.setData(lineData);

		            var symbolType = mlModel.get('symbol');
		            var symbolSize = mlModel.get('symbolSize');
		            if (!zrUtil.isArray(symbolType)) {
		                symbolType = [symbolType, symbolType];
		            }
		            if (typeof symbolSize === 'number') {
		                symbolSize = [symbolSize, symbolSize];
		            }

		            // Update visual and layout of from symbol and to symbol
		            mlData.from.each(function (idx) {
		                var lineModel = lineData.getItemModel(idx);
		                var mlType = lineModel.get('type');
		                var valueIndex = lineModel.get('valueIndex');
		                updateDataVisualAndLayout(fromData, idx, true, mlType, valueIndex);
		                updateDataVisualAndLayout(toData, idx, false, mlType, valueIndex);
		            });

		            // Update visual and layout of line
		            lineData.each(function (idx) {
		                var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');
		                lineData.setItemVisual(idx, {
		                    color: lineColor || fromData.getItemVisual(idx, 'color')
		                });
		                lineData.setItemLayout(idx, [
		                    fromData.getItemLayout(idx),
		                    toData.getItemLayout(idx)
		                ]);
		            });

		            lineDraw.updateData(lineData, fromData, toData);

		            // Set host model for tooltip
		            // FIXME
		            mlData.line.eachItemGraphicEl(function (el, idx) {
		                el.traverse(function (child) {
		                    child.dataModel = mlModel;
		                });
		            });

		            function updateDataVisualAndLayout(data, idx, isFrom, mlType, valueIndex) {
		                var itemModel = data.getItemModel(idx);

		                updateSingleMarkerEndLayout(
		                    data, idx, isFrom, mlType, valueIndex, seriesModel, api
		                );

		                data.setItemVisual(idx, {
		                    symbolSize: itemModel.get('symbolSize')
		                        || symbolSize[isFrom ? 0 : 1],
		                    symbol: itemModel.get('symbol', true)
		                        || symbolType[isFrom ? 0 : 1],
		                    color: itemModel.get('itemStyle.normal.color')
		                        || seriesData.getVisual('color')
		                });
		            }

		            lineDraw.__keep = true;
		        }
		    });

		    /**
		     * @inner
		     * @param {module:echarts/coord/*} coordSys
		     * @param {module:echarts/model/Series} seriesModel
		     * @param {module:echarts/model/Model} mpModel
		     */
		    function createList(coordSys, seriesModel, mlModel) {

		        var coordDimsInfos;
		        if (coordSys) {
		            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
		                var info = seriesModel.getData().getDimensionInfo(
		                    seriesModel.coordDimToDataDim(coordDim)[0]
		                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
		                info.name = coordDim;
		                return info;
		            });
		        }
		        else {
		            coordDimsInfos =[{
		                name: 'value',
		                type: 'float'
		            }];
		        }

		        var fromData = new List(coordDimsInfos, mlModel);
		        var toData = new List(coordDimsInfos, mlModel);
		        // No dimensions
		        var lineData = new List([], mlModel);

		        var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(
		            markLineTransform, seriesModel, coordSys, mlModel
		        ));
		        if (coordSys) {
		            optData = zrUtil.filter(
		                optData, zrUtil.curry(markLineFilter, coordSys)
		            );
		        }
		        var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {
		            return item.value;
		        };
		        fromData.initData(
		            zrUtil.map(optData, function (item) { return item[0]; }),
		            null, dimValueGetter
		        );
		        toData.initData(
		            zrUtil.map(optData, function (item) { return item[1]; }),
		            null, dimValueGetter
		        );
		        lineData.initData(
		            zrUtil.map(optData, function (item) { return item[2]; })
		        );
		        return {
		            from: fromData,
		            to: toData,
		            line: lineData
		        };
		    }


	/***/ },
	/* 322 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * DataZoom component entry
		 */


		    var echarts = __webpack_require__(1);

		    echarts.registerPreprocessor(__webpack_require__(323));

		    __webpack_require__(324);
		    __webpack_require__(325);
		    __webpack_require__(326);
		    __webpack_require__(328);



	/***/ },
	/* 323 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Timeline preprocessor
		 */


		    var zrUtil = __webpack_require__(3);

		    module.exports = function (option) {
		        var timelineOpt = option && option.timeline;

		        if (!zrUtil.isArray(timelineOpt)) {
		            timelineOpt = timelineOpt ? [timelineOpt] : [];
		        }

		        zrUtil.each(timelineOpt, function (opt) {
		            if (!opt) {
		                return;
		            }

		            compatibleEC2(opt);
		        });
		    };

		    function compatibleEC2(opt) {
		        var type = opt.type;

		        var ec2Types = {'number': 'value', 'time': 'time'};

		        // Compatible with ec2
		        if (ec2Types[type]) {
		            opt.axisType = ec2Types[type];
		            delete opt.type;
		        }

		        transferItem(opt);

		        if (has(opt, 'controlPosition')) {
		            var controlStyle = opt.controlStyle || (opt.controlStyle = {});
		            if (!has(controlStyle, 'position')) {
		                controlStyle.position = opt.controlPosition;
		            }
		            if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {
		                controlStyle.show = false;
		                delete controlStyle.position;
		            }
		            delete opt.controlPosition;
		        }

		        zrUtil.each(opt.data || [], function (dataItem) {
		            if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {
		                if (!has(dataItem, 'value') && has(dataItem, 'name')) {
		                    // In ec2, using name as value.
		                    dataItem.value = dataItem.name;
		                }
		                transferItem(dataItem);
		            }
		        });
		    }

		    function transferItem(opt) {
		        var itemStyle = opt.itemStyle || (opt.itemStyle = {});

		        var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {});

		        // Transfer label out
		        var label = opt.label || (opt.label || {});
		        var labelNormal = label.normal || (label.normal = {});
		        var excludeLabelAttr = {normal: 1, emphasis: 1};

		        zrUtil.each(label, function (value, name) {
		            if (!excludeLabelAttr[name] && !has(labelNormal, name)) {
		                labelNormal[name] = value;
		            }
		        });

		        if (itemStyleEmphasis.label && !has(label, 'emphasis')) {
		            label.emphasis = itemStyleEmphasis.label;
		            delete itemStyleEmphasis.label;
		        }
		    }

		    function has(obj, attr) {
		        return obj.hasOwnProperty(attr);
		    }



	/***/ },
	/* 324 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(19).registerSubTypeDefaulter('timeline', function () {
		        // Only slider now.
		        return 'slider';
		    });



	/***/ },
	/* 325 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Timeilne action
		 */


		    var echarts = __webpack_require__(1);

		    echarts.registerAction(

		        {type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate'},

		        function (payload, ecModel) {

		            var timelineModel = ecModel.getComponent('timeline');
		            if (timelineModel && payload.currentIndex != null) {
		                timelineModel.setCurrentIndex(payload.currentIndex);

		                if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {
		                    timelineModel.setPlayState(false);
		                }
		            }

		            ecModel.resetOption('timeline');
		        }
		    );

		    echarts.registerAction(

		        {type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update'},

		        function (payload, ecModel) {
		            var timelineModel = ecModel.getComponent('timeline');
		            if (timelineModel && payload.playState != null) {
		                timelineModel.setPlayState(payload.playState);
		            }
		        }
		    );



	/***/ },
	/* 326 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Silder timeline model
		 */


		    var TimelineModel = __webpack_require__(327);

		    module.exports = TimelineModel.extend({

		        type: 'timeline.slider',

		        /**
		         * @protected
		         */
		        defaultOption: {

		            backgroundColor: 'rgba(0,0,0,0)',   // 时间轴背景颜色
		            borderColor: '#ccc',               // 时间轴边框颜色
		            borderWidth: 0,                    // 时间轴边框线宽，单位px，默认为0（无边框）

		            orient: 'horizontal',              // 'vertical'
		            inverse: false,

		            tooltip: {                          // boolean or Object
		                trigger: 'item'                 // data item may also have tootip attr.
		            },

		            symbol: 'emptyCircle',
		            symbolSize: 10,

		            lineStyle: {
		                show: true,
		                width: 2,
		                color: '#304654'
		            },
		            label: {                            // 文本标签
		                position: 'auto',           // auto left right top bottom
		                                            // When using number, label position is not
		                                            // restricted by viewRect.
		                                            // positive: right/bottom, negative: left/top
		                normal: {
		                    show: true,
		                    interval: 'auto',
		                    rotate: 0,
		                    // formatter: null,
		                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
		                        color: '#304654'
		                    }
		                },
		                emphasis: {
		                    show: true,
		                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
		                        color: '#c23531'
		                    }
		                }
		            },
		            itemStyle: {
		                normal: {
		                    color: '#304654',
		                    borderWidth: 1
		                },
		                emphasis: {
		                    color: '#c23531'
		                }
		            },

		            checkpointStyle: {
		                symbol: 'circle',
		                symbolSize: 13,
		                color: '#c23531',
		                borderWidth: 5,
		                borderColor: 'rgba(194,53,49, 0.5)',
		                animation: true,
		                animationDuration: 300,
		                animationEasing: 'quinticInOut'
		            },

		            controlStyle: {
		                show: true,
		                showPlayBtn: true,
		                showPrevBtn: true,
		                showNextBtn: true,
		                itemSize: 22,
		                itemGap: 12,
		                position: 'left',  // 'left' 'right' 'top' 'bottom'
		                playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z', // jshint ignore:line
		                stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z', // jshint ignore:line
		                nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z', // jshint ignore:line
		                prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z', // jshint ignore:line
		                normal: {
		                    color: '#304654',
		                    borderColor: '#304654',
		                    borderWidth: 1
		                },
		                emphasis: {
		                    color: '#c23531',
		                    borderColor: '#c23531',
		                    borderWidth: 2
		                }
		            },
		            data: []
		        }

		    });



	/***/ },
	/* 327 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Timeline model
		 */


		    var ComponentModel = __webpack_require__(19);
		    var List = __webpack_require__(94);
		    var zrUtil = __webpack_require__(3);
		    var modelUtil = __webpack_require__(5);

		    var TimelineModel = ComponentModel.extend({

		        type: 'timeline',

		        layoutMode: 'box',

		        /**
		         * @protected
		         */
		        defaultOption: {

		            zlevel: 0,                  // 一级层叠
		            z: 4,                       // 二级层叠
		            show: true,

		            axisType: 'time',  // 模式是时间类型，支持 value, category

		            realtime: true,

		            left: '20%',
		            top: null,
		            right: '20%',
		            bottom: 0,
		            width: null,
		            height: 40,
		            padding: 5,

		            controlPosition: 'left',           // 'left' 'right' 'top' 'bottom' 'none'
		            autoPlay: false,
		            rewind: false,                     // 反向播放
		            loop: true,
		            playInterval: 2000,                // 播放时间间隔，单位ms

		            currentIndex: 0,

		            itemStyle: {
		                normal: {},
		                emphasis: {}
		            },
		            label: {
		                normal: {
		                    textStyle: {
		                        color: '#000'
		                    }
		                },
		                emphasis: {}
		            },

		            data: []
		        },

		        /**
		         * @override
		         */
		        init: function (option, parentModel, ecModel) {

		            /**
		             * @private
		             * @type {module:echarts/data/List}
		             */
		            this._data;

		            /**
		             * @private
		             * @type {Array.<string>}
		             */
		            this._names;

		            this.mergeDefaultAndTheme(option, ecModel);
		            this._initData();
		        },

		        /**
		         * @override
		         */
		        mergeOption: function (option) {
		            TimelineModel.superApply(this, 'mergeOption', arguments);
		            this._initData();
		        },

		        /**
		         * @param {number} [currentIndex]
		         */
		        setCurrentIndex: function (currentIndex) {
		            if (currentIndex == null) {
		                currentIndex = this.option.currentIndex;
		            }
		            var count = this._data.count();

		            if (this.option.loop) {
		                currentIndex = (currentIndex % count + count) % count;
		            }
		            else {
		                currentIndex >= count && (currentIndex = count - 1);
		                currentIndex < 0 && (currentIndex = 0);
		            }

		            this.option.currentIndex = currentIndex;
		        },

		        /**
		         * @return {number} currentIndex
		         */
		        getCurrentIndex: function () {
		            return this.option.currentIndex;
		        },

		        /**
		         * @return {boolean}
		         */
		        isIndexMax: function () {
		            return this.getCurrentIndex() >= this._data.count() - 1;
		        },

		        /**
		         * @param {boolean} state true: play, false: stop
		         */
		        setPlayState: function (state) {
		            this.option.autoPlay = !!state;
		        },

		        /**
		         * @return {boolean} true: play, false: stop
		         */
		        getPlayState: function () {
		            return !!this.option.autoPlay;
		        },

		        /**
		         * @private
		         */
		        _initData: function () {
		            var thisOption = this.option;
		            var dataArr = thisOption.data || [];
		            var axisType = thisOption.axisType;
		            var names = this._names = [];

		            if (axisType === 'category') {
		                var idxArr = [];
		                zrUtil.each(dataArr, function (item, index) {
		                    var value = modelUtil.getDataItemValue(item);
		                    var newItem;

		                    if (zrUtil.isObject(item)) {
		                        newItem = zrUtil.clone(item);
		                        newItem.value = index;
		                    }
		                    else {
		                        newItem = index;
		                    }

		                    idxArr.push(newItem);

		                    if (!zrUtil.isString(value) && (value == null || isNaN(value))) {
		                        value = '';
		                    }

		                    names.push(value + '');
		                });
		                dataArr = idxArr;
		            }

		            var dimType = ({category: 'ordinal', time: 'time'})[axisType] || 'number';

		            var data = this._data = new List([{name: 'value', type: dimType}], this);

		            data.initData(dataArr, names);
		        },

		        getData: function () {
		            return this._data;
		        },

		        /**
		         * @public
		         * @return {Array.<string>} categoreis
		         */
		        getCategories: function () {
		            if (this.get('axisType') === 'category') {
		                return this._names.slice();
		            }
		        }

		    });

		    module.exports = TimelineModel;


	/***/ },
	/* 328 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Silder timeline view
		 */


		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var layout = __webpack_require__(21);
		    var TimelineView = __webpack_require__(329);
		    var TimelineAxis = __webpack_require__(330);
		    var symbolUtil = __webpack_require__(100);
		    var axisHelper = __webpack_require__(108);
		    var BoundingRect = __webpack_require__(15);
		    var matrix = __webpack_require__(17);
		    var numberUtil = __webpack_require__(7);
		    var modelUtil = __webpack_require__(5);
		    var formatUtil = __webpack_require__(6);
		    var encodeHTML = formatUtil.encodeHTML;

		    var bind = zrUtil.bind;
		    var each = zrUtil.each;

		    var PI = Math.PI;

		    module.exports = TimelineView.extend({

		        type: 'timeline.slider',

		        init: function (ecModel, api) {

		            this.api = api;

		            /**
		             * @private
		             * @type {module:echarts/component/timeline/TimelineAxis}
		             */
		            this._axis;

		            /**
		             * @private
		             * @type {module:zrender/core/BoundingRect}
		             */
		            this._viewRect;

		            /**
		             * @type {number}
		             */
		            this._timer;

		            /**
		             * @type {module:zrende/Element}
		             */
		            this._currentPointer;

		            /**
		             * @type {module:zrender/container/Group}
		             */
		            this._mainGroup;

		            /**
		             * @type {module:zrender/container/Group}
		             */
		            this._labelGroup;
		        },

		        /**
		         * @override
		         */
		        render: function (timelineModel, ecModel, api, payload) {
		            this.model = timelineModel;
		            this.api = api;
		            this.ecModel = ecModel;

		            this.group.removeAll();

		            if (timelineModel.get('show', true)) {

		                var layoutInfo = this._layout(timelineModel, api);
		                var mainGroup = this._createGroup('mainGroup');
		                var labelGroup = this._createGroup('labelGroup');

		                /**
		                 * @private
		                 * @type {module:echarts/component/timeline/TimelineAxis}
		                 */
		                var axis = this._axis = this._createAxis(layoutInfo, timelineModel);

		                each(
		                    ['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'],
		                    function (name) {
		                        this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);
		                    },
		                    this
		                );

		                this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);

		                this._position(layoutInfo, timelineModel);
		            }

		            this._doPlayStop();
		        },

		        /**
		         * @override
		         */
		        remove: function () {
		            this._clearTimer();
		            this.group.removeAll();
		        },

		        /**
		         * @override
		         */
		        dispose: function () {
		            this._clearTimer();
		        },

		        _layout: function (timelineModel, api) {
		            var labelPosOpt = timelineModel.get('label.normal.position');
		            var orient = timelineModel.get('orient');
		            var viewRect = getViewRect(timelineModel, api);
		            // Auto label offset.
		            if (labelPosOpt == null || labelPosOpt === 'auto') {
		                labelPosOpt = orient === 'horizontal'
		                    ? ((viewRect.y + viewRect.height / 2) < api.getHeight() / 2 ? '-' : '+')
		                    : ((viewRect.x + viewRect.width / 2) < api.getWidth() / 2 ? '+' : '-');
		            }
		            else if (isNaN(labelPosOpt)) {
		                labelPosOpt = ({
		                    horizontal: {top: '-', bottom: '+'},
		                    vertical: {left: '-', right: '+'}
		                })[orient][labelPosOpt];
		            }

		            // FIXME
		            // 暂没有实现用户传入
		            // var labelAlign = timelineModel.get('label.normal.textStyle.align');
		            // var labelBaseline = timelineModel.get('label.normal.textStyle.baseline');
		            var labelAlignMap = {
		                horizontal: 'center',
		                vertical: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'left' : 'right'
		            };

		            var labelBaselineMap = {
		                horizontal: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'top' : 'bottom',
		                vertical: 'middle'
		            };
		            var rotationMap = {
		                horizontal: 0,
		                vertical: PI / 2
		            };

		            // Position
		            var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;

		            var controlModel = timelineModel.getModel('controlStyle');
		            var showControl = controlModel.get('show');
		            var controlSize = showControl ? controlModel.get('itemSize') : 0;
		            var controlGap = showControl ? controlModel.get('itemGap') : 0;
		            var sizePlusGap = controlSize + controlGap;

		            // Special label rotate.
		            var labelRotation = timelineModel.get('label.normal.rotate') || 0;
		            labelRotation = labelRotation * PI / 180; // To radian.

		            var playPosition;
		            var prevBtnPosition;
		            var nextBtnPosition;
		            var axisExtent;
		            var controlPosition = controlModel.get('position', true);
		            var showControl = controlModel.get('show', true);
		            var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);
		            var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);
		            var showNextBtn = showControl && controlModel.get('showNextBtn', true);
		            var xLeft = 0;
		            var xRight = mainLength;

		            // position[0] means left, position[1] means middle.
		            if (controlPosition === 'left' || controlPosition === 'bottom') {
		                showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);
		                showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);
		                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
		            }
		            else { // 'top' 'right'
		                showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
		                showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);
		                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
		            }
		            axisExtent = [xLeft, xRight];

		            if (timelineModel.get('inverse')) {
		                axisExtent.reverse();
		            }

		            return {
		                viewRect: viewRect,
		                mainLength: mainLength,
		                orient: orient,

		                rotation: rotationMap[orient],
		                labelRotation: labelRotation,
		                labelPosOpt: labelPosOpt,
		                labelAlign: labelAlignMap[orient],
		                labelBaseline: labelBaselineMap[orient],

		                // Based on mainGroup.
		                playPosition: playPosition,
		                prevBtnPosition: prevBtnPosition,
		                nextBtnPosition: nextBtnPosition,
		                axisExtent: axisExtent,

		                controlSize: controlSize,
		                controlGap: controlGap
		            };
		        },

		        _position: function (layoutInfo, timelineModel) {
		            // Position is be called finally, because bounding rect is needed for
		            // adapt content to fill viewRect (auto adapt offset).

		            // Timeline may be not all in the viewRect when 'offset' is specified
		            // as a number, because it is more appropriate that label aligns at
		            // 'offset' but not the other edge defined by viewRect.

		            var mainGroup = this._mainGroup;
		            var labelGroup = this._labelGroup;

		            var viewRect = layoutInfo.viewRect;
		            if (layoutInfo.orient === 'vertical') {
		                // transfrom to horizontal, inverse rotate by left-top point.
		                var m = matrix.create();
		                var rotateOriginX = viewRect.x;
		                var rotateOriginY = viewRect.y + viewRect.height;
		                matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);
		                matrix.rotate(m, m, -PI / 2);
		                matrix.translate(m, m, [rotateOriginX, rotateOriginY]);
		                viewRect = viewRect.clone();
		                viewRect.applyTransform(m);
		            }

		            var viewBound = getBound(viewRect);
		            var mainBound = getBound(mainGroup.getBoundingRect());
		            var labelBound = getBound(labelGroup.getBoundingRect());

		            var mainPosition = mainGroup.position;
		            var labelsPosition = labelGroup.position;

		            labelsPosition[0] = mainPosition[0] = viewBound[0][0];

		            var labelPosOpt = layoutInfo.labelPosOpt;

		            if (isNaN(labelPosOpt)) { // '+' or '-'
		                var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;
		                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
		                toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);
		            }
		            else {
		                var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;
		                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
		                labelsPosition[1] = mainPosition[1] + labelPosOpt;
		            }

		            mainGroup.position = mainPosition;
		            labelGroup.position = labelsPosition;
		            mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;

		            setOrigin(mainGroup);
		            setOrigin(labelGroup);

		            function setOrigin(targetGroup) {
		                var pos = targetGroup.position;
		                targetGroup.origin = [
		                    viewBound[0][0] - pos[0],
		                    viewBound[1][0] - pos[1]
		                ];
		            }

		            function getBound(rect) {
		                // [[xmin, xmax], [ymin, ymax]]
		                return [
		                    [rect.x, rect.x + rect.width],
		                    [rect.y, rect.y + rect.height]
		                ];
		            }

		            function toBound(fromPos, from, to, dimIdx, boundIdx) {
		                fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];
		            }
		        },

		        _createAxis: function (layoutInfo, timelineModel) {
		            var data = timelineModel.getData();
		            var axisType = timelineModel.get('axisType');

		            var scale = axisHelper.createScaleByModel(timelineModel, axisType);
		            var dataExtent = data.getDataExtent('value');
		            scale.setExtent(dataExtent[0], dataExtent[1]);
		            this._customizeScale(scale, data);
		            scale.niceTicks();

		            var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);
		            axis.model = timelineModel;

		            return axis;
		        },

		        _customizeScale: function (scale, data) {

		            scale.getTicks = function () {
		                return data.mapArray(['value'], function (value) {
		                    return value;
		                });
		            };

		            scale.getTicksLabels = function () {
		                return zrUtil.map(this.getTicks(), scale.getLabel, scale);
		            };
		        },

		        _createGroup: function (name) {
		            var newGroup = this['_' + name] = new graphic.Group();
		            this.group.add(newGroup);
		            return newGroup;
		        },

		        _renderAxisLine: function (layoutInfo, group, axis, timelineModel) {
		            var axisExtent = axis.getExtent();

		            if (!timelineModel.get('lineStyle.show')) {
		                return;
		            }

		            group.add(new graphic.Line({
		                shape: {
		                    x1: axisExtent[0], y1: 0,
		                    x2: axisExtent[1], y2: 0
		                },
		                style: zrUtil.extend(
		                    {lineCap: 'round'},
		                    timelineModel.getModel('lineStyle').getLineStyle()
		                ),
		                silent: true,
		                z2: 1
		            }));
		        },

		        /**
		         * @private
		         */
		        _renderAxisTick: function (layoutInfo, group, axis, timelineModel) {
		            var data = timelineModel.getData();
		            var ticks = axis.scale.getTicks();
		            var tooltipHostModel = this._prepareTooltipHostModel(data, timelineModel);

		            each(ticks, function (value, dataIndex) {

		                var tickCoord = axis.dataToCoord(value);
		                var itemModel = data.getItemModel(dataIndex);
		                var itemStyleModel = itemModel.getModel('itemStyle.normal');
		                var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');
		                var symbolOpt = {
		                    position: [tickCoord, 0],
		                    onclick: bind(this._changeTimeline, this, dataIndex)
		                };
		                var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);
		                graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());

		                if (itemModel.get('tooltip')) {
		                    el.dataIndex = dataIndex;
		                    el.dataModel = tooltipHostModel;
		                }
		                else {
		                    el.dataIndex = el.dataModel = null;
		                }

		            }, this);
		        },

		        /**
		         * @private
		         */
		        _prepareTooltipHostModel: function (data, timelineModel) {
		            var tooltipHostModel = modelUtil.createDataFormatModel(
		                {}, data, timelineModel.get('data')
		            );
		            var me = this;

		            tooltipHostModel.formatTooltip = function (dataIndex) {
		                return encodeHTML(me._axis.scale.getLabel(dataIndex));
		            };

		            return tooltipHostModel;
		        },

		        /**
		         * @private
		         */
		        _renderAxisLabel: function (layoutInfo, group, axis, timelineModel) {
		            var labelModel = timelineModel.getModel('label.normal');

		            if (!labelModel.get('show')) {
		                return;
		            }

		            var data = timelineModel.getData();
		            var ticks = axis.scale.getTicks();
		            var labels = axisHelper.getFormattedLabels(
		                axis, labelModel.get('formatter')
		            );
		            var labelInterval = axis.getLabelInterval();

		            each(ticks, function (tick, dataIndex) {
		                if (axis.isLabelIgnored(dataIndex, labelInterval)) {
		                    return;
		                }

		                var itemModel = data.getItemModel(dataIndex);
		                var itemTextStyleModel = itemModel.getModel('label.normal.textStyle');
		                var hoverTextStyleModel = itemModel.getModel('label.emphasis.textStyle');
		                var tickCoord = axis.dataToCoord(tick);
		                var textEl = new graphic.Text({
		                    style: {
		                        text: labels[dataIndex],
		                        textAlign: layoutInfo.labelAlign,
		                        textVerticalAlign: layoutInfo.labelBaseline,
		                        textFont: itemTextStyleModel.getFont(),
		                        fill: itemTextStyleModel.getTextColor()
		                    },
		                    position: [tickCoord, 0],
		                    rotation: layoutInfo.labelRotation - layoutInfo.rotation,
		                    onclick: bind(this._changeTimeline, this, dataIndex),
		                    silent: false
		                });

		                group.add(textEl);
		                graphic.setHoverStyle(textEl, hoverTextStyleModel.getItemStyle());

		            }, this);
		        },

		        /**
		         * @private
		         */
		        _renderControl: function (layoutInfo, group, axis, timelineModel) {
		            var controlSize = layoutInfo.controlSize;
		            var rotation = layoutInfo.rotation;

		            var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();
		            var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();
		            var rect = [0, -controlSize / 2, controlSize, controlSize];
		            var playState = timelineModel.getPlayState();
		            var inverse = timelineModel.get('inverse', true);

		            makeBtn(
		                layoutInfo.nextBtnPosition,
		                'controlStyle.nextIcon',
		                bind(this._changeTimeline, this, inverse ? '-' : '+')
		            );
		            makeBtn(
		                layoutInfo.prevBtnPosition,
		                'controlStyle.prevIcon',
		                bind(this._changeTimeline, this, inverse ? '+' : '-')
		            );
		            makeBtn(
		                layoutInfo.playPosition,
		                'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'),
		                bind(this._handlePlayClick, this, !playState),
		                true
		            );

		            function makeBtn(position, iconPath, onclick, willRotate) {
		                if (!position) {
		                    return;
		                }
		                var opt = {
		                    position: position,
		                    origin: [controlSize / 2, 0],
		                    rotation: willRotate ? -rotation : 0,
		                    rectHover: true,
		                    style: itemStyle,
		                    onclick: onclick
		                };
		                var btn = makeIcon(timelineModel, iconPath, rect, opt);
		                group.add(btn);
		                graphic.setHoverStyle(btn, hoverStyle);
		            }
		        },

		        _renderCurrentPointer: function (layoutInfo, group, axis, timelineModel) {
		            var data = timelineModel.getData();
		            var currentIndex = timelineModel.getCurrentIndex();
		            var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');
		            var me = this;

		            var callback = {
		                onCreate: function (pointer) {
		                    pointer.draggable = true;
		                    pointer.drift = bind(me._handlePointerDrag, me);
		                    pointer.ondragend = bind(me._handlePointerDragend, me);
		                    pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);
		                },
		                onUpdate: function (pointer) {
		                    pointerMoveTo(pointer, currentIndex, axis, timelineModel);
		                }
		            };

		            // Reuse when exists, for animation and drag.
		            this._currentPointer = giveSymbol(
		                pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback
		            );
		        },

		        _handlePlayClick: function (nextState) {
		            this._clearTimer();
		            this.api.dispatchAction({
		                type: 'timelinePlayChange',
		                playState: nextState,
		                from: this.uid
		            });
		        },

		        _handlePointerDrag: function (dx, dy, e) {
		            this._clearTimer();
		            this._pointerChangeTimeline([e.offsetX, e.offsetY]);
		        },

		        _handlePointerDragend: function (e) {
		            this._pointerChangeTimeline([e.offsetX, e.offsetY], true);
		        },

		        _pointerChangeTimeline: function (mousePos, trigger) {
		            var toCoord = this._toAxisCoord(mousePos)[0];

		            var axis = this._axis;
		            var axisExtent = numberUtil.asc(axis.getExtent().slice());

		            toCoord > axisExtent[1] && (toCoord = axisExtent[1]);
		            toCoord < axisExtent[0] && (toCoord = axisExtent[0]);

		            this._currentPointer.position[0] = toCoord;
		            this._currentPointer.dirty();

		            var targetDataIndex = this._findNearestTick(toCoord);
		            var timelineModel = this.model;

		            if (trigger || (
		                targetDataIndex !== timelineModel.getCurrentIndex()
		                && timelineModel.get('realtime')
		            )) {
		                this._changeTimeline(targetDataIndex);
		            }
		        },

		        _doPlayStop: function () {
		            this._clearTimer();

		            if (this.model.getPlayState()) {
		                this._timer = setTimeout(
		                    bind(handleFrame, this),
		                    this.model.get('playInterval')
		                );
		            }

		            function handleFrame() {
		                // Do not cache
		                var timelineModel = this.model;
		                this._changeTimeline(
		                    timelineModel.getCurrentIndex()
		                    + (timelineModel.get('rewind', true) ? -1 : 1)
		                );
		            }
		        },

		        _toAxisCoord: function (vertex) {
		            var trans = this._mainGroup.getLocalTransform();
		            return graphic.applyTransform(vertex, trans, true);
		        },

		        _findNearestTick: function (axisCoord) {
		            var data = this.model.getData();
		            var dist = Infinity;
		            var targetDataIndex;
		            var axis = this._axis;

		            data.each(['value'], function (value, dataIndex) {
		                var coord = axis.dataToCoord(value);
		                var d = Math.abs(coord - axisCoord);
		                if (d < dist) {
		                    dist = d;
		                    targetDataIndex = dataIndex;
		                }
		            });

		            return targetDataIndex;
		        },

		        _clearTimer: function () {
		            if (this._timer) {
		                clearTimeout(this._timer);
		                this._timer = null;
		            }
		        },

		        _changeTimeline: function (nextIndex) {
		            var currentIndex = this.model.getCurrentIndex();

		            if (nextIndex === '+') {
		                nextIndex = currentIndex + 1;
		            }
		            else if (nextIndex === '-') {
		                nextIndex = currentIndex - 1;
		            }

		            this.api.dispatchAction({
		                type: 'timelineChange',
		                currentIndex: nextIndex,
		                from: this.uid
		            });
		        }

		    });

		    function getViewRect(model, api) {
		        return layout.getLayoutRect(
		            model.getBoxLayoutParams(),
		            {
		                width: api.getWidth(),
		                height: api.getHeight()
		            },
		            model.get('padding')
		        );
		    }

		    function makeIcon(timelineModel, objPath, rect, opts) {
		        var icon = graphic.makePath(
		            timelineModel.get(objPath).replace(/^path:\/\//, ''),
		            zrUtil.clone(opts || {}),
		            new BoundingRect(rect[0], rect[1], rect[2], rect[3]),
		            'center'
		        );

		        return icon;
		    }

		    /**
		     * Create symbol or update symbol
		     */
		    function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {
		        var symbolType = hostModel.get('symbol');
		        var color = itemStyleModel.get('color');
		        var symbolSize = hostModel.get('symbolSize');
		        var halfSymbolSize = symbolSize / 2;
		        var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);

		        if (!symbol) {
		            symbol = symbolUtil.createSymbol(
		                symbolType, -halfSymbolSize, -halfSymbolSize, symbolSize, symbolSize, color
		            );
		            group.add(symbol);
		            callback && callback.onCreate(symbol);
		        }
		        else {
		            symbol.setStyle(itemStyle);
		            symbol.setColor(color);
		            group.add(symbol); // Group may be new, also need to add.
		            callback && callback.onUpdate(symbol);
		        }

		        opt = zrUtil.merge({
		            rectHover: true,
		            style: itemStyle,
		            z2: 100
		        }, opt, true);

		        symbol.attr(opt);

		        return symbol;
		    }

		    function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {
		        if (pointer.dragging) {
		            return;
		        }

		        var pointerModel = timelineModel.getModel('checkpointStyle');
		        var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));

		        if (noAnimation || !pointerModel.get('animation', true)) {
		            pointer.attr({position: [toCoord, 0]});
		        }
		        else {
		            pointer.stopAnimation(true);
		            pointer.animateTo(
		                {position: [toCoord, 0]},
		                pointerModel.get('animationDuration', true),
		                pointerModel.get('animationEasing', true)
		            );
		        }
		    }



	/***/ },
	/* 329 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Timeline view
		 */


		    // var zrUtil = require('zrender/lib/core/util');
		    // var graphic = require('../../util/graphic');
		    var ComponentView = __webpack_require__(28);

		    module.exports = ComponentView.extend({

		        type: 'timeline'
		    });



	/***/ },
	/* 330 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var zrUtil = __webpack_require__(3);
		    var Axis = __webpack_require__(117);
		    var axisHelper = __webpack_require__(108);

		    /**
		     * Extend axis 2d
		     * @constructor module:echarts/coord/cartesian/Axis2D
		     * @extends {module:echarts/coord/cartesian/Axis}
		     * @param {string} dim
		     * @param {*} scale
		     * @param {Array.<number>} coordExtent
		     * @param {string} axisType
		     * @param {string} position
		     */
		    var TimelineAxis = function (dim, scale, coordExtent, axisType) {

		        Axis.call(this, dim, scale, coordExtent);

		        /**
		         * Axis type
		         *  - 'category'
		         *  - 'value'
		         *  - 'time'
		         *  - 'log'
		         * @type {string}
		         */
		        this.type = axisType || 'value';

		        /**
		         * @private
		         * @type {number}
		         */
		        this._autoLabelInterval;

		        /**
		         * Axis model
		         * @param {module:echarts/component/TimelineModel}
		         */
		        this.model = null;
		    };

		    TimelineAxis.prototype = {

		        constructor: TimelineAxis,

		        /**
		         * @public
		         * @return {number}
		         */
		        getLabelInterval: function () {
		            var timelineModel = this.model;
		            var labelModel = timelineModel.getModel('label.normal');
		            var labelInterval = labelModel.get('interval');

		            if (labelInterval != null && labelInterval != 'auto') {
		                return labelInterval;
		            }

		            var labelInterval = this._autoLabelInterval;

		            if (!labelInterval) {
		                labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(
		                    zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),
		                    axisHelper.getFormattedLabels(this, labelModel.get('formatter')),
		                    labelModel.getModel('textStyle').getFont(),
		                    timelineModel.get('orient') === 'horizontal'
		                );
		            }

		            return labelInterval;
		        },

		        /**
		         * If label is ignored.
		         * Automatically used when axis is category and label can not be all shown
		         * @public
		         * @param  {number} idx
		         * @return {boolean}
		         */
		        isLabelIgnored: function (idx) {
		            if (this.type === 'category') {
		                var labelInterval = this.getLabelInterval();
		                return ((typeof labelInterval === 'function')
		                    && !labelInterval(idx, this.scale.getLabel(idx)))
		                    || idx % (labelInterval + 1);
		            }
		        }

		    };

		    zrUtil.inherits(TimelineAxis, Axis);

		    module.exports = TimelineAxis;


	/***/ },
	/* 331 */
	/***/ function(module, exports, __webpack_require__) {

		

		    __webpack_require__(332);
		    __webpack_require__(334);

		    __webpack_require__(336);
		    __webpack_require__(337);
		    __webpack_require__(338);
		    __webpack_require__(339);
		    __webpack_require__(344);


	/***/ },
	/* 332 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var featureManager = __webpack_require__(333);
		    var zrUtil = __webpack_require__(3);

		    var ToolboxModel = __webpack_require__(1).extendComponentModel({

		        type: 'toolbox',

		        layoutMode: {
		            type: 'box',
		            ignoreSize: true
		        },

		        mergeDefaultAndTheme: function (option) {
		            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);

		            zrUtil.each(this.option.feature, function (featureOpt, featureName) {
		                var Feature = featureManager.get(featureName);
		                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
		            });
		        },

		        defaultOption: {

		            show: true,

		            z: 6,

		            zlevel: 0,

		            orient: 'horizontal',

		            left: 'right',

		            top: 'top',

		            // right
		            // bottom

		            backgroundColor: 'transparent',

		            borderColor: '#ccc',

		            borderWidth: 0,

		            padding: 5,

		            itemSize: 15,

		            itemGap: 8,

		            showTitle: true,

		            iconStyle: {
		                normal: {
		                    borderColor: '#666',
		                    color: 'none'
		                },
		                emphasis: {
		                    borderColor: '#3E98C5'
		                }
		            }
		            // textStyle: {},

		            // feature
		        }
		    });

		    module.exports = ToolboxModel;


	/***/ },
	/* 333 */
	/***/ function(module, exports) {

		'use strict';


		    var features = {};

		    module.exports = {
		        register: function (name, ctor) {
		            features[name] = ctor;
		        },

		        get: function (name) {
		            return features[name];
		        }
		    };


	/***/ },
	/* 334 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {

		    var featureManager = __webpack_require__(333);
		    var zrUtil = __webpack_require__(3);
		    var graphic = __webpack_require__(42);
		    var Model = __webpack_require__(8);
		    var DataDiffer = __webpack_require__(95);
		    var listComponentHelper = __webpack_require__(266);
		    var textContain = __webpack_require__(14);

		    module.exports = __webpack_require__(1).extendComponentView({

		        type: 'toolbox',

		        render: function (toolboxModel, ecModel, api) {
		            var group = this.group;
		            group.removeAll();

		            if (!toolboxModel.get('show')) {
		                return;
		            }

		            var itemSize = +toolboxModel.get('itemSize');
		            var featureOpts = toolboxModel.get('feature') || {};
		            var features = this._features || (this._features = {});

		            var featureNames = [];
		            zrUtil.each(featureOpts, function (opt, name) {
		                featureNames.push(name);
		            });

		            (new DataDiffer(this._featureNames || [], featureNames))
		                .add(process)
		                .update(process)
		                .remove(zrUtil.curry(process, null))
		                .execute();

		            // Keep for diff.
		            this._featureNames = featureNames;

		            function process(newIndex, oldIndex) {
		                var featureName = featureNames[newIndex];
		                var oldName = featureNames[oldIndex];
		                var featureOpt = featureOpts[featureName];
		                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
		                var feature;

		                if (featureName && !oldName) { // Create
		                    if (isUserFeatureName(featureName)) {
		                        feature = {
		                            model: featureModel,
		                            onclick: featureModel.option.onclick,
		                            featureName: featureName
		                        };
		                    }
		                    else {
		                        var Feature = featureManager.get(featureName);
		                        if (!Feature) {
		                            return;
		                        }
		                        feature = new Feature(featureModel);
		                    }
		                    features[featureName] = feature;
		                }
		                else {
		                    feature = features[oldName];
		                    // If feature does not exsit.
		                    if (!feature) {
		                        return;
		                    }
		                    feature.model = featureModel;
		                }

		                if (!featureName && oldName) {
		                    feature.dispose && feature.dispose(ecModel, api);
		                    return;
		                }

		                if (!featureModel.get('show') || feature.unusable) {
		                    feature.remove && feature.remove(ecModel, api);
		                    return;
		                }

		                createIconPaths(featureModel, feature, featureName);

		                featureModel.setIconStatus = function (iconName, status) {
		                    var option = this.option;
		                    var iconPaths = this.iconPaths;
		                    option.iconStatus = option.iconStatus || {};
		                    option.iconStatus[iconName] = status;
		                    // FIXME
		                    iconPaths[iconName] && iconPaths[iconName].trigger(status);
		                };

		                if (feature.render) {
		                    feature.render(featureModel, ecModel, api);
		                }
		            }

		            function createIconPaths(featureModel, feature, featureName) {
		                var iconStyleModel = featureModel.getModel('iconStyle');

		                // If one feature has mutiple icon. they are orginaized as
		                // {
		                //     icon: {
		                //         foo: '',
		                //         bar: ''
		                //     },
		                //     title: {
		                //         foo: '',
		                //         bar: ''
		                //     }
		                // }
		                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
		                var titles = featureModel.get('title') || {};
		                if (typeof icons === 'string') {
		                    var icon = icons;
		                    var title = titles;
		                    icons = {};
		                    titles = {};
		                    icons[featureName] = icon;
		                    titles[featureName] = title;
		                }
		                var iconPaths = featureModel.iconPaths = {};
		                zrUtil.each(icons, function (icon, iconName) {
		                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();
		                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();

		                    var style = {
		                        x: -itemSize / 2,
		                        y: -itemSize / 2,
		                        width: itemSize,
		                        height: itemSize
		                    };
		                    var path = icon.indexOf('image://') === 0
		                        ? (
		                            style.image = icon.slice(8),
		                            new graphic.Image({style: style})
		                        )
		                        : graphic.makePath(
		                            icon.replace('path://', ''),
		                            {
		                                style: normalStyle,
		                                hoverStyle: hoverStyle,
		                                rectHover: true
		                            },
		                            style,
		                            'center'
		                        );

		                    graphic.setHoverStyle(path);

		                    if (toolboxModel.get('showTitle')) {
		                        path.__title = titles[iconName];
		                        path.on('mouseover', function () {
		                                path.setStyle({
		                                    text: titles[iconName],
		                                    textPosition: hoverStyle.textPosition || 'bottom',
		                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
		                                    textAlign: hoverStyle.textAlign || 'center'
		                                });
		                            })
		                            .on('mouseout', function () {
		                                path.setStyle({
		                                    textFill: null
		                                });
		                            });
		                    }
		                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');

		                    group.add(path);
		                    path.on('click', zrUtil.bind(
		                        feature.onclick, feature, ecModel, api, iconName
		                    ));

		                    iconPaths[iconName] = path;
		                });
		            }

		            listComponentHelper.layout(group, toolboxModel, api);
		            // Render background after group is layout
		            // FIXME
		            listComponentHelper.addBackground(group, toolboxModel);

		            // Adjust icon title positions to avoid them out of screen
		            group.eachChild(function (icon) {
		                var titleText = icon.__title;
		                var hoverStyle = icon.hoverStyle;
		                // May be background element
		                if (hoverStyle && titleText) {
		                    var rect = textContain.getBoundingRect(
		                        titleText, hoverStyle.font
		                    );
		                    var offsetX = icon.position[0] + group.position[0];
		                    var offsetY = icon.position[1] + group.position[1] + itemSize;

		                    var needPutOnTop = false;
		                    if (offsetY + rect.height > api.getHeight()) {
		                        hoverStyle.textPosition = 'top';
		                        needPutOnTop = true;
		                    }
		                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);
		                    if (offsetX + rect.width /  2 > api.getWidth()) {
		                        hoverStyle.textPosition = ['100%', topOffset];
		                        hoverStyle.textAlign = 'right';
		                    }
		                    else if (offsetX - rect.width / 2 < 0) {
		                        hoverStyle.textPosition = [0, topOffset];
		                        hoverStyle.textAlign = 'left';
		                    }
		                }
		            });
		        },

		        remove: function (ecModel, api) {
		            zrUtil.each(this._features, function (feature) {
		                feature.remove && feature.remove(ecModel, api);
		            });
		            this.group.removeAll();
		        },

		        dispose: function (ecModel, api) {
		            zrUtil.each(this._features, function (feature) {
		                feature.dispose && feature.dispose(ecModel, api);
		            });
		        }
		    });

		    function isUserFeatureName(featureName) {
		        return featureName.indexOf('my') === 0;
		    }


		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(335)))

	/***/ },
	/* 335 */
	/***/ function(module, exports) {

		// shim for using process in browser

		var process = module.exports = {};
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}

		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = setTimeout(cleanUpNextTick);
		    draining = true;

		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    clearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        setTimeout(drainQueue, 0);
		    }
		};

		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;

		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};

		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ },
	/* 336 */
	/***/ function(module, exports, __webpack_require__) {

		

		    var env = __webpack_require__(78);

		    function SaveAsImage (model) {
		        this.model = model;
		    }

		    SaveAsImage.defaultOption = {
		        show: true,
		        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
		        title: '保存为图片',
		        type: 'png',
		        // Default use option.backgroundColor
		        // backgroundColor: '#fff',
		        name: '',
		        excludeComponents: ['toolbox'],
		        pixelRatio: 1,
		        lang: ['右键另存为图片']
		    };

		    SaveAsImage.prototype.unusable = !env.canvasSupported;

		    var proto = SaveAsImage.prototype;

		    proto.onclick = function (ecModel, api) {
		        var model = this.model;
		        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
		        var $a = document.createElement('a');
		        var type = model.get('type', true) || 'png';
		        $a.download = title + '.' + type;
		        $a.target = '_blank';
		        var url = api.getConnectedDataURL({
		            type: type,
		            backgroundColor: model.get('backgroundColor', true)
		                || ecModel.get('backgroundColor') || '#fff',
		            excludeComponents: model.get('excludeComponents'),
		            pixelRatio: model.get('pixelRatio')
		        });
		        $a.href = url;
		        // Chrome and Firefox
		        if (typeof MouseEvent === 'function') {
		            var evt = new MouseEvent('click', {
		                view: window,
		                bubbles: true,
		                cancelable: false
		            });
		            $a.dispatchEvent(evt);
		        }
		        // IE
		        else {
		            var lang = model.get('lang');
		            var html = ''
		                + '<body style="margin:0;">'
		                + '<img src="' + url + '" style="max-width:100%;" title="' + ((lang && lang[0]) || '') + '" />'
		                + '</body>';
		            var tab = window.open();
		            tab.document.write(html);
		        }
		    };

		    __webpack_require__(333).register(
		        'saveAsImage', SaveAsImage
		    );

		    module.exports = SaveAsImage;


	/***/ },
	/* 337 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);

		    function MagicType(model) {
		        this.model = model;
		    }

		    MagicType.defaultOption = {
		        show: true,
		        type: [],
		        // Icon group
		        icon: {
		            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
		            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
		            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line
		            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
		        },
		        title: {
		            line: '切换为折线图',
		            bar: '切换为柱状图',
		            stack: '切换为堆叠',
		            tiled: '切换为平铺'
		        },
		        option: {},
		        seriesIndex: {}
		    };

		    var proto = MagicType.prototype;

		    proto.getIcons = function () {
		        var model = this.model;
		        var availableIcons = model.get('icon');
		        var icons = {};
		        zrUtil.each(model.get('type'), function (type) {
		            if (availableIcons[type]) {
		                icons[type] = availableIcons[type];
		            }
		        });
		        return icons;
		    };

		    var seriesOptGenreator = {
		        'line': function (seriesType, seriesId, seriesModel, model) {
		            if (seriesType === 'bar') {
		                return zrUtil.merge({
		                    id: seriesId,
		                    type: 'line',
		                    // Preserve data related option
		                    data: seriesModel.get('data'),
		                    stack: seriesModel.get('stack'),
		                    markPoint: seriesModel.get('markPoint'),
		                    markLine: seriesModel.get('markLine')
		                }, model.get('option.line') || {}, true);
		            }
		        },
		        'bar': function (seriesType, seriesId, seriesModel, model) {
		            if (seriesType === 'line') {
		                return zrUtil.merge({
		                    id: seriesId,
		                    type: 'bar',
		                    // Preserve data related option
		                    data: seriesModel.get('data'),
		                    stack: seriesModel.get('stack'),
		                    markPoint: seriesModel.get('markPoint'),
		                    markLine: seriesModel.get('markLine')
		                }, model.get('option.bar') || {}, true);
		            }
		        },
		        'stack': function (seriesType, seriesId, seriesModel, model) {
		            if (seriesType === 'line' || seriesType === 'bar') {
		                return zrUtil.merge({
		                    id: seriesId,
		                    stack: '__ec_magicType_stack__'
		                }, model.get('option.stack') || {}, true);
		            }
		        },
		        'tiled': function (seriesType, seriesId, seriesModel, model) {
		            if (seriesType === 'line' || seriesType === 'bar') {
		                return zrUtil.merge({
		                    id: seriesId,
		                    stack: ''
		                }, model.get('option.tiled') || {}, true);
		            }
		        }
		    };

		    var radioTypes = [
		        ['line', 'bar'],
		        ['stack', 'tiled']
		    ];

		    proto.onclick = function (ecModel, api, type) {
		        var model = this.model;
		        var seriesIndex = model.get('seriesIndex.' + type);
		        // Not supported magicType
		        if (!seriesOptGenreator[type]) {
		            return;
		        }
		        var newOption = {
		            series: []
		        };
		        var generateNewSeriesTypes = function (seriesModel) {
		            var seriesType = seriesModel.subType;
		            var seriesId = seriesModel.id;
		            var newSeriesOpt = seriesOptGenreator[type](
		                seriesType, seriesId, seriesModel, model
		            );
		            if (newSeriesOpt) {
		                // PENDING If merge original option?
		                zrUtil.defaults(newSeriesOpt, seriesModel.option);
		                newOption.series.push(newSeriesOpt);
		            }
		            // Modify boundaryGap
		            var coordSys = seriesModel.coordinateSystem;
		            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {
		                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
		                if (categoryAxis) {
		                    var axisDim = categoryAxis.dim;
		                    var axisIndex = seriesModel.get(axisDim + 'AxisIndex');
		                    var axisKey = axisDim + 'Axis';
		                    newOption[axisKey] = newOption[axisKey] || [];
		                    for (var i = 0; i <= axisIndex; i++) {
		                        newOption[axisKey][axisIndex] = newOption[axisKey][axisIndex] || {};
		                    }
		                    newOption[axisKey][axisIndex].boundaryGap = type === 'bar' ? true : false;
		                }
		            }
		        };

		        zrUtil.each(radioTypes, function (radio) {
		            if (zrUtil.indexOf(radio, type) >= 0) {
		                zrUtil.each(radio, function (item) {
		                    model.setIconStatus(item, 'normal');
		                });
		            }
		        });

		        model.setIconStatus(type, 'emphasis');

		        ecModel.eachComponent(
		            {
		                mainType: 'series',
		                query: seriesIndex == null ? null : {
		                    seriesIndex: seriesIndex
		                }
		            }, generateNewSeriesTypes
		        );
		        api.dispatchAction({
		            type: 'changeMagicType',
		            currentType: type,
		            newOption: newOption
		        });
		    };

		    var echarts = __webpack_require__(1);
		    echarts.registerAction({
		        type: 'changeMagicType',
		        event: 'magicTypeChanged',
		        update: 'prepareAndUpdate'
		    }, function (payload, ecModel) {
		        ecModel.mergeOption(payload.newOption);
		    });

		    __webpack_require__(333).register('magicType', MagicType);

		    module.exports = MagicType;


	/***/ },
	/* 338 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @module echarts/component/toolbox/feature/DataView
		 */



		    var zrUtil = __webpack_require__(3);
		    var eventTool = __webpack_require__(80);


		    var BLOCK_SPLITER = new Array(60).join('-');
		    var ITEM_SPLITER = '\t';
		    /**
		     * Group series into two types
		     *  1. on category axis, like line, bar
		     *  2. others, like scatter, pie
		     * @param {module:echarts/model/Global} ecModel
		     * @return {Object}
		     * @inner
		     */
		    function groupSeries(ecModel) {
		        var seriesGroupByCategoryAxis = {};
		        var otherSeries = [];
		        var meta = [];
		        ecModel.eachRawSeries(function (seriesModel) {
		            var coordSys = seriesModel.coordinateSystem;

		            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
		                var baseAxis = coordSys.getBaseAxis();
		                if (baseAxis.type === 'category') {
		                    var key = baseAxis.dim + '_' + baseAxis.index;
		                    if (!seriesGroupByCategoryAxis[key]) {
		                        seriesGroupByCategoryAxis[key] = {
		                            categoryAxis: baseAxis,
		                            valueAxis: coordSys.getOtherAxis(baseAxis),
		                            series: []
		                        };
		                        meta.push({
		                            axisDim: baseAxis.dim,
		                            axisIndex: baseAxis.index
		                        });
		                    }
		                    seriesGroupByCategoryAxis[key].series.push(seriesModel);
		                }
		                else {
		                    otherSeries.push(seriesModel);
		                }
		            }
		            else {
		                otherSeries.push(seriesModel);
		            }
		        });

		        return {
		            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
		            other: otherSeries,
		            meta: meta
		        };
		    }

		    /**
		     * Assemble content of series on cateogory axis
		     * @param {Array.<module:echarts/model/Series>} series
		     * @return {string}
		     * @inner
		     */
		    function assembleSeriesWithCategoryAxis(series) {
		        var tables = [];
		        zrUtil.each(series, function (group, key) {
		            var categoryAxis = group.categoryAxis;
		            var valueAxis = group.valueAxis;
		            var valueAxisDim = valueAxis.dim;

		            var headers = [' '].concat(zrUtil.map(group.series, function (series) {
		                return series.name;
		            }));
		            var columns = [categoryAxis.model.getCategories()];
		            zrUtil.each(group.series, function (series) {
		                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
		                    return val;
		                }));
		            });
		            // Assemble table content
		            var lines = [headers.join(ITEM_SPLITER)];
		            for (var i = 0; i < columns[0].length; i++) {
		                var items = [];
		                for (var j = 0; j < columns.length; j++) {
		                    items.push(columns[j][i]);
		                }
		                lines.push(items.join(ITEM_SPLITER));
		            }
		            tables.push(lines.join('\n'));
		        });
		        return tables.join('\n\n' +  BLOCK_SPLITER + '\n\n');
		    }

		    /**
		     * Assemble content of other series
		     * @param {Array.<module:echarts/model/Series>} series
		     * @return {string}
		     * @inner
		     */
		    function assembleOtherSeries(series) {
		        return zrUtil.map(series, function (series) {
		            var data = series.getRawData();
		            var lines = [series.name];
		            var vals = [];
		            data.each(data.dimensions, function () {
		                var argLen = arguments.length;
		                var dataIndex = arguments[argLen - 1];
		                var name = data.getName(dataIndex);
		                for (var i = 0; i < argLen - 1; i++) {
		                    vals[i] = arguments[i];
		                }
		                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));
		            });
		            return lines.join('\n');
		        }).join('\n\n' + BLOCK_SPLITER + '\n\n');
		    }

		    /**
		     * @param {module:echarts/model/Global}
		     * @return {string}
		     * @inner
		     */
		    function getContentFromModel(ecModel) {

		        var result = groupSeries(ecModel);

		        return {
		            value: zrUtil.filter([
		                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),
		                    assembleOtherSeries(result.other)
		                ], function (str) {
		                    return str.replace(/[\n\t\s]/g, '');
		                }).join('\n\n' + BLOCK_SPLITER + '\n\n'),

		            meta: result.meta
		        };
		    }


		    function trim(str) {
		        return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
		    }
		    /**
		     * If a block is tsv format
		     */
		    function isTSVFormat(block) {
		        // Simple method to find out if a block is tsv format
		        var firstLine = block.slice(0, block.indexOf('\n'));
		        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
		            return true;
		        }
		    }

		    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
		    /**
		     * @param {string} tsv
		     * @return {Array.<Object>}
		     */
		    function parseTSVContents(tsv) {
		        var tsvLines = tsv.split(/\n+/g);
		        var headers = trim(tsvLines.shift()).split(itemSplitRegex);

		        var categories = [];
		        var series = zrUtil.map(headers, function (header) {
		            return {
		                name: header,
		                data: []
		            };
		        });
		        for (var i = 0; i < tsvLines.length; i++) {
		            var items = trim(tsvLines[i]).split(itemSplitRegex);
		            categories.push(items.shift());
		            for (var j = 0; j < items.length; j++) {
		                series[j] && (series[j].data[i] = items[j]);
		            }
		        }
		        return {
		            series: series,
		            categories: categories
		        };
		    }

		    /**
		     * @param {string} str
		     * @return {Array.<Object>}
		     * @inner
		     */
		    function parseListContents(str) {
		        var lines = str.split(/\n+/g);
		        var seriesName = trim(lines.shift());

		        var data = [];
		        for (var i = 0; i < lines.length; i++) {
		            var items = trim(lines[i]).split(itemSplitRegex);
		            var name = '';
		            var value;
		            var hasName = false;
		            if (isNaN(items[0])) { // First item is name
		                hasName = true;
		                name = items[0];
		                items = items.slice(1);
		                data[i] = {
		                    name: name,
		                    value: []
		                };
		                value = data[i].value;
		            }
		            else {
		                value = data[i] = [];
		            }
		            for (var j = 0; j < items.length; j++) {
		                value.push(+items[j]);
		            }
		            if (value.length === 1) {
		                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);
		            }
		        }

		        return {
		            name: seriesName,
		            data: data
		        };
		    }

		    /**
		     * @param {string} str
		     * @param {Array.<Object>} blockMetaList
		     * @return {Object}
		     * @inner
		     */
		    function parseContents(str, blockMetaList) {
		        var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
		        var newOption = {
		            series: []
		        };
		        zrUtil.each(blocks, function (block, idx) {
		            if (isTSVFormat(block)) {
		                var result = parseTSVContents(block);
		                var blockMeta = blockMetaList[idx];
		                var axisKey = blockMeta.axisDim + 'Axis';

		                if (blockMeta) {
		                    newOption[axisKey] = newOption[axisKey] || [];
		                    newOption[axisKey][blockMeta.axisIndex] = {
		                        data: result.categories
		                    };
		                    newOption.series = newOption.series.concat(result.series);
		                }
		            }
		            else {
		                var result = parseListContents(block);
		                newOption.series.push(result);
		            }
		        });
		        return newOption;
		    }

		    /**
		     * @alias {module:echarts/component/toolbox/feature/DataView}
		     * @constructor
		     * @param {module:echarts/model/Model} model
		     */
		    function DataView(model) {

		        this._dom = null;

		        this.model = model;
		    }

		    DataView.defaultOption = {
		        show: true,
		        readOnly: false,
		        optionToContent: null,
		        contentToOption: null,

		        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
		        title: '数据视图',
		        lang: ['数据视图', '关闭', '刷新'],
		        backgroundColor: '#fff',
		        textColor: '#000',
		        textareaColor: '#fff',
		        textareaBorderColor: '#333',
		        buttonColor: '#c23531',
		        buttonTextColor: '#fff'
		    };

		    DataView.prototype.onclick = function (ecModel, api) {
		        var container = api.getDom();
		        var model = this.model;
		        if (this._dom) {
		            container.removeChild(this._dom);
		        }
		        var root = document.createElement('div');
		        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
		        root.style.backgroundColor = model.get('backgroundColor') || '#fff';

		        // Create elements
		        var header = document.createElement('h4');
		        var lang = model.get('lang') || [];
		        header.innerHTML = lang[0] || model.get('title');
		        header.style.cssText = 'margin: 10px 20px;';
		        header.style.color = model.get('textColor');

		        var viewMain = document.createElement('div');
		        var textarea = document.createElement('textarea');
		        viewMain.style.cssText = 'display:block;width:100%;overflow:hidden;';

		        var optionToContent = model.get('optionToContent');
		        var contentToOption = model.get('contentToOption');
		        var result = getContentFromModel(ecModel);
		        if (typeof optionToContent === 'function') {
		            var htmlOrDom = optionToContent(api.getOption());
		            if (typeof htmlOrDom === 'string') {
		                viewMain.innerHTML = htmlOrDom;
		            }
		            else if (zrUtil.isDom(htmlOrDom)) {
		                viewMain.appendChild(htmlOrDom);
		            }
		        }
		        else {
		            // Use default textarea
		            viewMain.appendChild(textarea);
		            textarea.readOnly = model.get('readOnly');
		            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';
		            textarea.style.color = model.get('textColor');
		            textarea.style.borderColor = model.get('textareaBorderColor');
		            textarea.style.backgroundColor = model.get('textareaColor');
		            textarea.value = result.value;
		        }

		        var blockMetaList = result.meta;

		        var buttonContainer = document.createElement('div');
		        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';

		        var buttonStyle = 'float:right;margin-right:20px;border:none;'
		            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
		        var closeButton = document.createElement('div');
		        var refreshButton = document.createElement('div');

		        buttonStyle += ';background-color:' + model.get('buttonColor');
		        buttonStyle += ';color:' + model.get('buttonTextColor');

		        var self = this;

		        function close() {
		            container.removeChild(root);
		            self._dom = null;
		        }
		        eventTool.addEventListener(closeButton, 'click', close);

		        eventTool.addEventListener(refreshButton, 'click', function () {
		            var newOption;
		            try {
		                if (typeof contentToOption === 'function') {
		                    newOption = contentToOption(viewMain, api.getOption());
		                }
		                else {
		                    newOption = parseContents(textarea.value, blockMetaList);
		                }
		            }
		            catch (e) {
		                close();
		                throw new Error('Data view format error ' + e);
		            }
		            if (newOption) {
		                api.dispatchAction({
		                    type: 'changeDataView',
		                    newOption: newOption
		                });
		            }

		            close();
		        });

		        closeButton.innerHTML = lang[1];
		        refreshButton.innerHTML = lang[2];
		        refreshButton.style.cssText = buttonStyle;
		        closeButton.style.cssText = buttonStyle;

		        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);
		        buttonContainer.appendChild(closeButton);

		        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea
		        eventTool.addEventListener(textarea, 'keydown', function (e) {
		            if ((e.keyCode || e.which) === 9) {
		                // get caret position/selection
		                var val = this.value;
		                var start = this.selectionStart;
		                var end = this.selectionEnd;

		                // set textarea value to: text before caret + tab + text after caret
		                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);

		                // put caret at right position again
		                this.selectionStart = this.selectionEnd = start + 1;

		                // prevent the focus lose
		                eventTool.stop(e);
		            }
		        });

		        root.appendChild(header);
		        root.appendChild(viewMain);
		        root.appendChild(buttonContainer);

		        viewMain.style.height = (container.clientHeight - 80) + 'px';

		        container.appendChild(root);
		        this._dom = root;
		    };

		    DataView.prototype.remove = function (ecModel, api) {
		        this._dom && api.getDom().removeChild(this._dom);
		    };

		    DataView.prototype.dispose = function (ecModel, api) {
		        this.remove(ecModel, api);
		    };

		    /**
		     * @inner
		     */
		    function tryMergeDataOption(newData, originalData) {
		        return zrUtil.map(newData, function (newVal, idx) {
		            var original = originalData && originalData[idx];
		            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
		                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
		                    newVal = newVal.value;
		                }
		                // Original data has option
		                return zrUtil.defaults({
		                    value: newVal
		                }, original);
		            }
		            else {
		                return newVal;
		            }
		        });
		    }

		    __webpack_require__(333).register('dataView', DataView);

		    __webpack_require__(1).registerAction({
		        type: 'changeDataView',
		        event: 'dataViewChanged',
		        update: 'prepareAndUpdate'
		    }, function (payload, ecModel) {
		        var newSeriesOptList = [];
		        zrUtil.each(payload.newOption.series, function (seriesOpt) {
		            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
		            if (!seriesModel) {
		                // New created series
		                // Geuss the series type
		                newSeriesOptList.push(zrUtil.extend({
		                    // Default is scatter
		                    type: 'scatter'
		                }, seriesOpt));
		            }
		            else {
		                var originalData = seriesModel.get('data');
		                newSeriesOptList.push({
		                    name: seriesOpt.name,
		                    data: tryMergeDataOption(seriesOpt.data, originalData)
		                });
		            }
		        });

		        ecModel.mergeOption(zrUtil.defaults({
		            series: newSeriesOptList
		        }, payload.newOption));
		    });

		    module.exports = DataView;


	/***/ },
	/* 339 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var zrUtil = __webpack_require__(3);
		    var numberUtil = __webpack_require__(7);
		    var SelectController = __webpack_require__(225);
		    var BoundingRect = __webpack_require__(15);
		    var Group = __webpack_require__(29);
		    var history = __webpack_require__(340);
		    var interactionMutex = __webpack_require__(160);

		    var each = zrUtil.each;
		    var asc = numberUtil.asc;

		    // Use dataZoomSelect
		    __webpack_require__(341);

		    // Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId
		    var DATA_ZOOM_ID_BASE = '\0_ec_\0toolbox-dataZoom_';

		    function DataZoom(model) {
		        this.model = model;

		        /**
		         * @private
		         * @type {module:zrender/container/Group}
		         */
		        this._controllerGroup;

		        /**
		         * @private
		         * @type {module:echarts/component/helper/SelectController}
		         */
		        this._controller;

		        /**
		         * Is zoom active.
		         * @private
		         * @type {Object}
		         */
		        this._isZoomActive;
		    }

		    DataZoom.defaultOption = {
		        show: true,
		        // Icon group
		        icon: {
		            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
		            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
		        },
		        title: {
		            zoom: '区域缩放',
		            back: '区域缩放还原'
		        }
		    };

		    var proto = DataZoom.prototype;

		    proto.render = function (featureModel, ecModel, api) {
		        updateBackBtnStatus(featureModel, ecModel);
		    };

		    proto.onclick = function (ecModel, api, type) {
		        var controllerGroup = this._controllerGroup;
		        if (!this._controllerGroup) {
		            controllerGroup = this._controllerGroup = new Group();
		            api.getZr().add(controllerGroup);
		        }

		        handlers[type].call(this, controllerGroup, this.model, ecModel, api);
		    };

		    proto.remove = function (ecModel, api) {
		        this._disposeController();
		        interactionMutex.release('globalPan', api.getZr());
		    };

		    proto.dispose = function (ecModel, api) {
		        var zr = api.getZr();
		        interactionMutex.release('globalPan', zr);
		        this._disposeController();
		        this._controllerGroup && zr.remove(this._controllerGroup);
		    };

		    /**
		     * @private
		     */
		    var handlers = {

		        zoom: function (controllerGroup, featureModel, ecModel, api) {
		            var isZoomActive = this._isZoomActive = !this._isZoomActive;
		            var zr = api.getZr();

		            interactionMutex[isZoomActive ? 'take' : 'release']('globalPan', zr);

		            featureModel.setIconStatus('zoom', isZoomActive ? 'emphasis' : 'normal');

		            if (isZoomActive) {
		                zr.setDefaultCursorStyle('crosshair');

		                this._createController(
		                    controllerGroup, featureModel, ecModel, api
		                );
		            }
		            else {
		                zr.setDefaultCursorStyle('default');
		                this._disposeController();
		            }
		        },

		        back: function (controllerGroup, featureModel, ecModel, api) {
		            this._dispatchAction(history.pop(ecModel), api);
		        }
		    };

		    /**
		     * @private
		     */
		    proto._createController = function (
		        controllerGroup, featureModel, ecModel, api
		    ) {
		        var controller = this._controller = new SelectController(
		            'rect',
		            api.getZr(),
		            {
		                // FIXME
		                lineWidth: 3,
		                stroke: '#333',
		                fill: 'rgba(0,0,0,0.2)'
		            }
		        );
		        controller.on(
		            'selectEnd',
		            zrUtil.bind(
		                this._onSelected, this, controller,
		                featureModel, ecModel, api
		            )
		        );
		        controller.enable(controllerGroup, false);
		    };

		    proto._disposeController = function () {
		        var controller = this._controller;
		        if (controller) {
		            controller.off('selected');
		            controller.dispose();
		        }
		    };

		    function prepareCoordInfo(grid, ecModel) {
		        // Default use the first axis.
		        // FIXME
		        var coordInfo = [
		            {axisModel: grid.getAxis('x').model, axisIndex: 0}, // x
		            {axisModel: grid.getAxis('y').model, axisIndex: 0}  // y
		        ];
		        coordInfo.grid = grid;

		        ecModel.eachComponent(
		            {mainType: 'dataZoom', subType: 'select'},
		            function (dzModel, dataZoomIndex) {
		                if (isTheAxis('xAxis', coordInfo[0].axisModel, dzModel, ecModel)) {
		                    coordInfo[0].dataZoomModel = dzModel;
		                }
		                if (isTheAxis('yAxis', coordInfo[1].axisModel, dzModel, ecModel)) {
		                    coordInfo[1].dataZoomModel = dzModel;
		                }
		            }
		        );

		        return coordInfo;
		    }

		    function isTheAxis(axisName, axisModel, dataZoomModel, ecModel) {
		        var axisIndex = dataZoomModel.get(axisName + 'Index');
		        return axisIndex != null
		            && ecModel.getComponent(axisName, axisIndex) === axisModel;
		    }

		    /**
		     * @private
		     */
		    proto._onSelected = function (controller, featureModel, ecModel, api, selRanges) {
		        if (!selRanges.length) {
		            return;
		        }
		        var selRange = selRanges[0];

		        controller.update(); // remove cover

		        var snapshot = {};

		        // FIXME
		        // polar

		        ecModel.eachComponent('grid', function (gridModel, gridIndex) {
		            var grid = gridModel.coordinateSystem;
		            var coordInfo = prepareCoordInfo(grid, ecModel);
		            var selDataRange = pointToDataInCartesian(selRange, coordInfo);

		            if (selDataRange) {
		                var xBatchItem = scaleCartesianAxis(selDataRange, coordInfo, 0, 'x');
		                var yBatchItem = scaleCartesianAxis(selDataRange, coordInfo, 1, 'y');

		                xBatchItem && (snapshot[xBatchItem.dataZoomId] = xBatchItem);
		                yBatchItem && (snapshot[yBatchItem.dataZoomId] = yBatchItem);
		            }
		        }, this);

		        history.push(ecModel, snapshot);

		        this._dispatchAction(snapshot, api);
		    };

		    function pointToDataInCartesian(selRange, coordInfo) {
		        var grid = coordInfo.grid;

		        var selRect = new BoundingRect(
		            selRange[0][0],
		            selRange[1][0],
		            selRange[0][1] - selRange[0][0],
		            selRange[1][1] - selRange[1][0]
		        );
		        if (!selRect.intersect(grid.getRect())) {
		            return;
		        }
		        var cartesian = grid.getCartesian(coordInfo[0].axisIndex, coordInfo[1].axisIndex);
		        var dataLeftTop = cartesian.pointToData([selRange[0][0], selRange[1][0]], true);
		        var dataRightBottom = cartesian.pointToData([selRange[0][1], selRange[1][1]], true);

		        return [
		            asc([dataLeftTop[0], dataRightBottom[0]]), // x, using asc to handle inverse
		            asc([dataLeftTop[1], dataRightBottom[1]]) // y, using asc to handle inverse
		        ];
		    }

		    function scaleCartesianAxis(selDataRange, coordInfo, dimIdx, dimName) {
		        var dimCoordInfo = coordInfo[dimIdx];
		        var dataZoomModel = dimCoordInfo.dataZoomModel;

		        if (dataZoomModel) {
		            return {
		                dataZoomId: dataZoomModel.id,
		                startValue: selDataRange[dimIdx][0],
		                endValue: selDataRange[dimIdx][1]
		            };
		        }
		    }

		    /**
		     * @private
		     */
		    proto._dispatchAction = function (snapshot, api) {
		        var batch = [];

		        each(snapshot, function (batchItem) {
		            batch.push(batchItem);
		        });

		        batch.length && api.dispatchAction({
		            type: 'dataZoom',
		            from: this.uid,
		            batch: zrUtil.clone(batch, true)
		        });
		    };

		    function updateBackBtnStatus(featureModel, ecModel) {
		        featureModel.setIconStatus(
		            'back',
		            history.count(ecModel) > 1 ? 'emphasis' : 'normal'
		        );
		    }


		    __webpack_require__(333).register('dataZoom', DataZoom);


		    // Create special dataZoom option for select
		    __webpack_require__(1).registerPreprocessor(function (option) {
		        if (!option) {
		            return;
		        }

		        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);
		        if (!zrUtil.isArray(dataZoomOpts)) {
		            dataZoomOpts = [dataZoomOpts];
		        }

		        var toolboxOpt = option.toolbox;
		        if (toolboxOpt) {
		            // Assume there is only one toolbox
		            if (zrUtil.isArray(toolboxOpt)) {
		                toolboxOpt = toolboxOpt[0];
		            }

		            if (toolboxOpt && toolboxOpt.feature) {
		                var dataZoomOpt = toolboxOpt.feature.dataZoom;
		                addForAxis('xAxis', dataZoomOpt);
		                addForAxis('yAxis', dataZoomOpt);
		            }
		        }

		        function addForAxis(axisName, dataZoomOpt) {
		            if (!dataZoomOpt) {
		                return;
		            }

		            var axisIndicesName = axisName + 'Index';
		            var givenAxisIndices = dataZoomOpt[axisIndicesName];
		            if (givenAxisIndices != null && !zrUtil.isArray(givenAxisIndices)) {
		                givenAxisIndices = givenAxisIndices === false ? [] : [givenAxisIndices];
		            }

		            forEachComponent(axisName, function (axisOpt, axisIndex) {
		                if (givenAxisIndices != null
		                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1
		                ) {
		                    return;
		                }
		                var newOpt = {
		                    type: 'select',
		                    $fromToolbox: true,
		                    // Id for merge mapping.
		                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex
		                };
		                // FIXME
		                // Only support one axis now.
		                newOpt[axisIndicesName] = axisIndex;
		                dataZoomOpts.push(newOpt);
		            });
		        }

		        function forEachComponent(mainType, cb) {
		            var opts = option[mainType];
		            if (!zrUtil.isArray(opts)) {
		                opts = opts ? [opts] : [];
		            }
		            each(opts, cb);
		        }
		    });

		    module.exports = DataZoom;


	/***/ },
	/* 340 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file History manager.
		 */


		    var zrUtil = __webpack_require__(3);
		    var each = zrUtil.each;

		    var ATTR = '\0_ec_hist_store';

		    var history = {

		        /**
		         * @public
		         * @param {module:echarts/model/Global} ecModel
		         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}
		         */
		        push: function (ecModel, newSnapshot) {
		            var store = giveStore(ecModel);

		            // If previous dataZoom can not be found,
		            // complete an range with current range.
		            each(newSnapshot, function (batchItem, dataZoomId) {
		                var i = store.length - 1;
		                for (; i >= 0; i--) {
		                    var snapshot = store[i];
		                    if (snapshot[dataZoomId]) {
		                        break;
		                    }
		                }
		                if (i < 0) {
		                    // No origin range set, create one by current range.
		                    var dataZoomModel = ecModel.queryComponents(
		                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}
		                    )[0];
		                    if (dataZoomModel) {
		                        var percentRange = dataZoomModel.getPercentRange();
		                        store[0][dataZoomId] = {
		                            dataZoomId: dataZoomId,
		                            start: percentRange[0],
		                            end: percentRange[1]
		                        };
		                    }
		                }
		            });

		            store.push(newSnapshot);
		        },

		        /**
		         * @public
		         * @param {module:echarts/model/Global} ecModel
		         * @return {Object} snapshot
		         */
		        pop: function (ecModel) {
		            var store = giveStore(ecModel);
		            var head = store[store.length - 1];
		            store.length > 1 && store.pop();

		            // Find top for all dataZoom.
		            var snapshot = {};
		            each(head, function (batchItem, dataZoomId) {
		                for (var i = store.length - 1; i >= 0; i--) {
		                    var batchItem = store[i][dataZoomId];
		                    if (batchItem) {
		                        snapshot[dataZoomId] = batchItem;
		                        break;
		                    }
		                }
		            });

		            return snapshot;
		        },

		        /**
		         * @public
		         */
		        clear: function (ecModel) {
		            ecModel[ATTR] = null;
		        },

		        /**
		         * @public
		         * @param {module:echarts/model/Global} ecModel
		         * @return {number} records. always >= 1.
		         */
		        count: function (ecModel) {
		            return giveStore(ecModel).length;
		        }

		    };

		    /**
		     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
		     * History length of each dataZoom may be different.
		     * this._history[0] is used to store origin range.
		     * @type {Array.<Object>}
		     */
		    function giveStore(ecModel) {
		        var store = ecModel[ATTR];
		        if (!store) {
		            store = ecModel[ATTR] = [{}];
		        }
		        return store;
		    }

		    module.exports = history;



	/***/ },
	/* 341 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * DataZoom component entry
		 */


		    __webpack_require__(287);

		    __webpack_require__(288);
		    __webpack_require__(290);

		    __webpack_require__(342);
		    __webpack_require__(343);

		    __webpack_require__(298);
		    __webpack_require__(299);



	/***/ },
	/* 342 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @file Data zoom model
		 */


		    var DataZoomModel = __webpack_require__(288);

		    module.exports = DataZoomModel.extend({

		        type: 'dataZoom.select'

		    });



	/***/ },
	/* 343 */
	/***/ function(module, exports, __webpack_require__) {

		

		    module.exports = __webpack_require__(290).extend({

		        type: 'dataZoom.select'

		    });



	/***/ },
	/* 344 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';


		    var history = __webpack_require__(340);

		    function Restore(model) {
		        this.model = model;
		    }

		    Restore.defaultOption = {
		        show: true,
		        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
		        title: '还原'
		    };

		    var proto = Restore.prototype;

		    proto.onclick = function (ecModel, api, type) {
		        history.clear(ecModel);

		        api.dispatchAction({
		            type: 'restore',
		            from: this.uid
		        });
		    };


		    __webpack_require__(333).register('restore', Restore);


		    __webpack_require__(1).registerAction(
		        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},
		        function (payload, ecModel) {
		            ecModel.resetOption('recreate');
		        }
		    );

		    module.exports = Restore;


	/***/ },
	/* 345 */
	/***/ function(module, exports, __webpack_require__) {

		
		    __webpack_require__(346);
		    __webpack_require__(77).registerPainter('vml', __webpack_require__(348));


	/***/ },
	/* 346 */
	/***/ function(module, exports, __webpack_require__) {

		// http://www.w3.org/TR/NOTE-VML
		// TODO Use proxy like svg instead of overwrite brush methods


		if (!__webpack_require__(78).canvasSupported) {
		    var vec2 = __webpack_require__(16);
		    var BoundingRect = __webpack_require__(15);
		    var CMD = __webpack_require__(48).CMD;
		    var colorTool = __webpack_require__(38);
		    var textContain = __webpack_require__(14);
		    var RectText = __webpack_require__(47);
		    var Displayable = __webpack_require__(45);
		    var ZImage = __webpack_require__(59);
		    var Text = __webpack_require__(62);
		    var Path = __webpack_require__(44);

		    var Gradient = __webpack_require__(4);

		    var vmlCore = __webpack_require__(347);

		    var round = Math.round;
		    var sqrt = Math.sqrt;
		    var abs = Math.abs;
		    var cos = Math.cos;
		    var sin = Math.sin;
		    var mathMax = Math.max;

		    var applyTransform = vec2.applyTransform;

		    var comma = ',';
		    var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';

		    var Z = 21600;
		    var Z2 = Z / 2;

		    var ZLEVEL_BASE = 100000;
		    var Z_BASE = 1000;

		    var initRootElStyle = function (el) {
		        el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
		        el.coordsize = Z + ','  + Z;
		        el.coordorigin = '0,0';
		    };

		    var encodeHtmlAttribute = function (s) {
		        return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
		    };

		    var rgb2Str = function (r, g, b) {
		        return 'rgb(' + [r, g, b].join(',') + ')';
		    };

		    var append = function (parent, child) {
		        if (child && parent && child.parentNode !== parent) {
		            parent.appendChild(child);
		        }
		    };

		    var remove = function (parent, child) {
		        if (child && parent && child.parentNode === parent) {
		            parent.removeChild(child);
		        }
		    };

		    var getZIndex = function (zlevel, z, z2) {
		        // z 的取值范围为 [0, 1000]
		        return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
		    };

		    var parsePercent = function (value, maxValue) {
		        if (typeof value === 'string') {
		            if (value.lastIndexOf('%') >= 0) {
		                return parseFloat(value) / 100 * maxValue;
		            }
		            return parseFloat(value);
		        }
		        return value;
		    };

		    /***************************************************
		     * PATH
		     **************************************************/

		    var setColorAndOpacity = function (el, color, opacity) {
		        var colorArr = colorTool.parse(color);
		        opacity = +opacity;
		        if (isNaN(opacity)) {
		            opacity = 1;
		        }
		        if (colorArr) {
		            el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
		            el.opacity = opacity * colorArr[3];
		        }
		    };

		    var getColorAndAlpha = function (color) {
		        var colorArr = colorTool.parse(color);
		        return [
		            rgb2Str(colorArr[0], colorArr[1], colorArr[2]),
		            colorArr[3]
		        ];
		    };

		    var updateFillNode = function (el, style, zrEl) {
		        // TODO pattern
		        var fill = style.fill;
		        if (fill != null) {
		            // Modified from excanvas
		            if (fill instanceof Gradient) {
		                var gradientType;
		                var angle = 0;
		                var focus = [0, 0];
		                // additional offset
		                var shift = 0;
		                // scale factor for offset
		                var expansion = 1;
		                var rect = zrEl.getBoundingRect();
		                var rectWidth = rect.width;
		                var rectHeight = rect.height;
		                if (fill.type === 'linear') {
		                    gradientType = 'gradient';
		                    var transform = zrEl.transform;
		                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
		                    var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];
		                    if (transform) {
		                        applyTransform(p0, p0, transform);
		                        applyTransform(p1, p1, transform);
		                    }
		                    var dx = p1[0] - p0[0];
		                    var dy = p1[1] - p0[1];
		                    angle = Math.atan2(dx, dy) * 180 / Math.PI;
		                    // The angle should be a non-negative number.
		                    if (angle < 0) {
		                        angle += 360;
		                    }

		                    // Very small angles produce an unexpected result because they are
		                    // converted to a scientific notation string.
		                    if (angle < 1e-6) {
		                        angle = 0;
		                    }
		                }
		                else {
		                    gradientType = 'gradientradial';
		                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
		                    var transform = zrEl.transform;
		                    var scale = zrEl.scale;
		                    var width = rectWidth;
		                    var height = rectHeight;
		                    focus = [
		                        // Percent in bounding rect
		                        (p0[0] - rect.x) / width,
		                        (p0[1] - rect.y) / height
		                    ];
		                    if (transform) {
		                        applyTransform(p0, p0, transform);
		                    }

		                    width /= scale[0] * Z;
		                    height /= scale[1] * Z;
		                    var dimension = mathMax(width, height);
		                    shift = 2 * 0 / dimension;
		                    expansion = 2 * fill.r / dimension - shift;
		                }

		                // We need to sort the color stops in ascending order by offset,
		                // otherwise IE won't interpret it correctly.
		                var stops = fill.colorStops.slice();
		                stops.sort(function(cs1, cs2) {
		                    return cs1.offset - cs2.offset;
		                });

		                var length = stops.length;
		                // Color and alpha list of first and last stop
		                var colorAndAlphaList = [];
		                var colors = [];
		                for (var i = 0; i < length; i++) {
		                    var stop = stops[i];
		                    var colorAndAlpha = getColorAndAlpha(stop.color);
		                    colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);
		                    if (i === 0 || i === length - 1) {
		                        colorAndAlphaList.push(colorAndAlpha);
		                    }
		                }

		                if (length >= 2) {
		                    var color1 = colorAndAlphaList[0][0];
		                    var color2 = colorAndAlphaList[1][0];
		                    var opacity1 = colorAndAlphaList[0][1] * style.opacity;
		                    var opacity2 = colorAndAlphaList[1][1] * style.opacity;

		                    el.type = gradientType;
		                    el.method = 'none';
		                    el.focus = '100%';
		                    el.angle = angle;
		                    el.color = color1;
		                    el.color2 = color2;
		                    el.colors = colors.join(',');
		                    // When colors attribute is used, the meanings of opacity and o:opacity2
		                    // are reversed.
		                    el.opacity = opacity2;
		                    // FIXME g_o_:opacity ?
		                    el.opacity2 = opacity1;
		                }
		                if (gradientType === 'radial') {
		                    el.focusposition = focus.join(',');
		                }
		            }
		            else {
		                // FIXME Change from Gradient fill to color fill
		                setColorAndOpacity(el, fill, style.opacity);
		            }
		        }
		    };

		    var updateStrokeNode = function (el, style) {
		        if (style.lineJoin != null) {
		            el.joinstyle = style.lineJoin;
		        }
		        if (style.miterLimit != null) {
		            el.miterlimit = style.miterLimit * Z;
		        }
		        if (style.lineCap != null) {
		            el.endcap = style.lineCap;
		        }
		        if (style.lineDash != null) {
		            el.dashstyle = style.lineDash.join(' ');
		        }
		        if (style.stroke != null && !(style.stroke instanceof Gradient)) {
		            setColorAndOpacity(el, style.stroke, style.opacity);
		        }
		    };

		    var updateFillAndStroke = function (vmlEl, type, style, zrEl) {
		        var isFill = type == 'fill';
		        var el = vmlEl.getElementsByTagName(type)[0];
		        // Stroke must have lineWidth
		        if (style[type] != null && style[type] !== 'none' && (isFill || (!isFill && style.lineWidth))) {
		            vmlEl[isFill ? 'filled' : 'stroked'] = 'true';
		            // FIXME Remove before updating, or set `colors` will throw error
		            if (style[type] instanceof Gradient) {
		                remove(vmlEl, el);
		            }
		            if (!el) {
		                el = vmlCore.createNode(type);
		            }

		            isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
		            append(vmlEl, el);
		        }
		        else {
		            vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
		            remove(vmlEl, el);
		        }
		    };

		    var points = [[], [], []];
		    var pathDataToString = function (data, m) {
		        var M = CMD.M;
		        var C = CMD.C;
		        var L = CMD.L;
		        var A = CMD.A;
		        var Q = CMD.Q;

		        var str = [];
		        var nPoint;
		        var cmdStr;
		        var cmd;
		        var i;
		        var xi;
		        var yi;
		        for (i = 0; i < data.length;) {
		            cmd = data[i++];
		            cmdStr = '';
		            nPoint = 0;
		            switch (cmd) {
		                case M:
		                    cmdStr = ' m ';
		                    nPoint = 1;
		                    xi = data[i++];
		                    yi = data[i++];
		                    points[0][0] = xi;
		                    points[0][1] = yi;
		                    break;
		                case L:
		                    cmdStr = ' l ';
		                    nPoint = 1;
		                    xi = data[i++];
		                    yi = data[i++];
		                    points[0][0] = xi;
		                    points[0][1] = yi;
		                    break;
		                case Q:
		                case C:
		                    cmdStr = ' c ';
		                    nPoint = 3;
		                    var x1 = data[i++];
		                    var y1 = data[i++];
		                    var x2 = data[i++];
		                    var y2 = data[i++];
		                    var x3;
		                    var y3;
		                    if (cmd === Q) {
		                        // Convert quadratic to cubic using degree elevation
		                        x3 = x2;
		                        y3 = y2;
		                        x2 = (x2 + 2 * x1) / 3;
		                        y2 = (y2 + 2 * y1) / 3;
		                        x1 = (xi + 2 * x1) / 3;
		                        y1 = (yi + 2 * y1) / 3;
		                    }
		                    else {
		                        x3 = data[i++];
		                        y3 = data[i++];
		                    }
		                    points[0][0] = x1;
		                    points[0][1] = y1;
		                    points[1][0] = x2;
		                    points[1][1] = y2;
		                    points[2][0] = x3;
		                    points[2][1] = y3;

		                    xi = x3;
		                    yi = y3;
		                    break;
		                case A:
		                    var x = 0;
		                    var y = 0;
		                    var sx = 1;
		                    var sy = 1;
		                    var angle = 0;
		                    if (m) {
		                        // Extract SRT from matrix
		                        x = m[4];
		                        y = m[5];
		                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);
		                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);
		                        angle = Math.atan2(-m[1] / sy, m[0] / sx);
		                    }

		                    var cx = data[i++];
		                    var cy = data[i++];
		                    var rx = data[i++];
		                    var ry = data[i++];
		                    var startAngle = data[i++] + angle;
		                    var endAngle = data[i++] + startAngle + angle;
		                    // FIXME
		                    // var psi = data[i++];
		                    i++;
		                    var clockwise = data[i++];

		                    var x0 = cx + cos(startAngle) * rx;
		                    var y0 = cy + sin(startAngle) * ry;

		                    var x1 = cx + cos(endAngle) * rx;
		                    var y1 = cy + sin(endAngle) * ry;

		                    var type = clockwise ? ' wa ' : ' at ';
		                    // IE won't render arches drawn counter clockwise if x0 == x1.
		                    if (Math.abs(x0 - x1) < 1e-10 && clockwise) {
		                        // Offset x0 by 1/80 of a pixel. Use something
		                        // that can be represented in binary
		                        x0 += 270 / Z;
		                    }
		                    str.push(
		                        type,
		                        round(((cx - rx) * sx + x) * Z - Z2), comma,
		                        round(((cy - ry) * sy + y) * Z - Z2), comma,
		                        round(((cx + rx) * sx + x) * Z - Z2), comma,
		                        round(((cy + ry) * sy + y) * Z - Z2), comma,
		                        round((x0 * sx + x) * Z - Z2), comma,
		                        round((y0 * sy + y) * Z - Z2), comma,
		                        round((x1 * sx + x) * Z - Z2), comma,
		                        round((y1 * sy + y) * Z - Z2)
		                    );

		                    xi = x1;
		                    yi = y1;
		                    break;
		                case CMD.R:
		                    var p0 = points[0];
		                    var p1 = points[1];
		                    // x0, y0
		                    p0[0] = data[i++];
		                    p0[1] = data[i++];
		                    // x1, y1
		                    p1[0] = p0[0] + data[i++];
		                    p1[1] = p0[1] + data[i++];

		                    if (m) {
		                        applyTransform(p0, p0, m);
		                        applyTransform(p1, p1, m);
		                    }

		                    p0[0] = round(p0[0] * Z - Z2);
		                    p1[0] = round(p1[0] * Z - Z2);
		                    p0[1] = round(p0[1] * Z - Z2);
		                    p1[1] = round(p1[1] * Z - Z2);
		                    str.push(
		                        // x0, y0
		                        ' m ', p0[0], comma, p0[1],
		                        // x1, y0
		                        ' l ', p1[0], comma, p0[1],
		                        // x1, y1
		                        ' l ', p1[0], comma, p1[1],
		                        // x0, y1
		                        ' l ', p0[0], comma, p1[1]
		                    );
		                    break;
		                case CMD.Z:
		                    // FIXME Update xi, yi
		                    str.push(' x ');
		            }

		            if (nPoint > 0) {
		                str.push(cmdStr);
		                for (var k = 0; k < nPoint; k++) {
		                    var p = points[k];

		                    m && applyTransform(p, p, m);
		                    // 不 round 会非常慢
		                    str.push(
		                        round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2),
		                        k < nPoint - 1 ? comma : ''
		                    );
		                }
		            }
		        }
		        return str.join('');
		    };

		    // Rewrite the original path method
		    Path.prototype.brushVML = function (vmlRoot) {
		        var style = this.style;

		        var vmlEl = this._vmlEl;
		        if (!vmlEl) {
		            vmlEl = vmlCore.createNode('shape');
		            initRootElStyle(vmlEl);

		            this._vmlEl = vmlEl;
		        }

		        updateFillAndStroke(vmlEl, 'fill', style, this);
		        updateFillAndStroke(vmlEl, 'stroke', style, this);

		        var m = this.transform;
		        var needTransform = m != null;
		        var strokeEl = vmlEl.getElementsByTagName('stroke')[0];
		        if (strokeEl) {
		            var lineWidth = style.lineWidth;
		            // Get the line scale.
		            // Determinant of this.m_ means how much the area is enlarged by the
		            // transformation. So its square root can be used as a scale factor
		            // for width.
		            if (needTransform && !style.strokeNoScale) {
		                var det = m[0] * m[3] - m[1] * m[2];
		                lineWidth *= sqrt(abs(det));
		            }
		            strokeEl.weight = lineWidth + 'px';
		        }

		        var path = this.path;
		        if (this.__dirtyPath) {
		            path.beginPath();
		            this.buildPath(path, this.shape);
		            this.__dirtyPath = false;
		        }

		        vmlEl.path = pathDataToString(path.data, this.transform);

		        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

		        // Append to root
		        append(vmlRoot, vmlEl);

		        // Text
		        if (style.text) {
		            this.drawRectText(vmlRoot, this.getBoundingRect());
		        }
		    };

		    Path.prototype.onRemove = function (vmlRoot) {
		        remove(vmlRoot, this._vmlEl);
		        this.removeRectText(vmlRoot);
		    };

		    Path.prototype.onAdd = function (vmlRoot) {
		        append(vmlRoot, this._vmlEl);
		        this.appendRectText(vmlRoot);
		    };

		    /***************************************************
		     * IMAGE
		     **************************************************/
		    var isImage = function (img) {
		        // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
		        return (typeof img === 'object') && img.tagName && img.tagName.toUpperCase() === 'IMG';
		        // return img instanceof Image;
		    };

		    // Rewrite the original path method
		    ZImage.prototype.brushVML = function (vmlRoot) {
		        var style = this.style;
		        var image = style.image;

		        // Image original width, height
		        var ow;
		        var oh;

		        if (isImage(image)) {
		            var src = image.src;
		            if (src === this._imageSrc) {
		                ow = this._imageWidth;
		                oh = this._imageHeight;
		            }
		            else {
		                var imageRuntimeStyle = image.runtimeStyle;
		                var oldRuntimeWidth = imageRuntimeStyle.width;
		                var oldRuntimeHeight = imageRuntimeStyle.height;
		                imageRuntimeStyle.width = 'auto';
		                imageRuntimeStyle.height = 'auto';

		                // get the original size
		                ow = image.width;
		                oh = image.height;

		                // and remove overides
		                imageRuntimeStyle.width = oldRuntimeWidth;
		                imageRuntimeStyle.height = oldRuntimeHeight;

		                // Caching image original width, height and src
		                this._imageSrc = src;
		                this._imageWidth = ow;
		                this._imageHeight = oh;
		            }
		            image = src;
		        }
		        else {
		            if (image === this._imageSrc) {
		                ow = this._imageWidth;
		                oh = this._imageHeight;
		            }
		        }
		        if (!image) {
		            return;
		        }

		        var x = style.x || 0;
		        var y = style.y || 0;

		        var dw = style.width;
		        var dh = style.height;

		        var sw = style.sWidth;
		        var sh = style.sHeight;
		        var sx = style.sx || 0;
		        var sy = style.sy || 0;

		        var hasCrop = sw && sh;

		        var vmlEl = this._vmlEl;
		        if (!vmlEl) {
		            // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
		            // vmlEl = vmlCore.createNode('group');
		            vmlEl = vmlCore.doc.createElement('div');
		            initRootElStyle(vmlEl);

		            this._vmlEl = vmlEl;
		        }

		        var vmlElStyle = vmlEl.style;
		        var hasRotation = false;
		        var m;
		        var scaleX = 1;
		        var scaleY = 1;
		        if (this.transform) {
		            m = this.transform;
		            scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
		            scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);

		            hasRotation = m[1] || m[2];
		        }
		        if (hasRotation) {
		            // If filters are necessary (rotation exists), create them
		            // filters are bog-slow, so only create them if abbsolutely necessary
		            // The following check doesn't account for skews (which don't exist
		            // in the canvas spec (yet) anyway.
		            // From excanvas
		            var p0 = [x, y];
		            var p1 = [x + dw, y];
		            var p2 = [x, y + dh];
		            var p3 = [x + dw, y + dh];
		            applyTransform(p0, p0, m);
		            applyTransform(p1, p1, m);
		            applyTransform(p2, p2, m);
		            applyTransform(p3, p3, m);

		            var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
		            var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);

		            var transformFilter = [];
		            transformFilter.push('M11=', m[0] / scaleX, comma,
		                        'M12=', m[2] / scaleY, comma,
		                        'M21=', m[1] / scaleX, comma,
		                        'M22=', m[3] / scaleY, comma,
		                        'Dx=', round(x * scaleX + m[4]), comma,
		                        'Dy=', round(y * scaleY + m[5]));

		            vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';
		            // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用
		            vmlElStyle.filter = imageTransformPrefix + '.Matrix('
		                + transformFilter.join('') + ', SizingMethod=clip)';

		        }
		        else {
		            if (m) {
		                x = x * scaleX + m[4];
		                y = y * scaleY + m[5];
		            }
		            vmlElStyle.filter = '';
		            vmlElStyle.left = round(x) + 'px';
		            vmlElStyle.top = round(y) + 'px';
		        }

		        var imageEl = this._imageEl;
		        var cropEl = this._cropEl;

		        if (! imageEl) {
		            imageEl = vmlCore.doc.createElement('div');
		            this._imageEl = imageEl;
		        }
		        var imageELStyle = imageEl.style;
		        if (hasCrop) {
		            // Needs know image original width and height
		            if (! (ow && oh)) {
		                var tmpImage = new Image();
		                var self = this;
		                tmpImage.onload = function () {
		                    tmpImage.onload = null;
		                    ow = tmpImage.width;
		                    oh = tmpImage.height;
		                    // Adjust image width and height to fit the ratio destinationSize / sourceSize
		                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
		                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';

		                    // Caching image original width, height and src
		                    self._imageWidth = ow;
		                    self._imageHeight = oh;
		                    self._imageSrc = image;
		                };
		                tmpImage.src = image;
		            }
		            else {
		                imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
		                imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
		            }

		            if (! cropEl) {
		                cropEl = vmlCore.doc.createElement('div');
		                cropEl.style.overflow = 'hidden';
		                this._cropEl = cropEl;
		            }
		            var cropElStyle = cropEl.style;
		            cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
		            cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
		            cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx='
		                    + (-sx * dw / sw * scaleX) + ',Dy=' + (-sy * dh / sh * scaleY) + ')';

		            if (! cropEl.parentNode) {
		                vmlEl.appendChild(cropEl);
		            }
		            if (imageEl.parentNode != cropEl) {
		                cropEl.appendChild(imageEl);
		            }
		        }
		        else {
		            imageELStyle.width = round(scaleX * dw) + 'px';
		            imageELStyle.height = round(scaleY * dh) + 'px';

		            vmlEl.appendChild(imageEl);

		            if (cropEl && cropEl.parentNode) {
		                vmlEl.removeChild(cropEl);
		                this._cropEl = null;
		            }
		        }

		        var filterStr = '';
		        var alpha = style.opacity;
		        if (alpha < 1) {
		            filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
		        }
		        filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';

		        imageELStyle.filter = filterStr;

		        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

		        // Append to root
		        append(vmlRoot, vmlEl);

		        // Text
		        if (style.text) {
		            this.drawRectText(vmlRoot, this.getBoundingRect());
		        }
		    };

		    ZImage.prototype.onRemove = function (vmlRoot) {
		        remove(vmlRoot, this._vmlEl);

		        this._vmlEl = null;
		        this._cropEl = null;
		        this._imageEl = null;

		        this.removeRectText(vmlRoot);
		    };

		    ZImage.prototype.onAdd = function (vmlRoot) {
		        append(vmlRoot, this._vmlEl);
		        this.appendRectText(vmlRoot);
		    };


		    /***************************************************
		     * TEXT
		     **************************************************/

		    var DEFAULT_STYLE_NORMAL = 'normal';

		    var fontStyleCache = {};
		    var fontStyleCacheCount = 0;
		    var MAX_FONT_CACHE_SIZE = 100;
		    var fontEl = document.createElement('div');

		    var getFontStyle = function (fontString) {
		        var fontStyle = fontStyleCache[fontString];
		        if (!fontStyle) {
		            // Clear cache
		            if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
		                fontStyleCacheCount = 0;
		                fontStyleCache = {};
		            }

		            var style = fontEl.style;
		            var fontFamily;
		            try {
		                style.font = fontString;
		                fontFamily = style.fontFamily.split(',')[0];
		            }
		            catch (e) {
		            }

		            fontStyle = {
		                style: style.fontStyle || DEFAULT_STYLE_NORMAL,
		                variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
		                weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
		                size: parseFloat(style.fontSize || 12) | 0,
		                family: fontFamily || 'Microsoft YaHei'
		            };

		            fontStyleCache[fontString] = fontStyle;
		            fontStyleCacheCount++;
		        }
		        return fontStyle;
		    };

		    var textMeasureEl;
		    // Overwrite measure text method
		    textContain.measureText = function (text, textFont) {
		        var doc = vmlCore.doc;
		        if (!textMeasureEl) {
		            textMeasureEl = doc.createElement('div');
		            textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;'
		                + 'padding:0;margin:0;border:none;white-space:pre;';
		            vmlCore.doc.body.appendChild(textMeasureEl);
		        }

		        try {
		            textMeasureEl.style.font = textFont;
		        } catch (ex) {
		            // Ignore failures to set to invalid font.
		        }
		        textMeasureEl.innerHTML = '';
		        // Don't use innerHTML or innerText because they allow markup/whitespace.
		        textMeasureEl.appendChild(doc.createTextNode(text));
		        return {
		            width: textMeasureEl.offsetWidth
		        };
		    };

		    var tmpRect = new BoundingRect();

		    var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {

		        var style = this.style;
		        var text = style.text;
		        if (!text) {
		            return;
		        }

		        var x;
		        var y;
		        var align = style.textAlign;
		        var fontStyle = getFontStyle(style.textFont);
		        // FIXME encodeHtmlAttribute ?
		        var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' '
		            + fontStyle.size + 'px "' + fontStyle.family + '"';
		        var baseline = style.textBaseline;
		        var verticalAlign = style.textVerticalAlign;

		        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);

		        // Transform rect to view space
		        var m = this.transform;
		        // Ignore transform for text in other element
		        if (m && !fromTextEl) {
		            tmpRect.copy(rect);
		            tmpRect.applyTransform(m);
		            rect = tmpRect;
		        }

		        if (!fromTextEl) {
		            var textPosition = style.textPosition;
		            var distance = style.textDistance;
		            // Text position represented by coord
		            if (textPosition instanceof Array) {
		                x = rect.x + parsePercent(textPosition[0], rect.width);
		                y = rect.y + parsePercent(textPosition[1], rect.height);

		                align = align || 'left';
		                baseline = baseline || 'top';
		            }
		            else {
		                var res = textContain.adjustTextPositionOnRect(
		                    textPosition, rect, textRect, distance
		                );
		                x = res.x;
		                y = res.y;

		                // Default align and baseline when has textPosition
		                align = align || res.textAlign;
		                baseline = baseline || res.textBaseline;
		            }
		        }
		        else {
		            x = rect.x;
		            y = rect.y;
		        }
		        if (verticalAlign) {
		            switch (verticalAlign) {
		                case 'middle':
		                    y -= textRect.height / 2;
		                    break;
		                case 'bottom':
		                    y -= textRect.height;
		                    break;
		                // 'top'
		            }
		            // Ignore baseline
		            baseline = 'top';
		        }

		        var fontSize = fontStyle.size;
		        // 1.75 is an arbitrary number, as there is no info about the text baseline
		        switch (baseline) {
		            case 'hanging':
		            case 'top':
		                y += fontSize / 1.75;
		                break;
		            case 'middle':
		                break;
		            default:
		            // case null:
		            // case 'alphabetic':
		            // case 'ideographic':
		            // case 'bottom':
		                y -= fontSize / 2.25;
		                break;
		        }
		        switch (align) {
		            case 'left':
		                break;
		            case 'center':
		                x -= textRect.width / 2;
		                break;
		            case 'right':
		                x -= textRect.width;
		                break;
		            // case 'end':
		                // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
		                // break;
		            // case 'start':
		                // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
		                // break;
		            // default:
		            //     align = 'left';
		        }

		        var createNode = vmlCore.createNode;

		        var textVmlEl = this._textVmlEl;
		        var pathEl;
		        var textPathEl;
		        var skewEl;
		        if (!textVmlEl) {
		            textVmlEl = createNode('line');
		            pathEl = createNode('path');
		            textPathEl = createNode('textpath');
		            skewEl = createNode('skew');

		            // FIXME Why here is not cammel case
		            // Align 'center' seems wrong
		            textPathEl.style['v-text-align'] = 'left';

		            initRootElStyle(textVmlEl);

		            pathEl.textpathok = true;
		            textPathEl.on = true;

		            textVmlEl.from = '0 0';
		            textVmlEl.to = '1000 0.05';

		            append(textVmlEl, skewEl);
		            append(textVmlEl, pathEl);
		            append(textVmlEl, textPathEl);

		            this._textVmlEl = textVmlEl;
		        }
		        else {
		            // 这里是在前面 appendChild 保证顺序的前提下
		            skewEl = textVmlEl.firstChild;
		            pathEl = skewEl.nextSibling;
		            textPathEl = pathEl.nextSibling;
		        }

		        var coords = [x, y];
		        var textVmlElStyle = textVmlEl.style;
		        // Ignore transform for text in other element
		        if (m && fromTextEl) {
		            applyTransform(coords, coords, m);

		            skewEl.on = true;

		            skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma +
		            m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';

		            // Text position
		            skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);
		            // Left top point as origin
		            skewEl.origin = '0 0';

		            textVmlElStyle.left = '0px';
		            textVmlElStyle.top = '0px';
		        }
		        else {
		            skewEl.on = false;
		            textVmlElStyle.left = round(x) + 'px';
		            textVmlElStyle.top = round(y) + 'px';
		        }

		        textPathEl.string = encodeHtmlAttribute(text);
		        // TODO
		        try {
		            textPathEl.style.font = font;
		        }
		        // Error font format
		        catch (e) {}

		        updateFillAndStroke(textVmlEl, 'fill', {
		            fill: fromTextEl ? style.fill : style.textFill,
		            opacity: style.opacity
		        }, this);
		        updateFillAndStroke(textVmlEl, 'stroke', {
		            stroke: fromTextEl ? style.stroke : style.textStroke,
		            opacity: style.opacity,
		            lineDash: style.lineDash
		        }, this);

		        textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

		        // Attached to root
		        append(vmlRoot, textVmlEl);
		    };

		    var removeRectText = function (vmlRoot) {
		        remove(vmlRoot, this._textVmlEl);
		        this._textVmlEl = null;
		    };

		    var appendRectText = function (vmlRoot) {
		        append(vmlRoot, this._textVmlEl);
		    };

		    var list = [RectText, Displayable, ZImage, Path, Text];

		    // In case Displayable has been mixed in RectText
		    for (var i = 0; i < list.length; i++) {
		        var proto = list[i].prototype;
		        proto.drawRectText = drawRectText;
		        proto.removeRectText = removeRectText;
		        proto.appendRectText = appendRectText;
		    }

		    Text.prototype.brushVML = function (root) {
		        var style = this.style;
		        if (style.text) {
		            this.drawRectText(root, {
		                x: style.x || 0, y: style.y || 0,
		                width: 0, height: 0
		            }, this.getBoundingRect(), true);
		        }
		    };

		    Text.prototype.onRemove = function (vmlRoot) {
		        this.removeRectText(vmlRoot);
		    };

		    Text.prototype.onAdd = function (vmlRoot) {
		        this.appendRectText(vmlRoot);
		    };
		}


	/***/ },
	/* 347 */
	/***/ function(module, exports, __webpack_require__) {

		

		if (!__webpack_require__(78).canvasSupported) {
		    var urn = 'urn:schemas-microsoft-com:vml';

		    var createNode;
		    var win = window;
		    var doc = win.document;

		    var vmlInited = false;

		    try {
		        !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);
		        createNode = function (tagName) {
		            return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
		        };
		    }
		    catch (e) {
		        createNode = function (tagName) {
		            return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
		        };
		    }

		    // From raphael
		    var initVML = function () {
		        if (vmlInited) {
		            return;
		        }
		        vmlInited = true;

		        var styleSheets = doc.styleSheets;
		        if (styleSheets.length < 31) {
		            doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
		        }
		        else {
		            // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
		            styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
		        }
		    };

		    // Not useing return to avoid error when converting to CommonJS module
		    module.exports = {
		        doc: doc,
		        initVML: initVML,
		        createNode: createNode
		    };
		}


	/***/ },
	/* 348 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * VML Painter.
		 *
		 * @module zrender/vml/Painter
		 */



		    var zrLog = __webpack_require__(39);
		    var vmlCore = __webpack_require__(347);

		    function parseInt10(val) {
		        return parseInt(val, 10);
		    }

		    /**
		     * @alias module:zrender/vml/Painter
		     */
		    function VMLPainter(root, storage) {

		        vmlCore.initVML();

		        this.root = root;

		        this.storage = storage;

		        var vmlViewport = document.createElement('div');

		        var vmlRoot = document.createElement('div');

		        vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';

		        vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';

		        root.appendChild(vmlViewport);

		        this._vmlRoot = vmlRoot;
		        this._vmlViewport = vmlViewport;

		        this.resize();

		        // Modify storage
		        var oldDelFromMap = storage.delFromMap;
		        var oldAddToMap = storage.addToMap;
		        storage.delFromMap = function (elId) {
		            var el = storage.get(elId);

		            oldDelFromMap.call(storage, elId);

		            if (el) {
		                el.onRemove && el.onRemove(vmlRoot);
		            }
		        };

		        storage.addToMap = function (el) {
		            // Displayable already has a vml node
		            el.onAdd && el.onAdd(vmlRoot);

		            oldAddToMap.call(storage, el);
		        };

		        this._firstPaint = true;
		    }

		    VMLPainter.prototype = {

		        constructor: VMLPainter,

		        /**
		         * @return {HTMLDivElement}
		         */
		        getViewportRoot: function () {
		            return this._vmlViewport;
		        },

		        /**
		         * 刷新
		         */
		        refresh: function () {

		            var list = this.storage.getDisplayList(true, true);

		            this._paintList(list);
		        },

		        _paintList: function (list) {
		            var vmlRoot = this._vmlRoot;
		            for (var i = 0; i < list.length; i++) {
		                var el = list[i];
		                if (el.invisible || el.ignore) {
		                    if (!el.__alreadyNotVisible) {
		                        el.onRemove(vmlRoot);
		                    }
		                    // Set as already invisible
		                    el.__alreadyNotVisible = true;
		                }
		                else {
		                    if (el.__alreadyNotVisible) {
		                        el.onAdd(vmlRoot);
		                    }
		                    el.__alreadyNotVisible = false;
		                    if (el.__dirty) {
		                        el.beforeBrush && el.beforeBrush();
		                        (el.brushVML || el.brush).call(el, vmlRoot);
		                        el.afterBrush && el.afterBrush();
		                    }
		                }
		                el.__dirty = false;
		            }

		            if (this._firstPaint) {
		                // Detached from document at first time
		                // to avoid page refreshing too many times

		                // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
		                this._vmlViewport.appendChild(vmlRoot);
		                this._firstPaint = false;
		            }
		        },

		        resize: function () {
		            var width = this._getWidth();
		            var height = this._getHeight();

		            if (this._width != width && this._height != height) {
		                this._width = width;
		                this._height = height;

		                var vmlViewportStyle = this._vmlViewport.style;
		                vmlViewportStyle.width = width + 'px';
		                vmlViewportStyle.height = height + 'px';
		            }
		        },

		        dispose: function () {
		            this.root.innerHTML = '';

		            this._vmlRoot =
		            this._vmlViewport =
		            this.storage = null;
		        },

		        getWidth: function () {
		            return this._width;
		        },

		        getHeight: function () {
		            return this._height;
		        },

		        _getWidth: function () {
		            var root = this.root;
		            var stl = root.currentStyle;

		            return ((root.clientWidth || parseInt10(stl.width))
		                    - parseInt10(stl.paddingLeft)
		                    - parseInt10(stl.paddingRight)) | 0;
		        },

		        _getHeight: function () {
		            var root = this.root;
		            var stl = root.currentStyle;

		            return ((root.clientHeight || parseInt10(stl.height))
		                    - parseInt10(stl.paddingTop)
		                    - parseInt10(stl.paddingBottom)) | 0;
		        }
		    };

		    // Not supported methods
		    function createMethodNotSupport(method) {
		        return function () {
		            zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
		        };
		    }

		    var notSupportedMethods = [
		        'getLayer', 'insertLayer', 'eachLayer', 'eachBuildinLayer', 'eachOtherLayer', 'getLayers',
		        'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'
		    ];

		    for (var i = 0; i < notSupportedMethods.length; i++) {
		        var name = notSupportedMethods[i];
		        VMLPainter.prototype[name] = createMethodNotSupport(name);
		    }

		    module.exports = VMLPainter;


	/***/ }
	/******/ ])
	});
	;

/***/ },

/***/ 26:
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.5
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window) {'use strict';

	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */

	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;

	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;

	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;

	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }

	      return match;
	    });

	    message += '\nhttp://errors.angularjs.org/1.5.5/' +
	      (module ? module + '/' : '') + code;

	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }

	    return new ErrorConstructor(message);
	  };
	}

	/* We need to tell jshint what variables are being exported */
	/* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,

	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  shallowCopy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,

	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/

	////////////////////////////////////

	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */

	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


	var manualLowercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	};
	var manualUppercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	};


	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}


	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),

	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;

	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = window.document.documentMode;


	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {

	  // `null`, `undefined` and `window` are not array-like
	  if (obj == null || isWindow(obj)) return false;

	  // arrays, strings and jQuery/jqLite objects are array like
	  // * jqLite is either the jQuery or jqLite constructor function
	  // * we have to check the existence of jqLite first as this method is called
	  //   via the forEach method when constructing the jqLite object in the first place
	  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;

	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = "length" in Object(obj) && obj.length;

	  // NodeList objects (with `item` method) and
	  // other objects with suitable length characteristics are array-like
	  return isNumber(length) &&
	    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item == 'function');

	}

	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */

	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        // Need to check if hasOwnProperty exists,
	        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
	        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}

	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}


	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) {iteratorFn(key, value);};
	}

	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}


	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}


	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;

	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];

	      if (deep && isObject(src)) {
	        if (isDate(src)) {
	          dst[key] = new Date(src.valueOf());
	        } else if (isRegExp(src)) {
	          dst[key] = new RegExp(src);
	        } else if (src.nodeName) {
	          dst[key] = src.cloneNode(true);
	        } else if (isElement(src)) {
	          dst[key] = src.clone();
	        } else {
	          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	          baseExtend(dst[key], [src], true);
	        }
	      } else {
	        dst[key] = src;
	      }
	    }
	  }

	  setHashKey(dst, h);
	  return dst;
	}

	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}


	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}



	function toInt(str) {
	  return parseInt(str, 10);
	}


	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}

	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];


	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	     function transformer(transformationFn, value) {
	       return (transformationFn || angular.identity)(value);
	     };
	   ```
	  * @param {*} value to be returned.
	  * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];


	function valueFn(value) {return function valueRef() {return value;};}

	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== toString;
	}


	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}


	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}


	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}


	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}


	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}


	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;

	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}


	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}


	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}


	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}


	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}


	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}


	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}


	function isBoolean(value) {
	  return typeof value === 'boolean';
	}


	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}


	var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;
	function isTypedArray(value) {
	  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
	}

	function isArrayBuffer(obj) {
	  return toString.call(obj) === '[object ArrayBuffer]';
	}


	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};

	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	           replace(/\x08/g, '\\x08');
	};


	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // we are a direct element
	    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
	}

	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}


	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}

	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) != -1;
	}

	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}

	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to 'destination' an exception will be thrown.
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	 <example module="copyExample">
	 <file name="index.html">
	 <div ng-controller="ExampleController">
	 <form novalidate class="simple-form">
	 Name: <input type="text" ng-model="user.name" /><br />
	 E-mail: <input type="email" ng-model="user.email" /><br />
	 Gender: <input type="radio" ng-model="user.gender" value="male" />male
	 <input type="radio" ng-model="user.gender" value="female" />female<br />
	 <button ng-click="reset()">RESET</button>
	 <button ng-click="update(user)">SAVE</button>
	 </form>
	 <pre>form = {{user | json}}</pre>
	 <pre>master = {{master | json}}</pre>
	 </div>

	 <script>
	  angular.module('copyExample', [])
	    .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};

	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };

	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };

	      $scope.reset();
	    }]);
	 </script>
	 </file>
	 </example>
	 */
	function copy(source, destination) {
	  var stackSource = [];
	  var stackDest = [];

	  if (destination) {
	    if (isTypedArray(destination) || isArrayBuffer(destination)) {
	      throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.");
	    }
	    if (source === destination) {
	      throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
	    }

	    // Empty the destination object
	    if (isArray(destination)) {
	      destination.length = 0;
	    } else {
	      forEach(destination, function(value, key) {
	        if (key !== '$$hashKey') {
	          delete destination[key];
	        }
	      });
	    }

	    stackSource.push(source);
	    stackDest.push(destination);
	    return copyRecurse(source, destination);
	  }

	  return copyElement(source);

	  function copyRecurse(source, destination) {
	    var h = destination.$$hashKey;
	    var key;
	    if (isArray(source)) {
	      for (var i = 0, ii = source.length; i < ii; i++) {
	        destination.push(copyElement(source[i]));
	      }
	    } else if (isBlankObject(source)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in source) {
	        destination[key] = copyElement(source[key]);
	      }
	    } else if (source && typeof source.hasOwnProperty === 'function') {
	      // Slow path, which must rely on hasOwnProperty
	      for (key in source) {
	        if (source.hasOwnProperty(key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    } else {
	      // Slowest path --- hasOwnProperty can't be called as a method
	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    }
	    setHashKey(destination, h);
	    return destination;
	  }

	  function copyElement(source) {
	    // Simple values
	    if (!isObject(source)) {
	      return source;
	    }

	    // Already copied values
	    var index = stackSource.indexOf(source);
	    if (index !== -1) {
	      return stackDest[index];
	    }

	    if (isWindow(source) || isScope(source)) {
	      throw ngMinErr('cpws',
	        "Can't copy! Making copies of Window or Scope instances is not supported.");
	    }

	    var needsRecurse = false;
	    var destination = copyType(source);

	    if (destination === undefined) {
	      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
	      needsRecurse = true;
	    }

	    stackSource.push(source);
	    stackDest.push(destination);

	    return needsRecurse
	      ? copyRecurse(source, destination)
	      : destination;
	  }

	  function copyType(source) {
	    switch (toString.call(source)) {
	      case '[object Int8Array]':
	      case '[object Int16Array]':
	      case '[object Int32Array]':
	      case '[object Float32Array]':
	      case '[object Float64Array]':
	      case '[object Uint8Array]':
	      case '[object Uint8ClampedArray]':
	      case '[object Uint16Array]':
	      case '[object Uint32Array]':
	        return new source.constructor(copyElement(source.buffer));

	      case '[object ArrayBuffer]':
	        //Support: IE10
	        if (!source.slice) {
	          var copied = new ArrayBuffer(source.byteLength);
	          new Uint8Array(copied).set(new Uint8Array(source));
	          return copied;
	        }
	        return source.slice(0);

	      case '[object Boolean]':
	      case '[object Number]':
	      case '[object String]':
	      case '[object Date]':
	        return new source.constructor(source.valueOf());

	      case '[object RegExp]':
	        var re = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
	        re.lastIndex = source.lastIndex;
	        return re;

	      case '[object Blob]':
	        return new source.constructor([source], {type: source.type});
	    }

	    if (isFunction(source.cloneNode)) {
	      return source.cloneNode(true);
	    }
	  }
	}

	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];

	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};

	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }

	  return dst || src;
	}


	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">

	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">

	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.result;
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 == t2 && t1 == 'object') {
	    if (isArray(o1)) {
	      if (!isArray(o2)) return false;
	      if ((length = o1.length) == o2.length) {
	        for (key = 0; key < length; key++) {
	          if (!equals(o1[key], o2[key])) return false;
	        }
	        return true;
	      }
	    } else if (isDate(o1)) {
	      if (!isDate(o2)) return false;
	      return equals(o1.getTime(), o2.getTime());
	    } else if (isRegExp(o1)) {
	      if (!isRegExp(o2)) return false;
	      return o1.toString() == o2.toString();
	    } else {
	      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	      keySet = createMap();
	      for (key in o1) {
	        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	        if (!equals(o1[key], o2[key])) return false;
	        keySet[key] = true;
	      }
	      for (key in o2) {
	        if (!(key in keySet) &&
	            key.charAt(0) !== '$' &&
	            isDefined(o2[key]) &&
	            !isFunction(o2[key])) return false;
	      }
	      return true;
	    }
	  }
	  return false;
	}

	var csp = function() {
	  if (!isDefined(csp.rules)) {


	    var ngCspElement = (window.document.querySelector('[ng-csp]') ||
	                    window.document.querySelector('[data-ng-csp]'));

	    if (ngCspElement) {
	      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
	                    ngCspElement.getAttribute('data-ng-csp');
	      csp.rules = {
	        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
	        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
	      };
	    } else {
	      csp.rules = {
	        noUnsafeEval: noUnsafeEval(),
	        noInlineStyle: false
	      };
	    }
	  }

	  return csp.rules;

	  function noUnsafeEval() {
	    try {
	      /* jshint -W031, -W054 */
	      new Function('');
	      /* jshint +W031, +W054 */
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	};

	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    if (el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }

	  return (jq.name_ = name);
	};

	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}

	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}


	/* jshint -W101 */
	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	/* jshint +W101 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
	    return fn;
	  }
	}


	function toJsonReplacer(key, value) {
	  var val = value;

	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  window.document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }

	  return val;
	}


	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 */
	function toJson(obj, pretty) {
	  if (isUndefined(obj)) return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}


	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}


	var ALL_COLONS = /:/g;
	function timezoneToOffset(timezone, fallback) {
	  // IE/Edge do not "understand" colon (`:`) in timezone
	  timezone = timezone.replace(ALL_COLONS, '');
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}


	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}


	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var dateTimezoneOffset = date.getTimezoneOffset();
	  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	}


	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) {}
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w\-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
	  } catch (e) {
	    return lowercase(elemHtml);
	  }

	}


	/////////////////////////////////////////////////

	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component
	  }
	}


	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {};
	  forEach((keyValue || "").split('&'), function(keyValue) {
	    var splitPoint, key, val;
	    if (keyValue) {
	      key = keyValue = keyValue.replace(/\+/g,'%20');
	      splitPoint = keyValue.indexOf('=');
	      if (splitPoint !== -1) {
	        key = keyValue.substring(0, splitPoint);
	        val = keyValue.substring(splitPoint + 1);
	      }
	      key = tryDecodeURIComponent(key);
	      if (isDefined(key)) {
	        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}

	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}


	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}


	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}

	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}

	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>

	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>

	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};

	  // The element `element` has priority over any other element
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';

	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;

	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);

	    if (element.injector()) {
	      var tag = (element[0] === window.document) ? 'document' : startingTag(element);
	      //Encode angle brackets to prevent input from being sanitized to empty string #8683
	      throw ngMinErr(
	          'btstrpd',
	          "App already bootstrapped with this element '{0}'",
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }

	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);

	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }

	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };

	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }

	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }

	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };

	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}

	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}

	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}

	var bindJQueryFired = false;
	function bindJQuery() {
	  var originalCleanData;

	  if (bindJQueryFired) {
	    return;
	  }

	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
	           !jqName             ? undefined     :   // use jqLite
	                                 window[jqName];   // use jQuery specified by `ngJq`

	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });

	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	        events = jQuery._data(elem, "events");
	        if (events && events.$destroy) {
	          jQuery(elem).triggerHandler('$destroy');
	        }
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }

	  angular.element = jqLite;

	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}

	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}

	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }

	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}

	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
	  }
	}

	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;

	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}

	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): update `nodes` instead of creating a new object?
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes;

	  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
	    if (blockNodes || nodes[i] !== node) {
	      if (!blockNodes) {
	        blockNodes = jqLite(slice.call(nodes, 0, i));
	      }
	      blockNodes.push(node);
	    }
	  }

	  return blockNodes || nodes;
	}


	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}

	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */

	function setupModuleLoader(window) {

	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');

	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }

	  var angular = ensure(window, 'angular', Object);

	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;

	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};

	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };

	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
	             "the module name or forgot to load it. If registering a module ensure that you " +
	             "specify the dependencies as the second argument.", name);
	        }

	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];

	        /** @type {!Array.<Function>} */
	        var configBlocks = [];

	        /** @type {!Array.<Function>} */
	        var runBlocks = [];

	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,

	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,

	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,


	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLaterAndSetModuleName('$provide', 'provider'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLaterAndSetModuleName('$provide', 'factory'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLaterAndSetModuleName('$provide', 'service'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),

	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */
	          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,

	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };

	        if (configFn) {
	          config(configFn);
	        }

	        return moduleInstance;

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
	        function invokeLaterAndSetModuleName(provider, method) {
	          return function(recipeName, factoryFunction) {
	            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
	            invokeQueue.push([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });

	}

	/* global: toDebugString: true */

	function serializeObject(obj) {
	  var seen = [];

	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {

	      if (seen.indexOf(val) >= 0) return '...';

	      seen.push(val);
	    }
	    return val;
	  });
	}

	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (isUndefined(obj)) {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}

	/* global angularModule: true,
	  version: true,

	  $CompileProvider,

	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  styleDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,

	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/


	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  full: '1.5.5',    // all of these placeholder strings will be replaced by grunt's
	  major: 1,    // package task
	  minor: 5,
	  dot: 5,
	  codeName: 'material-conspiration'
	};


	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {counter: 0},
	    'getTestability': getTestability,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    'reloadWithDebugInfo': reloadWithDebugInfo
	  });

	  angularModule = setupModuleLoader(window);

	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            style: styleDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $animateCss: $CoreAnimateCssProvider,
	        $$animateJs: $$CoreAnimateJsProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
	        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $$forceReflow: $$ForceReflowProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $xhrFactory: $xhrFactoryProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/

	//////////////////////////////////
	//JQLite
	//////////////////////////////////

	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/)
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/)
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */

	JQLite.expando = 'ng339';

	var jqCache = JQLite.cache = {},
	    jqId = 1,
	    addEventListenerFn = function(element, type, fn) {
	      element.addEventListener(type, fn, false);
	    },
	    removeEventListenerFn = function(element, type, fn) {
	      element.removeEventListener(type, fn, false);
	    };

	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};

	function jqNextId() { return ++jqId; }


	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
	var jqLiteMinErr = minErr('jqLite');

	/**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
	function camelCase(name) {
	  return name.
	    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
	      return offset ? letter.toUpperCase() : letter;
	    }).
	    replace(MOZ_HACK_REGEXP, 'Moz$1');
	}

	var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:-]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],

	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, "", ""]
	};

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}

	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}

	function jqLiteHasData(node) {
	  for (var key in jqCache[node.ng339]) {
	    return true;
	  }
	  return false;
	}

	function jqLiteCleanData(nodes) {
	  for (var i = 0, ii = nodes.length; i < ii; i++) {
	    jqLiteRemoveData(nodes[i]);
	  }
	}

	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;

	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = tmp || fragment.appendChild(context.createElement("div"));
	    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }

	    nodes = concat(nodes, tmp.childNodes);

	    tmp = fragment.firstChild;
	    tmp.textContent = "";
	  }

	  // Remove wrapper from fragment
	  fragment.textContent = "";
	  fragment.innerHTML = ""; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });

	  return fragment;
	}

	function jqLiteParseHTML(html, context) {
	  context = context || window.document;
	  var parsed;

	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }

	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }

	  return [];
	}

	function jqLiteWrapNode(node, wrapper) {
	  var parent = node.parentNode;

	  if (parent) {
	    parent.replaceChild(wrapper, node);
	  }

	  wrapper.appendChild(node);
	}


	// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains = window.Node.prototype.contains || function(arg) {
	  // jshint bitwise: false
	  return !!(this.compareDocumentPosition(arg) & 16);
	  // jshint bitwise: true
	};

	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }

	  var argIsString;

	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) != '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }

	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}

	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}

	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);

	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}

	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;

	  if (!handle) return; //no listeners registered

	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        removeEventListenerFn(element, type, handle);
	      }
	      delete events[type];
	    }
	  } else {

	    var removeHandler = function(type) {
	      var listenerFns = events[type];
	      if (isDefined(fn)) {
	        arrayRemove(listenerFns || [], fn);
	      }
	      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
	        removeEventListenerFn(element, type, handle);
	        delete events[type];
	      }
	    };

	    forEach(type.split(' '), function(type) {
	      removeHandler(type);
	      if (MOUSE_EVENT_MAP[type]) {
	        removeHandler(MOUSE_EVENT_MAP[type]);
	      }
	    });
	  }
	}

	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];

	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }

	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}


	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];

	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }

	  return expandoStore;
	}


	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {

	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;

	    if (isSimpleSetter) { // data('key', value)
	      data[key] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[key];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          extend(data, key);
	        }
	      }
	    }
	  }
	}

	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
	      indexOf(" " + selector + " ") > -1);
	}

	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (" " + (element.getAttribute('class') || '') + " ")
	          .replace(/[\n\t]/g, " ")
	          .replace(" " + trim(cssClass) + " ", " "))
	      );
	    });
	  }
	}

	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, " ");

	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });

	    element.setAttribute('class', trim(existingClasses));
	  }
	}


	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

	  if (elements) {

	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;

	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}


	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}

	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType == NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];

	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if (isDefined(value = jqLite.data(element, names[i]))) return value;
	    }

	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}

	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}

	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}


	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behavior
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}

	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: function(fn) {
	    var fired = false;

	    function trigger() {
	      if (fired) return;
	      fired = true;
	      fn();
	    }

	    // check if document is already loaded
	    if (window.document.readyState === 'complete') {
	      window.setTimeout(trigger);
	    } else {
	      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
	      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
	      // jshint -W064
	      JQLite(window).on('load', trigger); // fallback to window.onload for others
	      // jshint +W064
	    }
	  },
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },

	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },

	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};

	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern'
	};

	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}

	function getAliasedAttrName(name) {
	  return ALIASED_ATTR[name];
	}

	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData,
	  hasData: jqLiteHasData,
	  cleanData: jqLiteCleanData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});

	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,

	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },

	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },

	  controller: jqLiteController,

	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },

	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },

	  hasClass: jqLiteHasClass,

	  css: function(element, name, value) {
	    name = camelCase(name);

	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },

	  attr: function(element, name, value) {
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
	      return;
	    }
	    var lowercasedName = lowercase(name);
	    if (BOOLEAN_ATTR[lowercasedName]) {
	      if (isDefined(value)) {
	        if (!!value) {
	          element[name] = true;
	          element.setAttribute(name, lowercasedName);
	        } else {
	          element[name] = false;
	          element.removeAttribute(lowercasedName);
	        }
	      } else {
	        return (element[name] ||
	                 (element.attributes.getNamedItem(name) || noop).specified)
	               ? lowercasedName
	               : undefined;
	      }
	    } else if (isDefined(value)) {
	      element.setAttribute(name, value);
	    } else if (element.getAttribute) {
	      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
	      // some elements (e.g. Document) don't have get attribute, so return undefined
	      var ret = element.getAttribute(name, 2);
	      // normalize non-existing attributes to undefined (as jQuery)
	      return ret === null ? undefined : ret;
	    }
	  },

	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },

	  text: (function() {
	    getText.$dv = '';
	    return getText;

	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),

	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result.length === 0 ? null : result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },

	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },

	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;

	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
	      if (isObject(arg1)) {

	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});

	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };

	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;

	    if (!eventFnsLength) return;

	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;

	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }

	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }

	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };

	    // Some events have special handlers that wrap the real handler
	    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;

	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }

	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        handlerWrapper(element, event, eventFns[i]);
	      }
	    }
	  };

	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}

	function defaultHandlerWrapper(element, event, handler) {
	  handler.call(element, event);
	}

	function specialMouseHandlerWrapper(target, event, handler) {
	  // Refer to jQuery's implementation of mouseenter & mouseleave
	  // Read about mouseenter and mouseleave:
	  // http://www.quirksmode.org/js/events_mouse.html#link8
	  var related = event.relatedTarget;
	  // For mousenter/leave call the handler if related is outside the target.
	  // NB: No relatedTarget if the mouse left/entered the browser window
	  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
	    handler.call(target, event);
	  }
	}

	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,

	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }

	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;

	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }

	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;

	    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
	      var eventFns = events[type];

	      if (!eventFns) {
	        eventFns = events[type] = [];
	        eventFns.specialHandlerWrapper = specialHandlerWrapper;
	        if (type !== '$destroy' && !noEventListener) {
	          addEventListenerFn(element, type, handle);
	        }
	      }

	      eventFns.push(fn);
	    };

	    while (i--) {
	      type = types[i];
	      if (MOUSE_EVENT_MAP[type]) {
	        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
	        addHandler(type, undefined, true);
	      } else {
	        addHandler(type);
	      }
	    }
	  },

	  off: jqLiteOff,

	  one: function(element, type, fn) {
	    element = jqLite(element);

	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },

	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },

	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },

	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },

	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

	    node = new JQLite(node);

	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },

	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },

	  wrap: function(element, wrapNode) {
	    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
	  },

	  remove: jqLiteRemove,

	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },

	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	    newElement = new JQLite(newElement);

	    for (var i = 0, ii = newElement.length; i < ii; i++) {
	      var node = newElement[i];
	      parent.insertBefore(node, index.nextSibling);
	      index = node;
	    }
	  },

	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,

	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },

	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },

	  next: function(element) {
	    return element.nextElementSibling;
	  },

	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },

	  clone: jqLiteClone,

	  triggerHandler: function(element, event, extraParameters) {

	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];

	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };

	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }

	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;

	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };

	  // bind legacy bind/unbind to on/off
	  JQLite.prototype.bind = JQLite.prototype.on;
	  JQLite.prototype.unbind = JQLite.prototype.off;
	});


	// Provider for private $$jqLite service
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}

	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;

	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }

	  var objType = typeof obj;
	  if (objType == 'function' || (objType == 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }

	  return key;
	}

	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },

	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },

	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};

	var $$HashMapProvider = [function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];

	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */


	/**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */

	var ARROW_ARG = /^([^\(]+?)=>/;
	var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');

	function extractArgs(fn) {
	  var fnText = Function.prototype.toString.call(fn).replace(STRIP_COMMENTS, ''),
	      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
	  return args;
	}

	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var args = extractArgs(fn);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}

	function annotate(fn, strictDi, name) {
	  var $inject,
	      argDecl,
	      last;

	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        argDecl = extractArgs(fn);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}

	///////////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */




	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 *
	 * See the individual methods for more information and examples.
	 */

	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance

	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */

	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The object returned by the decorator may be the original service, or a new service
	 * object which replaces or wraps and delegates to the original service.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    instantiated and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */


	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
	          })),
	      instanceCache = {},
	      protoInstanceInjector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(
	                provider.$get, provider, undefined, serviceName);
	          }),
	      instanceInjector = protoInstanceInjector;

	  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
	  var runBlocks = loadModules(modulesToLoad);
	  instanceInjector = protoInstanceInjector.get('$injector');
	  instanceInjector.strictDi = strictDi;
	  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });

	  return instanceInjector;

	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////

	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }

	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
	    }
	    return providerCache[name + providerSuffix] = provider_;
	  }

	  function enforceReturnValue(name, factory) {
	    return function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
	      }
	      return result;
	    };
	  }

	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }

	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }

	  function value(name, val) { return factory(name, valueFn(val), false); }

	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }

	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;

	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }

	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);

	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);

	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }

	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          /* jshint -W022 */
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }

	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////

	  function createInternalInjector(cache, factory) {

	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          return cache[serviceName] = factory(serviceName, caller);
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }


	    function injectionArgs(fn, locals, serviceName) {
	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName);

	      for (var i = 0, length = $inject.length; i < length; i++) {
	        var key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
	                                                         getService(key, serviceName));
	      }
	      return args;
	    }

	    function isClass(func) {
	      // IE 9-11 do not support classes and IE9 leaks with the code below.
	      if (msie <= 11) {
	        return false;
	      }
	      // Workaround for MS Edge.
	      // Check https://connect.microsoft.com/IE/Feedback/Details/2211653
	      return typeof func === 'function'
	        && /^(?:class\s|constructor\()/.test(Function.prototype.toString.call(func));
	    }

	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }

	      var args = injectionArgs(fn, locals, serviceName);
	      if (isArray(fn)) {
	        fn = fn[fn.length - 1];
	      }

	      if (!isClass(fn)) {
	        // http://jsperf.com/angularjs-invoke-apply-vs-switch
	        // #5388
	        return fn.apply(self, args);
	      } else {
	        args.unshift(null);
	        return new (Function.prototype.bind.apply(fn, args))();
	      }
	    }


	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
	      var args = injectionArgs(Type, locals, serviceName);
	      // Empty object at position 0 is ignored for invocation with `new`, but required.
	      args.unshift(null);
	      return new (Function.prototype.bind.apply(ctor, args))();
	    }


	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}

	createInjector.$$annotate = annotate;

	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {

	  var autoScrollingEnabled = true;

	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };

	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');

	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }

	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;

	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }

	    function getYOffset() {

	      var offset = scroll.yOffset;

	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }

	      return offset;
	    }

	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();

	        var offset = getYOffset();

	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }

	    function scroll(hash) {
	      hash = isString(hash) ? hash : $location.hash();
	      var elm;

	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);

	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);

	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

	      // no element and hash == 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }

	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;

	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }

	    return scroll;
	  }];
	}

	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';

	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}

	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}

	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }

	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}

	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}

	var $$CoreAnimateJsProvider = function() {
	  this.$get = noop;
	};

	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];

	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,

	      push: function(element, event, options, domOperation) {
	        domOperation        && domOperation();

	        options = options || {};
	        options.from        && element.css(options.from);
	        options.to          && element.css(options.to);

	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }

	        var runner = new $$AnimateRunner(); // jshint ignore:line

	        // since there are no animations to run the runner needs to be
	        // notified that the animation call is complete.
	        runner.complete();
	        return runner;
	      }
	    };


	    function updateData(data, classes, value) {
	      var changed = false;
	      if (classes) {
	        classes = isString(classes) ? classes.split(' ') :
	                  isArray(classes) ? classes : [];
	        forEach(classes, function(className) {
	          if (className) {
	            changed = true;
	            data[className] = value;
	          }
	        });
	      }
	      return changed;
	    }

	    function handleCSSClassChanges() {
	      forEach(postDigestElements, function(element) {
	        var data = postDigestQueue.get(element);
	        if (data) {
	          var existing = splitClasses(element.attr('class'));
	          var toAdd = '';
	          var toRemove = '';
	          forEach(data, function(status, className) {
	            var hasClass = !!existing[className];
	            if (status !== hasClass) {
	              if (status) {
	                toAdd += (toAdd.length ? ' ' : '') + className;
	              } else {
	                toRemove += (toRemove.length ? ' ' : '') + className;
	              }
	            }
	          });

	          forEach(element, function(elm) {
	            toAdd    && jqLiteAddClass(elm, toAdd);
	            toRemove && jqLiteRemoveClass(elm, toRemove);
	          });
	          postDigestQueue.remove(element);
	        }
	      });
	      postDigestElements.length = 0;
	    }


	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element) || {};

	      var classesAdded = updateData(data, add, true);
	      var classesRemoved = updateData(data, remove, false);

	      if (classesAdded || classesRemoved) {

	        postDigestQueue.put(element, data);
	        postDigestElements.push(element);

	        if (postDigestElements.length === 1) {
	          $rootScope.$$postDigest(handleCSSClassChanges);
	        }
	      }
	    }
	  }];
	};

	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', function($provide) {
	  var provider = this;

	  this.$$registeredAnimations = Object.create(null);

	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
	    }

	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };

	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);

	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };

	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      afterElement ? afterElement.after(element) : parentElement.prepend(element);
	    }

	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,

	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,

	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        runner.end && runner.end();
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given classNamem, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;

	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];

	var $$AnimateAsyncRunFactoryProvider = function() {
	  this.$get = ['$$rAF', function($$rAF) {
	    var waitQueue = [];

	    function waitForTick(fn) {
	      waitQueue.push(fn);
	      if (waitQueue.length > 1) return;
	      $$rAF(function() {
	        for (var i = 0; i < waitQueue.length; i++) {
	          waitQueue[i]();
	        }
	        waitQueue = [];
	      });
	    }

	    return function() {
	      var passed = false;
	      waitForTick(function() {
	        passed = true;
	      });
	      return function(callback) {
	        passed ? callback() : waitForTick(callback);
	      };
	    };
	  }];
	};

	var $$AnimateRunnerFactoryProvider = function() {
	  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$document', '$timeout',
	       function($q,   $sniffer,   $$animateAsyncRun,   $document,   $timeout) {

	    var INITIAL_STATE = 0;
	    var DONE_PENDING_STATE = 1;
	    var DONE_COMPLETE_STATE = 2;

	    AnimateRunner.chain = function(chain, callback) {
	      var index = 0;

	      next();
	      function next() {
	        if (index === chain.length) {
	          callback(true);
	          return;
	        }

	        chain[index](function(response) {
	          if (response === false) {
	            callback(false);
	            return;
	          }
	          index++;
	          next();
	        });
	      }
	    };

	    AnimateRunner.all = function(runners, callback) {
	      var count = 0;
	      var status = true;
	      forEach(runners, function(runner) {
	        runner.done(onProgress);
	      });

	      function onProgress(response) {
	        status = status && response;
	        if (++count === runners.length) {
	          callback(status);
	        }
	      }
	    };

	    function AnimateRunner(host) {
	      this.setHost(host);

	      var rafTick = $$animateAsyncRun();
	      var timeoutTick = function(fn) {
	        $timeout(fn, 0, false);
	      };

	      this._doneCallbacks = [];
	      this._tick = function(fn) {
	        var doc = $document[0];

	        // the document may not be ready or attached
	        // to the module for some internal tests
	        if (doc && doc.hidden) {
	          timeoutTick(fn);
	        } else {
	          rafTick(fn);
	        }
	      };
	      this._state = 0;
	    }

	    AnimateRunner.prototype = {
	      setHost: function(host) {
	        this.host = host || {};
	      },

	      done: function(fn) {
	        if (this._state === DONE_COMPLETE_STATE) {
	          fn();
	        } else {
	          this._doneCallbacks.push(fn);
	        }
	      },

	      progress: noop,

	      getPromise: function() {
	        if (!this.promise) {
	          var self = this;
	          this.promise = $q(function(resolve, reject) {
	            self.done(function(status) {
	              status === false ? reject() : resolve();
	            });
	          });
	        }
	        return this.promise;
	      },

	      then: function(resolveHandler, rejectHandler) {
	        return this.getPromise().then(resolveHandler, rejectHandler);
	      },

	      'catch': function(handler) {
	        return this.getPromise()['catch'](handler);
	      },

	      'finally': function(handler) {
	        return this.getPromise()['finally'](handler);
	      },

	      pause: function() {
	        if (this.host.pause) {
	          this.host.pause();
	        }
	      },

	      resume: function() {
	        if (this.host.resume) {
	          this.host.resume();
	        }
	      },

	      end: function() {
	        if (this.host.end) {
	          this.host.end();
	        }
	        this._resolve(true);
	      },

	      cancel: function() {
	        if (this.host.cancel) {
	          this.host.cancel();
	        }
	        this._resolve(false);
	      },

	      complete: function(response) {
	        var self = this;
	        if (self._state === INITIAL_STATE) {
	          self._state = DONE_PENDING_STATE;
	          self._tick(function() {
	            self._resolve(response);
	          });
	        }
	      },

	      _resolve: function(response) {
	        if (this._state !== DONE_COMPLETE_STATE) {
	          forEach(this._doneCallbacks, function(fn) {
	            fn(response);
	          });
	          this._doneCallbacks.length = 0;
	          this._state = DONE_COMPLETE_STATE;
	        }
	      }
	    };

	    return AnimateRunner;
	  }];
	};

	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
	var $CoreAnimateCssProvider = function() {
	  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {

	    return function(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = copy(options);
	      }

	      // there is no point in applying the styles since
	      // there is no animation that goes on at all in
	      // this version of $animateCss.
	      if (options.cleanupStyles) {
	        options.from = options.to = null;
	      }

	      if (options.from) {
	        element.css(options.from);
	        options.from = null;
	      }

	      /* jshint newcap: false */
	      var closed, runner = new $$AnimateRunner();
	      return {
	        start: run,
	        end: run
	      };

	      function run() {
	        $$rAF(function() {
	          applyAnimationContents();
	          if (!closed) {
	            runner.complete();
	          }
	          closed = true;
	        });
	        return runner;
	      }

	      function applyAnimationContents() {
	        if (options.addClass) {
	          element.addClass(options.addClass);
	          options.addClass = null;
	        }
	        if (options.removeClass) {
	          element.removeClass(options.removeClass);
	          options.removeClass = null;
	        }
	        if (options.to) {
	          element.css(options.to);
	          options.to = null;
	        }
	      }
	    };
	  }];
	};

	/* global stripHash: true */

	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};

	  self.isMock = false;

	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];

	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }

	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index);
	  }

	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };

	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////

	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      pendingLocation = null,
	      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
	        try {
	          return history.state;
	        } catch (e) {
	          // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	        }
	      };

	  cacheState();
	  lastHistoryState = cachedState;

	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }

	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;

	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;

	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase || pendingLocation) {
	          pendingLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	        if (location.href !== url) {
	          pendingLocation = url;
	        }
	      }
	      return self;
	    // getter
	    } else {
	      // - pendingLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	      //   https://openradar.appspot.com/22186109).
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return pendingLocation || location.href.replace(/%27/g,"'");
	    }
	  };

	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };

	  var urlChangeListeners = [],
	      urlChangeInit = false;

	  function cacheStateAndFireUrlChange() {
	    pendingLocation = null;
	    cacheState();
	    fireUrlChange();
	  }

	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;

	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }

	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }

	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }

	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState

	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

	      urlChangeInit = true;
	    }

	    urlChangeListeners.push(callback);
	    return callback;
	  };

	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };

	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;

	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////

	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
	  };

	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };


	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };

	}

	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}

	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>

	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {

	  this.$get = function() {
	    var caches = {};

	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
	      }

	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = createMap(),
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = createMap(),
	          freshEnd = null,
	          staleEnd = null;

	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return caches[cacheId] = {

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

	            refresh(lruEntry);
	          }

	          if (!(key in data)) size++;
	          data[key] = value;

	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }

	          return value;
	        },

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            refresh(lruEntry);
	          }

	          return data[key];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);

	            delete lruHash[key];
	          }

	          if (!(key in data)) return;

	          delete data[key];
	          size--;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = createMap();
	          size = 0;
	          lruHash = createMap();
	          freshEnd = staleEnd = null;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      };


	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry != freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd == entry) {
	            staleEnd = entry.n;
	          }

	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }


	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry != prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };


	    return cacheFactory;
	  };
	}

	/**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */


	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
	 * or just the `postLink` function (all other properties will have the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true, the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `true`, an object or a falsy value:
	 *
	 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created. The new scope rule does not apply for the root of the template
	 * since the root of the template always gets a new scope.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property. Additionally, a controller
	 * alias must be set, either by using `controllerAs: 'myAlias'` or by specifying the alias in the controller
	 * definition: `controller: 'myCtrl as myAlias'`.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
	 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
	 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkinFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default translusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * The controller can provide the following methods that act as life-cycle hooks:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 *
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>

	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>

	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude`
	 *     parameter of directive controllers, see there for details.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);

	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>

	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 */

	var $compileMinErr = minErr('$compile');

	function UNINITIALIZED_VALUE() {}
	var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();

	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
	  var bindingCache = createMap();

	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;

	    var bindings = createMap();

	    forEach(scope, function(definition, scopeName) {
	      if (definition in bindingCache) {
	        bindings[scopeName] = bindingCache[definition];
	        return;
	      }
	      var match = definition.match(LOCAL_REGEXP);

	      if (!match) {
	        throw $compileMinErr('iscp',
	            "Invalid {3} for directive '{0}'." +
	            " Definition: {... {1}: '{2}' ...}",
	            directiveName, scopeName, definition,
	            (isController ? "controller bindings definition" :
	            "isolate scope definition"));
	      }

	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	      if (match[4]) {
	        bindingCache[definition] = bindings[scopeName];
	      }
	    });

	    return bindings;
	  }

	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (isObject(bindings.bindToController)) {
	      var controller = directive.controller;
	      var controllerAs = directive.controllerAs;
	      if (!controller) {
	        // There is no controller, there may or may not be a controllerAs property
	        throw $compileMinErr('noctrl',
	              "Cannot bind to controller without directive '{0}'s controller.",
	              directiveName);
	      } else if (!identifierForController(controller, controllerAs)) {
	        // There is a controller, but no identifier or controllerAs property
	        throw $compileMinErr('noident',
	              "Cannot bind to controller without identifier for directive '{0}'.",
	              directiveName);
	      }
	    }
	    return bindings;
	  }

	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
	            name);
	    }
	  }

	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	  this.directive = function registerDirective(name, directiveFactory) {
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = directive.require || (directive.controller && directive.name);
	                directive.restrict = directive.restrict || 'EA';
	                directive.$$moduleName = directiveFactory.$$moduleName;
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };

	  /**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */
	  this.component = function registerComponent(name, options) {
	    var controller = options.controller || function() {};

	    function factory($injector) {
	      function makeInjectable(fn) {
	        if (isFunction(fn) || isArray(fn)) {
	          return function(tElement, tAttrs) {
	            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
	          };
	        } else {
	          return fn;
	        }
	      }

	      var template = (!options.template && !options.templateUrl ? '' : options.template);
	      var ddo = {
	        controller: controller,
	        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
	        template: makeInjectable(template),
	        templateUrl: makeInjectable(options.templateUrl),
	        transclude: options.transclude,
	        scope: {},
	        bindToController: options.bindings || {},
	        restrict: 'E',
	        require: options.require
	      };

	      // Copy annotations (starting with $) over to the DDO
	      forEach(options, function(val, key) {
	        if (key.charAt(0) === '$') ddo[key] = val;
	      });

	      return ddo;
	    }

	    // TODO(pete) remove the following `forEach` before we release 1.6.0
	    // The component-router@0.2.0 looks for the annotations on the controller constructor
	    // Nothing in Angular looks for annotations on the factory function but we can't remove
	    // it from 1.5.x yet.

	    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	    // These could be used by libraries such as the new component router
	    forEach(options, function(val, key) {
	      if (key.charAt(0) === '$') {
	        factory[key] = val;
	        // Don't try to copy over annotations to named controller
	        if (isFunction(controller)) controller[key] = val;
	      }
	    });

	    factory.$inject = ['$injector'];

	    return this.directive(name, factory);
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };


	  var TTL = 10;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */
	  this.onChangesTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	      return this;
	    }
	    return TTL;
	  };

	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {

	    var SIMPLE_ATTR_NAME = /^\w/;
	    var specialAttrHolder = window.document.createElement('div');



	    var onChangesTtl = TTL;
	    // The onChanges hooks should all be run together in a single digest
	    // When changes occur, the call to trigger their hooks will be added to this queue
	    var onChangesQueue;

	    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	    function flushOnChangesQueue() {
	      try {
	        if (!(--onChangesTtl)) {
	          // We have hit the TTL limit so reset everything
	          onChangesQueue = undefined;
	          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
	        }
	        // We must run this hook in an apply since the $$postDigest runs outside apply
	        $rootScope.$apply(function() {
	          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
	            onChangesQueue[i]();
	          }
	          // Reset the queue to trigger a new schedule next time there is a change
	          onChangesQueue = undefined;
	        });
	      } finally {
	        onChangesTtl++;
	      }
	    }


	    function Attributes(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;

	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }

	      this.$$element = element;
	    }

	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }

	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },

	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.

	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(key),
	            observer = key,
	            nodeName;

	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }

	        this[key] = value;

	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }

	        nodeName = nodeName_(this.$$element);

	        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset') {
	          // sanitize img[srcset] values
	          var result = "";

	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);

	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (" " + trim(rawUris[innerIdx + 1]));
	          }

	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);

	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (" " + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }

	        if (writeAttr !== false) {
	          if (value === null || isUndefined(value)) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            if (SIMPLE_ATTR_NAME.test(attrName)) {
	              this.$$element.attr(attrName, value);
	            } else {
	              setSpecialAttr(this.$$element[0], attrName, value);
	            }
	          }
	        }

	        // fire observers
	        var $$observers = this.$$observers;
	        $$observers && forEach($$observers[observer], function(fn) {
	          try {
	            fn(value);
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        });
	      },


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));

	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });

	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };

	    function setSpecialAttr(element, attrName, value) {
	      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	      // so we have to jump through some hoops to get such an attribute
	      // https://github.com/angular/angular.js/pull/13318
	      specialAttrHolder.innerHTML = "<span " + attrName + ">";
	      var attributes = specialAttrHolder.firstChild.attributes;
	      var attribute = attributes[0];
	      // We have to remove the attribute from its container element before we can add it to the destination element
	      attributes.removeNamedItem(attribute.name);
	      attribute.value = value;
	      element.attributes.setNamedItem(attribute);
	    }

	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }


	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol == '{{' && endSymbol  == '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
	    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;

	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];

	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }

	      $element.data('$binding', bindings);
	    } : noop;

	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;

	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;

	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;

	    compile.$$createComment = function(directiveName, comment) {
	      var content = '';
	      if (debugInfoEnabled) {
	        content = ' ' + (directiveName || '') + ': ' + (comment || '') + ' ';
	      }
	      return window.document.createComment(content);
	    };

	    return compile;

	    //================================

	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }

	      var NOT_EMPTY = /\S+/;

	      // We can not compile top level text elements since text nodes can be merged and we will
	      // not be able to attach scope data to them, so we will wrap them in <span>
	      for (var i = 0, len = $compileNodes.length; i < len; i++) {
	        var domNode = $compileNodes[i];

	        if (domNode.nodeType === NODE_TYPE_TEXT && domNode.nodeValue.match(NOT_EMPTY) /* non-empty */) {
	          jqLiteWrapNode(domNode, $compileNodes[i] = window.document.createElement('span'));
	        }
	      }

	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        assertArg(scope, 'scope');

	        if (previousCompileContext && previousCompileContext.needsNewScope) {
	          // A parent directive did a replace and a directive on this element asked
	          // for transclusion, which caused us to lose a layer of element on which
	          // we could hold the new transclusion scope, so we will create it manually
	          // here.
	          scope = scope.$parent.$new();
	        }

	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;

	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }

	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }

	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }

	        compile.$$addScopeInfo($linkNode, scope);

	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
	        return $linkNode;
	      };
	    }

	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
	      }
	    }

	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();

	        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);

	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;

	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }

	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);

	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }

	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }

	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;

	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;


	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);

	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i+=3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }

	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];

	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	            } else {
	              childScope = scope;
	            }

	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;

	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

	            } else {
	              childBoundTranscludeFn = null;
	            }

	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }

	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
	      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }

	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      }

	      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
	      // so that they are available inside the `controllersBoundTransclude` function
	      var boundSlots = boundTranscludeFn.$$slots = createMap();
	      for (var slotName in transcludeFn.$$slots) {
	        if (transcludeFn.$$slots[slotName]) {
	          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
	        } else {
	          boundSlots[slotName] = null;
	        }
	      }

	      return boundTranscludeFn;
	    }

	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          className;

	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */
	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;

	            attr = nAttrs[j];
	            name = attr.name;
	            value = trim(attr.value);

	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }

	            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
	            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
	              attrStartName = name;
	              attrEndName = name.substr(0, name.length - 5) + 'end';
	              name = name.substr(0, name.length - 6);
	            }

	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }

	          // use class as directive
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          if (msie === 11) {
	            // Workaround for #11781
	            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
	              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
	              node.parentNode.removeChild(node.nextSibling);
	            }
	          }
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          try {
	            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	            if (match) {
	              nName = directiveNormalize(match[1]);
	              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[2]);
	              }
	            }
	          } catch (e) {
	            // turns out that under some circumstances IE9 throws errors when one attempts to read
	            // comment's node value.
	            // Just ignore it and continue. (Can't seem to reproduce in test case.)
	          }
	          break;
	      }

	      directives.sort(byPriority);
	      return directives;
	    }

	    /**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType == NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }

	      return jqLite(nodes);
	    }

	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }

	    /**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */
	    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
	      var compiled;

	      if (eager) {
	        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	      }
	      return function lazyCompilation() {
	        if (!compiled) {
	          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);

	          // Null out all of these references in order to make them eligible for garbage collection
	          // since this is a potentially long lived closure
	          $compileNodes = transcludeFn = previousCompileContext = null;
	        }
	        return compiled.apply(this, arguments);
	      };
	    }

	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};

	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective = previousCompileContext.newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          didScanForMultipleTransclusion = false,
	          mightHaveMultipleTransclusionError = false,
	          directiveValue;

	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;

	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;

	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }

	        if (directiveValue = directive.scope) {

	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }

	          newScopeDirective = newScopeDirective || directive;
	        }

	        directiveName = directive.name;

	        // If we encounter a condition that can result in transclusion on the directive,
	        // then scan ahead in the remaining directives for others that may cause a multiple
	        // transclusion error to be thrown during the compilation process.  If a matching directive
	        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
	        // compile the `transclude` function rather than doing it lazily in order to throw
	        // exceptions at the correct time
	        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
	            || (directive.transclude && !directive.$$tlb))) {
	                var candidateDirective;

	                for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++];) {
	                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
	                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
	                        mightHaveMultipleTransclusionError = true;
	                        break;
	                    }
	                }

	                didScanForMultipleTransclusion = true;
	        }

	        if (!directive.templateUrl && directive.controller) {
	          directiveValue = directive.controller;
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate("'" + directiveName + "' controller",
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }

	        if (directiveValue = directive.transclude) {
	          hasTranscludeDirective = true;

	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }

	          if (directiveValue == 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);

	            // Support: Chrome < 50
	            // https://github.com/angular/angular.js/issues/14041

	            // In the versions of V8 prior to Chrome 50, the document fragment that is created
	            // in the `replaceWith` function is improperly garbage collected despite still
	            // being referenced by the `parentNode` property of all of the child nodes.  By adding
	            // a reference to the fragment via a different property, we can avoid that incorrect
	            // behavior.
	            // TODO: remove this line after Chrome 50 has been released
	            $template[0].$$parentNode = $template[0].parentNode;

	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {

	            var slots = createMap();

	            $template = jqLite(jqLiteClone(compileNode)).contents();

	            if (isObject(directiveValue)) {

	              // We have transclusion slots,
	              // collect them up, compile them and store their transclusion functions
	              $template = [];

	              var slotMap = createMap();
	              var filledSlots = createMap();

	              // Parse the element selectors
	              forEach(directiveValue, function(elementSelector, slotName) {
	                // If an element selector starts with a ? then it is optional
	                var optional = (elementSelector.charAt(0) === '?');
	                elementSelector = optional ? elementSelector.substring(1) : elementSelector;

	                slotMap[elementSelector] = slotName;

	                // We explicitly assign `null` since this implies that a slot was defined but not filled.
	                // Later when calling boundTransclusion functions with a slot name we only error if the
	                // slot is `undefined`
	                slots[slotName] = null;

	                // filledSlots contains `true` for all slots that are either optional or have been
	                // filled. This is used to check that we have not missed any required slots
	                filledSlots[slotName] = optional;
	              });

	              // Add the matching elements into their slot
	              forEach($compileNode.contents(), function(node) {
	                var slotName = slotMap[directiveNormalize(nodeName_(node))];
	                if (slotName) {
	                  filledSlots[slotName] = true;
	                  slots[slotName] = slots[slotName] || [];
	                  slots[slotName].push(node);
	                } else {
	                  $template.push(node);
	                }
	              });

	              // Check for required slots that were not filled
	              forEach(filledSlots, function(filled, slotName) {
	                if (!filled) {
	                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
	                }
	              });

	              for (var slotName in slots) {
	                if (slots[slotName]) {
	                  // Only define a transclusion function if the slot was filled
	                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
	                }
	              }
	            }

	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
	                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
	            childTranscludeFn.$$slots = slots;
	          }
	        }

	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;

	          directiveValue = denormalizeTemplate(directiveValue);

	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  directiveName, '');
	            }

	            replaceWith(jqCollection, $compileNode, compileNode);

	            var newTemplateAttrs = {$attr: {}};

	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

	            if (newIsolateScopeDirective || newScopeDirective) {
	              // The original directive caused the current element to be replaced but this element
	              // also needs to have a new scope, so we need to tell the template directives
	              // that they would need to get their scope from further up, if they require transclusion
	              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }

	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          if (directive.replace) {
	            replaceDirective = directive;
	          }

	          /* jshint -W021 */
	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	          /* jshint +W021 */
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            if (isFunction(linkFn)) {
	              addLinkFns(null, linkFn, attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }

	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }

	      }

	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;

	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;

	      ////////////////////

	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }

	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
	        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
	            attrs, scopeBindingInfo;

	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }

	        controllerScope = scope;
	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        } else if (newScopeDirective) {
	          controllerScope = scope.$parent;
	        }

	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	          // expose the slots on the `$transclude` function
	          transcludeFn.isSlotFilled = function(slotName) {
	            return !!boundTranscludeFn.$$slots[slotName];
	          };
	        }

	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
	        }

	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,
	                                        isolateScope.$$isolateBindings,
	                                        newIsolateScopeDirective);
	          if (scopeBindingInfo.removeWatches) {
	            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
	          }
	        }

	        // Initialize bindToController bindings
	        for (var name in elementControllers) {
	          var controllerDirective = controllerDirectives[name];
	          var controller = elementControllers[name];
	          var bindings = controllerDirective.$$bindings.bindToController;

	          if (controller.identifier && bindings) {
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          } else {
	            controller.bindingInfo = {};
	          }

	          var controllerResult = controller();
	          if (controllerResult !== controller.instance) {
	            // If the controller constructor has a return value, overwrite the instance
	            // from setupControllers
	            controller.instance = controllerResult;
	            $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
	            controller.bindingInfo.removeWatches && controller.bindingInfo.removeWatches();
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          }
	        }

	        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	        forEach(controllerDirectives, function(controllerDirective, name) {
	          var require = controllerDirective.require;
	          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
	            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
	          }
	        });

	        // Handle the init and destroy lifecycle hooks on all controllers that have them
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$onChanges)) {
	            controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
	          }
	          if (isFunction(controllerInstance.$onInit)) {
	            controllerInstance.$onInit();
	          }
	          if (isFunction(controllerInstance.$onDestroy)) {
	            controllerScope.$on('$destroy', function callOnDestroyHook() {
	              controllerInstance.$onDestroy();
	            });
	          }
	        });

	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // Trigger $postLink lifecycle hooks
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$postLink)) {
	            controllerInstance.$postLink();
	          }
	        });

	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
	          var transcludeControllers;
	          // No scope passed in:
	          if (!isScope(scope)) {
	            slotName = futureParentElement;
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }

	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          if (slotName) {
	            // slotTranscludeFn can be one of three things:
	            //  * a transclude function - a filled slot
	            //  * `null` - an optional slot that was not filled
	            //  * `undefined` - a slot that was not declared (i.e. invalid)
	            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
	            if (slotTranscludeFn) {
	              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	            } else if (isUndefined(slotTranscludeFn)) {
	              throw $compileMinErr('noslot',
	               'No parent directive that requires a transclusion with slot name "{0}". ' +
	               'Element: {1}',
	               slotName, startingTag($element));
	            }
	          } else {
	            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	          }
	        }
	      }
	    }

	    function getControllers(directiveName, require, $element, elementControllers) {
	      var value;

	      if (isString(require)) {
	        var match = require.match(REQUIRE_PREFIX_REGEXP);
	        var name = require.substring(match[0].length);
	        var inheritType = match[1] || match[3];
	        var optional = match[2] === '?';

	        //If only parents then start at the parent element
	        if (inheritType === '^^') {
	          $element = $element.parent();
	        //Otherwise attempt getting the controller from elementControllers in case
	        //the element is transcluded (and has no data) and to avoid .data if possible
	        } else {
	          value = elementControllers && elementControllers[name];
	          value = value && value.instance;
	        }

	        if (!value) {
	          var dataName = '$' + name + 'Controller';
	          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	        }

	        if (!value && !optional) {
	          throw $compileMinErr('ctreq',
	              "Controller '{0}', required by directive '{1}', can't be found!",
	              name, directiveName);
	        }
	      } else if (isArray(require)) {
	        value = [];
	        for (var i = 0, ii = require.length; i < ii; i++) {
	          value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	        }
	      } else if (isObject(require)) {
	        value = {};
	        forEach(require, function(controller, property) {
	          value[property] = getControllers(directiveName, controller, $element, elementControllers);
	        });
	      }

	      return value || null;
	    }

	    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
	      var elementControllers = createMap();
	      for (var controllerKey in controllerDirectives) {
	        var directive = controllerDirectives[controllerKey];
	        var locals = {
	          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	          $element: $element,
	          $attrs: attrs,
	          $transclude: transcludeFn
	        };

	        var controller = directive.controller;
	        if (controller == '@') {
	          controller = attrs[directive.name];
	        }

	        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

	        // For directives with element transclusion the element is a comment.
	        // In this case .data will not attach any data.
	        // Instead, we save the controllers for the element in a local hash and attach to .data
	        // later, once we have the actual element.
	        elementControllers[directive.name] = controllerInstance;
	        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	      }
	      return elementControllers;
	    }

	    // Depending upon the context in which a directive finds itself it might need to have a new isolated
	    // or child scope created. For instance:
	    // * if the directive has been pulled into a template because another directive with a higher priority
	    // asked for element transclusion
	    // * if the directive itself asks for transclusion but it is at the root of a template and the original
	    // element was replaced. See https://github.com/angular/angular.js/issues/12936
	    function markDirectiveScope(directives, isolateScope, newScope) {
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
	      }
	    }

	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          try {
	            directive = directives[i];
	            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
	                 directive.restrict.indexOf(location) != -1) {
	              if (startAttrName) {
	                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	              }
	              if (!directive.$$bindings) {
	                var bindings = directive.$$bindings =
	                    parseDirectiveBindings(directive, directive.name);
	                if (isObject(bindings.isolateScope)) {
	                  directive.$$isolateBindings = bindings.isolateScope;
	                }
	              }
	              tDirectives.push(directive);
	              match = directive;
	            }
	          } catch (e) { $exceptionHandler(e); }
	        }
	      }
	      return match;
	    }


	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr,
	          $element = dst.$$element;

	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) != '$') {
	          if (src[key] && src[key] !== value) {
	            value += (key === 'style' ? ';' : ' ') + src[key];
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });

	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        if (key == 'class') {
	          safeAddClass($element, value);
	          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
	        } else if (key == 'style') {
	          $element.attr('style', $element.attr('style') + ';' + value);
	          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
	          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	          // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
	          dst[key] = value;
	          dstAttr[key] = srcAttr[key];
	        }
	      });
	    }


	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;

	      $compileNode.empty();

	      $templateRequest(templateUrl)
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

	          content = denormalizeTemplate(content);

	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  origAsyncDirective.name, templateUrl);
	            }

	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

	            if (isObject(origAsyncDirective.scope)) {
	              // the original directive that caused the template to be loaded async required
	              // an isolate scope
	              markDirectiveScope(templateDirectives, true);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }

	          directives.unshift(derivedSyncDirective);

	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node == compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];

	            if (scope.$$destroyed) continue;

	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;

	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn);
	          }
	          linkQueue = null;
	        });

	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
	        }
	      };
	    }


	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }

	    function assertNoDuplicate(what, previousDirective, directive, element) {

	      function wrapModuleNameIfDefined(moduleName) {
	        return moduleName ?
	          (' (module: ' + moduleName + ')') :
	          '';
	      }

	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
	            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
	            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
	      }
	    }


	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;

	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }


	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = window.document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }


	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName == "srcdoc") {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      if (attrNormalizedName == "xlinkHref" ||
	          (tag == "form" && attrNormalizedName == "action") ||
	          (tag != "img" && (attrNormalizedName == "src" ||
	                            attrNormalizedName == "ngSrc"))) {
	        return $sce.RESOURCE_URL;
	      }
	    }


	    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
	      var trustedContext = getTrustedContext(node, name);
	      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

	      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

	      // no interpolation found -> ignore
	      if (!interpolateFn) return;


	      if (name === "multiple" && nodeName_(node) === "select") {
	        throw $compileMinErr("selmulti",
	            "Binding to the 'multiple' attribute is not supported. Element: {0}",
	            startingTag(node));
	      }

	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));

	                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	                  throw $compileMinErr('nodomevents',
	                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
	                          "ng- versions (such as ng-click instead of onclick) instead.");
	                }

	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }

	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;

	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);

	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue != oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }


	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;

	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] == firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;

	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }

	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }

	      // Append all the `elementsToRemove` to a fragment. This will...
	      // - remove them from the DOM
	      // - allow them to still be traversed with .nextSibling
	      // - allow a single fragment.qSA to fetch all elements being removed
	      var fragment = window.document.createDocumentFragment();
	      for (i = 0; i < removeCount; i++) {
	        fragment.appendChild(elementsToRemove[i]);
	      }

	      if (jqLite.hasData(firstElementToRemove)) {
	        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	        // data here because there's no public interface in jQuery to do that and copying over
	        // event listeners (which is the main use of private data) wouldn't work anyway.
	        jqLite.data(newNode, jqLite.data(firstElementToRemove));

	        // Remove $destroy event listeners from `firstElementToRemove`
	        jqLite(firstElementToRemove).off('$destroy');
	      }

	      // Cleanup any data/listeners on the elements and children.
	      // This includes invoking the $destroy event on any elements with listeners.
	      jqLite.cleanData(fragment.querySelectorAll('*'));

	      // Update the jqLite collection to only contain the `newNode`
	      for (i = 1; i < removeCount; i++) {
	        delete elementsToRemove[i];
	      }
	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }


	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }


	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }


	    // Set up $watches for isolate scope and controller bindings. This process
	    // only occurs for isolate scopes and new scopes with controllerAs.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
	      var removeWatchCollection = [];
	      var initialChanges = {};
	      var changes;
	      forEach(bindings, function initializeBinding(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, or &
	        lastValue,
	        parentGet, parentSet, compare, removeWatch;

	        switch (mode) {

	          case '@':
	            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
	              destination[scopeName] = attrs[attrName] = void 0;
	            }
	            attrs.$observe(attrName, function(value) {
	              if (isString(value) || isBoolean(value)) {
	                var oldValue = destination[scopeName];
	                recordChanges(scopeName, value, oldValue);
	                destination[scopeName] = value;
	              }
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            lastValue = attrs[attrName];
	            if (isString(lastValue)) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(lastValue)(scope);
	            } else if (isBoolean(lastValue)) {
	              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	              // the value to boolean rather than a string, so we special case this situation
	              destination[scopeName] = lastValue;
	            }
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	            break;

	          case '=':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;

	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              compare = function simpleCompare(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",
	                  attrs[attrName], attrName, directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              return lastValue = parentValue;
	            };
	            parentValueWatch.$stateful = true;
	            if (definition.collection) {
	              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            removeWatchCollection.push(removeWatch);
	            break;

	          case '<':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;

	            parentGet = $parse(attrs[attrName]);

	            destination[scopeName] = parentGet(scope);
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);

	            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
	              if (newValue === oldValue) {
	                // If the new and old values are identical then this is the first time the watch has been triggered
	                // So instead we use the current value on the destination as the old value
	                oldValue = destination[scopeName];
	              }
	              recordChanges(scopeName, newValue, oldValue);
	              destination[scopeName] = newValue;
	            }, parentGet.literal);

	            removeWatchCollection.push(removeWatch);
	            break;

	          case '&':
	            // Don't assign Object.prototype method to scope
	            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;

	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });

	      function recordChanges(key, currentValue, previousValue) {
	        if (isFunction(destination.$onChanges) && currentValue !== previousValue) {
	          // If we have not already scheduled the top level onChangesQueue handler then do so now
	          if (!onChangesQueue) {
	            scope.$$postDigest(flushOnChangesQueue);
	            onChangesQueue = [];
	          }
	          // If we have not already queued a trigger of onChanges for this controller then do so now
	          if (!changes) {
	            changes = {};
	            onChangesQueue.push(triggerOnChangesHook);
	          }
	          // If the has been a change on this property already then we need to reuse the previous value
	          if (changes[key]) {
	            previousValue = changes[key].previousValue;
	          }
	          // Store this change
	          changes[key] = new SimpleChange(previousValue, currentValue);
	        }
	      }

	      function triggerOnChangesHook() {
	        destination.$onChanges(changes);
	        // Now clear the changes so that we schedule onChanges when more changes arrive
	        changes = undefined;
	      }

	      return {
	        initialChanges: initialChanges,
	        removeWatches: removeWatchCollection.length && function removeWatches() {
	          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
	            removeWatchCollection[i]();
	          }
	        }
	      };
	    }
	  }];
	}

	function SimpleChange(previous, current) {
	  this.previousValue = previous;
	  this.currentValue = current;
	}
	SimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };


	var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return camelCase(name.replace(PREFIX_REGEXP, ''));
	}

	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */

	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */


	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */



	/**
	 * Closure compiler type information
	 */

	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);

	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token == tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}

	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;

	  if (i <= 1) {
	    return jqNodes;
	  }

	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT) {
	      splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}

	var $controllerMinErr = minErr('$controller');


	var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}


	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */
	  this.has = function(name) {
	    return controllers.hasOwnProperty(name);
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };


	  this.$get = ['$injector', '$window', function($injector, $window) {

	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function $controller(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }

	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            "Badly formed controller string '{0}'. " +
	            "Must match `__name__ as __id__` or `__name__`.", expression);
	        }
	        constructor = match[1],
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);

	        assertArgFn(expression, constructor, true);
	      }

	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);

	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }

	        var instantiate;
	        return instantiate = extend(function $controllerInit() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }

	      instance = $injector.instantiate(expression, locals, constructor);

	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }

	      return instance;
	    };

	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
	          name, identifier);
	      }

	      locals.$scope[identifier] = instance;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * ```js
	 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
	 *     return function(exception, cause) {
	 *       exception.message += ' (caused by "' + cause + '")';
	 *       throw exception;
	 *     };
	 *   });
	 * ```
	 *
	 * This example will override the normal action of `$exceptionHandler`, to make angular
	 * exceptions fail hard when they happen, instead of just logging to the console.
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}

	var $$ForceReflowProvider = function() {
	  this.$get = ['$document', function($document) {
	    return function(domNode) {
	      //the line below will force the browser to perform a repaint so
	      //that all the animated elements within the animation frame will
	      //be properly updated and drawn on screen. This is required to
	      //ensure that the preparation animation is properly flushed so that
	      //the active state picks up from there. DO NOT REMOVE THIS LINE.
	      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
	      if (domNode) {
	        if (!domNode.nodeType && domNode instanceof jqLite) {
	          domNode = domNode[0];
	        }
	      } else {
	        domNode = $document[0].body;
	      }
	      return domNode.offsetWidth + 1;
	    };
	  }];
	};

	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var $httpMinErr = minErr('$http');
	var $httpMinErrLegacyFn = function(method) {
	  return function() {
	    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
	  };
	};

	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}


	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */

	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });

	      return parts.join('&');
	    };
	  };
	}

	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');

	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value, index) {
	            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}

	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }

	  return data;
	}

	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}

	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;

	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }

	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }

	  return parsed;
	}


	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;

	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);

	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === void 0) {
	        value = null;
	      }
	      return value;
	    }

	    return headersObj;
	  };
	}


	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }

	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });

	  return data;
	}


	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}


	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],

	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],

	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },

	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',

	    paramSerializer: '$httpParamSerializer'
	  };

	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };

	  var useLegacyPromise = true;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useLegacyPromiseExtensions
	   * @description
	   *
	   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
	   * This should be used to make sure that applications work without these methods.
	   *
	   * Defaults to true. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useLegacyPromiseExtensions = function(value) {
	    if (isDefined(value)) {
	      useLegacyPromise = !!value;
	      return this;
	    }
	    return useLegacyPromise;
	  };

	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];

	  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
	      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

	    var defaultCache = $cacheFactory('$http');

	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];

	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });

	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and
	     * will result in the success callback being called. Note that if the response is a redirect,
	     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
	     * called for such responses.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Deprecation Notice
	     * <div class="alert alert-danger">
	     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
	     *   Use the standard `then` method instead.
	     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
	     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
	     * </div>
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory($http)` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';

	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;

	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || "Request failed";
	              $scope.status = response.status;
	          });
	        };

	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {

	      if (!isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }

	      if (!isString(requestConfig.url)) {
	        throw minErr('$http')('badreq', 'Http request configuration url must be a string.  Received: {0}', requestConfig.url);
	      }

	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer
	      }, requestConfig);

	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	        $injector.get(config.paramSerializer) : config.paramSerializer;

	      var serverRequest = function(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	                delete headers[header];
	            }
	          });
	        }

	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }

	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      };

	      var chain = [serverRequest, undefined];
	      var promise = $q.when(config);

	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          chain.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          chain.push(interceptor.response, interceptor.responseError);
	        }
	      });

	      while (chain.length) {
	        var thenFn = chain.shift();
	        var rejectFn = chain.shift();

	        promise = promise.then(thenFn, rejectFn);
	      }

	      if (useLegacyPromise) {
	        promise.success = function(fn) {
	          assertArgFn(fn, 'fn');

	          promise.then(function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };

	        promise.error = function(fn) {
	          assertArgFn(fn, 'fn');

	          promise.then(null, function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };
	      } else {
	        promise.success = $httpMinErrLegacyFn('success');
	        promise.error = $httpMinErrLegacyFn('error');
	      }

	      return promise;

	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        resp.data = transformData(response.data, response.headers, response.status,
	                                  config.transformResponse);
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }

	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};

	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });

	        return processedHeaders;
	      }

	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

	        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);

	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }

	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }

	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }
	    }

	    $http.pendingRequests = [];

	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');

	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');

	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;


	    return $http;


	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }


	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }


	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          url = buildUrl(config.url, config.paramSerializer(config.params));

	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);


	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }

	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }


	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }

	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType,
	            createApplyHandlers(config.eventHandlers),
	            createApplyHandlers(config.uploadEventHandlers));
	      }

	      return promise;

	      function createApplyHandlers(eventHandlers) {
	        if (eventHandlers) {
	          var applyHandlers = {};
	          forEach(eventHandlers, function(eventHandler, key) {
	            applyHandlers[key] = function(event) {
	              if (useApplyAsync) {
	                $rootScope.$applyAsync(callEventHandler);
	              } else if ($rootScope.$$phase) {
	                callEventHandler();
	              } else {
	                $rootScope.$apply(callEventHandler);
	              }

	              function callEventHandler() {
	                eventHandler(event);
	              }
	            };
	          });
	          return applyHandlers;
	        }
	      }


	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }

	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }

	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }


	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	        status = status >= -1 ? status : 0;

	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }

	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }

	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }


	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $xhrFactory
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
	function $xhrFactoryProvider() {
	  this.$get = function() {
	    return function createXhr() {
	      return new window.XMLHttpRequest();
	    };
	  };
	}

	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $window
	 * @requires $document
	 * @requires $xhrFactory
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
	    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
	  }];
	}

	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
	    $browser.$$incOutstandingRequestCount();
	    url = url || $browser.url();

	    if (lowercase(method) == 'jsonp') {
	      var callbackId = '_' + (callbacks.counter++).toString(36);
	      callbacks[callbackId] = function(data) {
	        callbacks[callbackId].data = data;
	        callbacks[callbackId].called = true;
	      };

	      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
	          callbackId, function(status, text) {
	        completeRequest(callback, status, callbacks[callbackId].data, "", text);
	        callbacks[callbackId] = noop;
	      });
	    } else {

	      var xhr = createXhr(method, url);

	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });

	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';

	        // responseText is the old-school way of retrieving response (supported by IE9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;

	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
	        }

	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };

	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };

	      xhr.onerror = requestError;
	      xhr.onabort = requestError;

	      forEach(eventHandlers, function(value, key) {
	          xhr.addEventListener(key, value);
	      });

	      forEach(uploadEventHandlers, function(value, key) {
	        xhr.upload.addEventListener(key, value);
	      });

	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }

	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }

	      xhr.send(isUndefined(post) ? null : post);
	    }

	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }


	    function timeoutRequest() {
	      jsonpDone && jsonpDone();
	      xhr && xhr.abort();
	    }

	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (isDefined(timeoutId)) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;

	      callback(status, response, headersString, statusText);
	      $browser.$$completeOutstandingRequest(noop);
	    }
	  };

	  function jsonpReq(url, callbackId, done) {
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = "text/javascript";
	    script.src = url;
	    script.async = true;

	    callback = function(event) {
	      removeEventListenerFn(script, "load", callback);
	      removeEventListenerFn(script, "error", callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = "unknown";

	      if (event) {
	        if (event.type === "load" && !callbacks[callbackId].called) {
	          event = { type: "error" };
	        }
	        text = event.type;
	        status = event.type === "error" ? 404 : 200;
	      }

	      if (done) {
	        done(status, text);
	      }
	    };

	    addEventListenerFn(script, "load", callback);
	    addEventListenerFn(script, "error", callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}

	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
	      "interpolations that concatenate multiple expressions when a trusted value is " +
	      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
	};

	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
	};

	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);

	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };


	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }

	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }

	    function stringify(value) {
	      if (value == null) { // null || undefined
	        return '';
	      }
	      switch (typeof value) {
	        case 'string':
	          break;
	        case 'number':
	          value = '' + value;
	          break;
	        default:
	          value = toJson(value);
	      }

	      return value;
	    }

	    //TODO: this is the same as the constantWatchDelegate in parse.js
	    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantInterpolateWatch(scope) {
	        unwatch();
	        return constantInterp(scope);
	      }, listener, objectEquality);
	    }

	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * ####Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      // Provide a quick exit and simplified result function for text with no interpolation
	      if (!text.length || text.indexOf(startSymbol) === -1) {
	        var constantInterp;
	        if (!mustHaveExpression) {
	          var unescapedText = unescapeText(text);
	          constantInterp = valueFn(unescapedText);
	          constantInterp.exp = text;
	          constantInterp.expressions = [];
	          constantInterp.$$watchDelegate = constantWatchDelegate;
	        }
	        return constantInterp;
	      }

	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];

	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }

	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }

	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };

	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };

	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);

	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }

	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }

	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }

	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }


	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };


	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };

	    return $interpolate;
	  }];
	}

	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
	       function($rootScope,   $window,   $q,   $$q,   $browser) {
	    var intervals = {};


	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;

	      count = isDefined(count) ? count : 0;

	      promise.$$intervalId = setInterval(function tick() {
	        if (skipApply) {
	          $browser.defer(callback);
	        } else {
	          $rootScope.$evalAsync(callback);
	        }
	        deferred.notify(iteration++);

	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }

	        if (!skipApply) $rootScope.$apply();

	      }, delay);

	      intervals[promise.$$intervalId] = deferred;

	      return promise;

	      function callback() {
	        if (!hasParams) {
	          fn(iteration);
	        } else {
	          fn.apply(null, args);
	        }
	      }
	    }


	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };

	    return interval;
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */

	var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');


	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;

	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }

	  return segments.join('/');
	}

	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);

	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}


	function parseAppUrl(relativeUrl, locationObj) {
	  var prefixed = (relativeUrl.charAt(0) !== '/');
	  if (prefixed) {
	    relativeUrl = '/' + relativeUrl;
	  }
	  var match = urlResolve(relativeUrl);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);

	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}


	/**
	 *
	 * @param {string} begin
	 * @param {string} whole
	 * @returns {string} returns text from whole after begin or undefined if it does not begin with
	 *                   expected string.
	 */
	function beginsWith(begin, whole) {
	  if (whole.indexOf(begin) === 0) {
	    return whole.substr(begin.length);
	  }
	}


	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index == -1 ? url : url.substr(0, index);
	}

	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}


	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}

	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}


	/**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix url path prefix
	 */
	function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = beginsWith(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }

	    parseAppUrl(pathUrl, this);

	    if (!this.$$path) {
	      this.$$path = '/';
	    }

	    this.$$compose();
	  };

	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;

	    if (isDefined(appUrl = beginsWith(appBase, url))) {
	      prevAppUrl = appUrl;
	      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {
	        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile == url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
	    var withoutHashUrl;

	    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

	      // The rest of the url starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }

	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      if (this.$$html5) {
	        withoutHashUrl = withoutBaseUrl;
	      } else {
	        withoutHashUrl = '';
	        if (isUndefined(withoutBaseUrl)) {
	          appBase = url;
	          this.replace();
	        }
	      }
	    }

	    parseAppUrl(withoutHashUrl, this);

	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

	    this.$$compose();

	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

	      var firstPathSegmentMatch;

	      //Get the relative path from the input URL.
	      if (url.indexOf(base) === 0) {
	        url = url.replace(base, '');
	      }

	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }

	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };

	  /**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) == stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }

	    var rewrittenUrl;
	    var appUrl;

	    if (appBase == stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };

	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };

	}


	var locationPrototype = {

	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,

	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,

	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full url representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full url
	   */
	  absUrl: locationGetter('$$absUrl'),

	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }

	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');

	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current url
	   */
	  protocol: locationGetter('$$protocol'),

	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current url.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current url.
	   */
	  host: locationGetter('$$host'),

	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),

	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current url when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {string} path
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) == '/' ? path : '/' + path;
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current url when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the url.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });

	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }

	    this.$$compose();
	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};

	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);

	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }

	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;

	    return this;
	  };
	});


	function locationGetter(property) {
	  return function() {
	    return this[property];
	  };
	}


	function locationGetterSetter(property, preprocess) {
	  return function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }

	    this[property] = preprocess(value);
	    this.$$compose();

	    return this;
	  };
	}


	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */

	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {

	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }

	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }

	      if (isBoolean(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }

	      return this;
	    } else {
	      return html5Mode;
	    }
	  };

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;

	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          "$location in HTML5 mode requires a <base> tag to be present!");
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    var appBaseNoFile = stripFile(appBase);

	    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);

	    $location.$$state = $browser.state();

	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);

	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;

	        throw e;
	      }
	    }

	    $rootElement.on('click', function(event) {
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then

	      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

	      var elm = jqLite(event.target);

	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }

	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');

	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }

	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;

	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() != $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });


	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }

	    var initializing = true;

	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {

	      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {
	        // If we are navigating outside of the app then force a reload
	        $window.location.href = newUrl;
	        return;
	      }

	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;
	        newUrl = trimEmptyHash(newUrl);
	        $location.$$parse(newUrl);
	        $location.$$state = newState;

	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;

	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;

	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });

	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

	      if (initializing || urlOrStateChanged) {
	        initializing = false;

	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;

	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;

	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }

	      $location.$$replace = false;

	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });

	    return $location;

	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}

	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;

	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };

	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),

	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),

	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),

	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),

	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');

	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      }())
	    };

	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }

	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;

	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) {}

	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }

	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $parseMinErr = minErr('$parse');

	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are generally considered safe because these expressions only have direct
	// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
	// obtaining a reference to native JS functions such as the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
	// against the expression language, but not to prevent exploits that were enabled by exposing
	// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
	// practice and therefore we are not even trying to protect against interaction with an object
	// explicitly exposed in this way.
	//
	// In general, it is not possible to access a Window object from an angular expression unless a
	// window or some DOM object that has a reference to window is published onto a Scope.
	// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
	// native objects.
	//
	// See https://docs.angularjs.org/guide/security


	function ensureSafeMemberName(name, fullExpression) {
	  if (name === "__defineGetter__" || name === "__defineSetter__"
	      || name === "__lookupGetter__" || name === "__lookupSetter__"
	      || name === "__proto__") {
	    throw $parseMinErr('isecfld',
	        'Attempting to access a disallowed field in Angular expressions! '
	        + 'Expression: {0}', fullExpression);
	  }
	  return name;
	}

	function getStringValue(name) {
	  // Property names must be strings. This means that non-string objects cannot be used
	  // as keys in an object. Any non-string object, including a number, is typecasted
	  // into a string via the toString method.
	  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	  //
	  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	  // to a string. It's not always possible. If `name` is an object and its `toString` method is
	  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	  //
	  // TypeError: Cannot convert object to primitive value
	  //
	  // For performance reasons, we don't catch this error here and allow it to propagate up the call
	  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
	  // such a 'broken' object as a key.
	  return name + '';
	}

	function ensureSafeObject(obj, fullExpression) {
	  // nifty check if obj is Function that is fast and works across iframes and other contexts
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isWindow(obj)
	        obj.window === obj) {
	      throw $parseMinErr('isecwindow',
	          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isElement(obj)
	        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
	      throw $parseMinErr('isecdom',
	          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// block Object so that we can't get hold of dangerous Object.* methods
	        obj === Object) {
	      throw $parseMinErr('isecobj',
	          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    }
	  }
	  return obj;
	}

	var CALL = Function.prototype.call;
	var APPLY = Function.prototype.apply;
	var BIND = Function.prototype.bind;

	function ensureSafeFunction(obj, fullExpression) {
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    } else if (obj === CALL || obj === APPLY || obj === BIND) {
	      throw $parseMinErr('isecff',
	        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    }
	  }
	}

	function ensureSafeAssignContext(obj, fullExpression) {
	  if (obj) {
	    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||
	        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
	      throw $parseMinErr('isecaf',
	        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
	    }
	  }
	}

	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


	/////////////////////////////////////////


	/**
	 * @constructor
	 */
	var Lexer = function(options) {
	  this.options = options;
	};

	Lexer.prototype = {
	  constructor: Lexer,

	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];

	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === "'") {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdentifierStart(this.peekMultichar())) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },

	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },

	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },

	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === "string";
	  },

	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },

	  isIdentifierStart: function(ch) {
	    return this.options.isIdentifierStart ?
	        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierStart(ch);
	  },

	  isValidIdentifierStart: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },

	  isIdentifierContinue: function(ch) {
	    return this.options.isIdentifierContinue ?
	        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierContinue(ch);
	  },

	  isValidIdentifierContinue: function(ch, cp) {
	    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
	  },

	  codePointAt: function(ch) {
	    if (ch.length === 1) return ch.charCodeAt(0);
	    /*jshint bitwise: false*/
	    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
	    /*jshint bitwise: true*/
	  },

	  peekMultichar: function() {
	    var ch = this.text.charAt(this.index);
	    var peek = this.peek();
	    if (!peek) {
	      return ch;
	    }
	    var cp1 = ch.charCodeAt(0);
	    var cp2 = peek.charCodeAt(0);
	    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
	      return ch + peek;
	    }
	    return ch;
	  },

	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },

	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },

	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch == '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch == 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) == 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) == 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },

	  readIdent: function() {
	    var start = this.index;
	    this.index += this.peekMultichar().length;
	    while (this.index < this.text.length) {
	      var ch = this.peekMultichar();
	      if (!this.isIdentifierContinue(ch)) {
	        break;
	      }
	      this.index += ch.length;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },

	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};

	var AST = function(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};

	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';
	AST.LocalsExpression = 'LocalsExpression';

	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';

	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);

	    var value = this.program();

	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }

	    return value;
	  },

	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },

	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },

	  filterChain: function() {
	    var left = this.expression();
	    var token;
	    while ((token = this.expect('|'))) {
	      left = this.filter(left);
	    }
	    return left;
	  },

	  expression: function() {
	    return this.assignment();
	  },

	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },

	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },

	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },

	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },

	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },

	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },

	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },

	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },

	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },

	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.selfReferential[this.consume().text]);
	    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
	      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }

	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },

	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

	    while (this.expect(':')) {
	      args.push(this.expression());
	    }

	    return result;
	  },

	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.expression());
	      } while (this.expect(','));
	    }
	    return args;
	  },

	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },

	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },

	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');

	    return { type: AST.ArrayExpression, elements: elements };
	  },

	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	        } else {
	          this.throwError("invalid key", this.peek());
	        }
	        this.consume(':');
	        property.value = this.expression();
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');

	    return {type: AST.ObjectExpression, properties: properties };
	  },

	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },

	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }

	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },

	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },

	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },

	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },

	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },

	  selfReferential: {
	    'this': {type: AST.ThisExpression },
	    '$locals': {type: AST.LocalsExpression }
	  }
	};

	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}

	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}

	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}

	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  case AST.LocalsExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}

	function getInputs(body) {
	  if (body.length != 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}

	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}

	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}

	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}

	function isConstant(ast) {
	  return ast.constant;
	}

	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTCompiler.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      expensiveChecks: expensiveChecks,
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      this.return_(result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';

	    /* jshint -W054 */
	    var fn = (new Function('$filter',
	        'ensureSafeMemberName',
	        'ensureSafeObject',
	        'ensureSafeFunction',
	        'getStringValue',
	        'ensureSafeAssignContext',
	        'ifDefined',
	        'plus',
	        'text',
	        fnString))(
	          this.$filter,
	          ensureSafeMemberName,
	          ensureSafeObject,
	          ensureSafeFunction,
	          getStringValue,
	          ensureSafeAssignContext,
	          ifDefined,
	          plusFn,
	          expression);
	    /* jshint +W054 */
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  USE: 'use',

	  STRICT: 'strict',

	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },

	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },

	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },

	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },

	  body: function(section) {
	    return this.state[section].body.join('');
	  },

	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      ensureSafeMemberName(ast.name);
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.not(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
	        self.addEnsureSafeObject(intoId);
	      }
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (create && create !== 1) {
	            self.addEnsureSafeAssignContext(left);
	          }
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.getStringValue(right);
	            self.addEnsureSafeMemberName(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.ensureSafeObject(self.computedMember(left, right));
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            ensureSafeMemberName(ast.property.name);
	            if (create && create !== 1) {
	              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
	              expression = self.ensureSafeObject(expression);
	            }
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	        }, function() {
	          self.assign(intoId, 'undefined');
	        });
	        recursionFn(intoId);
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            self.addEnsureSafeFunction(right);
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, self.nextId(), undefined, function(argument) {
	                args.push(self.ensureSafeObject(argument));
	              });
	            });
	            if (left.name) {
	              if (!self.state.expensiveChecks) {
	                self.addEnsureSafeObject(left.context);
	              }
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            expression = self.ensureSafeObject(expression);
	            self.assign(intoId, expression);
	          }, function() {
	            self.assign(intoId, 'undefined');
	          });
	          recursionFn(intoId);
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      if (!isAssignable(ast.left)) {
	        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
	      }
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
	          self.addEnsureSafeAssignContext(left.context);
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        self.recurse(property.value, self.nextId(), undefined, function(expr) {
	          args.push(self.escape(
	              property.key.type === AST.Identifier ? property.key.name :
	                ('' + property.key.value)) +
	              ':' + expr);
	        });
	      });
	      expression = '{' + args.join(',') + '}';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn('s');
	      break;
	    case AST.LocalsExpression:
	      this.assign(intoId, 'l');
	      recursionFn('l');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn('v');
	      break;
	    }
	  },

	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },

	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },

	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },

	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },

	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },

	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },

	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },

	  not: function(expression) {
	    return '!(' + expression + ')';
	  },

	  notNull: function(expression) {
	    return expression + '!=null';
	  },

	  nonComputedMember: function(left, right) {
	    var SAFE_IDENTIFIER = /[$_a-zA-Z][$_a-zA-Z0-9]*/;
	    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
	    if (SAFE_IDENTIFIER.test(right)) {
	      return left + '.' + right;
	    } else {
	      return left  + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
	    }
	  },

	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },

	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },

	  addEnsureSafeObject: function(item) {
	    this.current().body.push(this.ensureSafeObject(item), ';');
	  },

	  addEnsureSafeMemberName: function(item) {
	    this.current().body.push(this.ensureSafeMemberName(item), ';');
	  },

	  addEnsureSafeFunction: function(item) {
	    this.current().body.push(this.ensureSafeFunction(item), ';');
	  },

	  addEnsureSafeAssignContext: function(item) {
	    this.current().body.push(this.ensureSafeAssignContext(item), ';');
	  },

	  ensureSafeObject: function(item) {
	    return 'ensureSafeObject(' + item + ',text)';
	  },

	  ensureSafeMemberName: function(item) {
	    return 'ensureSafeMemberName(' + item + ',text)';
	  },

	  ensureSafeFunction: function(item) {
	    return 'ensureSafeFunction(' + item + ',text)';
	  },

	  getStringValue: function(item) {
	    this.assign(item, 'getStringValue(' + item + ')');
	  },

	  ensureSafeAssignContext: function(item) {
	    return 'ensureSafeAssignContext(' + item + ',text)';
	  },

	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },

	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },

	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },

	  escape: function(value) {
	    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';

	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },

	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },

	  current: function() {
	    return this.state[this.state.computing];
	  }
	};


	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTInterpreter.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.expression = expression;
	    this.expensiveChecks = expensiveChecks;
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? noop :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  recurse: function(ast, context, create) {
	    var left, right, self = this, args, expression;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      ensureSafeMemberName(ast.name, self.expression);
	      return self.identifier(ast.name,
	                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
	                             context, create, self.expression);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        ensureSafeMemberName(ast.property.name, self.expression);
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create, self.expression) :
	        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            ensureSafeObject(rhs.context, self.expression);
	            ensureSafeFunction(rhs.value, self.expression);
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
	            }
	            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        ensureSafeObject(lhs.value, self.expression);
	        ensureSafeAssignContext(lhs.context);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        args.push({key: property.key.type === AST.Identifier ?
	                        property.key.name :
	                        ('' + property.key.value),
	                   value: self.recurse(property.value)
	        });
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.LocalsExpression:
	      return function(scope, locals) {
	        return context ? {value: locals} : locals;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },

	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && !(base[name])) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (expensiveChecks) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        rhs = getStringValue(rhs);
	        ensureSafeMemberName(rhs, expression);
	        if (create && create !== 1) {
	          ensureSafeAssignContext(lhs);
	          if (lhs && !(lhs[rhs])) {
	            lhs[rhs] = {};
	          }
	        }
	        value = lhs[rhs];
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1) {
	        ensureSafeAssignContext(lhs);
	        if (lhs && !(lhs[right])) {
	          lhs[right] = {};
	        }
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};

	/**
	 * @constructor
	 */
	var Parser = function(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(lexer, options);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};

	Parser.prototype = {
	  constructor: Parser,

	  parse: function(text) {
	    return this.astCompiler.compile(text, this.options.expensiveChecks);
	  }
	};

	function isPossiblyDangerousMemberName(name) {
	  return name == 'constructor';
	}

	var objectValueOf = Object.prototype.valueOf;

	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}

	///////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */


	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cacheDefault = createMap();
	  var cacheExpensive = createMap();
	  var literals = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };
	  var identStart, identContinue;

	  /**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/
	  this.addLiteral = function(literalName, literalValue) {
	    literals[literalName] = literalValue;
	  };

	 /**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensivelly, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */
	  this.setIdentifierFns = function(identifierStart, identifierContinue) {
	    identStart = identifierStart;
	    identContinue = identifierContinue;
	    return this;
	  };

	  this.$get = ['$filter', function($filter) {
	    var noUnsafeEval = csp().noUnsafeEval;
	    var $parseOptions = {
	          csp: noUnsafeEval,
	          expensiveChecks: false,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        },
	        $parseOptionsExpensive = {
	          csp: noUnsafeEval,
	          expensiveChecks: true,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        };
	    var runningChecksEnabled = false;

	    $parse.$$runningExpensiveChecks = function() {
	      return runningChecksEnabled;
	    };

	    return $parse;

	    function $parse(exp, interceptorFn, expensiveChecks) {
	      var parsedExpression, oneTime, cacheKey;

	      expensiveChecks = expensiveChecks || runningChecksEnabled;

	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;

	          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
	          parsedExpression = cache[cacheKey];

	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
	            var lexer = new Lexer(parseOptions);
	            var parser = new Parser(lexer, $filter, parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            if (expensiveChecks) {
	              parsedExpression = expensiveChecksInterceptor(parsedExpression);
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);

	        case 'function':
	          return addInterceptor(exp, interceptorFn);

	        default:
	          return addInterceptor(noop, interceptorFn);
	      }
	    }

	    function expensiveChecksInterceptor(fn) {
	      if (!fn) return fn;
	      expensiveCheckFn.$$watchDelegate = fn.$$watchDelegate;
	      expensiveCheckFn.assign = expensiveChecksInterceptor(fn.assign);
	      expensiveCheckFn.constant = fn.constant;
	      expensiveCheckFn.literal = fn.literal;
	      for (var i = 0; fn.inputs && i < fn.inputs.length; ++i) {
	        fn.inputs[i] = expensiveChecksInterceptor(fn.inputs[i]);
	      }
	      expensiveCheckFn.inputs = fn.inputs;

	      return expensiveCheckFn;

	      function expensiveCheckFn(scope, locals, assign, inputs) {
	        var expensiveCheckOldValue = runningChecksEnabled;
	        runningChecksEnabled = true;
	        try {
	          return fn(scope, locals, assign, inputs);
	        } finally {
	          runningChecksEnabled = expensiveCheckOldValue;
	        }
	      }
	    }

	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }

	      if (typeof newValue === 'object') {

	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);

	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }

	        // fall-through to the primitive equality check
	      }

	      //Primitive or NaN
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }

	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;

	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }

	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }

	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;

	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }

	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }

	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }

	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }, objectEquality);
	    }

	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.call(this, value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);

	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }

	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantWatch(scope) {
	        unwatch();
	        return parsedExpression(scope);
	      }, listener, objectEquality);
	    }

	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;
	      var useInputs = false;

	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;

	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };

	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        useInputs = !parsedExpression.inputs;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }

	      return fn;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	function $QProvider() {

	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler);
	  }];
	}

	function $$QProvider() {
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler);
	  }];
	}

	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler) {
	  var $qMinErr = minErr('$q', TypeError);

	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  var defer = function() {
	    var d = new Deferred();
	    //Necessary to support unbound execution :/
	    d.resolve = simpleBind(d, d.resolve);
	    d.reject = simpleBind(d, d.reject);
	    d.notify = simpleBind(d, d.notify);
	    return d;
	  };

	  function Promise() {
	    this.$$state = { status: 0 };
	  }

	  extend(Promise.prototype, {
	    then: function(onFulfilled, onRejected, progressBack) {
	      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
	        return this;
	      }
	      var result = new Deferred();

	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

	      return result.promise;
	    },

	    "catch": function(callback) {
	      return this.then(null, callback);
	    },

	    "finally": function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, true, callback);
	      }, function(error) {
	        return handleCallback(error, false, callback);
	      }, progressBack);
	    }
	  });

	  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
	  function simpleBind(context, fn) {
	    return function(value) {
	      fn.call(context, value);
	    };
	  }

	  function processQueue(state) {
	    var fn, deferred, pending;

	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    for (var i = 0, ii = pending.length; i < ii; ++i) {
	      deferred = pending[i][0];
	      fn = pending[i][state.status];
	      try {
	        if (isFunction(fn)) {
	          deferred.resolve(fn(state.value));
	        } else if (state.status === 1) {
	          deferred.resolve(state.value);
	        } else {
	          deferred.reject(state.value);
	        }
	      } catch (e) {
	        deferred.reject(e);
	        exceptionHandler(e);
	      }
	    }
	  }

	  function scheduleProcessQueue(state) {
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    nextTick(function() { processQueue(state); });
	  }

	  function Deferred() {
	    this.promise = new Promise();
	  }

	  extend(Deferred.prototype, {
	    resolve: function(val) {
	      if (this.promise.$$state.status) return;
	      if (val === this.promise) {
	        this.$$reject($qMinErr(
	          'qcycle',
	          "Expected promise to be resolved with value other than itself '{0}'",
	          val));
	      } else {
	        this.$$resolve(val);
	      }

	    },

	    $$resolve: function(val) {
	      var then;
	      var that = this;
	      var done = false;
	      try {
	        if ((isObject(val) || isFunction(val))) then = val && val.then;
	        if (isFunction(then)) {
	          this.promise.$$state.status = -1;
	          then.call(val, resolvePromise, rejectPromise, simpleBind(this, this.notify));
	        } else {
	          this.promise.$$state.value = val;
	          this.promise.$$state.status = 1;
	          scheduleProcessQueue(this.promise.$$state);
	        }
	      } catch (e) {
	        rejectPromise(e);
	        exceptionHandler(e);
	      }

	      function resolvePromise(val) {
	        if (done) return;
	        done = true;
	        that.$$resolve(val);
	      }
	      function rejectPromise(val) {
	        if (done) return;
	        done = true;
	        that.$$reject(val);
	      }
	    },

	    reject: function(reason) {
	      if (this.promise.$$state.status) return;
	      this.$$reject(reason);
	    },

	    $$reject: function(reason) {
	      this.promise.$$state.value = reason;
	      this.promise.$$state.status = 2;
	      scheduleProcessQueue(this.promise.$$state);
	    },

	    notify: function(progress) {
	      var callbacks = this.promise.$$state.pending;

	      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
	        nextTick(function() {
	          var callback, result;
	          for (var i = 0, ii = callbacks.length; i < ii; i++) {
	            result = callbacks[i][0];
	            callback = callbacks[i][3];
	            try {
	              result.notify(isFunction(callback) ? callback(progress) : progress);
	            } catch (e) {
	              exceptionHandler(e);
	            }
	          }
	        });
	      }
	    }
	  });

	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  var reject = function(reason) {
	    var result = new Deferred();
	    result.reject(reason);
	    return result.promise;
	  };

	  var makePromise = function makePromise(value, resolved) {
	    var result = new Deferred();
	    if (resolved) {
	      result.resolve(value);
	    } else {
	      result.reject(value);
	    }
	    return result.promise;
	  };

	  var handleCallback = function handleCallback(value, isResolved, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return makePromise(e, false);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return makePromise(value, isResolved);
	      }, function(error) {
	        return makePromise(error, false);
	      });
	    } else {
	      return makePromise(value, isResolved);
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */


	  var when = function(value, callback, errback, progressBack) {
	    var result = new Deferred();
	    result.resolve(value);
	    return result.promise.then(callback, errback, progressBack);
	  };

	  /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	  var resolve = when;

	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */

	  function all(promises) {
	    var deferred = new Deferred(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};

	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        if (results.hasOwnProperty(key)) return;
	        results[key] = value;
	        if (!(--counter)) deferred.resolve(results);
	      }, function(reason) {
	        if (results.hasOwnProperty(key)) return;
	        deferred.reject(reason);
	      });
	    });

	    if (counter === 0) {
	      deferred.resolve(results);
	    }

	    return deferred.promise;
	  }

	  var $Q = function Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
	    }

	    var deferred = new Deferred();

	    function resolveFn(value) {
	      deferred.resolve(value);
	    }

	    function rejectFn(reason) {
	      deferred.reject(reason);
	    }

	    resolver(resolveFn, rejectFn);

	    return deferred.promise;
	  };

	  // Let's make the instanceof operator work for promises, so that
	  // `new $q(fn) instanceof $q` would evaluate to true.
	  $Q.prototype = Promise.prototype;

	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.resolve = resolve;
	  $Q.all = all;

	  return $Q;
	}

	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;

	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;

	    var rafSupported = !!requestAnimationFrame;
	    var raf = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };

	    raf.supported = rafSupported;

	    return raf;
	  }];
	}

	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 */


	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */

	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */


	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;

	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };

	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }

	  this.$get = ['$exceptionHandler', '$parse', '$browser',
	      function($exceptionHandler, $parse, $browser) {

	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }

	    function cleanUpScope($scope) {

	      if (msie === 9) {
	        // There is a memory leak in IE9 if all child scopes are not disconnected
	        // completely when a scope is destroyed. So this code will recurse up through
	        // all this scopes children
	        //
	        // See issue https://github.com/angular/angular.js/issues/10706
	        $scope.$$childHead && cleanUpScope($scope.$$childHead);
	        $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
	      }

	      // The code below works around IE9 and V8's memory leaks
	      //
	      // See:
	      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

	      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
	          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
	    }

	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();

	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');

	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }

	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */

	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */

	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */

	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;

	        parent = parent || this;

	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }

	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

	        return child;
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);



	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);

	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);

	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);

	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);

	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };

	        lastDirtyWatch = null;

	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }

	        if (!array) {
	          array = scope.$$watchers = [];
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        incrementWatchersCount(this, 1);

	        return function deregisterWatch() {
	          if (arrayRemove(array, watcher) >= 0) {
	            incrementWatchersCount(scope, -1);
	          }
	          lastDirtyWatch = null;
	        };
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
	       *   call to $digest() to see if any items changes.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;

	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }

	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }

	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });

	        function watchGroupAction() {
	          changeReactionScheduled = false;

	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }

	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;

	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });

	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();

	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);

	          $scope.names.pop();
	          $scope.$digest();

	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;

	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;

	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;

	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;

	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }

	            newLength = newValue.length;

	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];

	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (hasOwnProperty.call(newValue, key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];

	                if (key in oldValue) {
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!hasOwnProperty.call(newValue, key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }

	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }

	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }

	        return this.$watch(changeDetector, $watchCollectionAction);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last, fn, get,
	            watchers,
	            length,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, asyncTask;

	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();

	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }

	        lastDirtyWatch = null;

	        do { // "while dirty" loop
	          dirty = false;
	          current = target;

	          while (asyncQueue.length) {
	            try {
	              asyncTask = asyncQueue.shift();
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }

	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              length = watchers.length;
	              while (length--) {
	                try {
	                  watch = watchers[length];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    get = watch.get;
	                    if ((value = get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (typeof value === 'number' && typeof last === 'number'
	                               && isNaN(value) && isNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      fn = watch.fn;
	                      fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }

	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));

	          // `break traverseScopesLoop;` takes us to here

	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }

	        } while (dirty || asyncQueue.length);

	        clearPhase();

	        while (postDigestQueue.length) {
	          try {
	            postDigestQueue.shift()();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	      },


	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;

	        this.$broadcast('$destroy');
	        this.$$destroyed = true;

	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }

	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }

	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};

	        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	        this.$$nextSibling = null;
	        cleanUpScope(this);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;

	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }

	        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
	      },

	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          try {
	            return this.$eval(expr);
	          } finally {
	            clearPhase();
	          }
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            throw e;
	          }
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        expr && applyAsyncQueue.push($applyAsyncExpression);
	        expr = $parse(expr);
	        scheduleApplyAsync();

	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);

	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));

	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;

	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {

	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);

	        event.currentScope = null;

	        return event;
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };

	        if (!target.$$listenerCount[name]) return event;

	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;

	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }

	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }

	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }

	        event.currentScope = null;
	        return event;
	      }
	    };

	    var $rootScope = new Scope();

	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

	    return $rootScope;


	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }

	      $rootScope.$$phase = phase;
	    }

	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }

	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }

	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;

	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }

	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}

	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }

	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */


	// the implementation is in angular.bootstrap

	/**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };


	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };

	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $sceMinErr = minErr('$sce');

	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};

	// Helper functions follow.

	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace('\\*\\*', '.*').
	                  replace('\\*', '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}


	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}


	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */

	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */

	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;

	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */

	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };

	  this.$get = ['$injector', function($injector) {

	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };

	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }


	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }

	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }

	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }

	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};

	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }

	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}


	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */

	/* jshint maxlen: false*/

	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
	/* jshint maxlen: 100 */

	function $SceProvider() {
	  var enabled = true;

	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };


	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */

	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }

	    var sce = shallowCopy(SCE_CONTEXTS);

	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;

	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }

	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };

	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;

	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[camelCase("parse_as_" + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[camelCase("get_trusted_" + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[camelCase("trust_as_" + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });

	    return sce;
	  }];
	}

	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        // Chrome Packaged Apps are not allowed to access `history.pushState`. They can be detected by
	        // the presence of `chrome.app.runtime` (see https://developer.chrome.com/apps/api_index)
	        isChromePackagedApp = $window.chrome && $window.chrome.app && $window.chrome.app.runtime,
	        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        vendorPrefix,
	        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false,
	        match;

	    if (bodyStyle) {
	      for (var prop in bodyStyle) {
	        if (match = vendorRegex.exec(prop)) {
	          vendorPrefix = match[0];
	          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
	          break;
	        }
	      }

	      if (!vendorPrefix) {
	        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
	      }

	      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
	      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

	      if (android && (!transitions ||  !animations)) {
	        transitions = isString(bodyStyle.webkitTransition);
	        animations = isString(bodyStyle.webkitAnimation);
	      }
	    }


	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904

	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      // jshint -W018
	      history: !!(hasHistoryPushState && !(android < 4) && !boxee),
	      // jshint +W018
	      hasEvent: function(event) {
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie <= 11) return false;

	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }

	        return eventSupport[event];
	      },
	      csp: csp(),
	      vendorPrefix: vendorPrefix,
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}

	var $templateRequestMinErr = minErr('$compile');

	/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */
	function $TemplateRequestProvider() {

	  var httpOptions;

	  /**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */
	  this.httpOptions = function(val) {
	    if (val) {
	      httpOptions = val;
	      return this;
	    }
	    return httpOptions;
	  };

	  /**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */
	  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {

	    function handleRequestFn(tpl, ignoreRequestError) {
	      handleRequestFn.totalPendingRequests++;

	      // We consider the template cache holds only trusted templates, so
	      // there's no need to go through whitelisting again for keys that already
	      // are included in there. This also makes Angular accept any script
	      // directive, no matter its name. However, we still need to unwrap trusted
	      // types.
	      if (!isString(tpl) || !$templateCache.get(tpl)) {
	        tpl = $sce.getTrustedResourceUrl(tpl);
	      }

	      var transformResponse = $http.defaults && $http.defaults.transformResponse;

	      if (isArray(transformResponse)) {
	        transformResponse = transformResponse.filter(function(transformer) {
	          return transformer !== defaultHttpResponseTransform;
	        });
	      } else if (transformResponse === defaultHttpResponseTransform) {
	        transformResponse = null;
	      }

	      return $http.get(tpl, extend({
	          cache: $templateCache,
	          transformResponse: transformResponse
	        }, httpOptions))
	        ['finally'](function() {
	          handleRequestFn.totalPendingRequests--;
	        })
	        .then(function(response) {
	          $templateCache.put(tpl, response.data);
	          return response.data;
	        }, handleError);

	      function handleError(resp) {
	        if (!ignoreRequestError) {
	          throw $templateRequestMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
	            tpl, resp.status, resp.statusText);
	        }
	        return $q.reject(resp);
	      }
	    }

	    handleRequestFn.totalPendingRequests = 0;

	    return handleRequestFn;
	  }];
	}

	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {

	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};

	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) != -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };

	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };

	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };

	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };

	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };

	    return testability;
	  }];
	}

	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

	    var deferreds = {};


	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }

	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;

	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        }
	        finally {
	          delete deferreds[promise.$$timeoutId];
	        }

	        if (!skipApply) $rootScope.$apply();
	      }, delay);

	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;

	      return promise;
	    }


	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };

	    return timeout;
	  }];
	}

	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = window.document.createElement("a");
	var originUrl = urlResolve(window.location.href);


	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;

	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute("href", href);
	    href = urlParsingNode.href;
	  }

	  urlParsingNode.setAttribute('href', href);

	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}

	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}

	/**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}

	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';

	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }

	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = rawDocument.cookie || '';

	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};

	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (isUndefined(lastCookies[name])) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}

	$$CookieReader.$inject = ['$document'];

	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}

	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */

	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */

	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>

	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	function $FilterProvider($provide) {
	  var suffix = 'Filter';

	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;

	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];

	  ////////////////////////////////////////

	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */

	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}

	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
	 *     property of the object or its nested object properties. That's equivalent to the simple
	 *     substring match with a `string` as described above. The predicate can be negated by prefixing
	 *     the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>

	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
	function filterFilter() {
	  return function(array, expression, comparator) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }

	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;

	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        //jshint -W086
	      case 'object':
	        //jshint +W086
	        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }

	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}

	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
	  var predicateFn;

	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }

	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }

	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression.$, comparator, false);
	    }
	    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
	  };

	  return predicateFn;
	}

	function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);

	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
	    });
	  }

	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }

	          var matchAnyProperty = key === '$';
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	      break;
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}

	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}

	var MAX_DIGITS = 22;
	var DECIMAL_SEP = '.';
	var ZERO_CHAR = '0';

	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }

	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }

	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}

	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {

	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}

	/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */
	function parse(numStr) {
	  var exponent = 0, digits, numberOfIntegerDigits;
	  var i, j, zeros;

	  // Decimal point?
	  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
	    numStr = numStr.replace(DECIMAL_SEP, '');
	  }

	  // Exponential form?
	  if ((i = numStr.search(/e/i)) > 0) {
	    // Work out the exponent.
	    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
	    numberOfIntegerDigits += +numStr.slice(i + 1);
	    numStr = numStr.substring(0, i);
	  } else if (numberOfIntegerDigits < 0) {
	    // There was no decimal point or exponent so it is an integer.
	    numberOfIntegerDigits = numStr.length;
	  }

	  // Count the number of leading zeros.
	  for (i = 0; numStr.charAt(i) == ZERO_CHAR; i++) {/* jshint noempty: false */}

	  if (i == (zeros = numStr.length)) {
	    // The digits are all zero.
	    digits = [0];
	    numberOfIntegerDigits = 1;
	  } else {
	    // Count the number of trailing zeros
	    zeros--;
	    while (numStr.charAt(zeros) == ZERO_CHAR) zeros--;

	    // Trailing zeros are insignificant so ignore them
	    numberOfIntegerDigits -= i;
	    digits = [];
	    // Convert string to array of digits without leading/trailing zeros.
	    for (j = 0; i <= zeros; i++, j++) {
	      digits[j] = +numStr.charAt(i);
	    }
	  }

	  // If the number overflows the maximum allowed digits then use an exponent.
	  if (numberOfIntegerDigits > MAX_DIGITS) {
	    digits = digits.splice(0, MAX_DIGITS - 1);
	    exponent = numberOfIntegerDigits - 1;
	    numberOfIntegerDigits = 1;
	  }

	  return { d: digits, e: exponent, i: numberOfIntegerDigits };
	}

	/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */
	function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
	    var digits = parsedNumber.d;
	    var fractionLen = digits.length - parsedNumber.i;

	    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;

	    // The index of the digit to where rounding is to occur
	    var roundAt = fractionSize + parsedNumber.i;
	    var digit = digits[roundAt];

	    if (roundAt > 0) {
	      // Drop fractional digits beyond `roundAt`
	      digits.splice(Math.max(parsedNumber.i, roundAt));

	      // Set non-fractional digits beyond `roundAt` to 0
	      for (var j = roundAt; j < digits.length; j++) {
	        digits[j] = 0;
	      }
	    } else {
	      // We rounded to zero so reset the parsedNumber
	      fractionLen = Math.max(0, fractionLen);
	      parsedNumber.i = 1;
	      digits.length = Math.max(1, roundAt = fractionSize + 1);
	      digits[0] = 0;
	      for (var i = 1; i < roundAt; i++) digits[i] = 0;
	    }

	    if (digit >= 5) {
	      if (roundAt - 1 < 0) {
	        for (var k = 0; k > roundAt; k--) {
	          digits.unshift(0);
	          parsedNumber.i++;
	        }
	        digits.unshift(1);
	        parsedNumber.i++;
	      } else {
	        digits[roundAt - 1]++;
	      }
	    }

	    // Pad out with zeros to get the required fraction length
	    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);


	    // Do any carrying, e.g. a digit was rounded up to 10
	    var carry = digits.reduceRight(function(carry, d, i, digits) {
	      d = d + carry;
	      digits[i] = d % 10;
	      return Math.floor(d / 10);
	    }, 0);
	    if (carry) {
	      digits.unshift(carry);
	      parsedNumber.i++;
	    }
	}

	/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {

	  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';

	  var isInfinity = !isFinite(number);
	  var isZero = false;
	  var numStr = Math.abs(number) + '',
	      formattedText = '',
	      parsedNumber;

	  if (isInfinity) {
	    formattedText = '\u221e';
	  } else {
	    parsedNumber = parse(numStr);

	    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);

	    var digits = parsedNumber.d;
	    var integerLen = parsedNumber.i;
	    var exponent = parsedNumber.e;
	    var decimals = [];
	    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);

	    // pad zeros for small numbers
	    while (integerLen < 0) {
	      digits.unshift(0);
	      integerLen++;
	    }

	    // extract decimals digits
	    if (integerLen > 0) {
	      decimals = digits.splice(integerLen);
	    } else {
	      decimals = digits;
	      digits = [0];
	    }

	    // format the integer digits with grouping separators
	    var groups = [];
	    if (digits.length >= pattern.lgSize) {
	      groups.unshift(digits.splice(-pattern.lgSize).join(''));
	    }
	    while (digits.length > pattern.gSize) {
	      groups.unshift(digits.splice(-pattern.gSize).join(''));
	    }
	    if (digits.length) {
	      groups.unshift(digits.join(''));
	    }
	    formattedText = groups.join(groupSep);

	    // append the decimal digits
	    if (decimals.length) {
	      formattedText += decimalSep + decimals.join('');
	    }

	    if (exponent) {
	      formattedText += 'e+' + exponent;
	    }
	  }
	  if (number < 0 && !isZero) {
	    return pattern.negPre + formattedText + pattern.negSuf;
	  } else {
	    return pattern.posPre + formattedText + pattern.posSuf;
	  }
	}

	function padNumber(num, digits, trim, negWrap) {
	  var neg = '';
	  if (num < 0 || (negWrap && num <= 0)) {
	    if (negWrap) {
	      num = -num + 1;
	    } else {
	      num = -num;
	      neg = '-';
	    }
	  }
	  num = '' + num;
	  while (num.length < digits) num = ZERO_CHAR + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}


	function dateGetter(name, size, offset, trim, negWrap) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset == -12) value = 12;
	    return padNumber(value, size, trim, negWrap);
	  };
	}

	function dateStrGetter(name, shortForm, standAlone) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
	    var get = uppercase(propPrefix + name);

	    return formats[get][value];
	  };
	}

	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? "+" : "";

	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);

	  return paddedZone;
	}

	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}

	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}

	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);

	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

	      return padNumber(result, size);
	   };
	}

	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}

	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}

	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}

	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4, 0, false, true),
	    yy: dateGetter('FullYear', 2, 0, true, true),
	     y: dateGetter('FullYear', 1, 0, false, true),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	  LLLL: dateStrGetter('Month', false, true),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};

	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^\-?\d+$/;

	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {


	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if (match = string.match(R_ISO8601_STR)) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;

	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }


	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;

	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }

	    if (isNumber(date)) {
	      date = new Date(date);
	    }

	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }

	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }

	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value === "''" ? "'" : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
	    });

	    return text;
	  };
	}


	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}


	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);


	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);

	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements
	 * are taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
	 * converted to a string.
	 *
	 * @param {Array|string|number} input Source array, string or number to be limited.
	 * @param {string|number} limit The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
	 *     indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
	 *     had less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNaN(limit)) return input;

	    if (isNumber(input)) input = input.toString();
	    if (!isArray(input) && !isString(input)) return input;

	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;

	    if (limit >= 0) {
	      return input.slice(begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return input.slice(limit, input.length);
	      } else {
	        return input.slice(Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}

	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
	 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
	 * as expected, make sure they are actually being saved as numbers and not strings.
	 * Array-like values (e.g. NodeLists, jQuery objects, TypedArrays, Strings, etc) are also supported.
	 *
	 * @param {Array} array The array (or array-like object) to sort.
	 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
	 *    used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `function`: Getter function. The result of this function will be sorted using the
	 *      `<`, `===`, `>` operator.
	 *    - `string`: An Angular expression. The result of this expression is used to compare elements
	 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
	 *      3 first characters of a property called `name`). The result of a constant expression
	 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
	 *      to sort object by the value of their `special name` property). An expression can be
	 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
	 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
	 *      element itself is used to compare where sorting.
	 *    - `Array`: An array of function or string predicates. The first predicate in the array
	 *      is used for sorting, but when two items are equivalent, the next predicate is used.
	 *
	 *    If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse Reverse the order of the array.
	 * @returns {Array} Sorted copy of the source array.
	 *
	 *
	 * @example
	 * The example below demonstrates a simple ngRepeat, where the data is sorted
	 * by age in descending order (predicate is set to `'-age'`).
	 * `reverse` is not set, which means it defaults to `false`.
	   <example module="orderByExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friend">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends =
	               [{name:'John', phone:'555-1212', age:10},
	                {name:'Mary', phone:'555-9876', age:19},
	                {name:'Mike', phone:'555-4321', age:21},
	                {name:'Adam', phone:'555-5678', age:35},
	                {name:'Julie', phone:'555-8765', age:29}];
	         }]);
	     </file>
	   </example>
	 *
	 * The predicate and reverse parameters can be controlled dynamically through scope properties,
	 * as shown in the next example.
	 * @example
	   <example module="orderByExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="predicate=''">Set to unsorted</button>
	         <table class="friend">
	           <tr>
	            <th>
	                <button ng-click="order('name')">Name</button>
	                <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	            </th>
	            <th>
	                <button ng-click="order('phone')">Phone Number</button>
	                <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	            </th>
	            <th>
	                <button ng-click="order('age')">Age</button>
	                <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	            </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends =
	               [{name:'John', phone:'555-1212', age:10},
	                {name:'Mary', phone:'555-9876', age:19},
	                {name:'Mike', phone:'555-4321', age:21},
	                {name:'Adam', phone:'555-5678', age:35},
	                {name:'Julie', phone:'555-8765', age:29}];
	           $scope.predicate = 'age';
	           $scope.reverse = true;
	           $scope.order = function(predicate) {
	             $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	             $scope.predicate = predicate;
	           };
	         }]);
	      </file>
	     <file name="style.css">
	       .sortorder:after {
	         content: '\25b2';
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';
	       }
	     </file>
	   </example>
	 *
	 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
	 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
	 * desired parameters.
	 *
	 * Example:
	 *
	 * @example
	  <example module="orderByExample">
	    <file name="index.html">
	    <div ng-controller="ExampleController">
	      <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	      <table class="friend">
	        <tr>
	          <th>
	              <button ng-click="order('name')">Name</button>
	              <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	          </th>
	          <th>
	              <button ng-click="order('phone')">Phone Number</button>
	              <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	          </th>
	          <th>
	              <button ng-click="order('age')">Age</button>
	              <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	          </th>
	        </tr>
	        <tr ng-repeat="friend in friends">
	          <td>{{friend.name}}</td>
	          <td>{{friend.phone}}</td>
	          <td>{{friend.age}}</td>
	        </tr>
	      </table>
	    </div>
	    </file>

	    <file name="script.js">
	      angular.module('orderByExample', [])
	        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
	          var orderBy = $filter('orderBy');
	          $scope.friends = [
	            { name: 'John',    phone: '555-1212',    age: 10 },
	            { name: 'Mary',    phone: '555-9876',    age: 19 },
	            { name: 'Mike',    phone: '555-4321',    age: 21 },
	            { name: 'Adam',    phone: '555-5678',    age: 35 },
	            { name: 'Julie',   phone: '555-8765',    age: 29 }
	          ];
	          $scope.order = function(predicate) {
	            $scope.predicate = predicate;
	            $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	            $scope.friends = orderBy($scope.friends, predicate, $scope.reverse);
	          };
	          $scope.order('age', true);
	        }]);
	    </file>

	    <file name="style.css">
	       .sortorder:after {
	         content: '\25b2';
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';
	       }
	    </file>
	</example>
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder) {

	    if (array == null) return array;
	    if (!isArrayLike(array)) {
	      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
	    }

	    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }

	    var predicates = processPredicates(sortPredicate, reverseOrder);
	    // Add a predicate at the end that evaluates to the element index. This makes the
	    // sort stable as it works as a tie-breaker when all the input predicates cannot
	    // distinguish between two elements.
	    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});

	    // The next three lines are a version of a Swartzian Transform idiom from Perl
	    // (sometimes called the Decorate-Sort-Undecorate idiom)
	    // See https://en.wikipedia.org/wiki/Schwartzian_transform
	    var compareValues = Array.prototype.map.call(array, getComparisonObject);
	    compareValues.sort(doComparison);
	    array = compareValues.map(function(item) { return item.value; });

	    return array;

	    function getComparisonObject(value, index) {
	      return {
	        value: value,
	        predicateValues: predicates.map(function(predicate) {
	          return getPredicateValue(predicate.get(value), index);
	        })
	      };
	    }

	    function doComparison(v1, v2) {
	      var result = 0;
	      for (var index=0, length = predicates.length; index < length; ++index) {
	        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
	        if (result) break;
	      }
	      return result;
	    }
	  };

	  function processPredicates(sortPredicate, reverseOrder) {
	    reverseOrder = reverseOrder ? -1 : 1;
	    return sortPredicate.map(function(predicate) {
	      var descending = 1, get = identity;

	      if (isFunction(predicate)) {
	        get = predicate;
	      } else if (isString(predicate)) {
	        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
	          descending = predicate.charAt(0) == '-' ? -1 : 1;
	          predicate = predicate.substring(1);
	        }
	        if (predicate !== '') {
	          get = $parse(predicate);
	          if (get.constant) {
	            var key = get();
	            get = function(value) { return value[key]; };
	          }
	        }
	      }
	      return { get: get, descending: descending * reverseOrder };
	    });
	  }

	  function isPrimitive(value) {
	    switch (typeof value) {
	      case 'number': /* falls through */
	      case 'boolean': /* falls through */
	      case 'string':
	        return true;
	      default:
	        return false;
	    }
	  }

	  function objectValue(value, index) {
	    // If `valueOf` is a valid function use that
	    if (typeof value.valueOf === 'function') {
	      value = value.valueOf();
	      if (isPrimitive(value)) return value;
	    }
	    // If `toString` is a valid function and not the one from `Object.prototype` use that
	    if (hasCustomToString(value)) {
	      value = value.toString();
	      if (isPrimitive(value)) return value;
	    }
	    // We have a basic object so we use the position of the object in the collection
	    return index;
	  }

	  function getPredicateValue(value, index) {
	    var type = typeof value;
	    if (value === null) {
	      type = 'string';
	      value = 'null';
	    } else if (type === 'string') {
	      value = value.toLowerCase();
	    } else if (type === 'object') {
	      value = objectValue(value, index);
	    }
	    return { value: value, type: type };
	  }

	  function compare(v1, v2) {
	    var result = 0;
	    if (v1.type === v2.type) {
	      if (v1.value !== v2.value) {
	        result = v1.value < v2.value ? -1 : 1;
	      }
	    } else {
	      result = v1.type < v2.type ? -1 : 1;
	    }
	    return result;
	  }
	}

	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}

	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;

	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example>
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

	          element(by.id('link-3')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.

	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

	          element(by.id('link-6')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readOnly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readOnly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */

	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	     <example>
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */

	var ngAttributeAliasDirectives = {};

	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName == "multiple") return;

	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }

	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;

	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }

	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});

	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set("ngPattern", new RegExp(match[1], match[2]));
	            return;
	          }
	        }

	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});

	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;

	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }

	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }

	          attr.$set(name, value);

	          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // we use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});

	/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	SUBMITTED_CLASS = 'ng-submitted';

	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}

	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController(element, attrs, $scope, $animate, $interpolate) {
	  var form = this,
	      controls = [];

	  // init state
	  form.$error = {};
	  form.$$success = {};
	  form.$pending = undefined;
	  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
	  form.$dirty = false;
	  form.$pristine = true;
	  form.$valid = true;
	  form.$invalid = false;
	  form.$submitted = false;
	  form.$$parentForm = nullFormCtrl;

	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  form.$rollbackViewValue = function() {
	    forEach(controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  form.$commitViewValue = function() {
	    forEach(controls, function(control) {
	      control.$commitViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
	  form.$addControl = function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    controls.push(control);

	    if (control.$name) {
	      form[control.$name] = control;
	    }

	    control.$$parentForm = form;
	  };

	  // Private API: rename a form control
	  form.$$renameControl = function(control, newName) {
	    var oldName = control.$name;

	    if (form[oldName] === control) {
	      delete form[oldName];
	    }
	    form[newName] = control;
	    control.$name = newName;
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
	  form.$removeControl = function(control) {
	    if (control.$name && form[control.$name] === control) {
	      delete form[control.$name];
	    }
	    forEach(form.$pending, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$error, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$$success, function(value, name) {
	      form.$setValidity(name, null, control);
	    });

	    arrayRemove(controls, control);
	    control.$$parentForm = nullFormCtrl;
	  };


	  /**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: element,
	    set: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        object[property] = [controller];
	      } else {
	        var index = list.indexOf(controller);
	        if (index === -1) {
	          list.push(controller);
	        }
	      }
	    },
	    unset: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        return;
	      }
	      arrayRemove(list, controller);
	      if (list.length === 0) {
	        delete object[property];
	      }
	    },
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  form.$setDirty = function() {
	    $animate.removeClass(element, PRISTINE_CLASS);
	    $animate.addClass(element, DIRTY_CLASS);
	    form.$dirty = true;
	    form.$pristine = false;
	    form.$$parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  form.$setPristine = function() {
	    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    form.$dirty = false;
	    form.$pristine = true;
	    form.$submitted = false;
	    forEach(controls, function(control) {
	      control.$setPristine();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  form.$setUntouched = function() {
	    forEach(controls, function(control) {
	      control.$setUntouched();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  form.$setSubmitted = function() {
	    $animate.addClass(element, SUBMITTED_CLASS);
	    form.$submitted = true;
	    form.$$parentForm.$setSubmitted();
	  };
	}

	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */

	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));

	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));

	          userInput.clear();
	          userInput.sendKeys('');

	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', '$parse', function($timeout, $parse) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
	            var controller = ctrls[0];

	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });

	                event.preventDefault();
	              };

	              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }

	            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
	            parentFormCtrl.$addControl(controller);

	            var setter = nameAttr ? getSetter(controller.$name) : noop;

	            if (nameAttr) {
	              setter(scope, controller);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, undefined);
	                controller.$$parentForm.$$renameControl(controller, newValue);
	                setter = getSetter(controller.$name);
	                setter(scope, controller);
	              });
	            }
	            formElement.on('$destroy', function() {
	              controller.$$parentForm.$removeControl(controller);
	              setter(scope, undefined);
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };

	    return formDirective;

	    function getSetter(expression) {
	      if (expression === '') {
	        //create an assignable expression, so forms with an empty name can be renamed later
	        return $parse('this[""]').assign;
	      }
	      return $parse(expression).assign || noop;
	    }
	  }];
	};

	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);

	/* global VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  UNTOUCHED_CLASS: false,
	  TOUCHED_CLASS: false,
	  ngModelMinErr: false,
	*/

	// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
	// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        555555555555555555555555    666     77777777     8888888     999
	var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
	var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
	var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
	var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

	var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
	var PARTIAL_VALIDATION_TYPES = createMap();
	forEach('date,datetime-local,month,time,week'.split(','), function(type) {
	  PARTIAL_VALIDATION_TYPES[type] = true;
	});

	var inputType = {

	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <tt>text = {{example.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,

	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	        var input = element(by.model('example.value'));

	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }

	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });

	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });

	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),

	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),

	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),

	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),

	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));

	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,


	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,


	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,


	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var color = element(by.binding('color.name'));

	            expect(color.getText()).toContain('blue');

	            element.all(by.model('color.name')).get(0).click();

	            expect(color.getText()).toContain('red');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,


	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));

	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');

	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();

	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,

	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};

	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}

	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}

	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);

	  // In composition mode, users are still inputing intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;

	    element.on('compositionstart', function() {
	      composing = true;
	    });

	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }

	  var timeout;

	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;

	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }

	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };

	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };

	    element.on('keydown', function(event) {
	      var key = event.keyCode;

	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

	      deferListener(event, this, this.value);
	    });

	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }

	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);

	  // Some native input types (date-family) have the ability to change validity without
	  // firing any input/change events.
	  // For these event types, when native validators are present and the browser supports the type,
	  // check for validity changes on various DOM events.
	  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
	    element.on(PARTIAL_VALIDATION_EVENTS, function(ev) {
	      if (!timeout) {
	        var validity = this[VALIDITY_STATE_PROPERTY];
	        var origBadInput = validity.badInput;
	        var origTypeMismatch = validity.typeMismatch;
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
	            listener(ev);
	          }
	        });
	      }
	    });
	  }

	  ctrl.$render = function() {
	    // Workaround for Firefox validation #12102.
	    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
	    if (element.val() !== value) {
	      element.val(value);
	    }
	  };
	}

	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }

	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;

	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }

	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }

	  return NaN;
	}

	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;

	    if (isDate(iso)) {
	      return iso;
	    }

	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);

	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }

	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }

	    return NaN;
	  };
	}

	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
	    var previousDate;

	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });

	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });

	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }

	    function parseObservedDateValue(val) {
	      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
	    }
	  };
	}

	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      return validity.badInput || validity.typeMismatch ? undefined : value;
	    });
	  }
	}

	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });

	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });

	  if (isDefined(attr.min) || attr.ngMin) {
	    var minVal;
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };

	    attr.$observe('min', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }

	  if (isDefined(attr.max) || attr.ngMax) {
	    var maxVal;
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };

	    attr.$observe('max', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}

	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}

	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}

	function radioInputType(scope, element, attr, ctrl) {
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }

	  var listener = function(ev) {
	    if (element[0].checked) {
	      ctrl.$setViewValue(attr.value, ev && ev.type);
	    }
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    var value = attr.value;
	    element[0].checked = (value == ctrl.$viewValue);
	  };

	  attr.$observe('value', ctrl.$render);
	}

	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}

	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };

	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };

	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });

	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}


	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 */


	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));

	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');

	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');

	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];



	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
	 * the bound value.
	 *
	 * `ngValue` is useful when dynamically generating lists of radio buttons using
	 * {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * Likewise, `ngValue` can be used to generate `<option>` elements for
	 * the {@link select `select`} element. In that case however, only strings are supported
	 * for the `value `attribute, so the resulting `ngModel` will always be a string.
	 * Support for `select` models with non-string values is available via `ngOptions`.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 *   of the `input` element
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));

	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          attr.$set('value', scope.$eval(attr.ngValue));
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            attr.$set('value', value);
	          });
	        };
	      }
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));

	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));

	         expect(salutationElem.getText()).toBe('Hello World!');

	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');

	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example

	   <example module="bindHtmlExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>

	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>

	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
	        return (value || '').toString();
	      });
	      $compile.$$addBindingClass(tElement);

	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);

	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // we re-evaluate the expr because we want a TrustedValueHolderType
	          // for $sce, not a string
	          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
	        });
	      };
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();

	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});

	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var oldVal;

	        scope.$watch(attr[name], ngClassWatchAction, true);

	        attr.$observe('class', function(value) {
	          ngClassWatchAction(scope.$eval(attr[name]));
	        });


	        if (name !== 'ngClass') {
	          scope.$watch('$index', function($index, old$index) {
	            // jshint bitwise: false
	            var mod = $index & 1;
	            if (mod !== (old$index & 1)) {
	              var classes = arrayClasses(scope.$eval(attr[name]));
	              mod === selector ?
	                addClasses(classes) :
	                removeClasses(classes);
	            }
	          });
	        }

	        function addClasses(classes) {
	          var newClasses = digestClassCounts(classes, 1);
	          attr.$addClass(newClasses);
	        }

	        function removeClasses(classes) {
	          var newClasses = digestClassCounts(classes, -1);
	          attr.$removeClass(newClasses);
	        }

	        function digestClassCounts(classes, count) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          var classCounts = element.data('$classCounts') || createMap();
	          var classesToUpdate = [];
	          forEach(classes, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	          element.data('$classCounts', classCounts);
	          return classesToUpdate.join(' ');
	        }

	        function updateClasses(oldClasses, newClasses) {
	          var toAdd = arrayDifference(newClasses, oldClasses);
	          var toRemove = arrayDifference(oldClasses, newClasses);
	          toAdd = digestClassCounts(toAdd, 1);
	          toRemove = digestClassCounts(toRemove, -1);
	          if (toAdd && toAdd.length) {
	            $animate.addClass(element, toAdd);
	          }
	          if (toRemove && toRemove.length) {
	            $animate.removeClass(element, toRemove);
	          }
	        }

	        function ngClassWatchAction(newVal) {
	          if (selector === true || scope.$index % 2 === selector) {
	            var newClasses = arrayClasses(newVal || []);
	            if (!oldVal) {
	              addClasses(newClasses);
	            } else if (!equals(newVal,oldVal)) {
	              var oldClasses = arrayClasses(oldVal);
	              updateClasses(oldClasses, newClasses);
	            }
	          }
	          if (isArray(newVal)) {
	            oldVal = newVal.map(function(v) { return shallowCopy(v); });
	          } else {
	            oldVal = shallowCopy(newVal);
	          }
	        }
	      }
	    };

	    function arrayDifference(tokens1, tokens2) {
	      var values = [];

	      outer:
	      for (var i = 0; i < tokens1.length; i++) {
	        var token = tokens1[i];
	        for (var j = 0; j < tokens2.length; j++) {
	          if (token == tokens2[j]) continue outer;
	        }
	        values.push(token);
	      }
	      return values;
	    }

	    function arrayClasses(classVal) {
	      var classes = [];
	      if (isArray(classVal)) {
	        forEach(classVal, function(v) {
	          classes = classes.concat(arrayClasses(v));
	        });
	        return classes;
	      } else if (isString(classVal)) {
	        return classVal.split(' ');
	      } else if (isObject(classVal)) {
	        forEach(classVal, function(v, k) {
	          if (v) {
	            classes = classes.concat(k.split(' '));
	          }
	        });
	        return classes;
	      }
	      return classVal;
	    }
	  }];
	}

	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example>
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));

	       it('should let you toggle the class', function() {

	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);

	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });

	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>

	   ## Animations

	   The example below demonstrates how to perform animations using ngClass.

	   <example module="ngAnimate" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);

	         element(by.id('setbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);

	         element(by.id('clearbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>


	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);

	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);

	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);

	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>

	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @element html
	 * @description
	 *
	 * Angular has some features that can break certain
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement these rules then you must tell Angular not to use these features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following rules affect Angular:
	 *
	 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
	 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
	 * increase in the speed of evaluating Angular expressions.
	 *
	 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
	 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
	 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
	 * `angular-csp.css` in your HTML manually.
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
	 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
	 * however, triggers a CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
	 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      // Note: the suffix `.csp` in the example name triggers
	      // csp mode in our http server!
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>

	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;

	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));

	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

	          function clearErrors() {
	            getAndClearSevereErrors();
	          }

	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });

	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }

	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */

	// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
	// bootstrap the system (before $parse is instantiated), for this reason we just have
	// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc

	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};

	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);

	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).then(function() {
	                previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .slide-animate {
	        padding:10px;
	      }

	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));

	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

	      it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

	      it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
	                  function($templateRequest,   $anchorScroll,   $animate) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;

	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;

	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).then(function() {
	              previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };

	        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
	          var afterAnimation = function() {
	            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
	              $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;

	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (scope.$$destroyed) return;

	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;

	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).then(afterAnimation);
	              });

	              currentScope = newScope;
	              currentElement = clone;

	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (scope.$$destroyed) return;

	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];

	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (toString.call($element[0]).match(/SVG/)) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }

	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];

	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      // We want to control whitespace trimming so we use this convoluted approach
	      // to access the ngList attribute, which doesn't pre-trim the attribute
	      var ngList = element.attr(attr.$attr.ngList) || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;

	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;

	        var list = [];

	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }

	        return list;
	      };

	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }

	        return undefined;
	      });

	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};

	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	*/

	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    PENDING_CLASS = 'ng-pending',
	    EMPTY_CLASS = 'ng-empty',
	    NOT_EMPTY_CLASS = 'ng-not-empty';

	var ngModelMinErr = minErr('ngModel');

	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.

	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.

	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.

	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

	      .ng-invalid {
	        border: 1px solid red;
	      }

	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model

	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };

	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize

	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';

	      expect(contentEditable.getText()).toEqual(content);

	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
	    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);
	  this.$$parentForm = nullFormCtrl;

	  var parsedNgModel = $parse($attr.ngModel),
	      parsedNgModelAssign = parsedNgModel.assign,
	      ngModelGet = parsedNgModel,
	      ngModelSet = parsedNgModelAssign,
	      pendingDebounce = null,
	      parserValid,
	      ctrl = this;

	  this.$$setOptions = function(options) {
	    ctrl.$options = options;
	    if (options && options.getterSetter) {
	      var invokeModelGetter = $parse($attr.ngModel + '()'),
	          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

	      ngModelGet = function($scope) {
	        var modelValue = parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      ngModelSet = function($scope, newValue) {
	        if (isFunction(parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: newValue});
	        } else {
	          parsedNgModelAssign($scope, newValue);
	        }
	      };
	    } else if (!parsedNgModel.assign) {
	      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
	          $attr.ngModel, startingTag($element));
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  this.$render = noop;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  this.$isEmpty = function(value) {
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  };

	  this.$$updateEmptyClasses = function(value) {
	    if (ctrl.$isEmpty(value)) {
	      $animate.removeClass($element, NOT_EMPTY_CLASS);
	      $animate.addClass($element, EMPTY_CLASS);
	    } else {
	      $animate.removeClass($element, EMPTY_CLASS);
	      $animate.addClass($element, NOT_EMPTY_CLASS);
	    }
	  };


	  var currentValidationRunId = 0;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: $element,
	    set: function(object, property) {
	      object[property] = true;
	    },
	    unset: function(object, property) {
	      delete object[property];
	    },
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  this.$setPristine = function() {
	    ctrl.$dirty = false;
	    ctrl.$pristine = true;
	    $animate.removeClass($element, DIRTY_CLASS);
	    $animate.addClass($element, PRISTINE_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  this.$setDirty = function() {
	    ctrl.$dirty = true;
	    ctrl.$pristine = false;
	    $animate.removeClass($element, PRISTINE_CLASS);
	    $animate.addClass($element, DIRTY_CLASS);
	    ctrl.$$parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  this.$setUntouched = function() {
	    ctrl.$touched = false;
	    ctrl.$untouched = true;
	    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  this.$setTouched = function() {
	    ctrl.$touched = true;
	    ctrl.$untouched = false;
	    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as blur, you can have a situation where there is a period when
	   * the `$viewValue` is out of sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode == 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *        <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *        empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *        <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *         <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                ng-keydown="setEmpty($event, 'value1')">
	   *         value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *        <p id="inputDescription2">With $rollbackViewValue():</p>
	   *         <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                ng-keydown="setEmpty($event, 'value2', true)">
	   *         value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }

	        </file>
	   * </example>
	   */
	  this.$rollbackViewValue = function() {
	    $timeout.cancel(pendingDebounce);
	    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
	    ctrl.$render();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  this.$validate = function() {
	    // ignore $validate before model is initialized
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      return;
	    }

	    var viewValue = ctrl.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = ctrl.$$rawModelValue;

	    var prevValid = ctrl.$valid;
	    var prevModelValue = ctrl.$modelValue;

	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

	    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;

	        if (ctrl.$modelValue !== prevModelValue) {
	          ctrl.$$writeModelToScope();
	        }
	      }
	    });

	  };

	  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
	    currentValidationRunId++;
	    var localValidationRunId = currentValidationRunId;

	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();

	    function processParseErrors() {
	      var errorKey = ctrl.$$parserName || 'parse';
	      if (isUndefined(parserValid)) {
	        setValidity(errorKey, null);
	      } else {
	        if (!parserValid) {
	          forEach(ctrl.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(ctrl.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, parserValid);
	        return parserValid;
	      }
	      return true;
	    }

	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(ctrl.$validators, function(validator, name) {
	        var result = validator(modelValue, viewValue);
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(ctrl.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }

	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(ctrl.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw ngModelMinErr('nopromise',
	            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function() {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        $q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }

	    function setValidity(name, isValid) {
	      if (localValidationRunId === currentValidationRunId) {
	        ctrl.$setValidity(name, isValid);
	      }
	    }

	    function validationDone(allValid) {
	      if (localValidationRunId === currentValidationRunId) {

	        doneCallback(allValid);
	      }
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  this.$commitViewValue = function() {
	    var viewValue = ctrl.$viewValue;

	    $timeout.cancel(pendingDebounce);

	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
	      return;
	    }
	    ctrl.$$updateEmptyClasses(viewValue);
	    ctrl.$$lastCommittedViewValue = viewValue;

	    // change to dirty
	    if (ctrl.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  };

	  this.$$parseAndValidate = function() {
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    parserValid = isUndefined(modelValue) ? undefined : true;

	    if (parserValid) {
	      for (var i = 0; i < ctrl.$parsers.length; i++) {
	        modelValue = ctrl.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      // ctrl.$modelValue has not been touched yet...
	      ctrl.$modelValue = ngModelGet($scope);
	    }
	    var prevModelValue = ctrl.$modelValue;
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	    ctrl.$$rawModelValue = modelValue;

	    if (allowInvalid) {
	      ctrl.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }

	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });

	    function writeToModelIfNeeded() {
	      if (ctrl.$modelValue !== prevModelValue) {
	        ctrl.$$writeModelToScope();
	      }
	    }
	  };

	  this.$$writeModelToScope = function() {
	    ngModelSet($scope, ctrl.$modelValue);
	    forEach(ctrl.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        $exceptionHandler(e);
	      }
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  this.$setViewValue = function(value, trigger) {
	    ctrl.$viewValue = value;
	    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
	      ctrl.$$debounceViewValueCommit(trigger);
	    }
	  };

	  this.$$debounceViewValueCommit = function(trigger) {
	    var debounceDelay = 0,
	        options = ctrl.$options,
	        debounce;

	    if (options && isDefined(options.debounce)) {
	      debounce = options.debounce;
	      if (isNumber(debounce)) {
	        debounceDelay = debounce;
	      } else if (isNumber(debounce[trigger])) {
	        debounceDelay = debounce[trigger];
	      } else if (isNumber(debounce['default'])) {
	        debounceDelay = debounce['default'];
	      }
	    }

	    $timeout.cancel(pendingDebounce);
	    if (debounceDelay) {
	      pendingDebounce = $timeout(function() {
	        ctrl.$commitViewValue();
	      }, debounceDelay);
	    } else if ($rootScope.$$phase) {
	      ctrl.$commitViewValue();
	    } else {
	      $scope.$apply(function() {
	        ctrl.$commitViewValue();
	      });
	    }
	  };

	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  $scope.$watch(function ngModelWatch() {
	    var modelValue = ngModelGet($scope);

	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      parserValid = undefined;

	      var formatters = ctrl.$formatters,
	          idx = formatters.length;

	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$$updateEmptyClasses(viewValue);
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();

	        ctrl.$$runValidators(modelValue, viewValue, noop);
	      }
	    }

	    return modelValue;
	  });
	}];


	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || modelCtrl.$$parentForm;

	          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);

	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
	            }
	          });

	          scope.$on('$destroy', function() {
	            modelCtrl.$$parentForm.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
	            element.on(modelCtrl.$options.updateOn, function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }

	          element.on('blur', function() {
	            if (modelCtrl.$touched) return;

	            if ($rootScope.$$phase) {
	              scope.$evalAsync(modelCtrl.$setTouched);
	            } else {
	              scope.$apply(modelCtrl.$setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];

	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
	 * events that will trigger a model update and/or a debouncing delay so that the actual update only
	 * takes place when a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
	 *
	 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging of the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	       `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 * @example

	  The following example shows how to override immediate updates. Changes on the inputs within the
	  form will update the model only when the control loses focus (blur event). If `escape` key is
	  pressed while the input field is focused, the value is reset to the value in the current model.

	  <example name="ngModelOptions-directive-blur" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ updateOn: 'blur' }"
	                   ng-keyup="cancel($event)" />
	          </label><br />
	          <label>Other data:
	            <input type="text" ng-model="user.data" />
	          </label><br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	        <pre>user.data = <span ng-bind="user.data"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'John', data: '' };

	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
	    </file>
	    <file name="protractor.js" type="protractor">
	      var model = element(by.binding('user.name'));
	      var input = element(by.model('user.name'));
	      var other = element(by.model('user.data'));

	      it('should allow custom events', function() {
	        input.sendKeys(' Doe');
	        input.click();
	        expect(model.getText()).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John Doe');
	      });

	      it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' Doe');
	        expect(input.getAttribute('value')).toEqual('John Doe');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John');
	      });
	    </file>
	  </example>

	  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
	  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

	  <example name="ngModelOptions-directive-debounce" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ debounce: 1000 }" />
	          </label>
	          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
	          <br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'Igor' };
	        }]);
	    </file>
	  </example>

	  This one shows how to bind to getter/setters:

	  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ getterSetter: true }" />
	          </label>
	        </form>
	        <pre>user.name = <span ng-bind="user.name()"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('getterSetterExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
	    </file>
	  </example>
	 */
	var ngModelOptionsDirective = function() {
	  return {
	    restrict: 'A',
	    controller: ['$scope', '$attrs', function($scope, $attrs) {
	      var that = this;
	      this.$options = copy($scope.$eval($attrs.ngModelOptions));
	      // Allow adding/overriding bound events
	      if (isDefined(this.$options.updateOn)) {
	        this.$options.updateOnDefault = false;
	        // extract "default" pseudo-event from list of events that can trigger a model update
	        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
	          that.$options.updateOnDefault = true;
	          return ' ';
	        }));
	      } else {
	        this.$options.updateOnDefault = true;
	      }
	    }]
	  };
	};



	// helper methods
	function addSetValidityMethod(context) {
	  var ctrl = context.ctrl,
	      $element = context.$element,
	      classCache = {},
	      set = context.set,
	      unset = context.unset,
	      $animate = context.$animate;

	  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

	  ctrl.$setValidity = setValidity;

	  function setValidity(validationErrorKey, state, controller) {
	    if (isUndefined(state)) {
	      createAndSet('$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup('$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(ctrl.$error, validationErrorKey, controller);
	      unset(ctrl.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(ctrl.$error, validationErrorKey, controller);
	        set(ctrl.$$success, validationErrorKey, controller);
	      } else {
	        set(ctrl.$error, validationErrorKey, controller);
	        unset(ctrl.$$success, validationErrorKey, controller);
	      }
	    }
	    if (ctrl.$pending) {
	      cachedToggleClass(PENDING_CLASS, true);
	      ctrl.$valid = ctrl.$invalid = undefined;
	      toggleValidationCss('', null);
	    } else {
	      cachedToggleClass(PENDING_CLASS, false);
	      ctrl.$valid = isObjectEmpty(ctrl.$error);
	      ctrl.$invalid = !ctrl.$valid;
	      toggleValidationCss('', ctrl.$valid);
	    }

	    // re-read the state as the set/unset methods could have
	    // combined state in ctrl.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (ctrl.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (ctrl.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }

	    toggleValidationCss(validationErrorKey, combinedState);
	    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
	  }

	  function createAndSet(name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }

	  function unsetAndCleanup(name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }

	  function cachedToggleClass(className, switchValue) {
	    if (switchValue && !classCache[className]) {
	      $animate.addClass($element, className);
	      classCache[className] = true;
	    } else if (!switchValue && classCache[className]) {
	      $animate.removeClass($element, className);
	      classCache[className] = false;
	    }
	  }

	  function toggleValidationCss(validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

	    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}

	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

	/* global jqLiteRemove */

	var ngOptionsMinErr = minErr('ngOptions');

	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
	 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
	 * increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
	 *  to a non-string value. This is because an option element can only be bound to string values at
	 * present.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>

	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>

	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>



	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */

	// jshint maxlen: false
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	// jshint maxlen: 100


	var ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {

	  function parseOptionsExpression(optionsExp, selectElement, scope) {

	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        "Expected expression in form of " +
	        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
	        " but got '{0}'. Element: {1}",
	        optionsExp, startingTag(selectElement));
	    }

	    // Extract the parts from the ngOptions expression

	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];

	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);

	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };

	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);

	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };


	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }

	    function getOptionValuesKeys(optionValues) {
	      var optionValuesKeys;

	      if (!keyName && isArrayLike(optionValues)) {
	        optionValuesKeys = optionValues;
	      } else {
	        // if object, extract keys, in enumeration order, unsorted
	        optionValuesKeys = [];
	        for (var itemKey in optionValues) {
	          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	            optionValuesKeys.push(itemKey);
	          }
	        }
	      }
	      return optionValuesKeys;
	    }

	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(optionValues) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        optionValues = optionValues || [];

	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];

	          var locals = getLocals(value, key);
	          var selectValue = getTrackByValueFn(value, locals);
	          watchedArray.push(selectValue);

	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }

	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        }
	        return watchedArray;
	      }),

	      getOptions: function() {

	        var optionItems = [];
	        var selectValueMap = {};

	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;

	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }

	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }


	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = window.document.createElement('option'),
	      optGroupTemplate = window.document.createElement('optgroup');

	    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {

	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];
	      var multiple = attr.multiple;

	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      var emptyOption;
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          emptyOption = children.eq(i);
	          break;
	        }
	      }

	      var providedEmptyOption = !!emptyOption;

	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');

	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
	      // This stores the newly created options before they are appended to the select.
	      // Since the contents are removed from the fragment when it is appended,
	      // we only need to create it once.
	      var listFragment = $document[0].createDocumentFragment();

	      var renderEmptyOption = function() {
	        if (!providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	        selectElement.val('');
	        emptyOption.prop('selected', true); // needed for IE
	        emptyOption.attr('selected', true);
	      };

	      var removeEmptyOption = function() {
	        if (!providedEmptyOption) {
	          emptyOption.remove();
	        }
	      };


	      var renderUnknownOption = function() {
	        selectElement.prepend(unknownOption);
	        selectElement.val('?');
	        unknownOption.prop('selected', true); // needed for IE
	        unknownOption.attr('selected', true);
	      };

	      var removeUnknownOption = function() {
	        unknownOption.remove();
	      };

	      // Update the controller methods for multiple selectable options
	      if (!multiple) {

	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var option = options.getOptionFromViewValue(value);

	          if (option) {
	            // Don't update the option when it is already selected.
	            // For example, the browser will select the first option by default. In that case,
	            // most properties are set automatically - except the `selected` attribute, which we
	            // set always

	            if (selectElement[0].value !== option.selectValue) {
	              removeUnknownOption();
	              removeEmptyOption();

	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	            }

	            option.element.setAttribute('selected', 'selected');
	          } else {
	            if (value === null || providedEmptyOption) {
	              removeUnknownOption();
	              renderEmptyOption();
	            } else {
	              removeEmptyOption();
	              renderUnknownOption();
	            }
	          }
	        };

	        selectCtrl.readValue = function readNgOptionsValue() {

	          var selectedOption = options.selectValueMap[selectElement.val()];

	          if (selectedOption && !selectedOption.disabled) {
	            removeEmptyOption();
	            removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };

	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }

	      } else {

	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };


	        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
	          options.items.forEach(function(option) {
	            option.element.selected = false;
	          });

	          if (value) {
	            value.forEach(function(item) {
	              var option = options.getOptionFromViewValue(item);
	              if (option) option.element.selected = true;
	            });
	          }
	        };


	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];

	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
	          });

	          return selections;
	        };

	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {

	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });

	        }
	      }


	      if (providedEmptyOption) {

	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        emptyOption.remove();

	        // compile the element since there might be bindings in it
	        $compile(emptyOption)(scope);

	        // remove the class, which is added automatically because we recompile the element and it
	        // becomes the compilation root
	        emptyOption.removeClass('ng-scope');
	      } else {
	        emptyOption = jqLite(optionTemplate.cloneNode(false));
	      }

	      selectElement.empty();

	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();

	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

	      // ------------------------------------------------------------------ //

	      function addOptionElement(option, parent) {
	        var optionElement = optionTemplate.cloneNode(false);
	        parent.appendChild(optionElement);
	        updateOptionElement(option, optionElement);
	      }


	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	        // selects in certain circumstances when multiple selects are next to each other and display
	        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	        // See https://github.com/angular/angular.js/issues/11314 for more info.
	        // This is unfortunately untestable with unit / e2e tests
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	        if (option.value !== element.value) element.value = option.selectValue;
	      }

	      function updateOptions() {
	        var previousValue = options && selectCtrl.readValue();

	        // We must remove all current options, but cannot simply set innerHTML = null
	        // since the providedEmptyOption might have an ngIf on it that inserts comments which we
	        // must preserve.
	        // Instead, iterate over the current option elements and remove them or their optgroup
	        // parents
	        if (options) {

	          for (var i = options.items.length - 1; i >= 0; i--) {
	            var option = options.items[i];
	            if (option.group) {
	              jqLiteRemove(option.element.parentNode);
	            } else {
	              jqLiteRemove(option.element);
	            }
	          }
	        }

	        options = ngOptions.getOptions();

	        var groupElementMap = {};

	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }

	        options.items.forEach(function addOption(option) {
	          var groupElement;

	          if (isDefined(option.group)) {

	            // This option is to live in a group
	            // See if we have already created this group
	            groupElement = groupElementMap[option.group];

	            if (!groupElement) {

	              groupElement = optGroupTemplate.cloneNode(false);
	              listFragment.appendChild(groupElement);

	              // Update the label on the group element
	              groupElement.label = option.group;

	              // Store it for use later
	              groupElementMap[option.group] = groupElement;
	            }

	            addOptionElement(option, groupElement);

	          } else {

	            // This option is not in a group
	            addOptionElement(option, listFragment);
	          }
	        });

	        selectElement[0].appendChild(listFragment);

	        ngModelCtrl.$render();

	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          var isNotPrimitive = ngOptions.trackBy || multiple;
	          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }

	      }
	  }

	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', 'ngModel'],
	    link: {
	      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
	        // Deactivate the SelectController.register method to prevent
	        // option directives from accidentally registering themselves
	        // (and unwanted $destroy handlers etc.)
	        ctrls[0].registerOption = noop;
	      },
	      post: ngOptionsPostLink
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>

	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));

	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');

	          countInput.clear();
	          countInput.sendKeys('0');

	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');

	          countInput.clear();
	          countInput.sendKeys('2');

	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

	          countInput.clear();
	          countInput.sendKeys('3');

	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

	          countInput.clear();
	          countInput.sendKeys('4');

	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;

	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;

	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

	      });

	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNaN(count);

	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }

	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to explicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });

	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, ngRepeat then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, ngRepeat will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have an identifier property, you should track
	 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *     {{model.name}}
	 * </div>
	 * ```
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length == 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }

	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }

	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));

	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);

	         element(by.model('q')).sendKeys('ma');

	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');

	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // jshint bitwise: false
	    scope.$odd = !(scope.$even = (index&1) === 0);
	    // jshint bitwise: true
	  };

	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };

	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };


	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);

	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

	      if (!match) {
	        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	            expression);
	      }

	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];

	      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

	      if (!match) {
	        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];

	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
	          aliasAs);
	      }

	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};

	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }

	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }

	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();

	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;

	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }

	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }

	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);

	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }

	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }

	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];

	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element

	              nextNode = previousNode;

	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);

	              if (getBlockStart(block) != nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, previousNode);
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;

	                $animate.enter(clone, null, previousNode);
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];

	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }

	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));

	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});

	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>

	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .animate-switch {
	        padding:10px;
	      }

	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));

	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    require: 'ngSwitch',

	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function ngSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];

	      var spliceFactory = function(array, index) {
	          return function() { array.splice(index, 1); };
	      };

	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;
	        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
	          $animate.cancel(previousLeaveAnimations[i]);
	        }
	        previousLeaveAnimations.length = 0;

	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
	          promise.then(spliceFactory(previousLeaveAnimations, i));
	        }

	        selectedElements.length = 0;
	        selectedScopes.length = 0;

	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
	              var block = { clone: caseElement };

	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];

	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {
	    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
	    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
	  }
	});

	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});

	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty, the existing content is left intact. This lets you provide fallback content in the case
	 * that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}">{{text}}</pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function(){
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = "https://google.com";
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */
	var ngTranscludeMinErr = minErr('ngTransclude');
	var ngTranscludeDirective = ngDirective({
	  restrict: 'EAC',
	  link: function($scope, $element, $attrs, controller, $transclude) {

	    if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
	      // If the attribute is of the form: `ng-transclude="ng-transclude"`
	      // then treat it like the default
	      $attrs.ngTransclude = '';
	    }

	    function ngTranscludeCloneAttachFn(clone) {
	      if (clone.length) {
	        $element.empty();
	        $element.append(clone);
	      }
	    }

	    if (!$transclude) {
	      throw ngTranscludeMinErr('orphan',
	       'Illegal use of ngTransclude directive in the template! ' +
	       'No parent directive that requires a transclusion found. ' +
	       'Element: {0}',
	       startingTag($element));
	    }

	    // If there is no slot name defined or the slot name is not optional
	    // then transclude the slot
	    var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
	    $transclude(ngTranscludeCloneAttachFn, null, slotName);
	  }
	});

	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example>
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>

	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type == 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;

	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];

	var noopNgModelController = { $setViewValue: noop, $render: noop };

	function chromeHack(optionElement) {
	  // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
	  // Adding an <option selected="selected"> element to a <select required="required"> should
	  // automatically select the new element
	  if (optionElement[0].hasAttribute('selected')) {
	    optionElement[0].selected = true;
	  }
	}

	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', function($element, $scope) {

	  var self = this,
	      optionsMap = new HashMap();

	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;

	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(window.document.createElement('option'));
	  self.renderUnknownOption = function(val) {
	    var unknownVal = '? ' + hashKey(val) + ' ?';
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    $element.val(unknownVal);
	  };

	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });

	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };


	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    self.removeUnknownOption();
	    return $element.val();
	  };


	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    if (self.hasOption(value)) {
	      self.removeUnknownOption();
	      $element.val(value);
	      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        $element.val('');
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };


	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    // Skip comment nodes, as they only pollute the `optionsMap`
	    if (element[0].nodeType === NODE_TYPE_COMMENT) return;

	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	    self.ngModelCtrl.$render();
	    chromeHack(element);
	  };

	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };

	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };


	  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {

	    if (interpolateValueFn) {
	      // The value attribute is interpolated
	      var oldVal;
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
	        if (isDefined(oldVal)) {
	          self.removeOption(oldVal);
	        }
	        oldVal = newVal;
	        self.addOption(newVal, optionElement);
	      });
	    } else if (interpolateTextFn) {
	      // The text content is interpolated
	      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
	        optionAttrs.$set('value', newVal);
	        if (oldVal !== newVal) {
	          self.removeOption(oldVal);
	        }
	        self.addOption(newVal, optionElement);
	      });
	    } else {
	      // The value attribute is static
	      self.addOption(optionAttrs.value, optionElement);
	    }

	    optionElement.on('$destroy', function() {
	      self.removeOption(optionAttrs.value);
	      self.ngModelCtrl.$render();
	    });
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `SELECT` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
	 *
	 * <div class="alert alert-warning">
	 * Note that the value of a `select` directive used without `ngOptions` is always a string.
	 * When the model needs to be bound to a non-string value, you must either explicitly convert it
	 * using a directive (see example below) or use `ngOptions` to specify the set of options.
	 * This is because an option element can only be bound to string values at present.
	 * </div>
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * <div class="alert alert-info">
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
	 * a new scope for each repeated instance.
	 * </div>
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1',
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="ngrepeat-select" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       repeatSelect: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {

	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    priority: 1,
	    link: {
	      pre: selectPreLink,
	      post: selectPostLink
	    }
	  };

	  function selectPreLink(scope, element, attr, ctrls) {

	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];

	      selectCtrl.ngModelCtrl = ngModelCtrl;

	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });

	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {

	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected) {
	              array.push(option.value);
	            }
	          });
	          return array;
	        };

	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value));
	          });
	        };

	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });

	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };

	      }
	    }

	    function selectPostLink(scope, element, attrs, ctrls) {
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];

	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`.
	      // This must be done in the postLink fn to prevent $render to be called before
	      // all nodes have been linked correctly.
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };
	    }
	};


	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {
	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {
	      if (isDefined(attr.value)) {
	        // If the value attribute is defined, check if it contains an interpolation
	        var interpolateValueFn = $interpolate(attr.value, true);
	      } else {
	        // If the value attribute is not defined then we fall back to the
	        // text content of the option element, which may be interpolated
	        var interpolateTextFn = $interpolate(element.text(), true);
	        if (!interpolateTextFn) {
	          attr.$set('value', element.text());
	        }
	      }

	      return function(scope, element, attr) {
	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup

	        if (selectCtrl) {
	          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
	        }
	      };
	    }
	  };
	}];

	var styleDirective = valueFn({
	  restrict: 'E',
	  terminal: false
	});

	/**
	 * @ngdoc directive
	 * @name ngRequired
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');

	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */
	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element

	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };

	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');

	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }

	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }

	        regexp = regex || undefined;
	        ctrl.$validate();
	      });

	      ctrl.$validators.pattern = function(modelValue, viewValue) {
	        // HTML5 pattern constraint validates the input value, so we validate the viewValue
	        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
	      };
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');

	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');

	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */
	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};

	if (window.angular.bootstrap) {
	  //AngularJS is already loaded, so we can return here...
	  if (window.console) {
	    console.log('WARNING: Tried to load angular more than once.');
	  }
	  return;
	}

	//try to bind to jquery now so that one can write jqLite(document).ready()
	//but we will rebind on bootstrap again.
	bindJQuery();

	publishExternalAPI(angular);

	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}

	function getVF(n, opt_precision) {
	  var v = opt_precision;

	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }

	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}

	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "AM",
	      "PM"
	    ],
	    "DAY": [
	      "Sunday",
	      "Monday",
	      "Tuesday",
	      "Wednesday",
	      "Thursday",
	      "Friday",
	      "Saturday"
	    ],
	    "ERANAMES": [
	      "Before Christ",
	      "Anno Domini"
	    ],
	    "ERAS": [
	      "BC",
	      "AD"
	    ],
	    "FIRSTDAYOFWEEK": 6,
	    "MONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "SHORTDAY": [
	      "Sun",
	      "Mon",
	      "Tue",
	      "Wed",
	      "Thu",
	      "Fri",
	      "Sat"
	    ],
	    "SHORTMONTH": [
	      "Jan",
	      "Feb",
	      "Mar",
	      "Apr",
	      "May",
	      "Jun",
	      "Jul",
	      "Aug",
	      "Sep",
	      "Oct",
	      "Nov",
	      "Dec"
	    ],
	    "STANDALONEMONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "WEEKENDRANGE": [
	      5,
	      6
	    ],
	    "fullDate": "EEEE, MMMM d, y",
	    "longDate": "MMMM d, y",
	    "medium": "MMM d, y h:mm:ss a",
	    "mediumDate": "MMM d, y",
	    "mediumTime": "h:mm:ss a",
	    "short": "M/d/yy h:mm a",
	    "shortDate": "M/d/yy",
	    "shortTime": "h:mm a"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "$",
	    "DECIMAL_SEP": ".",
	    "GROUP_SEP": ",",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\u00a4",
	        "negSuf": "",
	        "posPre": "\u00a4",
	        "posSuf": ""
	      }
	    ]
	  },
	  "id": "en-us",
	  "localeID": "en_US",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);

	  jqLite(window.document).ready(function() {
	    angularInit(window.document, bootstrap);
	  });

	})(window);

	!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },

/***/ 27:
/***/ function(module, exports) {

	/**
	 * State-based routing for AngularJS
	 * @version v0.2.18
	 * @link http://angular-ui.github.com/
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */

	/* commonjs package manager support (eg componentjs) */
	if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
	  module.exports = 'ui.router';
	}

	(function (window, angular, undefined) {
	/*jshint globalstrict:true*/
	/*global angular:false*/
	'use strict';

	var isDefined = angular.isDefined,
	    isFunction = angular.isFunction,
	    isString = angular.isString,
	    isObject = angular.isObject,
	    isArray = angular.isArray,
	    forEach = angular.forEach,
	    extend = angular.extend,
	    copy = angular.copy,
	    toJson = angular.toJson;

	function inherit(parent, extra) {
	  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
	}

	function merge(dst) {
	  forEach(arguments, function(obj) {
	    if (obj !== dst) {
	      forEach(obj, function(value, key) {
	        if (!dst.hasOwnProperty(key)) dst[key] = value;
	      });
	    }
	  });
	  return dst;
	}

	/**
	 * Finds the common ancestor path between two states.
	 *
	 * @param {Object} first The first state.
	 * @param {Object} second The second state.
	 * @return {Array} Returns an array of state names in descending order, not including the root.
	 */
	function ancestors(first, second) {
	  var path = [];

	  for (var n in first.path) {
	    if (first.path[n] !== second.path[n]) break;
	    path.push(first.path[n]);
	  }
	  return path;
	}

	/**
	 * IE8-safe wrapper for `Object.keys()`.
	 *
	 * @param {Object} object A JavaScript object.
	 * @return {Array} Returns the keys of the object as an array.
	 */
	function objectKeys(object) {
	  if (Object.keys) {
	    return Object.keys(object);
	  }
	  var result = [];

	  forEach(object, function(val, key) {
	    result.push(key);
	  });
	  return result;
	}

	/**
	 * IE8-safe wrapper for `Array.prototype.indexOf()`.
	 *
	 * @param {Array} array A JavaScript array.
	 * @param {*} value A value to search the array for.
	 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
	 */
	function indexOf(array, value) {
	  if (Array.prototype.indexOf) {
	    return array.indexOf(value, Number(arguments[2]) || 0);
	  }
	  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
	  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

	  if (from < 0) from += len;

	  for (; from < len; from++) {
	    if (from in array && array[from] === value) return from;
	  }
	  return -1;
	}

	/**
	 * Merges a set of parameters with all parameters inherited between the common parents of the
	 * current state and a given destination state.
	 *
	 * @param {Object} currentParams The value of the current state parameters ($stateParams).
	 * @param {Object} newParams The set of parameters which will be composited with inherited params.
	 * @param {Object} $current Internal definition of object representing the current state.
	 * @param {Object} $to Internal definition of object representing state to transition to.
	 */
	function inheritParams(currentParams, newParams, $current, $to) {
	  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

	  for (var i in parents) {
	    if (!parents[i] || !parents[i].params) continue;
	    parentParams = objectKeys(parents[i].params);
	    if (!parentParams.length) continue;

	    for (var j in parentParams) {
	      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
	      inheritList.push(parentParams[j]);
	      inherited[parentParams[j]] = currentParams[parentParams[j]];
	    }
	  }
	  return extend({}, inherited, newParams);
	}

	/**
	 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
	 *
	 * @param {Object} a The first object.
	 * @param {Object} b The second object.
	 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
	 *                     it defaults to the list of keys in `a`.
	 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
	 */
	function equalForKeys(a, b, keys) {
	  if (!keys) {
	    keys = [];
	    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
	  }

	  for (var i=0; i<keys.length; i++) {
	    var k = keys[i];
	    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
	  }
	  return true;
	}

	/**
	 * Returns the subset of an object, based on a list of keys.
	 *
	 * @param {Array} keys
	 * @param {Object} values
	 * @return {Boolean} Returns a subset of `values`.
	 */
	function filterByKeys(keys, values) {
	  var filtered = {};

	  forEach(keys, function (name) {
	    filtered[name] = values[name];
	  });
	  return filtered;
	}

	// like _.indexBy
	// when you know that your index values will be unique, or you want last-one-in to win
	function indexBy(array, propName) {
	  var result = {};
	  forEach(array, function(item) {
	    result[item[propName]] = item;
	  });
	  return result;
	}

	// extracted from underscore.js
	// Return a copy of the object only containing the whitelisted properties.
	function pick(obj) {
	  var copy = {};
	  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	  forEach(keys, function(key) {
	    if (key in obj) copy[key] = obj[key];
	  });
	  return copy;
	}

	// extracted from underscore.js
	// Return a copy of the object omitting the blacklisted properties.
	function omit(obj) {
	  var copy = {};
	  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	  for (var key in obj) {
	    if (indexOf(keys, key) == -1) copy[key] = obj[key];
	  }
	  return copy;
	}

	function pluck(collection, key) {
	  var result = isArray(collection) ? [] : {};

	  forEach(collection, function(val, i) {
	    result[i] = isFunction(key) ? key(val) : val[key];
	  });
	  return result;
	}

	function filter(collection, callback) {
	  var array = isArray(collection);
	  var result = array ? [] : {};
	  forEach(collection, function(val, i) {
	    if (callback(val, i)) {
	      result[array ? result.length : i] = val;
	    }
	  });
	  return result;
	}

	function map(collection, callback) {
	  var result = isArray(collection) ? [] : {};

	  forEach(collection, function(val, i) {
	    result[i] = callback(val, i);
	  });
	  return result;
	}

	/**
	 * @ngdoc overview
	 * @name ui.router.util
	 *
	 * @description
	 * # ui.router.util sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 *
	 */
	angular.module('ui.router.util', ['ng']);

	/**
	 * @ngdoc overview
	 * @name ui.router.router
	 * 
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.router sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 */
	angular.module('ui.router.router', ['ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router.state
	 * 
	 * @requires ui.router.router
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.state sub-module
	 *
	 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 * 
	 */
	angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router
	 *
	 * @requires ui.router.state
	 *
	 * @description
	 * # ui.router
	 * 
	 * ## The main module for ui.router 
	 * There are several sub-modules included with the ui.router module, however only this module is needed
	 * as a dependency within your angular app. The other modules are for organization purposes. 
	 *
	 * The modules are:
	 * * ui.router - the main "umbrella" module
	 * * ui.router.router - 
	 * 
	 * *You'll need to include **only** this module as the dependency within your angular app.*
	 * 
	 * <pre>
	 * <!doctype html>
	 * <html ng-app="myApp">
	 * <head>
	 *   <script src="js/angular.js"></script>
	 *   <!-- Include the ui-router script -->
	 *   <script src="js/angular-ui-router.min.js"></script>
	 *   <script>
	 *     // ...and add 'ui.router' as a dependency
	 *     var myApp = angular.module('myApp', ['ui.router']);
	 *   </script>
	 * </head>
	 * <body>
	 * </body>
	 * </html>
	 * </pre>
	 */
	angular.module('ui.router', ['ui.router.state']);

	angular.module('ui.router.compat', ['ui.router']);

	/**
	 * @ngdoc object
	 * @name ui.router.util.$resolve
	 *
	 * @requires $q
	 * @requires $injector
	 *
	 * @description
	 * Manages resolution of (acyclic) graphs of promises.
	 */
	$Resolve.$inject = ['$q', '$injector'];
	function $Resolve(  $q,    $injector) {
	  
	  var VISIT_IN_PROGRESS = 1,
	      VISIT_DONE = 2,
	      NOTHING = {},
	      NO_DEPENDENCIES = [],
	      NO_LOCALS = NOTHING,
	      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
	  

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$resolve#study
	   * @methodOf ui.router.util.$resolve
	   *
	   * @description
	   * Studies a set of invocables that are likely to be used multiple times.
	   * <pre>
	   * $resolve.study(invocables)(locals, parent, self)
	   * </pre>
	   * is equivalent to
	   * <pre>
	   * $resolve.resolve(invocables, locals, parent, self)
	   * </pre>
	   * but the former is more efficient (in fact `resolve` just calls `study` 
	   * internally).
	   *
	   * @param {object} invocables Invocable objects
	   * @return {function} a function to pass in locals, parent and self
	   */
	  this.study = function (invocables) {
	    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
	    var invocableKeys = objectKeys(invocables || {});
	    
	    // Perform a topological sort of invocables to build an ordered plan
	    var plan = [], cycle = [], visited = {};
	    function visit(value, key) {
	      if (visited[key] === VISIT_DONE) return;
	      
	      cycle.push(key);
	      if (visited[key] === VISIT_IN_PROGRESS) {
	        cycle.splice(0, indexOf(cycle, key));
	        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
	      }
	      visited[key] = VISIT_IN_PROGRESS;
	      
	      if (isString(value)) {
	        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
	      } else {
	        var params = $injector.annotate(value);
	        forEach(params, function (param) {
	          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
	        });
	        plan.push(key, value, params);
	      }
	      
	      cycle.pop();
	      visited[key] = VISIT_DONE;
	    }
	    forEach(invocables, visit);
	    invocables = cycle = visited = null; // plan is all that's required
	    
	    function isResolve(value) {
	      return isObject(value) && value.then && value.$$promises;
	    }
	    
	    return function (locals, parent, self) {
	      if (isResolve(locals) && self === undefined) {
	        self = parent; parent = locals; locals = null;
	      }
	      if (!locals) locals = NO_LOCALS;
	      else if (!isObject(locals)) {
	        throw new Error("'locals' must be an object");
	      }       
	      if (!parent) parent = NO_PARENT;
	      else if (!isResolve(parent)) {
	        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
	      }
	      
	      // To complete the overall resolution, we have to wait for the parent
	      // promise and for the promise for each invokable in our plan.
	      var resolution = $q.defer(),
	          result = resolution.promise,
	          promises = result.$$promises = {},
	          values = extend({}, locals),
	          wait = 1 + plan.length/3,
	          merged = false;
	          
	      function done() {
	        // Merge parent values we haven't got yet and publish our own $$values
	        if (!--wait) {
	          if (!merged) merge(values, parent.$$values); 
	          result.$$values = values;
	          result.$$promises = result.$$promises || true; // keep for isResolve()
	          delete result.$$inheritedValues;
	          resolution.resolve(values);
	        }
	      }
	      
	      function fail(reason) {
	        result.$$failure = reason;
	        resolution.reject(reason);
	      }

	      // Short-circuit if parent has already failed
	      if (isDefined(parent.$$failure)) {
	        fail(parent.$$failure);
	        return result;
	      }
	      
	      if (parent.$$inheritedValues) {
	        merge(values, omit(parent.$$inheritedValues, invocableKeys));
	      }

	      // Merge parent values if the parent has already resolved, or merge
	      // parent promises and wait if the parent resolve is still in progress.
	      extend(promises, parent.$$promises);
	      if (parent.$$values) {
	        merged = merge(values, omit(parent.$$values, invocableKeys));
	        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
	        done();
	      } else {
	        if (parent.$$inheritedValues) {
	          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
	        }        
	        parent.then(done, fail);
	      }
	      
	      // Process each invocable in the plan, but ignore any where a local of the same name exists.
	      for (var i=0, ii=plan.length; i<ii; i+=3) {
	        if (locals.hasOwnProperty(plan[i])) done();
	        else invoke(plan[i], plan[i+1], plan[i+2]);
	      }
	      
	      function invoke(key, invocable, params) {
	        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
	        var invocation = $q.defer(), waitParams = 0;
	        function onfailure(reason) {
	          invocation.reject(reason);
	          fail(reason);
	        }
	        // Wait for any parameter that we have a promise for (either from parent or from this
	        // resolve; in that case study() will have made sure it's ordered before us in the plan).
	        forEach(params, function (dep) {
	          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
	            waitParams++;
	            promises[dep].then(function (result) {
	              values[dep] = result;
	              if (!(--waitParams)) proceed();
	            }, onfailure);
	          }
	        });
	        if (!waitParams) proceed();
	        function proceed() {
	          if (isDefined(result.$$failure)) return;
	          try {
	            invocation.resolve($injector.invoke(invocable, self, values));
	            invocation.promise.then(function (result) {
	              values[key] = result;
	              done();
	            }, onfailure);
	          } catch (e) {
	            onfailure(e);
	          }
	        }
	        // Publish promise synchronously; invocations further down in the plan may depend on it.
	        promises[key] = invocation.promise;
	      }
	      
	      return result;
	    };
	  };
	  
	  /**
	   * @ngdoc function
	   * @name ui.router.util.$resolve#resolve
	   * @methodOf ui.router.util.$resolve
	   *
	   * @description
	   * Resolves a set of invocables. An invocable is a function to be invoked via 
	   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
	   * An invocable can either return a value directly,
	   * or a `$q` promise. If a promise is returned it will be resolved and the 
	   * resulting value will be used instead. Dependencies of invocables are resolved 
	   * (in this order of precedence)
	   *
	   * - from the specified `locals`
	   * - from another invocable that is part of this `$resolve` call
	   * - from an invocable that is inherited from a `parent` call to `$resolve` 
	   *   (or recursively
	   * - from any ancestor `$resolve` of that parent).
	   *
	   * The return value of `$resolve` is a promise for an object that contains 
	   * (in this order of precedence)
	   *
	   * - any `locals` (if specified)
	   * - the resolved return values of all injectables
	   * - any values inherited from a `parent` call to `$resolve` (if specified)
	   *
	   * The promise will resolve after the `parent` promise (if any) and all promises 
	   * returned by injectables have been resolved. If any invocable 
	   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
	   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
	   * same error. A rejection of a `parent` promise (if specified) will likewise be 
	   * propagated immediately. Once the `$resolve` promise has been rejected, no 
	   * further invocables will be called.
	   * 
	   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
	   * to throw an error. As a special case, an injectable can depend on a parameter 
	   * with the same name as the injectable, which will be fulfilled from the `parent` 
	   * injectable of the same name. This allows inherited values to be decorated. 
	   * Note that in this case any other injectable in the same `$resolve` with the same
	   * dependency would see the decorated value, not the inherited value.
	   *
	   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
	   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
	   * exception.
	   *
	   * Invocables are invoked eagerly as soon as all dependencies are available. 
	   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
	   *
	   * As a special case, an invocable can be a string, in which case it is taken to 
	   * be a service name to be passed to `$injector.get()`. This is supported primarily 
	   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
	   * routes.
	   *
	   * @param {object} invocables functions to invoke or 
	   * `$injector` services to fetch.
	   * @param {object} locals  values to make available to the injectables
	   * @param {object} parent  a promise returned by another call to `$resolve`.
	   * @param {object} self  the `this` for the invoked methods
	   * @return {object} Promise for an object that contains the resolved return value
	   * of all invocables, as well as any inherited and local values.
	   */
	  this.resolve = function (invocables, locals, parent, self) {
	    return this.study(invocables)(locals, parent, self);
	  };
	}

	angular.module('ui.router.util').service('$resolve', $Resolve);


	/**
	 * @ngdoc object
	 * @name ui.router.util.$templateFactory
	 *
	 * @requires $http
	 * @requires $templateCache
	 * @requires $injector
	 *
	 * @description
	 * Service. Manages loading of templates.
	 */
	$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
	function $TemplateFactory(  $http,   $templateCache,   $injector) {

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromConfig
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template from a configuration object. 
	   *
	   * @param {object} config Configuration object for which to load a template. 
	   * The following properties are search in the specified order, and the first one 
	   * that is defined is used to create the template:
	   *
	   * @param {string|object} config.template html string template or function to 
	   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
	   * @param {string|object} config.templateUrl url to load or a function returning 
	   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
	   * @param {Function} config.templateProvider function to invoke via 
	   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
	   * @param {object} params  Parameters to pass to the template function.
	   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
	   * via a `templateProvider`. Defaults to `{ params: params }`.
	   *
	   * @return {string|object}  The template html as a string, or a promise for 
	   * that string,or `null` if no template is configured.
	   */
	  this.fromConfig = function (config, params, locals) {
	    return (
	      isDefined(config.template) ? this.fromString(config.template, params) :
	      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
	      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
	      null
	    );
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromString
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template from a string or a function returning a string.
	   *
	   * @param {string|object} template html template as a string or function that 
	   * returns an html template as a string.
	   * @param {object} params Parameters to pass to the template function.
	   *
	   * @return {string|object} The template html as a string, or a promise for that 
	   * string.
	   */
	  this.fromString = function (template, params) {
	    return isFunction(template) ? template(params) : template;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromUrl
	   * @methodOf ui.router.util.$templateFactory
	   * 
	   * @description
	   * Loads a template from the a URL via `$http` and `$templateCache`.
	   *
	   * @param {string|Function} url url of the template to load, or a function 
	   * that returns a url.
	   * @param {Object} params Parameters to pass to the url function.
	   * @return {string|Promise.<string>} The template html as a string, or a promise 
	   * for that string.
	   */
	  this.fromUrl = function (url, params) {
	    if (isFunction(url)) url = url(params);
	    if (url == null) return null;
	    else return $http
	        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
	        .then(function(response) { return response.data; });
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromProvider
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template by invoking an injectable provider function.
	   *
	   * @param {Function} provider Function to invoke via `$injector.invoke`
	   * @param {Object} params Parameters for the template.
	   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
	   * `{ params: params }`.
	   * @return {string|Promise.<string>} The template html as a string, or a promise 
	   * for that string.
	   */
	  this.fromProvider = function (provider, params, locals) {
	    return $injector.invoke(provider, null, locals || { params: params });
	  };
	}

	angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

	var $$UMFP; // reference to $UrlMatcherFactoryProvider

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Matches URLs against patterns and extracts named parameters from the path or the search
	 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
	 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
	 * do not influence whether or not a URL is matched, but their values are passed through into
	 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
	 *
	 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
	 * syntax, which optionally allows a regular expression for the parameter to be specified:
	 *
	 * * `':'` name - colon placeholder
	 * * `'*'` name - catch-all placeholder
	 * * `'{' name '}'` - curly placeholder
	 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
	 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
	 *
	 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
	 * must be unique within the pattern (across both path and search parameters). For colon
	 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
	 * number of characters other than '/'. For catch-all placeholders the path parameter matches
	 * any number of characters.
	 *
	 * Examples:
	 *
	 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
	 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
	 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
	 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
	 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
	 * * `'/user/{id:[^/]*}'` - Same as the previous example.
	 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
	 *   parameter consists of 1 to 8 hex digits.
	 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
	 *   path into the parameter 'path'.
	 * * `'/files/*path'` - ditto.
	 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
	 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
	 *
	 * @param {string} pattern  The pattern to compile into a matcher.
	 * @param {Object} config  A configuration object hash:
	 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
	 *   an existing UrlMatcher
	 *
	 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
	 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
	 *
	 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
	 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
	 *   non-null) will start with this prefix.
	 *
	 * @property {string} source  The pattern that was passed into the constructor
	 *
	 * @property {string} sourcePath  The path portion of the source property
	 *
	 * @property {string} sourceSearch  The search portion of the source property
	 *
	 * @property {string} regex  The constructed regex that will be used to match against the url when
	 *   it is time to determine which url will match.
	 *
	 * @returns {Object}  New `UrlMatcher` object
	 */
	function UrlMatcher(pattern, config, parentMatcher) {
	  config = extend({ params: {} }, isObject(config) ? config : {});

	  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
	  //   '*' name
	  //   ':' name
	  //   '{' name '}'
	  //   '{' name ':' regexp '}'
	  // The regular expression is somewhat complicated due to the need to allow curly braces
	  // inside the regular expression. The placeholder regexp breaks down as follows:
	  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
	  //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
	  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
	  //    [^{}\\]+                       - anything other than curly braces or backslash
	  //    \\.                            - a backslash escape
	  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
	  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	      searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	      compiled = '^', last = 0, m,
	      segments = this.segments = [],
	      parentParams = parentMatcher ? parentMatcher.params : {},
	      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
	      paramNames = [];

	  function addParameter(id, type, config, location) {
	    paramNames.push(id);
	    if (parentParams[id]) return parentParams[id];
	    if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
	    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
	    params[id] = new $$UMFP.Param(id, type, config, location);
	    return params[id];
	  }

	  function quoteRegExp(string, pattern, squash, optional) {
	    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
	    if (!pattern) return result;
	    switch(squash) {
	      case false: surroundPattern = ['(', ')' + (optional ? "?" : "")]; break;
	      case true:
	        result = result.replace(/\/$/, '');
	        surroundPattern = ['(?:\/(', ')|\/)?'];
	      break;
	      default:    surroundPattern = ['(' + squash + "|", ')?']; break;
	    }
	    return result + surroundPattern[0] + pattern + surroundPattern[1];
	  }

	  this.source = pattern;

	  // Split into static segments separated by path parameter placeholders.
	  // The number of segments is always 1 more than the number of parameters.
	  function matchDetails(m, isSearch) {
	    var id, regexp, segment, type, cfg, arrayMode;
	    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
	    cfg         = config.params[id];
	    segment     = pattern.substring(last, m.index);
	    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);

	    if (regexp) {
	      type      = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
	    }

	    return {
	      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
	    };
	  }

	  var p, param, segment;
	  while ((m = placeholder.exec(pattern))) {
	    p = matchDetails(m, false);
	    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

	    param = addParameter(p.id, p.type, p.cfg, "path");
	    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
	    segments.push(p.segment);
	    last = placeholder.lastIndex;
	  }
	  segment = pattern.substring(last);

	  // Find any search parameter names and remove them from the last segment
	  var i = segment.indexOf('?');

	  if (i >= 0) {
	    var search = this.sourceSearch = segment.substring(i);
	    segment = segment.substring(0, i);
	    this.sourcePath = pattern.substring(0, last + i);

	    if (search.length > 0) {
	      last = 0;
	      while ((m = searchPlaceholder.exec(search))) {
	        p = matchDetails(m, true);
	        param = addParameter(p.id, p.type, p.cfg, "search");
	        last = placeholder.lastIndex;
	        // check if ?&
	      }
	    }
	  } else {
	    this.sourcePath = pattern;
	    this.sourceSearch = '';
	  }

	  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
	  segments.push(segment);

	  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
	  this.prefix = segments[0];
	  this.$$paramNames = paramNames;
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#concat
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns a new matcher for a pattern constructed by appending the path part and adding the
	 * search parameters of the specified pattern to this pattern. The current pattern is not
	 * modified. This can be understood as creating a pattern for URLs that are relative to (or
	 * suffixes of) the current pattern.
	 *
	 * @example
	 * The following two matchers are equivalent:
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').concat('/details?date');
	 * new UrlMatcher('/user/{id}/details?q&date');
	 * </pre>
	 *
	 * @param {string} pattern  The pattern to append.
	 * @param {Object} config  An object hash of the configuration for the matcher.
	 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
	 */
	UrlMatcher.prototype.concat = function (pattern, config) {
	  // Because order of search parameters is irrelevant, we can add our own search
	  // parameters to the end of the new pattern. Parse the new pattern by itself
	  // and then join the bits together, but it's much easier to do this on a string level.
	  var defaultConfig = {
	    caseInsensitive: $$UMFP.caseInsensitive(),
	    strict: $$UMFP.strictMode(),
	    squash: $$UMFP.defaultSquashPolicy()
	  };
	  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
	};

	UrlMatcher.prototype.toString = function () {
	  return this.source;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#exec
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Tests the specified path against this matcher, and returns an object containing the captured
	 * parameter values, or null if the path does not match. The returned object contains the values
	 * of any search parameters that are mentioned in the pattern, but their value may be null if
	 * they are not present in `searchParams`. This means that search parameters are always treated
	 * as optional.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
	 *   x: '1', q: 'hello'
	 * });
	 * // returns { id: 'bob', q: 'hello', r: null }
	 * </pre>
	 *
	 * @param {string} path  The URL path to match, e.g. `$location.path()`.
	 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
	 * @returns {Object}  The captured parameter values.
	 */
	UrlMatcher.prototype.exec = function (path, searchParams) {
	  var m = this.regexp.exec(path);
	  if (!m) return null;
	  searchParams = searchParams || {};

	  var paramNames = this.parameters(), nTotal = paramNames.length,
	    nPath = this.segments.length - 1,
	    values = {}, i, j, cfg, paramName;

	  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

	  function decodePathArray(string) {
	    function reverseString(str) { return str.split("").reverse().join(""); }
	    function unquoteDashes(str) { return str.replace(/\\-/g, "-"); }

	    var split = reverseString(string).split(/-(?!\\)/);
	    var allReversed = map(split, reverseString);
	    return map(allReversed, unquoteDashes).reverse();
	  }

	  var param, paramVal;
	  for (i = 0; i < nPath; i++) {
	    paramName = paramNames[i];
	    param = this.params[paramName];
	    paramVal = m[i+1];
	    // if the param value matches a pre-replace pair, replace the value before decoding.
	    for (j = 0; j < param.replace.length; j++) {
	      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	    }
	    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
	    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	    values[paramName] = param.value(paramVal);
	  }
	  for (/**/; i < nTotal; i++) {
	    paramName = paramNames[i];
	    values[paramName] = this.params[paramName].value(searchParams[paramName]);
	    param = this.params[paramName];
	    paramVal = searchParams[paramName];
	    for (j = 0; j < param.replace.length; j++) {
	      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	    }
	    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	    values[paramName] = param.value(paramVal);
	  }

	  return values;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#parameters
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns the names of all path and search parameters of this pattern in an unspecified order.
	 *
	 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
	 *    pattern has no parameters, an empty array is returned.
	 */
	UrlMatcher.prototype.parameters = function (param) {
	  if (!isDefined(param)) return this.$$paramNames;
	  return this.params[param] || null;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#validates
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Checks an object hash of parameters to validate their correctness according to the parameter
	 * types of this `UrlMatcher`.
	 *
	 * @param {Object} params The object hash of parameters to validate.
	 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
	 */
	UrlMatcher.prototype.validates = function (params) {
	  return this.params.$$validates(params);
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#format
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Creates a URL that matches this pattern by substituting the specified values
	 * for the path and search parameters. Null values for path parameters are
	 * treated as empty strings.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
	 * // returns '/user/bob?q=yes'
	 * </pre>
	 *
	 * @param {Object} values  the values to substitute for the parameters in this pattern.
	 * @returns {string}  the formatted URL (path and optionally search part).
	 */
	UrlMatcher.prototype.format = function (values) {
	  values = values || {};
	  var segments = this.segments, params = this.parameters(), paramset = this.params;
	  if (!this.validates(values)) return null;

	  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

	  function encodeDashes(str) { // Replace dashes with encoded "\-"
	    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
	  }

	  for (i = 0; i < nTotal; i++) {
	    var isPathParam = i < nPath;
	    var name = params[i], param = paramset[name], value = param.value(values[name]);
	    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
	    var squash = isDefaultValue ? param.squash : false;
	    var encoded = param.type.encode(value);

	    if (isPathParam) {
	      var nextSegment = segments[i + 1];
	      var isFinalPathParam = i + 1 === nPath;

	      if (squash === false) {
	        if (encoded != null) {
	          if (isArray(encoded)) {
	            result += map(encoded, encodeDashes).join("-");
	          } else {
	            result += encodeURIComponent(encoded);
	          }
	        }
	        result += nextSegment;
	      } else if (squash === true) {
	        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
	        result += nextSegment.match(capture)[1];
	      } else if (isString(squash)) {
	        result += squash + nextSegment;
	      }

	      if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);
	    } else {
	      if (encoded == null || (isDefaultValue && squash !== false)) continue;
	      if (!isArray(encoded)) encoded = [ encoded ];
	      if (encoded.length === 0) continue;
	      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
	      result += (search ? '&' : '?') + (name + '=' + encoded);
	      search = true;
	    }
	  }

	  return result;
	};

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:Type
	 *
	 * @description
	 * Implements an interface to define custom parameter types that can be decoded from and encoded to
	 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
	 * objects when matching or formatting URLs, or comparing or validating parameter values.
	 *
	 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
	 * information on registering custom types.
	 *
	 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
	 *        properties will override the default methods and/or pattern in `Type`'s public interface.
	 * @example
	 * <pre>
	 * {
	 *   decode: function(val) { return parseInt(val, 10); },
	 *   encode: function(val) { return val && val.toString(); },
	 *   equals: function(a, b) { return this.is(a) && a === b; },
	 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
	 *   pattern: /\d+/
	 * }
	 * </pre>
	 *
	 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
	 *           coming from a substring of a URL.
	 *
	 * @returns {Object}  Returns a new `Type` object.
	 */
	function Type(config) {
	  extend(this, config);
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#is
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Detects whether a value is of a particular type. Accepts a native (decoded) value
	 * and determines whether it matches the current `Type` object.
	 *
	 * @param {*} val  The value to check.
	 * @param {string} key  Optional. If the type check is happening in the context of a specific
	 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
	 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
	 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
	 */
	Type.prototype.is = function(val, key) {
	  return true;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#encode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
	 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
	 * only needs to be a representation of `val` that has been coerced to a string.
	 *
	 * @param {*} val  The value to encode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
	 */
	Type.prototype.encode = function(val, key) {
	  return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#decode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Converts a parameter value (from URL string or transition param) to a custom/native value.
	 *
	 * @param {string} val  The URL parameter value to decode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {*}  Returns a custom representation of the URL parameter value.
	 */
	Type.prototype.decode = function(val, key) {
	  return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#equals
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Determines whether two decoded values are equivalent.
	 *
	 * @param {*} a  A value to compare against.
	 * @param {*} b  A value to compare against.
	 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
	 */
	Type.prototype.equals = function(a, b) {
	  return a == b;
	};

	Type.prototype.$subPattern = function() {
	  var sub = this.pattern.toString();
	  return sub.substr(1, sub.length - 2);
	};

	Type.prototype.pattern = /.*/;

	Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

	/** Given an encoded string, or a decoded object, returns a decoded object */
	Type.prototype.$normalize = function(val) {
	  return this.is(val) ? val : this.decode(val);
	};

	/*
	 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
	 * e.g.:
	 * - urlmatcher pattern "/path?{queryParam[]:int}"
	 * - url: "/path?queryParam=1&queryParam=2
	 * - $stateParams.queryParam will be [1, 2]
	 * if `mode` is "auto", then
	 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
	 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
	 */
	Type.prototype.$asArray = function(mode, isSearch) {
	  if (!mode) return this;
	  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

	  function ArrayType(type, mode) {
	    function bindTo(type, callbackName) {
	      return function() {
	        return type[callbackName].apply(type, arguments);
	      };
	    }

	    // Wrap non-array value as array
	    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
	    // Unwrap array value for "auto" mode. Return undefined for empty array.
	    function arrayUnwrap(val) {
	      switch(val.length) {
	        case 0: return undefined;
	        case 1: return mode === "auto" ? val[0] : val;
	        default: return val;
	      }
	    }
	    function falsey(val) { return !val; }

	    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
	    function arrayHandler(callback, allTruthyMode) {
	      return function handleArray(val) {
	        if (isArray(val) && val.length === 0) return val;
	        val = arrayWrap(val);
	        var result = map(val, callback);
	        if (allTruthyMode === true)
	          return filter(result, falsey).length === 0;
	        return arrayUnwrap(result);
	      };
	    }

	    // Wraps type (.equals) functions to operate on each value of an array
	    function arrayEqualsHandler(callback) {
	      return function handleArray(val1, val2) {
	        var left = arrayWrap(val1), right = arrayWrap(val2);
	        if (left.length !== right.length) return false;
	        for (var i = 0; i < left.length; i++) {
	          if (!callback(left[i], right[i])) return false;
	        }
	        return true;
	      };
	    }

	    this.encode = arrayHandler(bindTo(type, 'encode'));
	    this.decode = arrayHandler(bindTo(type, 'decode'));
	    this.is     = arrayHandler(bindTo(type, 'is'), true);
	    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
	    this.pattern = type.pattern;
	    this.$normalize = arrayHandler(bindTo(type, '$normalize'));
	    this.name = type.name;
	    this.$arrayMode = mode;
	  }

	  return new ArrayType(this, mode);
	};



	/**
	 * @ngdoc object
	 * @name ui.router.util.$urlMatcherFactory
	 *
	 * @description
	 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
	 * is also available to providers under the name `$urlMatcherFactoryProvider`.
	 */
	function $UrlMatcherFactory() {
	  $$UMFP = this;

	  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

	  // Use tildes to pre-encode slashes.
	  // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
	  // and bidirectional encoding/decoding fails.
	  // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
	  function valToString(val) { return val != null ? val.toString().replace(/~/g, "~~").replace(/\//g, "~2F") : val; }
	  function valFromString(val) { return val != null ? val.toString().replace(/~2F/g, "/").replace(/~~/g, "~") : val; }

	  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
	    "string": {
	      encode: valToString,
	      decode: valFromString,
	      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
	      // In 0.2.x, string params are optional by default for backwards compat
	      is: function(val) { return val == null || !isDefined(val) || typeof val === "string"; },
	      pattern: /[^/]*/
	    },
	    "int": {
	      encode: valToString,
	      decode: function(val) { return parseInt(val, 10); },
	      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
	      pattern: /\d+/
	    },
	    "bool": {
	      encode: function(val) { return val ? 1 : 0; },
	      decode: function(val) { return parseInt(val, 10) !== 0; },
	      is: function(val) { return val === true || val === false; },
	      pattern: /0|1/
	    },
	    "date": {
	      encode: function (val) {
	        if (!this.is(val))
	          return undefined;
	        return [ val.getFullYear(),
	          ('0' + (val.getMonth() + 1)).slice(-2),
	          ('0' + val.getDate()).slice(-2)
	        ].join("-");
	      },
	      decode: function (val) {
	        if (this.is(val)) return val;
	        var match = this.capture.exec(val);
	        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
	      },
	      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
	      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
	      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
	      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
	    },
	    "json": {
	      encode: angular.toJson,
	      decode: angular.fromJson,
	      is: angular.isObject,
	      equals: angular.equals,
	      pattern: /[^/]*/
	    },
	    "any": { // does not encode/decode
	      encode: angular.identity,
	      decode: angular.identity,
	      equals: angular.equals,
	      pattern: /.*/
	    }
	  };

	  function getDefaultConfig() {
	    return {
	      strict: isStrictMode,
	      caseInsensitive: isCaseInsensitive
	    };
	  }

	  function isInjectable(value) {
	    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
	  }

	  /**
	   * [Internal] Get the default value of a parameter, which may be an injectable function.
	   */
	  $UrlMatcherFactory.$$getDefaultValue = function(config) {
	    if (!isInjectable(config.value)) return config.value;
	    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	    return injector.invoke(config.value);
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Defines whether URL matching should be case sensitive (the default behavior), or not.
	   *
	   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
	   * @returns {boolean} the current value of caseInsensitive
	   */
	  this.caseInsensitive = function(value) {
	    if (isDefined(value))
	      isCaseInsensitive = value;
	    return isCaseInsensitive;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#strictMode
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Defines whether URLs should match trailing slashes, or not (the default behavior).
	   *
	   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
	   * @returns {boolean} the current value of strictMode
	   */
	  this.strictMode = function(value) {
	    if (isDefined(value))
	      isStrictMode = value;
	    return isStrictMode;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Sets the default behavior when generating or matching URLs with default parameter values.
	   *
	   * @param {string} value A string that defines the default parameter URL squashing behavior.
	   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
	   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
	   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
	   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
	   *             the parameter value from the URL and replace it with this string.
	   */
	  this.defaultSquashPolicy = function(value) {
	    if (!isDefined(value)) return defaultSquashPolicy;
	    if (value !== true && value !== false && !isString(value))
	      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
	    defaultSquashPolicy = value;
	    return value;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#compile
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
	   *
	   * @param {string} pattern  The URL pattern.
	   * @param {Object} config  The config object hash.
	   * @returns {UrlMatcher}  The UrlMatcher.
	   */
	  this.compile = function (pattern, config) {
	    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#isMatcher
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
	   *
	   * @param {Object} object  The object to perform the type check against.
	   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
	   *          implementing all the same methods.
	   */
	  this.isMatcher = function (o) {
	    if (!isObject(o)) return false;
	    var result = true;

	    forEach(UrlMatcher.prototype, function(val, name) {
	      if (isFunction(val)) {
	        result = result && (isDefined(o[name]) && isFunction(o[name]));
	      }
	    });
	    return result;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#type
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
	   * generate URLs with typed parameters.
	   *
	   * @param {string} name  The type name.
	   * @param {Object|Function} definition   The type definition. See
	   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
	   *        runtime starts.  The result of this function is merged into the existing `definition`.
	   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	   *
	   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
	   *
	   * @example
	   * This is a simple example of a custom type that encodes and decodes items from an
	   * array, using the array index as the URL-encoded value:
	   *
	   * <pre>
	   * var list = ['John', 'Paul', 'George', 'Ringo'];
	   *
	   * $urlMatcherFactoryProvider.type('listItem', {
	   *   encode: function(item) {
	   *     // Represent the list item in the URL using its corresponding index
	   *     return list.indexOf(item);
	   *   },
	   *   decode: function(item) {
	   *     // Look up the list item by index
	   *     return list[parseInt(item, 10)];
	   *   },
	   *   is: function(item) {
	   *     // Ensure the item is valid by checking to see that it appears
	   *     // in the list
	   *     return list.indexOf(item) > -1;
	   *   }
	   * });
	   *
	   * $stateProvider.state('list', {
	   *   url: "/list/{item:listItem}",
	   *   controller: function($scope, $stateParams) {
	   *     console.log($stateParams.item);
	   *   }
	   * });
	   *
	   * // ...
	   *
	   * // Changes URL to '/list/3', logs "Ringo" to the console
	   * $state.go('list', { item: "Ringo" });
	   * </pre>
	   *
	   * This is a more complex example of a type that relies on dependency injection to
	   * interact with services, and uses the parameter name from the URL to infer how to
	   * handle encoding and decoding parameter values:
	   *
	   * <pre>
	   * // Defines a custom type that gets a value from a service,
	   * // where each service gets different types of values from
	   * // a backend API:
	   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
	   *
	   *   // Matches up services to URL parameter names
	   *   var services = {
	   *     user: Users,
	   *     post: Posts
	   *   };
	   *
	   *   return {
	   *     encode: function(object) {
	   *       // Represent the object in the URL using its unique ID
	   *       return object.id;
	   *     },
	   *     decode: function(value, key) {
	   *       // Look up the object by ID, using the parameter
	   *       // name (key) to call the correct service
	   *       return services[key].findById(value);
	   *     },
	   *     is: function(object, key) {
	   *       // Check that object is a valid dbObject
	   *       return angular.isObject(object) && object.id && services[key];
	   *     }
	   *     equals: function(a, b) {
	   *       // Check the equality of decoded objects by comparing
	   *       // their unique IDs
	   *       return a.id === b.id;
	   *     }
	   *   };
	   * });
	   *
	   * // In a config() block, you can then attach URLs with
	   * // type-annotated parameters:
	   * $stateProvider.state('users', {
	   *   url: "/users",
	   *   // ...
	   * }).state('users.item', {
	   *   url: "/{user:dbObject}",
	   *   controller: function($scope, $stateParams) {
	   *     // $stateParams.user will now be an object returned from
	   *     // the Users service
	   *   },
	   *   // ...
	   * });
	   * </pre>
	   */
	  this.type = function (name, definition, definitionFn) {
	    if (!isDefined(definition)) return $types[name];
	    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

	    $types[name] = new Type(extend({ name: name }, definition));
	    if (definitionFn) {
	      typeQueue.push({ name: name, def: definitionFn });
	      if (!enqueue) flushTypeQueue();
	    }
	    return this;
	  };

	  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
	  function flushTypeQueue() {
	    while(typeQueue.length) {
	      var type = typeQueue.shift();
	      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
	      angular.extend($types[type.name], injector.invoke(type.def));
	    }
	  }

	  // Register default types. Store them in the prototype of $types.
	  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
	  $types = inherit($types, {});

	  /* No need to document $get, since it returns this */
	  this.$get = ['$injector', function ($injector) {
	    injector = $injector;
	    enqueue = false;
	    flushTypeQueue();

	    forEach(defaultTypes, function(type, name) {
	      if (!$types[name]) $types[name] = new Type(type);
	    });
	    return this;
	  }];

	  this.Param = function Param(id, type, config, location) {
	    var self = this;
	    config = unwrapShorthand(config);
	    type = getType(config, type, location);
	    var arrayMode = getArrayMode();
	    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
	    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
	      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
	    var isOptional = config.value !== undefined;
	    var squash = getSquashPolicy(config, isOptional);
	    var replace = getReplace(config, arrayMode, isOptional, squash);

	    function unwrapShorthand(config) {
	      var keys = isObject(config) ? objectKeys(config) : [];
	      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
	                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
	      if (isShorthand) config = { value: config };
	      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
	      return config;
	    }

	    function getType(config, urlType, location) {
	      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
	      if (urlType) return urlType;
	      if (!config.type) return (location === "config" ? $types.any : $types.string);

	      if (angular.isString(config.type))
	        return $types[config.type];
	      if (config.type instanceof Type)
	        return config.type;
	      return new Type(config.type);
	    }

	    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
	    function getArrayMode() {
	      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
	      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
	      return extend(arrayDefaults, arrayParamNomenclature, config).array;
	    }

	    /**
	     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
	     */
	    function getSquashPolicy(config, isOptional) {
	      var squash = config.squash;
	      if (!isOptional || squash === false) return false;
	      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
	      if (squash === true || isString(squash)) return squash;
	      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
	    }

	    function getReplace(config, arrayMode, isOptional, squash) {
	      var replace, configuredKeys, defaultPolicy = [
	        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
	        { from: null, to: (isOptional || arrayMode ? undefined : "") }
	      ];
	      replace = isArray(config.replace) ? config.replace : [];
	      if (isString(squash))
	        replace.push({ from: squash, to: undefined });
	      configuredKeys = map(replace, function(item) { return item.from; } );
	      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
	    }

	    /**
	     * [Internal] Get the default value of a parameter, which may be an injectable function.
	     */
	    function $$getDefaultValue() {
	      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	      var defaultValue = injector.invoke(config.$$fn);
	      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
	        throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
	      return defaultValue;
	    }

	    /**
	     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
	     * default value, which may be the result of an injectable function.
	     */
	    function $value(value) {
	      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
	      function $replace(value) {
	        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
	        return replacement.length ? replacement[0] : value;
	      }
	      value = $replace(value);
	      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
	    }

	    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

	    extend(this, {
	      id: id,
	      type: type,
	      location: location,
	      array: arrayMode,
	      squash: squash,
	      replace: replace,
	      isOptional: isOptional,
	      value: $value,
	      dynamic: undefined,
	      config: config,
	      toString: toString
	    });
	  };

	  function ParamSet(params) {
	    extend(this, params || {});
	  }

	  ParamSet.prototype = {
	    $$new: function() {
	      return inherit(this, extend(new ParamSet(), { $$parent: this}));
	    },
	    $$keys: function () {
	      var keys = [], chain = [], parent = this,
	        ignore = objectKeys(ParamSet.prototype);
	      while (parent) { chain.push(parent); parent = parent.$$parent; }
	      chain.reverse();
	      forEach(chain, function(paramset) {
	        forEach(objectKeys(paramset), function(key) {
	            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
	        });
	      });
	      return keys;
	    },
	    $$values: function(paramValues) {
	      var values = {}, self = this;
	      forEach(self.$$keys(), function(key) {
	        values[key] = self[key].value(paramValues && paramValues[key]);
	      });
	      return values;
	    },
	    $$equals: function(paramValues1, paramValues2) {
	      var equal = true, self = this;
	      forEach(self.$$keys(), function(key) {
	        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
	        if (!self[key].type.equals(left, right)) equal = false;
	      });
	      return equal;
	    },
	    $$validates: function $$validate(paramValues) {
	      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
	      for (i = 0; i < keys.length; i++) {
	        param = this[keys[i]];
	        rawVal = paramValues[keys[i]];
	        if ((rawVal === undefined || rawVal === null) && param.isOptional)
	          break; // There was no parameter value, but the param is optional
	        normalized = param.type.$normalize(rawVal);
	        if (!param.type.is(normalized))
	          return false; // The value was not of the correct Type, and could not be decoded to the correct Type
	        encoded = param.type.encode(normalized);
	        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
	          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
	      }
	      return true;
	    },
	    $$parent: undefined
	  };

	  this.ParamSet = ParamSet;
	}

	// Register as a provider so it's available to other providers
	angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
	angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

	/**
	 * @ngdoc object
	 * @name ui.router.router.$urlRouterProvider
	 *
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 * @requires $locationProvider
	 *
	 * @description
	 * `$urlRouterProvider` has the responsibility of watching `$location`. 
	 * When `$location` changes it runs through a list of rules one by one until a 
	 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
	 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
	 *
	 * There are several methods on `$urlRouterProvider` that make it useful to use directly
	 * in your module config.
	 */
	$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
	function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
	  var rules = [], otherwise = null, interceptDeferred = false, listener;

	  // Returns a string that is a prefix of all strings matching the RegExp
	  function regExpPrefix(re) {
	    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
	    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
	  }

	  // Interpolates matched values into a String.replace()-style pattern
	  function interpolate(pattern, match) {
	    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
	      return match[what === '$' ? 0 : Number(what)];
	    });
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#rule
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Defines rules that are used by `$urlRouterProvider` to find matches for
	   * specific URLs.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   // Here's an example of how you might allow case insensitive urls
	   *   $urlRouterProvider.rule(function ($injector, $location) {
	   *     var path = $location.path(),
	   *         normalized = path.toLowerCase();
	   *
	   *     if (path !== normalized) {
	   *       return normalized;
	   *     }
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {function} rule Handler function that takes `$injector` and `$location`
	   * services as arguments. You can use them to return a valid path as a string.
	   *
	   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	   */
	  this.rule = function (rule) {
	    if (!isFunction(rule)) throw new Error("'rule' must be a function");
	    rules.push(rule);
	    return this;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouterProvider#otherwise
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Defines a path that is used when an invalid route is requested.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   // if the path doesn't match any of the urls you configured
	   *   // otherwise will take care of routing the user to the
	   *   // specified url
	   *   $urlRouterProvider.otherwise('/index');
	   *
	   *   // Example of using function rule as param
	   *   $urlRouterProvider.otherwise(function ($injector, $location) {
	   *     return '/a/valid/url';
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {string|function} rule The url path you want to redirect to or a function 
	   * rule that returns the url path. The function version is passed two params: 
	   * `$injector` and `$location` services, and must return a url string.
	   *
	   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	   */
	  this.otherwise = function (rule) {
	    if (isString(rule)) {
	      var redirect = rule;
	      rule = function () { return redirect; };
	    }
	    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
	    otherwise = rule;
	    return this;
	  };


	  function handleIfMatch($injector, handler, match) {
	    if (!match) return false;
	    var result = $injector.invoke(handler, handler, { $match: match });
	    return isDefined(result) ? result : true;
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#when
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Registers a handler for a given url matching. 
	   * 
	   * If the handler is a string, it is
	   * treated as a redirect, and is interpolated according to the syntax of match
	   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
	   *
	   * If the handler is a function, it is injectable. It gets invoked if `$location`
	   * matches. You have the option of inject the match object as `$match`.
	   *
	   * The handler can return
	   *
	   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
	   *   will continue trying to find another one that matches.
	   * - **string** which is treated as a redirect and passed to `$location.url()`
	   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
	   *     if ($state.$current.navigable !== state ||
	   *         !equalForKeys($match, $stateParams) {
	   *      $state.transitionTo(state, $match, false);
	   *     }
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {string|object} what The incoming path that you want to redirect.
	   * @param {string|function} handler The path you want to redirect your user to.
	   */
	  this.when = function (what, handler) {
	    var redirect, handlerIsString = isString(handler);
	    if (isString(what)) what = $urlMatcherFactory.compile(what);

	    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
	      throw new Error("invalid 'handler' in when()");

	    var strategies = {
	      matcher: function (what, handler) {
	        if (handlerIsString) {
	          redirect = $urlMatcherFactory.compile(handler);
	          handler = ['$match', function ($match) { return redirect.format($match); }];
	        }
	        return extend(function ($injector, $location) {
	          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
	        }, {
	          prefix: isString(what.prefix) ? what.prefix : ''
	        });
	      },
	      regex: function (what, handler) {
	        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

	        if (handlerIsString) {
	          redirect = handler;
	          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
	        }
	        return extend(function ($injector, $location) {
	          return handleIfMatch($injector, handler, what.exec($location.path()));
	        }, {
	          prefix: regExpPrefix(what)
	        });
	      }
	    };

	    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

	    for (var n in check) {
	      if (check[n]) return this.rule(strategies[n](what, handler));
	    }

	    throw new Error("invalid 'what' in when()");
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#deferIntercept
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Disables (or enables) deferring location change interception.
	   *
	   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
	   * defer a transition but maintain the current URL), call this method at configuration time.
	   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
	   * `$locationChangeSuccess` event handler.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *
	   *   // Prevent $urlRouter from automatically intercepting URL changes;
	   *   // this allows you to configure custom behavior in between
	   *   // location changes and route synchronization:
	   *   $urlRouterProvider.deferIntercept();
	   *
	   * }).run(function ($rootScope, $urlRouter, UserService) {
	   *
	   *   $rootScope.$on('$locationChangeSuccess', function(e) {
	   *     // UserService is an example service for managing user state
	   *     if (UserService.isLoggedIn()) return;
	   *
	   *     // Prevent $urlRouter's default handler from firing
	   *     e.preventDefault();
	   *
	   *     UserService.handleLogin().then(function() {
	   *       // Once the user has logged in, sync the current URL
	   *       // to the router:
	   *       $urlRouter.sync();
	   *     });
	   *   });
	   *
	   *   // Configures $urlRouter's listener *after* your custom listener
	   *   $urlRouter.listen();
	   * });
	   * </pre>
	   *
	   * @param {boolean} defer Indicates whether to defer location change interception. Passing
	            no parameter is equivalent to `true`.
	   */
	  this.deferIntercept = function (defer) {
	    if (defer === undefined) defer = true;
	    interceptDeferred = defer;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouter
	   *
	   * @requires $location
	   * @requires $rootScope
	   * @requires $injector
	   * @requires $browser
	   *
	   * @description
	   *
	   */
	  this.$get = $get;
	  $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];
	  function $get(   $location,   $rootScope,   $injector,   $browser,   $sniffer) {

	    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

	    function appendBasePath(url, isHtml5, absolute) {
	      if (baseHref === '/') return url;
	      if (isHtml5) return baseHref.slice(0, -1) + url;
	      if (absolute) return baseHref.slice(1) + url;
	      return url;
	    }

	    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
	    function update(evt) {
	      if (evt && evt.defaultPrevented) return;
	      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
	      lastPushedUrl = undefined;
	      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
	      //if (ignoreUpdate) return true;

	      function check(rule) {
	        var handled = rule($injector, $location);

	        if (!handled) return false;
	        if (isString(handled)) $location.replace().url(handled);
	        return true;
	      }
	      var n = rules.length, i;

	      for (i = 0; i < n; i++) {
	        if (check(rules[i])) return;
	      }
	      // always check otherwise last to allow dynamic updates to the set of rules
	      if (otherwise) check(otherwise);
	    }

	    function listen() {
	      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
	      return listener;
	    }

	    if (!interceptDeferred) listen();

	    return {
	      /**
	       * @ngdoc function
	       * @name ui.router.router.$urlRouter#sync
	       * @methodOf ui.router.router.$urlRouter
	       *
	       * @description
	       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
	       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
	       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
	       * with the transition by calling `$urlRouter.sync()`.
	       *
	       * @example
	       * <pre>
	       * angular.module('app', ['ui.router'])
	       *   .run(function($rootScope, $urlRouter) {
	       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
	       *       // Halt state change from even starting
	       *       evt.preventDefault();
	       *       // Perform custom logic
	       *       var meetsRequirement = ...
	       *       // Continue with the update and state transition if logic allows
	       *       if (meetsRequirement) $urlRouter.sync();
	       *     });
	       * });
	       * </pre>
	       */
	      sync: function() {
	        update();
	      },

	      listen: function() {
	        return listen();
	      },

	      update: function(read) {
	        if (read) {
	          location = $location.url();
	          return;
	        }
	        if ($location.url() === location) return;

	        $location.url(location);
	        $location.replace();
	      },

	      push: function(urlMatcher, params, options) {
	         var url = urlMatcher.format(params || {});

	        // Handle the special hash param, if needed
	        if (url !== null && params && params['#']) {
	            url += '#' + params['#'];
	        }

	        $location.url(url);
	        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
	        if (options && options.replace) $location.replace();
	      },

	      /**
	       * @ngdoc function
	       * @name ui.router.router.$urlRouter#href
	       * @methodOf ui.router.router.$urlRouter
	       *
	       * @description
	       * A URL generation method that returns the compiled URL for a given
	       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
	       *
	       * @example
	       * <pre>
	       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
	       *   person: "bob"
	       * });
	       * // $bob == "/about/bob";
	       * </pre>
	       *
	       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
	       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	       *
	       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
	       */
	      href: function(urlMatcher, params, options) {
	        if (!urlMatcher.validates(params)) return null;

	        var isHtml5 = $locationProvider.html5Mode();
	        if (angular.isObject(isHtml5)) {
	          isHtml5 = isHtml5.enabled;
	        }

	        isHtml5 = isHtml5 && $sniffer.history;
	        
	        var url = urlMatcher.format(params);
	        options = options || {};

	        if (!isHtml5 && url !== null) {
	          url = "#" + $locationProvider.hashPrefix() + url;
	        }

	        // Handle special hash param, if needed
	        if (url !== null && params && params['#']) {
	          url += '#' + params['#'];
	        }

	        url = appendBasePath(url, isHtml5, options.absolute);

	        if (!options.absolute || !url) {
	          return url;
	        }

	        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
	        port = (port === 80 || port === 443 ? '' : ':' + port);

	        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
	      }
	    };
	  }
	}

	angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$stateProvider
	 *
	 * @requires ui.router.router.$urlRouterProvider
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 *
	 * @description
	 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
	 * on state.
	 *
	 * A state corresponds to a "place" in the application in terms of the overall UI and
	 * navigation. A state describes (via the controller / template / view properties) what
	 * the UI looks like and does at that place.
	 *
	 * States often have things in common, and the primary way of factoring out these
	 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
	 * nested states.
	 *
	 * The `$stateProvider` provides interfaces to declare these states for your app.
	 */
	$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
	function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

	  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

	  // Builds state properties from definition passed to registerState()
	  var stateBuilder = {

	    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
	    // state.children = [];
	    // if (parent) parent.children.push(state);
	    parent: function(state) {
	      if (isDefined(state.parent) && state.parent) return findState(state.parent);
	      // regex matches any valid composite state name
	      // would match "contact.list" but not "contacts"
	      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
	      return compositeName ? findState(compositeName[1]) : root;
	    },

	    // inherit 'data' from parent and override by own values (if any)
	    data: function(state) {
	      if (state.parent && state.parent.data) {
	        state.data = state.self.data = inherit(state.parent.data, state.data);
	      }
	      return state.data;
	    },

	    // Build a URLMatcher if necessary, either via a relative or absolute URL
	    url: function(state) {
	      var url = state.url, config = { params: state.params || {} };

	      if (isString(url)) {
	        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
	        return (state.parent.navigable || root).url.concat(url, config);
	      }

	      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
	      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
	    },

	    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
	    navigable: function(state) {
	      return state.url ? state : (state.parent ? state.parent.navigable : null);
	    },

	    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
	    ownParams: function(state) {
	      var params = state.url && state.url.params || new $$UMFP.ParamSet();
	      forEach(state.params || {}, function(config, id) {
	        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
	      });
	      return params;
	    },

	    // Derive parameters for this state and ensure they're a super-set of parent's parameters
	    params: function(state) {
	      var ownParams = pick(state.ownParams, state.ownParams.$$keys());
	      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
	    },

	    // If there is no explicit multi-view configuration, make one up so we don't have
	    // to handle both cases in the view directive later. Note that having an explicit
	    // 'views' property will mean the default unnamed view properties are ignored. This
	    // is also a good time to resolve view names to absolute names, so everything is a
	    // straight lookup at link time.
	    views: function(state) {
	      var views = {};

	      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
	        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
	        views[name] = view;
	      });
	      return views;
	    },

	    // Keep a full path from the root down to this state as this is needed for state activation.
	    path: function(state) {
	      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
	    },

	    // Speed up $state.contains() as it's used a lot
	    includes: function(state) {
	      var includes = state.parent ? extend({}, state.parent.includes) : {};
	      includes[state.name] = true;
	      return includes;
	    },

	    $delegates: {}
	  };

	  function isRelative(stateName) {
	    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
	  }

	  function findState(stateOrName, base) {
	    if (!stateOrName) return undefined;

	    var isStr = isString(stateOrName),
	        name  = isStr ? stateOrName : stateOrName.name,
	        path  = isRelative(name);

	    if (path) {
	      if (!base) throw new Error("No reference point given for path '"  + name + "'");
	      base = findState(base);
	      
	      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

	      for (; i < pathLength; i++) {
	        if (rel[i] === "" && i === 0) {
	          current = base;
	          continue;
	        }
	        if (rel[i] === "^") {
	          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
	          current = current.parent;
	          continue;
	        }
	        break;
	      }
	      rel = rel.slice(i).join(".");
	      name = current.name + (current.name && rel ? "." : "") + rel;
	    }
	    var state = states[name];

	    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
	      return state;
	    }
	    return undefined;
	  }

	  function queueState(parentName, state) {
	    if (!queue[parentName]) {
	      queue[parentName] = [];
	    }
	    queue[parentName].push(state);
	  }

	  function flushQueuedChildren(parentName) {
	    var queued = queue[parentName] || [];
	    while(queued.length) {
	      registerState(queued.shift());
	    }
	  }

	  function registerState(state) {
	    // Wrap a new object around the state so we can store our private details easily.
	    state = inherit(state, {
	      self: state,
	      resolve: state.resolve || {},
	      toString: function() { return this.name; }
	    });

	    var name = state.name;
	    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
	    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");

	    // Get parent name
	    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
	        : (isString(state.parent)) ? state.parent
	        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
	        : '';

	    // If parent is not registered yet, add state to queue and register later
	    if (parentName && !states[parentName]) {
	      return queueState(parentName, state.self);
	    }

	    for (var key in stateBuilder) {
	      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
	    }
	    states[name] = state;

	    // Register the state in the global state list and with $urlRouter if necessary.
	    if (!state[abstractKey] && state.url) {
	      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
	        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
	          $state.transitionTo(state, $match, { inherit: true, location: false });
	        }
	      }]);
	    }

	    // Register any queued children
	    flushQueuedChildren(name);

	    return state;
	  }

	  // Checks text to see if it looks like a glob.
	  function isGlob (text) {
	    return text.indexOf('*') > -1;
	  }

	  // Returns true if glob matches current $state name.
	  function doesStateMatchGlob (glob) {
	    var globSegments = glob.split('.'),
	        segments = $state.$current.name.split('.');

	    //match single stars
	    for (var i = 0, l = globSegments.length; i < l; i++) {
	      if (globSegments[i] === '*') {
	        segments[i] = '*';
	      }
	    }

	    //match greedy starts
	    if (globSegments[0] === '**') {
	       segments = segments.slice(indexOf(segments, globSegments[1]));
	       segments.unshift('**');
	    }
	    //match greedy ends
	    if (globSegments[globSegments.length - 1] === '**') {
	       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
	       segments.push('**');
	    }

	    if (globSegments.length != segments.length) {
	      return false;
	    }

	    return segments.join('') === globSegments.join('');
	  }


	  // Implicit root state that is always active
	  root = registerState({
	    name: '',
	    url: '^',
	    views: null,
	    'abstract': true
	  });
	  root.navigable = null;


	  /**
	   * @ngdoc function
	   * @name ui.router.state.$stateProvider#decorator
	   * @methodOf ui.router.state.$stateProvider
	   *
	   * @description
	   * Allows you to extend (carefully) or override (at your own peril) the 
	   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
	   * to add custom functionality to ui-router, for example inferring templateUrl 
	   * based on the state name.
	   *
	   * When passing only a name, it returns the current (original or decorated) builder
	   * function that matches `name`.
	   *
	   * The builder functions that can be decorated are listed below. Though not all
	   * necessarily have a good use case for decoration, that is up to you to decide.
	   *
	   * In addition, users can attach custom decorators, which will generate new 
	   * properties within the state's internal definition. There is currently no clear 
	   * use-case for this beyond accessing internal states (i.e. $state.$current), 
	   * however, expect this to become increasingly relevant as we introduce additional 
	   * meta-programming features.
	   *
	   * **Warning**: Decorators should not be interdependent because the order of 
	   * execution of the builder functions in non-deterministic. Builder functions 
	   * should only be dependent on the state definition object and super function.
	   *
	   *
	   * Existing builder functions and current return values:
	   *
	   * - **parent** `{object}` - returns the parent state object.
	   * - **data** `{object}` - returns state data, including any inherited data that is not
	   *   overridden by own values (if any).
	   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
	   *   or `null`.
	   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
	   *   navigable).
	   * - **params** `{object}` - returns an array of state params that are ensured to 
	   *   be a super-set of parent's params.
	   * - **views** `{object}` - returns a views object where each key is an absolute view 
	   *   name (i.e. "viewName@stateName") and each value is the config object 
	   *   (template, controller) for the view. Even when you don't use the views object 
	   *   explicitly on a state config, one is still created for you internally.
	   *   So by decorating this builder function you have access to decorating template 
	   *   and controller properties.
	   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
	   *   not including any params defined by ancestor states.
	   * - **path** `{string}` - returns the full path from the root down to this state. 
	   *   Needed for state activation.
	   * - **includes** `{object}` - returns an object that includes every state that 
	   *   would pass a `$state.includes()` test.
	   *
	   * @example
	   * <pre>
	   * // Override the internal 'views' builder with a function that takes the state
	   * // definition, and a reference to the internal function being overridden:
	   * $stateProvider.decorator('views', function (state, parent) {
	   *   var result = {},
	   *       views = parent(state);
	   *
	   *   angular.forEach(views, function (config, name) {
	   *     var autoName = (state.name + '.' + name).replace('.', '/');
	   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
	   *     result[name] = config;
	   *   });
	   *   return result;
	   * });
	   *
	   * $stateProvider.state('home', {
	   *   views: {
	   *     'contact.list': { controller: 'ListController' },
	   *     'contact.item': { controller: 'ItemController' }
	   *   }
	   * });
	   *
	   * // ...
	   *
	   * $state.go('home');
	   * // Auto-populates list and item views with /partials/home/contact/list.html,
	   * // and /partials/home/contact/item.html, respectively.
	   * </pre>
	   *
	   * @param {string} name The name of the builder function to decorate. 
	   * @param {object} func A function that is responsible for decorating the original 
	   * builder function. The function receives two parameters:
	   *
	   *   - `{object}` - state - The state config object.
	   *   - `{object}` - super - The original builder function.
	   *
	   * @return {object} $stateProvider - $stateProvider instance
	   */
	  this.decorator = decorator;
	  function decorator(name, func) {
	    /*jshint validthis: true */
	    if (isString(name) && !isDefined(func)) {
	      return stateBuilder[name];
	    }
	    if (!isFunction(func) || !isString(name)) {
	      return this;
	    }
	    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
	      stateBuilder.$delegates[name] = stateBuilder[name];
	    }
	    stateBuilder[name] = func;
	    return this;
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.state.$stateProvider#state
	   * @methodOf ui.router.state.$stateProvider
	   *
	   * @description
	   * Registers a state configuration under a given state name. The stateConfig object
	   * has the following acceptable properties.
	   *
	   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
	   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
	   * @param {object} stateConfig State configuration object.
	   * @param {string|function=} stateConfig.template
	   * <a id='template'></a>
	   *   html template as a string or a function that returns
	   *   an html template as a string which should be used by the uiView directives. This property 
	   *   takes precedence over templateUrl.
	   *   
	   *   If `template` is a function, it will be called with the following parameters:
	   *
	   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
	   *     applying the current state
	   *
	   * <pre>template:
	   *   "<h1>inline template definition</h1>" +
	   *   "<div ui-view></div>"</pre>
	   * <pre>template: function(params) {
	   *       return "<h1>generated template</h1>"; }</pre>
	   * </div>
	   *
	   * @param {string|function=} stateConfig.templateUrl
	   * <a id='templateUrl'></a>
	   *
	   *   path or function that returns a path to an html
	   *   template that should be used by uiView.
	   *   
	   *   If `templateUrl` is a function, it will be called with the following parameters:
	   *
	   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
	   *     applying the current state
	   *
	   * <pre>templateUrl: "home.html"</pre>
	   * <pre>templateUrl: function(params) {
	   *     return myTemplates[params.pageId]; }</pre>
	   *
	   * @param {function=} stateConfig.templateProvider
	   * <a id='templateProvider'></a>
	   *    Provider function that returns HTML content string.
	   * <pre> templateProvider:
	   *       function(MyTemplateService, params) {
	   *         return MyTemplateService.getTemplate(params.pageId);
	   *       }</pre>
	   *
	   * @param {string|function=} stateConfig.controller
	   * <a id='controller'></a>
	   *
	   *  Controller fn that should be associated with newly
	   *   related scope or the name of a registered controller if passed as a string.
	   *   Optionally, the ControllerAs may be declared here.
	   * <pre>controller: "MyRegisteredController"</pre>
	   * <pre>controller:
	   *     "MyRegisteredController as fooCtrl"}</pre>
	   * <pre>controller: function($scope, MyService) {
	   *     $scope.data = MyService.getData(); }</pre>
	   *
	   * @param {function=} stateConfig.controllerProvider
	   * <a id='controllerProvider'></a>
	   *
	   * Injectable provider function that returns the actual controller or string.
	   * <pre>controllerProvider:
	   *   function(MyResolveData) {
	   *     if (MyResolveData.foo)
	   *       return "FooCtrl"
	   *     else if (MyResolveData.bar)
	   *       return "BarCtrl";
	   *     else return function($scope) {
	   *       $scope.baz = "Qux";
	   *     }
	   *   }</pre>
	   *
	   * @param {string=} stateConfig.controllerAs
	   * <a id='controllerAs'></a>
	   * 
	   * A controller alias name. If present the controller will be
	   *   published to scope under the controllerAs name.
	   * <pre>controllerAs: "myCtrl"</pre>
	   *
	   * @param {string|object=} stateConfig.parent
	   * <a id='parent'></a>
	   * Optionally specifies the parent state of this state.
	   *
	   * <pre>parent: 'parentState'</pre>
	   * <pre>parent: parentState // JS variable</pre>
	   *
	   * @param {object=} stateConfig.resolve
	   * <a id='resolve'></a>
	   *
	   * An optional map&lt;string, function&gt; of dependencies which
	   *   should be injected into the controller. If any of these dependencies are promises, 
	   *   the router will wait for them all to be resolved before the controller is instantiated.
	   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
	   *   and the values of the resolved promises are injected into any controllers that reference them.
	   *   If any  of the promises are rejected the $stateChangeError event is fired.
	   *
	   *   The map object is:
	   *   
	   *   - key - {string}: name of dependency to be injected into controller
	   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
	   *     it is injected and return value it treated as dependency. If result is a promise, it is 
	   *     resolved before its value is injected into controller.
	   *
	   * <pre>resolve: {
	   *     myResolve1:
	   *       function($http, $stateParams) {
	   *         return $http.get("/api/foos/"+stateParams.fooID);
	   *       }
	   *     }</pre>
	   *
	   * @param {string=} stateConfig.url
	   * <a id='url'></a>
	   *
	   *   A url fragment with optional parameters. When a state is navigated or
	   *   transitioned to, the `$stateParams` service will be populated with any 
	   *   parameters that were passed.
	   *
	   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
	   *   more details on acceptable patterns )
	   *
	   * examples:
	   * <pre>url: "/home"
	   * url: "/users/:userid"
	   * url: "/books/{bookid:[a-zA-Z_-]}"
	   * url: "/books/{categoryid:int}"
	   * url: "/books/{publishername:string}/{categoryid:int}"
	   * url: "/messages?before&after"
	   * url: "/messages?{before:date}&{after:date}"
	   * url: "/messages/:mailboxid?{before:date}&{after:date}"
	   * </pre>
	   *
	   * @param {object=} stateConfig.views
	   * <a id='views'></a>
	   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
	   * manually/explicitly.
	   *
	   * Examples:
	   *
	   * Targets three named `ui-view`s in the parent state's template
	   * <pre>views: {
	   *     header: {
	   *       controller: "headerCtrl",
	   *       templateUrl: "header.html"
	   *     }, body: {
	   *       controller: "bodyCtrl",
	   *       templateUrl: "body.html"
	   *     }, footer: {
	   *       controller: "footCtrl",
	   *       templateUrl: "footer.html"
	   *     }
	   *   }</pre>
	   *
	   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
	   * <pre>views: {
	   *     'header@top': {
	   *       controller: "msgHeaderCtrl",
	   *       templateUrl: "msgHeader.html"
	   *     }, 'body': {
	   *       controller: "messagesCtrl",
	   *       templateUrl: "messages.html"
	   *     }
	   *   }</pre>
	   *
	   * @param {boolean=} [stateConfig.abstract=false]
	   * <a id='abstract'></a>
	   * An abstract state will never be directly activated,
	   *   but can provide inherited properties to its common children states.
	   * <pre>abstract: true</pre>
	   *
	   * @param {function=} stateConfig.onEnter
	   * <a id='onEnter'></a>
	   *
	   * Callback function for when a state is entered. Good way
	   *   to trigger an action or dispatch an event, such as opening a dialog.
	   * If minifying your scripts, make sure to explicitly annotate this function,
	   * because it won't be automatically annotated by your build tools.
	   *
	   * <pre>onEnter: function(MyService, $stateParams) {
	   *     MyService.foo($stateParams.myParam);
	   * }</pre>
	   *
	   * @param {function=} stateConfig.onExit
	   * <a id='onExit'></a>
	   *
	   * Callback function for when a state is exited. Good way to
	   *   trigger an action or dispatch an event, such as opening a dialog.
	   * If minifying your scripts, make sure to explicitly annotate this function,
	   * because it won't be automatically annotated by your build tools.
	   *
	   * <pre>onExit: function(MyService, $stateParams) {
	   *     MyService.cleanup($stateParams.myParam);
	   * }</pre>
	   *
	   * @param {boolean=} [stateConfig.reloadOnSearch=true]
	   * <a id='reloadOnSearch'></a>
	   *
	   * If `false`, will not retrigger the same state
	   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
	   *   Useful for when you'd like to modify $location.search() without triggering a reload.
	   * <pre>reloadOnSearch: false</pre>
	   *
	   * @param {object=} stateConfig.data
	   * <a id='data'></a>
	   *
	   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
	   *   prototypally inherited.  In other words, adding a data property to a state adds it to
	   *   the entire subtree via prototypal inheritance.
	   *
	   * <pre>data: {
	   *     requiredRole: 'foo'
	   * } </pre>
	   *
	   * @param {object=} stateConfig.params
	   * <a id='params'></a>
	   *
	   * A map which optionally configures parameters declared in the `url`, or
	   *   defines additional non-url parameters.  For each parameter being
	   *   configured, add a configuration object keyed to the name of the parameter.
	   *
	   *   Each parameter configuration object may contain the following properties:
	   *
	   *   - ** value ** - {object|function=}: specifies the default value for this
	   *     parameter.  This implicitly sets this parameter as optional.
	   *
	   *     When UI-Router routes to a state and no value is
	   *     specified for this parameter in the URL or transition, the
	   *     default value will be used instead.  If `value` is a function,
	   *     it will be injected and invoked, and the return value used.
	   *
	   *     *Note*: `undefined` is treated as "no default value" while `null`
	   *     is treated as "the default value is `null`".
	   *
	   *     *Shorthand*: If you only need to configure the default value of the
	   *     parameter, you may use a shorthand syntax.   In the **`params`**
	   *     map, instead mapping the param name to a full parameter configuration
	   *     object, simply set map it to the default parameter value, e.g.:
	   *
	   * <pre>// define a parameter's default value
	   * params: {
	   *     param1: { value: "defaultValue" }
	   * }
	   * // shorthand default values
	   * params: {
	   *     param1: "defaultValue",
	   *     param2: "param2Default"
	   * }</pre>
	   *
	   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
	   *     treated as an array of values.  If you specified a Type, the value will be
	   *     treated as an array of the specified Type.  Note: query parameter values
	   *     default to a special `"auto"` mode.
	   *
	   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
	   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
	   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
	   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
	   *     value (e.g.: `{ foo: '1' }`).
	   *
	   * <pre>params: {
	   *     param1: { array: true }
	   * }</pre>
	   *
	   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
	   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
	   *     configured default squash policy.
	   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
	   *
	   *   There are three squash settings:
	   *
	   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
	   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
	   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
	   *       This can allow for cleaner looking URLs.
	   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
	   *
	   * <pre>params: {
	   *     param1: {
	   *       value: "defaultId",
	   *       squash: true
	   * } }
	   * // squash "defaultValue" to "~"
	   * params: {
	   *     param1: {
	   *       value: "defaultValue",
	   *       squash: "~"
	   * } }
	   * </pre>
	   *
	   *
	   * @example
	   * <pre>
	   * // Some state name examples
	   *
	   * // stateName can be a single top-level name (must be unique).
	   * $stateProvider.state("home", {});
	   *
	   * // Or it can be a nested state name. This state is a child of the
	   * // above "home" state.
	   * $stateProvider.state("home.newest", {});
	   *
	   * // Nest states as deeply as needed.
	   * $stateProvider.state("home.newest.abc.xyz.inception", {});
	   *
	   * // state() returns $stateProvider, so you can chain state declarations.
	   * $stateProvider
	   *   .state("home", {})
	   *   .state("about", {})
	   *   .state("contacts", {});
	   * </pre>
	   *
	   */
	  this.state = state;
	  function state(name, definition) {
	    /*jshint validthis: true */
	    if (isObject(name)) definition = name;
	    else definition.name = name;
	    registerState(definition);
	    return this;
	  }

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$state
	   *
	   * @requires $rootScope
	   * @requires $q
	   * @requires ui.router.state.$view
	   * @requires $injector
	   * @requires ui.router.util.$resolve
	   * @requires ui.router.state.$stateParams
	   * @requires ui.router.router.$urlRouter
	   *
	   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
	   * you'd like to test against the current active state.
	   * @property {object} current A reference to the state's config object. However 
	   * you passed it in. Useful for accessing custom data.
	   * @property {object} transition Currently pending transition. A promise that'll 
	   * resolve or reject.
	   *
	   * @description
	   * `$state` service is responsible for representing states as well as transitioning
	   * between them. It also provides interfaces to ask for current state or even states
	   * you're coming from.
	   */
	  this.$get = $get;
	  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
	  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

	    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
	    var TransitionPrevented = $q.reject(new Error('transition prevented'));
	    var TransitionAborted = $q.reject(new Error('transition aborted'));
	    var TransitionFailed = $q.reject(new Error('transition failed'));

	    // Handles the case where a state which is the target of a transition is not found, and the user
	    // can optionally retry or defer the transition
	    function handleRedirect(redirect, state, params, options) {
	      /**
	       * @ngdoc event
	       * @name ui.router.state.$state#$stateNotFound
	       * @eventOf ui.router.state.$state
	       * @eventType broadcast on root scope
	       * @description
	       * Fired when a requested state **cannot be found** using the provided state name during transition.
	       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
	       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
	       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
	       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
	       *
	       * @param {Object} event Event object.
	       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
	       * @param {State} fromState Current state object.
	       * @param {Object} fromParams Current state params.
	       *
	       * @example
	       *
	       * <pre>
	       * // somewhere, assume lazy.state has not been defined
	       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
	       *
	       * // somewhere else
	       * $scope.$on('$stateNotFound',
	       * function(event, unfoundState, fromState, fromParams){
	       *     console.log(unfoundState.to); // "lazy.state"
	       *     console.log(unfoundState.toParams); // {a:1, b:2}
	       *     console.log(unfoundState.options); // {inherit:false} + default options
	       * })
	       * </pre>
	       */
	      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

	      if (evt.defaultPrevented) {
	        $urlRouter.update();
	        return TransitionAborted;
	      }

	      if (!evt.retry) {
	        return null;
	      }

	      // Allow the handler to return a promise to defer state lookup retry
	      if (options.$retry) {
	        $urlRouter.update();
	        return TransitionFailed;
	      }
	      var retryTransition = $state.transition = $q.when(evt.retry);

	      retryTransition.then(function() {
	        if (retryTransition !== $state.transition) return TransitionSuperseded;
	        redirect.options.$retry = true;
	        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
	      }, function() {
	        return TransitionAborted;
	      });
	      $urlRouter.update();

	      return retryTransition;
	    }

	    root.locals = { resolve: null, globals: { $stateParams: {} } };

	    $state = {
	      params: {},
	      current: root.self,
	      $current: root,
	      transition: null
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#reload
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A method that force reloads the current state. All resolves are re-resolved,
	     * controllers reinstantiated, and events re-fired.
	     *
	     * @example
	     * <pre>
	     * var app angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.reload = function(){
	     *     $state.reload();
	     *   }
	     * });
	     * </pre>
	     *
	     * `reload()` is just an alias for:
	     * <pre>
	     * $state.transitionTo($state.current, $stateParams, { 
	     *   reload: true, inherit: false, notify: true
	     * });
	     * </pre>
	     *
	     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
	     * @example
	     * <pre>
	     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
	     * //and current state is 'contacts.detail.item'
	     * var app angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.reload = function(){
	     *     //will reload 'contact.detail' and 'contact.detail.item' states
	     *     $state.reload('contact.detail');
	     *   }
	     * });
	     * </pre>
	     *
	     * `reload()` is just an alias for:
	     * <pre>
	     * $state.transitionTo($state.current, $stateParams, { 
	     *   reload: true, inherit: false, notify: true
	     * });
	     * </pre>

	     * @returns {promise} A promise representing the state of the new transition. See
	     * {@link ui.router.state.$state#methods_go $state.go}.
	     */
	    $state.reload = function reload(state) {
	      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#go
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Convenience method for transitioning to a new state. `$state.go` calls 
	     * `$state.transitionTo` internally but automatically sets options to 
	     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
	     * This allows you to easily use an absolute or relative to path and specify 
	     * only the parameters you'd like to update (while letting unspecified parameters 
	     * inherit from the currently active ancestor states).
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.go('contact.detail');
	     *   };
	     * });
	     * </pre>
	     * <img src='../ngdoc_assets/StateGoExamples.png'/>
	     *
	     * @param {string} to Absolute state name or relative state path. Some examples:
	     *
	     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
	     * - `$state.go('^')` - will go to a parent state
	     * - `$state.go('^.sibling')` - will go to a sibling state
	     * - `$state.go('.child.grandchild')` - will go to grandchild state
	     *
	     * @param {object=} params A map of the parameters that will be sent to the state, 
	     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
	     * defined parameters. Only parameters specified in the state definition can be overridden, new 
	     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
	     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
	     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
	     * will get you all current parameters, etc.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
	     *    have changed.  It will reload the resolves and views of the current state and parent states.
	     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
	     *    the transition reloads the resolves and views for that matched state, and all its children states.
	     *
	     * @returns {promise} A promise representing the state of the new transition.
	     *
	     * Possible success values:
	     *
	     * - $state.current
	     *
	     * <br/>Possible rejection values:
	     *
	     * - 'transition superseded' - when a newer transition has been started after this one
	     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
	     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
	     *   when a `$stateNotFound` `event.retry` promise errors.
	     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
	     * - *resolve error* - when an error has occurred with a `resolve`
	     *
	     */
	    $state.go = function go(to, params, options) {
	      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#transitionTo
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
	     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.transitionTo('contact.detail');
	     *   };
	     * });
	     * </pre>
	     *
	     * @param {string} to State name.
	     * @param {object=} toParams A map of the parameters that will be sent to the state,
	     * will populate $stateParams.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
	     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
	     *    use this when you want to force a reload when *everything* is the same, including search params.
	     *    if String, then will reload the state with the name given in reload, and any children.
	     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
	     *
	     * @returns {promise} A promise representing the state of the new transition. See
	     * {@link ui.router.state.$state#methods_go $state.go}.
	     */
	    $state.transitionTo = function transitionTo(to, toParams, options) {
	      toParams = toParams || {};
	      options = extend({
	        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
	      }, options || {});

	      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
	      var evt, toState = findState(to, options.relative);

	      // Store the hash param for later (since it will be stripped out by various methods)
	      var hash = toParams['#'];

	      if (!isDefined(toState)) {
	        var redirect = { to: to, toParams: toParams, options: options };
	        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

	        if (redirectResult) {
	          return redirectResult;
	        }

	        // Always retry once if the $stateNotFound was not prevented
	        // (handles either redirect changed or state lazy-definition)
	        to = redirect.to;
	        toParams = redirect.toParams;
	        options = redirect.options;
	        toState = findState(to, options.relative);

	        if (!isDefined(toState)) {
	          if (!options.relative) throw new Error("No such state '" + to + "'");
	          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
	        }
	      }
	      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
	      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
	      if (!toState.params.$$validates(toParams)) return TransitionFailed;

	      toParams = toState.params.$$values(toParams);
	      to = toState;

	      var toPath = to.path;

	      // Starting from the root of the path, keep all levels that haven't changed
	      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

	      if (!options.reload) {
	        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
	          locals = toLocals[keep] = state.locals;
	          keep++;
	          state = toPath[keep];
	        }
	      } else if (isString(options.reload) || isObject(options.reload)) {
	        if (isObject(options.reload) && !options.reload.name) {
	          throw new Error('Invalid reload state object');
	        }
	        
	        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
	        if (options.reload && !reloadState) {
	          throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
	        }

	        while (state && state === fromPath[keep] && state !== reloadState) {
	          locals = toLocals[keep] = state.locals;
	          keep++;
	          state = toPath[keep];
	        }
	      }

	      // If we're going to the same state and all locals are kept, we've got nothing to do.
	      // But clear 'transition', as we still want to cancel any other pending transitions.
	      // TODO: We may not want to bump 'transition' if we're called from a location change
	      // that we've initiated ourselves, because we might accidentally abort a legitimate
	      // transition initiated from code?
	      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
	        if (hash) toParams['#'] = hash;
	        $state.params = toParams;
	        copy($state.params, $stateParams);
	        copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
	        if (options.location && to.navigable && to.navigable.url) {
	          $urlRouter.push(to.navigable.url, toParams, {
	            $$avoidResync: true, replace: options.location === 'replace'
	          });
	          $urlRouter.update(true);
	        }
	        $state.transition = null;
	        return $q.when($state.current);
	      }

	      // Filter parameters before we pass them to event handlers etc.
	      toParams = filterByKeys(to.params.$$keys(), toParams || {});
	      
	      // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
	      if (hash) toParams['#'] = hash;
	      
	      // Broadcast start event and cancel the transition if requested
	      if (options.notify) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeStart
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when the state transition **begins**. You can use `event.preventDefault()`
	         * to prevent the transition from happening and then the transition promise will be
	         * rejected with a `'transition prevented'` value.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         *
	         * @example
	         *
	         * <pre>
	         * $rootScope.$on('$stateChangeStart',
	         * function(event, toState, toParams, fromState, fromParams){
	         *     event.preventDefault();
	         *     // transitionTo() promise will be rejected with
	         *     // a 'transition prevented' error
	         * })
	         * </pre>
	         */
	        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
	          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	          //Don't update and resync url if there's been a new transition started. see issue #2238, #600
	          if ($state.transition == null) $urlRouter.update();
	          return TransitionPrevented;
	        }
	      }

	      // Resolve locals for the remaining states, but don't update any global state just
	      // yet -- if anything fails to resolve the current state needs to remain untouched.
	      // We also set up an inheritance chain for the locals here. This allows the view directive
	      // to quickly look up the correct definition for each view in the current state. Even
	      // though we create the locals object itself outside resolveState(), it is initially
	      // empty and gets filled asynchronously. We need to keep track of the promise for the
	      // (fully resolved) current locals, and pass this down the chain.
	      var resolved = $q.when(locals);

	      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
	        locals = toLocals[l] = inherit(locals);
	        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
	      }

	      // Once everything is resolved, we are ready to perform the actual transition
	      // and return a promise for the new state. We also keep track of what the
	      // current promise is, so that we can detect overlapping transitions and
	      // keep only the outcome of the last transition.
	      var transition = $state.transition = resolved.then(function () {
	        var l, entering, exiting;

	        if ($state.transition !== transition) return TransitionSuperseded;

	        // Exit 'from' states not kept
	        for (l = fromPath.length - 1; l >= keep; l--) {
	          exiting = fromPath[l];
	          if (exiting.self.onExit) {
	            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
	          }
	          exiting.locals = null;
	        }

	        // Enter 'to' states not kept
	        for (l = keep; l < toPath.length; l++) {
	          entering = toPath[l];
	          entering.locals = toLocals[l];
	          if (entering.self.onEnter) {
	            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
	          }
	        }

	        // Run it again, to catch any transitions in callbacks
	        if ($state.transition !== transition) return TransitionSuperseded;

	        // Update globals in $state
	        $state.$current = to;
	        $state.current = to.self;
	        $state.params = toParams;
	        copy($state.params, $stateParams);
	        $state.transition = null;

	        if (options.location && to.navigable) {
	          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
	            $$avoidResync: true, replace: options.location === 'replace'
	          });
	        }

	        if (options.notify) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeSuccess
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired once the state transition is **complete**.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         */
	          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
	        }
	        $urlRouter.update(true);

	        return $state.current;
	      }, function (error) {
	        if ($state.transition !== transition) return TransitionSuperseded;

	        $state.transition = null;
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeError
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when an **error occurs** during transition. It's important to note that if you
	         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
	         * they will not throw traditionally. You must listen for this $stateChangeError event to
	         * catch **ALL** errors.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         * @param {Error} error The resolve error object.
	         */
	        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

	        if (!evt.defaultPrevented) {
	            $urlRouter.update();
	        }

	        return $q.reject(error);
	      });

	      return transition;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#is
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
	     * but only checks for the full state name. If params is supplied then it will be
	     * tested for strict equality against the current active params object, so all params
	     * must match with none missing and no extras.
	     *
	     * @example
	     * <pre>
	     * $state.$current.name = 'contacts.details.item';
	     *
	     * // absolute name
	     * $state.is('contact.details.item'); // returns true
	     * $state.is(contactDetailItemStateObject); // returns true
	     *
	     * // relative name (. and ^), typically from a template
	     * // E.g. from the 'contacts.details' template
	     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
	     * </pre>
	     *
	     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
	     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
	     * to test against the current active state.
	     * @param {object=} options An options object.  The options are:
	     *
	     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
	     * test relative to `options.relative` state (or name).
	     *
	     * @returns {boolean} Returns true if it is the state.
	     */
	    $state.is = function is(stateOrName, params, options) {
	      options = extend({ relative: $state.$current }, options || {});
	      var state = findState(stateOrName, options.relative);

	      if (!isDefined(state)) { return undefined; }
	      if ($state.$current !== state) { return false; }
	      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#includes
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A method to determine if the current active state is equal to or is the child of the
	     * state stateName. If any params are passed then they will be tested for a match as well.
	     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
	     *
	     * @example
	     * Partial and relative names
	     * <pre>
	     * $state.$current.name = 'contacts.details.item';
	     *
	     * // Using partial names
	     * $state.includes("contacts"); // returns true
	     * $state.includes("contacts.details"); // returns true
	     * $state.includes("contacts.details.item"); // returns true
	     * $state.includes("contacts.list"); // returns false
	     * $state.includes("about"); // returns false
	     *
	     * // Using relative names (. and ^), typically from a template
	     * // E.g. from the 'contacts.details' template
	     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
	     * </pre>
	     *
	     * Basic globbing patterns
	     * <pre>
	     * $state.$current.name = 'contacts.details.item.url';
	     *
	     * $state.includes("*.details.*.*"); // returns true
	     * $state.includes("*.details.**"); // returns true
	     * $state.includes("**.item.**"); // returns true
	     * $state.includes("*.details.item.url"); // returns true
	     * $state.includes("*.details.*.url"); // returns true
	     * $state.includes("*.details.*"); // returns false
	     * $state.includes("item.**"); // returns false
	     * </pre>
	     *
	     * @param {string} stateOrName A partial name, relative name, or glob pattern
	     * to be searched for within the current state name.
	     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
	     * that you'd like to test against the current active state.
	     * @param {object=} options An options object.  The options are:
	     *
	     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
	     * .includes will test relative to `options.relative` state (or name).
	     *
	     * @returns {boolean} Returns true if it does include the state
	     */
	    $state.includes = function includes(stateOrName, params, options) {
	      options = extend({ relative: $state.$current }, options || {});
	      if (isString(stateOrName) && isGlob(stateOrName)) {
	        if (!doesStateMatchGlob(stateOrName)) {
	          return false;
	        }
	        stateOrName = $state.$current.name;
	      }

	      var state = findState(stateOrName, options.relative);
	      if (!isDefined(state)) { return undefined; }
	      if (!isDefined($state.$current.includes[state.name])) { return false; }
	      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
	    };


	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#href
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A url generation method that returns the compiled url for the given state populated with the given params.
	     *
	     * @example
	     * <pre>
	     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
	     * </pre>
	     *
	     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
	     * @param {object=} params An object of parameter values to fill the state's required parameters.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
	     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
	     *    ancestor with a valid url).
	     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	     * 
	     * @returns {string} compiled state url
	     */
	    $state.href = function href(stateOrName, params, options) {
	      options = extend({
	        lossy:    true,
	        inherit:  true,
	        absolute: false,
	        relative: $state.$current
	      }, options || {});

	      var state = findState(stateOrName, options.relative);

	      if (!isDefined(state)) return null;
	      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
	      
	      var nav = (state && options.lossy) ? state.navigable : state;

	      if (!nav || nav.url === undefined || nav.url === null) {
	        return null;
	      }
	      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
	        absolute: options.absolute
	      });
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#get
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Returns the state configuration object for any specific state or all states.
	     *
	     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
	     * the requested state. If not provided, returns an array of ALL state configs.
	     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
	     * @returns {Object|Array} State configuration object or array of all objects.
	     */
	    $state.get = function (stateOrName, context) {
	      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
	      var state = findState(stateOrName, context || $state.$current);
	      return (state && state.self) ? state.self : null;
	    };

	    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
	      // Make a restricted $stateParams with only the parameters that apply to this state if
	      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
	      // we also need $stateParams to be available for any $injector calls we make during the
	      // dependency resolution process.
	      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
	      var locals = { $stateParams: $stateParams };

	      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
	      // We're also including $stateParams in this; that way the parameters are restricted
	      // to the set that should be visible to the state, and are independent of when we update
	      // the global $state and $stateParams values.
	      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
	      var promises = [dst.resolve.then(function (globals) {
	        dst.globals = globals;
	      })];
	      if (inherited) promises.push(inherited);

	      function resolveViews() {
	        var viewsPromises = [];

	        // Resolve template and dependencies for all views.
	        forEach(state.views, function (view, name) {
	          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
	          injectables.$template = [ function () {
	            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
	          }];

	          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
	            // References to the controller (only instantiated at link time)
	            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
	              var injectLocals = angular.extend({}, injectables, dst.globals);
	              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
	            } else {
	              result.$$controller = view.controller;
	            }
	            // Provide access to the state itself for internal use
	            result.$$state = state;
	            result.$$controllerAs = view.controllerAs;
	            dst[name] = result;
	          }));
	        });

	        return $q.all(viewsPromises).then(function(){
	          return dst.globals;
	        });
	      }

	      // Wait for all the promises and then return the activation object
	      return $q.all(promises).then(resolveViews).then(function (values) {
	        return dst;
	      });
	    }

	    return $state;
	  }

	  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
	    // Return true if there are no differences in non-search (path/object) params, false if there are differences
	    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
	      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
	      function notSearchParam(key) {
	        return fromAndToState.params[key].location != "search";
	      }
	      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
	      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
	      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
	      return nonQueryParamSet.$$equals(fromParams, toParams);
	    }

	    // If reload was not explicitly requested
	    // and we're transitioning to the same state we're already in
	    // and    the locals didn't change
	    //     or they changed in a way that doesn't merit reloading
	    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
	    // Then return true.
	    if (!options.reload && to === from &&
	      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
	      return true;
	    }
	  }
	}

	angular.module('ui.router.state')
	  .factory('$stateParams', function () { return {}; })
	  .provider('$state', $StateProvider);


	$ViewProvider.$inject = [];
	function $ViewProvider() {

	  this.$get = $get;
	  /**
	   * @ngdoc object
	   * @name ui.router.state.$view
	   *
	   * @requires ui.router.util.$templateFactory
	   * @requires $rootScope
	   *
	   * @description
	   *
	   */
	  $get.$inject = ['$rootScope', '$templateFactory'];
	  function $get(   $rootScope,   $templateFactory) {
	    return {
	      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$view#load
	       * @methodOf ui.router.state.$view
	       *
	       * @description
	       *
	       * @param {string} name name
	       * @param {object} options option object.
	       */
	      load: function load(name, options) {
	        var result, defaults = {
	          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
	        };
	        options = extend(defaults, options);

	        if (options.view) {
	          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
	        }
	        return result;
	      }
	    };
	  }
	}

	angular.module('ui.router.state').provider('$view', $ViewProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$uiViewScrollProvider
	 *
	 * @description
	 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
	 */
	function $ViewScrollProvider() {

	  var useAnchorScroll = false;

	  /**
	   * @ngdoc function
	   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
	   * @methodOf ui.router.state.$uiViewScrollProvider
	   *
	   * @description
	   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
	   * scrolling based on the url anchor.
	   */
	  this.useAnchorScroll = function () {
	    useAnchorScroll = true;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$uiViewScroll
	   *
	   * @requires $anchorScroll
	   * @requires $timeout
	   *
	   * @description
	   * When called with a jqLite element, it scrolls the element into view (after a
	   * `$timeout` so the DOM has time to refresh).
	   *
	   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
	   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
	   */
	  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
	    if (useAnchorScroll) {
	      return $anchorScroll;
	    }

	    return function ($element) {
	      return $timeout(function () {
	        $element[0].scrollIntoView();
	      }, 0, false);
	    };
	  }];
	}

	angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

	var ngMajorVer = angular.version.major;
	var ngMinorVer = angular.version.minor;
	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-view
	 *
	 * @requires ui.router.state.$state
	 * @requires $compile
	 * @requires $controller
	 * @requires $injector
	 * @requires ui.router.state.$uiViewScroll
	 * @requires $document
	 *
	 * @restrict ECA
	 *
	 * @description
	 * The ui-view directive tells $state where to place your templates.
	 *
	 * @param {string=} name A view name. The name should be unique amongst the other views in the
	 * same state. You can have views of the same name that live in different states.
	 *
	 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
	 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
	 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
	 * scroll ui-view elements into view when they are populated during a state activation.
	 *
	 * @param {string=} noanimation If truthy, the non-animated renderer will be selected (no animations
	 * will be applied to the ui-view)
	 *
	 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
	 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
	 *
	 * @param {string=} onload Expression to evaluate whenever the view updates.
	 * 
	 * @example
	 * A view can be unnamed or named. 
	 * <pre>
	 * <!-- Unnamed -->
	 * <div ui-view></div> 
	 * 
	 * <!-- Named -->
	 * <div ui-view="viewName"></div>
	 * </pre>
	 *
	 * You can only have one unnamed view within any template (or root html). If you are only using a 
	 * single view and it is unnamed then you can populate it like so:
	 * <pre>
	 * <div ui-view></div> 
	 * $stateProvider.state("home", {
	 *   template: "<h1>HELLO!</h1>"
	 * })
	 * </pre>
	 * 
	 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
	 * config property, by name, in this case an empty name:
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 * 
	 * But typically you'll only use the views property if you name your view or have more than one view 
	 * in the same template. There's not really a compelling reason to name a view if its the only one, 
	 * but you could if you wanted, like so:
	 * <pre>
	 * <div ui-view="main"></div>
	 * </pre> 
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "main": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 * 
	 * Really though, you'll use views to set up multiple views:
	 * <pre>
	 * <div ui-view></div>
	 * <div ui-view="chart"></div> 
	 * <div ui-view="data"></div> 
	 * </pre>
	 * 
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     },
	 *     "chart": {
	 *       template: "<chart_thing/>"
	 *     },
	 *     "data": {
	 *       template: "<data_thing/>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * Examples for `autoscroll`:
	 *
	 * <pre>
	 * <!-- If autoscroll present with no expression,
	 *      then scroll ui-view into view -->
	 * <ui-view autoscroll/>
	 *
	 * <!-- If autoscroll present with valid expression,
	 *      then scroll ui-view into view if expression evaluates to true -->
	 * <ui-view autoscroll='true'/>
	 * <ui-view autoscroll='false'/>
	 * <ui-view autoscroll='scopeVariable'/>
	 * </pre>
	 */
	$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
	function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {

	  function getService() {
	    return ($injector.has) ? function(service) {
	      return $injector.has(service) ? $injector.get(service) : null;
	    } : function(service) {
	      try {
	        return $injector.get(service);
	      } catch (e) {
	        return null;
	      }
	    };
	  }

	  var service = getService(),
	      $animator = service('$animator'),
	      $animate = service('$animate');

	  // Returns a set of DOM manipulation functions based on which Angular version
	  // it should use
	  function getRenderer(attrs, scope) {
	    var statics = {
	      enter: function (element, target, cb) { target.after(element); cb(); },
	      leave: function (element, cb) { element.remove(); cb(); }
	    };

	    if (!!attrs.noanimation) return statics;

	    function animEnabled(element) {
	      if (ngMajorVer === 1 && ngMinorVer >= 4) return !!$animate.enabled(element);
	      if (ngMajorVer === 1 && ngMinorVer >= 2) return !!$animate.enabled();
	      return (!!$animator);
	    }

	    // ng 1.2+
	    if ($animate) {
	      return {
	        enter: function(element, target, cb) {
	          if (!animEnabled(element)) {
	            statics.enter(element, target, cb);
	          } else if (angular.version.minor > 2) {
	            $animate.enter(element, null, target).then(cb);
	          } else {
	            $animate.enter(element, null, target, cb);
	          }
	        },
	        leave: function(element, cb) {
	          if (!animEnabled(element)) {
	            statics.leave(element, cb);
	          } else if (angular.version.minor > 2) {
	            $animate.leave(element).then(cb);
	          } else {
	            $animate.leave(element, cb);
	          }
	        }
	      };
	    }

	    // ng 1.1.5
	    if ($animator) {
	      var animate = $animator && $animator(scope, attrs);

	      return {
	        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
	        leave: function(element, cb) { animate.leave(element); cb(); }
	      };
	    }

	    return statics;
	  }

	  var directive = {
	    restrict: 'ECA',
	    terminal: true,
	    priority: 400,
	    transclude: 'element',
	    compile: function (tElement, tAttrs, $transclude) {
	      return function (scope, $element, attrs) {
	        var previousEl, currentEl, currentScope, latestLocals,
	            onloadExp     = attrs.onload || '',
	            autoScrollExp = attrs.autoscroll,
	            renderer      = getRenderer(attrs, scope);

	        scope.$on('$stateChangeSuccess', function() {
	          updateView(false);
	        });

	        updateView(true);

	        function cleanupLastView() {
	          var _previousEl = previousEl;
	          var _currentScope = currentScope;

	          if (_currentScope) {
	            _currentScope._willBeDestroyed = true;
	          }

	          function cleanOld() {
	            if (_previousEl) {
	              _previousEl.remove();
	            }

	            if (_currentScope) {
	              _currentScope.$destroy();
	            }
	          }

	          if (currentEl) {
	            renderer.leave(currentEl, function() {
	              cleanOld();
	              previousEl = null;
	            });

	            previousEl = currentEl;
	          } else {
	            cleanOld();
	            previousEl = null;
	          }

	          currentEl = null;
	          currentScope = null;
	        }

	        function updateView(firstTime) {
	          var newScope,
	              name            = getUiViewName(scope, attrs, $element, $interpolate),
	              previousLocals  = name && $state.$current && $state.$current.locals[name];

	          if (!firstTime && previousLocals === latestLocals || scope._willBeDestroyed) return; // nothing to do
	          newScope = scope.$new();
	          latestLocals = $state.$current.locals[name];

	          /**
	           * @ngdoc event
	           * @name ui.router.state.directive:ui-view#$viewContentLoading
	           * @eventOf ui.router.state.directive:ui-view
	           * @eventType emits on ui-view directive scope
	           * @description
	           *
	           * Fired once the view **begins loading**, *before* the DOM is rendered.
	           *
	           * @param {Object} event Event object.
	           * @param {string} viewName Name of the view.
	           */
	          newScope.$emit('$viewContentLoading', name);

	          var clone = $transclude(newScope, function(clone) {
	            renderer.enter(clone, $element, function onUiViewEnter() {
	              if(currentScope) {
	                currentScope.$emit('$viewContentAnimationEnded');
	              }

	              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
	                $uiViewScroll(clone);
	              }
	            });
	            cleanupLastView();
	          });

	          currentEl = clone;
	          currentScope = newScope;
	          /**
	           * @ngdoc event
	           * @name ui.router.state.directive:ui-view#$viewContentLoaded
	           * @eventOf ui.router.state.directive:ui-view
	           * @eventType emits on ui-view directive scope
	           * @description
	           * Fired once the view is **loaded**, *after* the DOM is rendered.
	           *
	           * @param {Object} event Event object.
	           * @param {string} viewName Name of the view.
	           */
	          currentScope.$emit('$viewContentLoaded', name);
	          currentScope.$eval(onloadExp);
	        }
	      };
	    }
	  };

	  return directive;
	}

	$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
	function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
	  return {
	    restrict: 'ECA',
	    priority: -400,
	    compile: function (tElement) {
	      var initial = tElement.html();
	      return function (scope, $element, attrs) {
	        var current = $state.$current,
	            name = getUiViewName(scope, attrs, $element, $interpolate),
	            locals  = current && current.locals[name];

	        if (! locals) {
	          return;
	        }

	        $element.data('$uiView', { name: name, state: locals.$$state });
	        $element.html(locals.$template ? locals.$template : initial);

	        var link = $compile($element.contents());

	        if (locals.$$controller) {
	          locals.$scope = scope;
	          locals.$element = $element;
	          var controller = $controller(locals.$$controller, locals);
	          if (locals.$$controllerAs) {
	            scope[locals.$$controllerAs] = controller;
	          }
	          $element.data('$ngControllerController', controller);
	          $element.children().data('$ngControllerController', controller);
	        }

	        link(scope);
	      };
	    }
	  };
	}

	/**
	 * Shared ui-view code for both directives:
	 * Given scope, element, and its attributes, return the view's name
	 */
	function getUiViewName(scope, attrs, element, $interpolate) {
	  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
	  var inherited = element.inheritedData('$uiView');
	  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));
	}

	angular.module('ui.router.state').directive('uiView', $ViewDirective);
	angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

	function parseStateRef(ref, current) {
	  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
	  if (preparsed) ref = current + '(' + preparsed[1] + ')';
	  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
	  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
	  return { state: parsed[1], paramExpr: parsed[3] || null };
	}

	function stateContext(el) {
	  var stateData = el.parent().inheritedData('$uiView');

	  if (stateData && stateData.state && stateData.state.name) {
	    return stateData.state;
	  }
	}

	function getTypeInfo(el) {
	  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
	  var isForm = el[0].nodeName === "FORM";

	  return {
	    attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
	    isAnchor: el.prop("tagName").toUpperCase() === "A",
	    clickable: !isForm
	  };
	}

	function clickHook(el, $state, $timeout, type, current) {
	  return function(e) {
	    var button = e.which || e.button, target = current();

	    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
	      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
	      var transition = $timeout(function() {
	        $state.go(target.state, target.params, target.options);
	      });
	      e.preventDefault();

	      // if the state has no URL, ignore one preventDefault from the <a> directive.
	      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;

	      e.preventDefault = function() {
	        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
	      };
	    }
	  };
	}

	function defaultOpts(el, $state) {
	  return { relative: stateContext(el) || $state.$current, inherit: true };
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref
	 *
	 * @requires ui.router.state.$state
	 * @requires $timeout
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
	 * URL, the directive will automatically generate & update the `href` attribute via
	 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
	 * the link will trigger a state transition with optional parameters.
	 *
	 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
	 * handled natively by the browser.
	 *
	 * You can also use relative state paths within ui-sref, just like the relative
	 * paths passed to `$state.go()`. You just need to be aware that the path is relative
	 * to the state that the link lives in, in other words the state that loaded the
	 * template containing the link.
	 *
	 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
	 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
	 * and `reload`.
	 *
	 * @example
	 * Here's an example of how you'd use ui-sref and how it would compile. If you have the
	 * following template:
	 * <pre>
	 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
	 *
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
	 *     </li>
	 * </ul>
	 * </pre>
	 *
	 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
	 * <pre>
	 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
	 *
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
	 *     </li>
	 * </ul>
	 *
	 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
	 * </pre>
	 *
	 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
	 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
	 */
	$StateRefDirective.$inject = ['$state', '$timeout'];
	function $StateRefDirective($state, $timeout) {
	  return {
	    restrict: 'A',
	    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	    link: function(scope, element, attrs, uiSrefActive) {
	      var ref    = parseStateRef(attrs.uiSref, $state.current.name);
	      var def    = { state: ref.state, href: null, params: null };
	      var type   = getTypeInfo(element);
	      var active = uiSrefActive[1] || uiSrefActive[0];

	      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});

	      var update = function(val) {
	        if (val) def.params = angular.copy(val);
	        def.href = $state.href(ref.state, def.params, def.options);

	        if (active) active.$$addStateInfo(ref.state, def.params);
	        if (def.href !== null) attrs.$set(type.attr, def.href);
	      };

	      if (ref.paramExpr) {
	        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);
	        def.params = angular.copy(scope.$eval(ref.paramExpr));
	      }
	      update();

	      if (!type.clickable) return;
	      element.bind("click", clickHook(element, $state, $timeout, type, function() { return def; }));
	    }
	  };
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-state
	 *
	 * @requires ui.router.state.uiSref
	 *
	 * @restrict A
	 *
	 * @description
	 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
	 * params and override options.
	 *
	 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
	 * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#href $state.href()}
	 * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#go $state.go()}
	 */
	$StateRefDynamicDirective.$inject = ['$state', '$timeout'];
	function $StateRefDynamicDirective($state, $timeout) {
	  return {
	    restrict: 'A',
	    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	    link: function(scope, element, attrs, uiSrefActive) {
	      var type   = getTypeInfo(element);
	      var active = uiSrefActive[1] || uiSrefActive[0];
	      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
	      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';
	      var def    = { state: null, params: null, options: null, href: null };

	      function runStateRefLink (group) {
	        def.state = group[0]; def.params = group[1]; def.options = group[2];
	        def.href = $state.href(def.state, def.params, def.options);

	        if (active) active.$$addStateInfo(def.state, def.params);
	        if (def.href) attrs.$set(type.attr, def.href);
	      }

	      scope.$watch(watch, runStateRefLink, true);
	      runStateRefLink(scope.$eval(watch));

	      if (!type.clickable) return;
	      element.bind("click", clickHook(element, $state, $timeout, type, function() { return def; }));
	    }
	  };
	}


	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive working alongside ui-sref to add classes to an element when the
	 * related ui-sref directive's state is active, and removing them when it is inactive.
	 * The primary use-case is to simplify the special appearance of navigation menus
	 * relying on `ui-sref`, by having the "active" state's menu button appear different,
	 * distinguishing it from the inactive menu items.
	 *
	 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
	 * ui-sref-active found at the same level or above the ui-sref will be used.
	 *
	 * Will activate when the ui-sref's target state or any child state is active. If you
	 * need to activate only when the ui-sref target state is active and *not* any of
	 * it's children, then you will use
	 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
	 *
	 * @example
	 * Given the following template:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item">
	 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 *
	 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
	 * the resulting HTML will appear as (note the 'active' class):
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item active">
	 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 * The class name is interpolated **once** during the directives link time (any further changes to the
	 * interpolated value are ignored).
	 *
	 * Multiple classes may be specified in a space-separated format:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active='class1 class2 class3'>
	 *     <a ui-sref="app.user">link</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 * It is also possible to pass ui-sref-active an expression that evaluates
	 * to an object hash, whose keys represent active class names and whose
	 * values represent the respective state names/globs.
	 * ui-sref-active will match if the current active state **includes** any of
	 * the specified state names/globs, even the abstract ones.
	 *
	 * @Example
	 * Given the following template, with "admin" being an abstract state:
	 * <pre>
	 * <div ui-sref-active="{'active': 'admin.*'}">
	 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
	 * </div>
	 * </pre>
	 *
	 * When the current state is "admin.roles" the "active" class will be applied
	 * to both the <div> and <a> elements. It is important to note that the state
	 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
	 */

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active-eq
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
	 * when the exact target state used in the `ui-sref` is active; no child states.
	 *
	 */
	$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
	function $StateRefActiveDirective($state, $stateParams, $interpolate) {
	  return  {
	    restrict: "A",
	    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {
	      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;

	      // There probably isn't much point in $observing this
	      // uiSrefActive and uiSrefActiveEq share the same directive object with some
	      // slight difference in logic routing
	      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);

	      try {
	        uiSrefActive = $scope.$eval($attrs.uiSrefActive);
	      } catch (e) {
	        // Do nothing. uiSrefActive is not a valid expression.
	        // Fall back to using $interpolate below
	      }
	      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
	      if (isObject(uiSrefActive)) {
	        forEach(uiSrefActive, function(stateOrName, activeClass) {
	          if (isString(stateOrName)) {
	            var ref = parseStateRef(stateOrName, $state.current.name);
	            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
	          }
	        });
	      }

	      // Allow uiSref to communicate with uiSrefActive[Equals]
	      this.$$addStateInfo = function (newState, newParams) {
	        // we already got an explicit state provided by ui-sref-active, so we
	        // shadow the one that comes from ui-sref
	        if (isObject(uiSrefActive) && states.length > 0) {
	          return;
	        }
	        addState(newState, newParams, uiSrefActive);
	        update();
	      };

	      $scope.$on('$stateChangeSuccess', update);

	      function addState(stateName, stateParams, activeClass) {
	        var state = $state.get(stateName, stateContext($element));
	        var stateHash = createStateHash(stateName, stateParams);

	        states.push({
	          state: state || { name: stateName },
	          params: stateParams,
	          hash: stateHash
	        });

	        activeClasses[stateHash] = activeClass;
	      }

	      /**
	       * @param {string} state
	       * @param {Object|string} [params]
	       * @return {string}
	       */
	      function createStateHash(state, params) {
	        if (!isString(state)) {
	          throw new Error('state should be a string');
	        }
	        if (isObject(params)) {
	          return state + toJson(params);
	        }
	        params = $scope.$eval(params);
	        if (isObject(params)) {
	          return state + toJson(params);
	        }
	        return state;
	      }

	      // Update route state
	      function update() {
	        for (var i = 0; i < states.length; i++) {
	          if (anyMatch(states[i].state, states[i].params)) {
	            addClass($element, activeClasses[states[i].hash]);
	          } else {
	            removeClass($element, activeClasses[states[i].hash]);
	          }

	          if (exactMatch(states[i].state, states[i].params)) {
	            addClass($element, activeEqClass);
	          } else {
	            removeClass($element, activeEqClass);
	          }
	        }
	      }

	      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
	      function removeClass(el, className) { el.removeClass(className); }
	      function anyMatch(state, params) { return $state.includes(state.name, params); }
	      function exactMatch(state, params) { return $state.is(state.name, params); }

	      update();
	    }]
	  };
	}

	angular.module('ui.router.state')
	  .directive('uiSref', $StateRefDirective)
	  .directive('uiSrefActive', $StateRefActiveDirective)
	  .directive('uiSrefActiveEq', $StateRefActiveDirective)
	  .directive('uiState', $StateRefDynamicDirective);

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:isState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
	 */
	$IsStateFilter.$inject = ['$state'];
	function $IsStateFilter($state) {
	  var isFilter = function (state, params) {
	    return $state.is(state, params);
	  };
	  isFilter.$stateful = true;
	  return isFilter;
	}

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:includedByState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
	 */
	$IncludedByStateFilter.$inject = ['$state'];
	function $IncludedByStateFilter($state) {
	  var includesFilter = function (state, params, options) {
	    return $state.includes(state, params, options);
	  };
	  includesFilter.$stateful = true;
	  return  includesFilter;
	}

	angular.module('ui.router.state')
	  .filter('isState', $IsStateFilter)
	  .filter('includedByState', $IncludedByStateFilter);
	})(window, window.angular);

/***/ },

/***/ 28:
/***/ function(module, exports) {

	/**
	 * oclazyload - Load modules on demand (lazy load) with angularJS
	 * @version v1.0.9
	 * @link https://github.com/ocombe/ocLazyLoad
	 * @license MIT
	 * @author Olivier Combe <olivier.combe@gmail.com>
	 */
	(function (angular, window) {
	    'use strict';

	    var regModules = ['ng', 'oc.lazyLoad'],
	        regInvokes = {},
	        regConfigs = [],
	        modulesToLoad = [],
	        // modules to load from angular.module or other sources
	    realModules = [],
	        // real modules called from angular.module
	    recordDeclarations = [],
	        broadcast = angular.noop,
	        runBlocks = {},
	        justLoaded = [];

	    var ocLazyLoad = angular.module('oc.lazyLoad', ['ng']);

	    ocLazyLoad.provider('$ocLazyLoad', ["$controllerProvider", "$provide", "$compileProvider", "$filterProvider", "$injector", "$animateProvider", function ($controllerProvider, $provide, $compileProvider, $filterProvider, $injector, $animateProvider) {
	        var modules = {},
	            providers = {
	            $controllerProvider: $controllerProvider,
	            $compileProvider: $compileProvider,
	            $filterProvider: $filterProvider,
	            $provide: $provide, // other things (constant, decorator, provider, factory, service)
	            $injector: $injector,
	            $animateProvider: $animateProvider
	        },
	            debug = false,
	            events = false,
	            moduleCache = [],
	            modulePromises = {};

	        moduleCache.push = function (value) {
	            if (this.indexOf(value) === -1) {
	                Array.prototype.push.apply(this, arguments);
	            }
	        };

	        this.config = function (config) {
	            // If we want to define modules configs
	            if (angular.isDefined(config.modules)) {
	                if (angular.isArray(config.modules)) {
	                    angular.forEach(config.modules, function (moduleConfig) {
	                        modules[moduleConfig.name] = moduleConfig;
	                    });
	                } else {
	                    modules[config.modules.name] = config.modules;
	                }
	            }

	            if (angular.isDefined(config.debug)) {
	                debug = config.debug;
	            }

	            if (angular.isDefined(config.events)) {
	                events = config.events;
	            }
	        };

	        /**
	         * Get the list of existing registered modules
	         * @param element
	         */
	        this._init = function _init(element) {
	            // this is probably useless now because we override angular.bootstrap
	            if (modulesToLoad.length === 0) {
	                var elements = [element],
	                    names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
	                    NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/,
	                    append = function append(elm) {
	                    return elm && elements.push(elm);
	                };

	                angular.forEach(names, function (name) {
	                    names[name] = true;
	                    append(document.getElementById(name));
	                    name = name.replace(':', '\\:');
	                    if (typeof element[0] !== 'undefined' && element[0].querySelectorAll) {
	                        angular.forEach(element[0].querySelectorAll('.' + name), append);
	                        angular.forEach(element[0].querySelectorAll('.' + name + '\\:'), append);
	                        angular.forEach(element[0].querySelectorAll('[' + name + ']'), append);
	                    }
	                });

	                angular.forEach(elements, function (elm) {
	                    if (modulesToLoad.length === 0) {
	                        var className = ' ' + element.className + ' ';
	                        var match = NG_APP_CLASS_REGEXP.exec(className);
	                        if (match) {
	                            modulesToLoad.push((match[2] || '').replace(/\s+/g, ','));
	                        } else {
	                            angular.forEach(elm.attributes, function (attr) {
	                                if (modulesToLoad.length === 0 && names[attr.name]) {
	                                    modulesToLoad.push(attr.value);
	                                }
	                            });
	                        }
	                    }
	                });
	            }

	            if (modulesToLoad.length === 0 && !((window.jasmine || window.mocha) && angular.isDefined(angular.mock))) {
	                console.error('No module found during bootstrap, unable to init ocLazyLoad. You should always use the ng-app directive or angular.boostrap when you use ocLazyLoad.');
	            }

	            var addReg = function addReg(moduleName) {
	                if (regModules.indexOf(moduleName) === -1) {
	                    // register existing modules
	                    regModules.push(moduleName);
	                    var mainModule = angular.module(moduleName);

	                    // register existing components (directives, services, ...)
	                    _invokeQueue(null, mainModule._invokeQueue, moduleName);
	                    _invokeQueue(null, mainModule._configBlocks, moduleName); // angular 1.3+

	                    angular.forEach(mainModule.requires, addReg);
	                }
	            };

	            angular.forEach(modulesToLoad, function (moduleName) {
	                addReg(moduleName);
	            });

	            modulesToLoad = []; // reset for next bootstrap
	            recordDeclarations.pop(); // wait for the next lazy load
	        };

	        /**
	         * Like JSON.stringify but that doesn't throw on circular references
	         * @param obj
	         */
	        var stringify = function stringify(obj) {
	            try {
	                return JSON.stringify(obj);
	            } catch (e) {
	                var cache = [];
	                return JSON.stringify(obj, function (key, value) {
	                    if (angular.isObject(value) && value !== null) {
	                        if (cache.indexOf(value) !== -1) {
	                            // Circular reference found, discard key
	                            return;
	                        }
	                        // Store value in our collection
	                        cache.push(value);
	                    }
	                    return value;
	                });
	            }
	        };

	        var hashCode = function hashCode(str) {
	            var hash = 0,
	                i,
	                chr,
	                len;
	            if (str.length == 0) {
	                return hash;
	            }
	            for (i = 0, len = str.length; i < len; i++) {
	                chr = str.charCodeAt(i);
	                hash = (hash << 5) - hash + chr;
	                hash |= 0; // Convert to 32bit integer
	            }
	            return hash;
	        };

	        function _register(providers, registerModules, params) {
	            if (registerModules) {
	                var k,
	                    moduleName,
	                    moduleFn,
	                    tempRunBlocks = [];
	                for (k = registerModules.length - 1; k >= 0; k--) {
	                    moduleName = registerModules[k];
	                    if (!angular.isString(moduleName)) {
	                        moduleName = getModuleName(moduleName);
	                    }
	                    if (!moduleName || justLoaded.indexOf(moduleName) !== -1 || modules[moduleName] && realModules.indexOf(moduleName) === -1) {
	                        continue;
	                    }
	                    // new if not registered
	                    var newModule = regModules.indexOf(moduleName) === -1;
	                    moduleFn = ngModuleFct(moduleName);
	                    if (newModule) {
	                        regModules.push(moduleName);
	                        _register(providers, moduleFn.requires, params);
	                    }
	                    if (moduleFn._runBlocks.length > 0) {
	                        // new run blocks detected! Replace the old ones (if existing)
	                        runBlocks[moduleName] = [];
	                        while (moduleFn._runBlocks.length > 0) {
	                            runBlocks[moduleName].push(moduleFn._runBlocks.shift());
	                        }
	                    }
	                    if (angular.isDefined(runBlocks[moduleName]) && (newModule || params.rerun)) {
	                        tempRunBlocks = tempRunBlocks.concat(runBlocks[moduleName]);
	                    }
	                    _invokeQueue(providers, moduleFn._invokeQueue, moduleName, params.reconfig);
	                    _invokeQueue(providers, moduleFn._configBlocks, moduleName, params.reconfig); // angular 1.3+
	                    broadcast(newModule ? 'ocLazyLoad.moduleLoaded' : 'ocLazyLoad.moduleReloaded', moduleName);
	                    registerModules.pop();
	                    justLoaded.push(moduleName);
	                }
	                // execute the run blocks at the end
	                var instanceInjector = providers.getInstanceInjector();
	                angular.forEach(tempRunBlocks, function (fn) {
	                    instanceInjector.invoke(fn);
	                });
	            }
	        }

	        function _registerInvokeList(args, moduleName) {
	            var invokeList = args[2][0],
	                type = args[1],
	                newInvoke = false;
	            if (angular.isUndefined(regInvokes[moduleName])) {
	                regInvokes[moduleName] = {};
	            }
	            if (angular.isUndefined(regInvokes[moduleName][type])) {
	                regInvokes[moduleName][type] = {};
	            }
	            var onInvoke = function onInvoke(invokeName, invoke) {
	                if (!regInvokes[moduleName][type].hasOwnProperty(invokeName)) {
	                    regInvokes[moduleName][type][invokeName] = [];
	                }
	                if (checkHashes(invoke, regInvokes[moduleName][type][invokeName])) {
	                    newInvoke = true;
	                    regInvokes[moduleName][type][invokeName].push(invoke);
	                    broadcast('ocLazyLoad.componentLoaded', [moduleName, type, invokeName]);
	                }
	            };

	            function checkHashes(potentialNew, invokes) {
	                var isNew = true,
	                    newHash;
	                if (invokes.length) {
	                    newHash = signature(potentialNew);
	                    angular.forEach(invokes, function (invoke) {
	                        isNew = isNew && signature(invoke) !== newHash;
	                    });
	                }
	                return isNew;
	            }

	            function signature(data) {
	                if (angular.isArray(data)) {
	                    // arrays are objects, we need to test for it first
	                    return hashCode(data.toString());
	                } else if (angular.isObject(data)) {
	                    // constants & values for example
	                    return hashCode(stringify(data));
	                } else {
	                    if (angular.isDefined(data) && data !== null) {
	                        return hashCode(data.toString());
	                    } else {
	                        // null & undefined constants
	                        return data;
	                    }
	                }
	            }

	            if (angular.isString(invokeList)) {
	                onInvoke(invokeList, args[2][1]);
	            } else if (angular.isObject(invokeList)) {
	                angular.forEach(invokeList, function (invoke, key) {
	                    if (angular.isString(invoke)) {
	                        // decorators for example
	                        onInvoke(invoke, invokeList[1]);
	                    } else {
	                        // components registered as object lists {"componentName": function() {}}
	                        onInvoke(key, invoke);
	                    }
	                });
	            } else {
	                return false;
	            }
	            return newInvoke;
	        }

	        function _invokeQueue(providers, queue, moduleName, reconfig) {
	            if (!queue) {
	                return;
	            }

	            var i, len, args, provider;
	            for (i = 0, len = queue.length; i < len; i++) {
	                args = queue[i];
	                if (angular.isArray(args)) {
	                    if (providers !== null) {
	                        if (providers.hasOwnProperty(args[0])) {
	                            provider = providers[args[0]];
	                        } else {
	                            throw new Error('unsupported provider ' + args[0]);
	                        }
	                    }
	                    var isNew = _registerInvokeList(args, moduleName);
	                    if (args[1] !== 'invoke') {
	                        if (isNew && angular.isDefined(provider)) {
	                            provider[args[1]].apply(provider, args[2]);
	                        }
	                    } else {
	                        // config block
	                        var callInvoke = function callInvoke(fct) {
	                            var invoked = regConfigs.indexOf(moduleName + '-' + fct);
	                            if (invoked === -1 || reconfig) {
	                                if (invoked === -1) {
	                                    regConfigs.push(moduleName + '-' + fct);
	                                }
	                                if (angular.isDefined(provider)) {
	                                    provider[args[1]].apply(provider, args[2]);
	                                }
	                            }
	                        };
	                        if (angular.isFunction(args[2][0])) {
	                            callInvoke(args[2][0]);
	                        } else if (angular.isArray(args[2][0])) {
	                            for (var j = 0, jlen = args[2][0].length; j < jlen; j++) {
	                                if (angular.isFunction(args[2][0][j])) {
	                                    callInvoke(args[2][0][j]);
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }

	        function getModuleName(module) {
	            var moduleName = null;
	            if (angular.isString(module)) {
	                moduleName = module;
	            } else if (angular.isObject(module) && module.hasOwnProperty('name') && angular.isString(module.name)) {
	                moduleName = module.name;
	            }
	            return moduleName;
	        }

	        function moduleExists(moduleName) {
	            if (!angular.isString(moduleName)) {
	                return false;
	            }
	            try {
	                return ngModuleFct(moduleName);
	            } catch (e) {
	                if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {
	                    return false;
	                }
	            }
	        }

	        this.$get = ["$log", "$rootElement", "$rootScope", "$cacheFactory", "$q", function ($log, $rootElement, $rootScope, $cacheFactory, $q) {
	            var instanceInjector,
	                filesCache = $cacheFactory('ocLazyLoad');

	            if (!debug) {
	                $log = {};
	                $log['error'] = angular.noop;
	                $log['warn'] = angular.noop;
	                $log['info'] = angular.noop;
	            }

	            // Make this lazy because when $get() is called the instance injector hasn't been assigned to the rootElement yet
	            providers.getInstanceInjector = function () {
	                return instanceInjector ? instanceInjector : instanceInjector = $rootElement.data('$injector') || angular.injector();
	            };

	            broadcast = function broadcast(eventName, params) {
	                if (events) {
	                    $rootScope.$broadcast(eventName, params);
	                }
	                if (debug) {
	                    $log.info(eventName, params);
	                }
	            };

	            function reject(e) {
	                var deferred = $q.defer();
	                $log.error(e.message);
	                deferred.reject(e);
	                return deferred.promise;
	            }

	            return {
	                _broadcast: broadcast,

	                _$log: $log,

	                /**
	                 * Returns the files cache used by the loaders to store the files currently loading
	                 * @returns {*}
	                 */
	                _getFilesCache: function getFilesCache() {
	                    return filesCache;
	                },

	                /**
	                 * Let the service know that it should monitor angular.module because files are loading
	                 * @param watch boolean
	                 */
	                toggleWatch: function toggleWatch(watch) {
	                    if (watch) {
	                        recordDeclarations.push(true);
	                    } else {
	                        recordDeclarations.pop();
	                    }
	                },

	                /**
	                 * Let you get a module config object
	                 * @param moduleName String the name of the module
	                 * @returns {*}
	                 */
	                getModuleConfig: function getModuleConfig(moduleName) {
	                    if (!angular.isString(moduleName)) {
	                        throw new Error('You need to give the name of the module to get');
	                    }
	                    if (!modules[moduleName]) {
	                        return null;
	                    }
	                    return angular.copy(modules[moduleName]);
	                },

	                /**
	                 * Let you define a module config object
	                 * @param moduleConfig Object the module config object
	                 * @returns {*}
	                 */
	                setModuleConfig: function setModuleConfig(moduleConfig) {
	                    if (!angular.isObject(moduleConfig)) {
	                        throw new Error('You need to give the module config object to set');
	                    }
	                    modules[moduleConfig.name] = moduleConfig;
	                    return moduleConfig;
	                },

	                /**
	                 * Returns the list of loaded modules
	                 * @returns {string[]}
	                 */
	                getModules: function getModules() {
	                    return regModules;
	                },

	                /**
	                 * Let you check if a module has been loaded into Angular or not
	                 * @param modulesNames String/Object a module name, or a list of module names
	                 * @returns {boolean}
	                 */
	                isLoaded: function isLoaded(modulesNames) {
	                    var moduleLoaded = function moduleLoaded(module) {
	                        var isLoaded = regModules.indexOf(module) > -1;
	                        if (!isLoaded) {
	                            isLoaded = !!moduleExists(module);
	                        }
	                        return isLoaded;
	                    };
	                    if (angular.isString(modulesNames)) {
	                        modulesNames = [modulesNames];
	                    }
	                    if (angular.isArray(modulesNames)) {
	                        var i, len;
	                        for (i = 0, len = modulesNames.length; i < len; i++) {
	                            if (!moduleLoaded(modulesNames[i])) {
	                                return false;
	                            }
	                        }
	                        return true;
	                    } else {
	                        throw new Error('You need to define the module(s) name(s)');
	                    }
	                },

	                /**
	                 * Given a module, return its name
	                 * @param module
	                 * @returns {String}
	                 */
	                _getModuleName: getModuleName,

	                /**
	                 * Returns a module if it exists
	                 * @param moduleName
	                 * @returns {module}
	                 */
	                _getModule: function getModule(moduleName) {
	                    try {
	                        return ngModuleFct(moduleName);
	                    } catch (e) {
	                        // this error message really suxx
	                        if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {
	                            e.message = 'The module "' + stringify(moduleName) + '" that you are trying to load does not exist. ' + e.message;
	                        }
	                        throw e;
	                    }
	                },

	                /**
	                 * Check if a module exists and returns it if it does
	                 * @param moduleName
	                 * @returns {boolean}
	                 */
	                moduleExists: moduleExists,

	                /**
	                 * Load the dependencies, and might try to load new files depending on the config
	                 * @param moduleName (String or Array of Strings)
	                 * @param localParams
	                 * @returns {*}
	                 * @private
	                 */
	                _loadDependencies: function _loadDependencies(moduleName, localParams) {
	                    var loadedModule,
	                        requires,
	                        diff,
	                        promisesList = [],
	                        self = this;

	                    moduleName = self._getModuleName(moduleName);

	                    if (moduleName === null) {
	                        return $q.when();
	                    } else {
	                        try {
	                            loadedModule = self._getModule(moduleName);
	                        } catch (e) {
	                            return reject(e);
	                        }
	                        // get unloaded requires
	                        requires = self.getRequires(loadedModule);
	                    }

	                    angular.forEach(requires, function (requireEntry) {
	                        // If no configuration is provided, try and find one from a previous load.
	                        // If there isn't one, bail and let the normal flow run
	                        if (angular.isString(requireEntry)) {
	                            var config = self.getModuleConfig(requireEntry);
	                            if (config === null) {
	                                moduleCache.push(requireEntry); // We don't know about this module, but something else might, so push it anyway.
	                                return;
	                            }
	                            requireEntry = config;
	                            // ignore the name because it's probably not a real module name
	                            config.name = undefined;
	                        }

	                        // Check if this dependency has been loaded previously
	                        if (self.moduleExists(requireEntry.name)) {
	                            // compare against the already loaded module to see if the new definition adds any new files
	                            diff = requireEntry.files.filter(function (n) {
	                                return self.getModuleConfig(requireEntry.name).files.indexOf(n) < 0;
	                            });

	                            // If the module was redefined, advise via the console
	                            if (diff.length !== 0) {
	                                self._$log.warn('Module "', moduleName, '" attempted to redefine configuration for dependency. "', requireEntry.name, '"\n Additional Files Loaded:', diff);
	                            }

	                            // Push everything to the file loader, it will weed out the duplicates.
	                            if (angular.isDefined(self.filesLoader)) {
	                                // if a files loader is defined
	                                promisesList.push(self.filesLoader(requireEntry, localParams).then(function () {
	                                    return self._loadDependencies(requireEntry);
	                                }));
	                            } else {
	                                return reject(new Error('Error: New dependencies need to be loaded from external files (' + requireEntry.files + '), but no loader has been defined.'));
	                            }
	                            return;
	                        } else if (angular.isArray(requireEntry)) {
	                            var files = [];
	                            angular.forEach(requireEntry, function (entry) {
	                                // let's check if the entry is a file name or a config name
	                                var config = self.getModuleConfig(entry);
	                                if (config === null) {
	                                    files.push(entry);
	                                } else if (config.files) {
	                                    files = files.concat(config.files);
	                                }
	                            });
	                            if (files.length > 0) {
	                                requireEntry = {
	                                    files: files
	                                };
	                            }
	                        } else if (angular.isObject(requireEntry)) {
	                            if (requireEntry.hasOwnProperty('name') && requireEntry['name']) {
	                                // The dependency doesn't exist in the module cache and is a new configuration, so store and push it.
	                                self.setModuleConfig(requireEntry);
	                                moduleCache.push(requireEntry['name']);
	                            }
	                        }

	                        // Check if the dependency has any files that need to be loaded. If there are, push a new promise to the promise list.
	                        if (angular.isDefined(requireEntry.files) && requireEntry.files.length !== 0) {
	                            if (angular.isDefined(self.filesLoader)) {
	                                // if a files loader is defined
	                                promisesList.push(self.filesLoader(requireEntry, localParams).then(function () {
	                                    return self._loadDependencies(requireEntry);
	                                }));
	                            } else {
	                                return reject(new Error('Error: the module "' + requireEntry.name + '" is defined in external files (' + requireEntry.files + '), but no loader has been defined.'));
	                            }
	                        }
	                    });

	                    // Create a wrapper promise to watch the promise list and resolve it once everything is done.
	                    return $q.all(promisesList);
	                },

	                /**
	                 * Inject new modules into Angular
	                 * @param moduleName
	                 * @param localParams
	                 * @param real
	                 */
	                inject: function inject(moduleName) {
	                    var localParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	                    var real = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

	                    var self = this,
	                        deferred = $q.defer();
	                    if (angular.isDefined(moduleName) && moduleName !== null) {
	                        if (angular.isArray(moduleName)) {
	                            var promisesList = [];
	                            angular.forEach(moduleName, function (module) {
	                                promisesList.push(self.inject(module, localParams, real));
	                            });
	                            return $q.all(promisesList);
	                        } else {
	                            self._addToLoadList(self._getModuleName(moduleName), true, real);
	                        }
	                    }
	                    if (modulesToLoad.length > 0) {
	                        var res = modulesToLoad.slice(); // clean copy
	                        var loadNext = function loadNext(moduleName) {
	                            moduleCache.push(moduleName);
	                            modulePromises[moduleName] = deferred.promise;
	                            self._loadDependencies(moduleName, localParams).then(function success() {
	                                try {
	                                    justLoaded = [];
	                                    _register(providers, moduleCache, localParams);
	                                } catch (e) {
	                                    self._$log.error(e.message);
	                                    deferred.reject(e);
	                                    return;
	                                }

	                                if (modulesToLoad.length > 0) {
	                                    loadNext(modulesToLoad.shift()); // load the next in list
	                                } else {
	                                        deferred.resolve(res); // everything has been loaded, resolve
	                                    }
	                            }, function error(err) {
	                                deferred.reject(err);
	                            });
	                        };

	                        // load the first in list
	                        loadNext(modulesToLoad.shift());
	                    } else if (localParams && localParams.name && modulePromises[localParams.name]) {
	                        return modulePromises[localParams.name];
	                    } else {
	                        deferred.resolve();
	                    }
	                    return deferred.promise;
	                },

	                /**
	                 * Get the list of required modules/services/... for this module
	                 * @param module
	                 * @returns {Array}
	                 */
	                getRequires: function getRequires(module) {
	                    var requires = [];
	                    angular.forEach(module.requires, function (requireModule) {
	                        if (regModules.indexOf(requireModule) === -1) {
	                            requires.push(requireModule);
	                        }
	                    });
	                    return requires;
	                },

	                /**
	                 * Invoke the new modules & component by their providers
	                 * @param providers
	                 * @param queue
	                 * @param moduleName
	                 * @param reconfig
	                 * @private
	                 */
	                _invokeQueue: _invokeQueue,

	                /**
	                 * Check if a module has been invoked and registers it if not
	                 * @param args
	                 * @param moduleName
	                 * @returns {boolean} is new
	                 */
	                _registerInvokeList: _registerInvokeList,

	                /**
	                 * Register a new module and loads it, executing the run/config blocks if needed
	                 * @param providers
	                 * @param registerModules
	                 * @param params
	                 * @private
	                 */
	                _register: _register,

	                /**
	                 * Add a module name to the list of modules that will be loaded in the next inject
	                 * @param name
	                 * @param force
	                 * @private
	                 */
	                _addToLoadList: _addToLoadList,

	                /**
	                 * Unregister modules (you shouldn't have to use this)
	                 * @param modules
	                 */
	                _unregister: function _unregister(modules) {
	                    if (angular.isDefined(modules)) {
	                        if (angular.isArray(modules)) {
	                            angular.forEach(modules, function (module) {
	                                regInvokes[module] = undefined;
	                            });
	                        }
	                    }
	                }
	            };
	        }];

	        // Let's get the list of loaded modules & components
	        this._init(angular.element(window.document));
	    }]);

	    var bootstrapFct = angular.bootstrap;
	    angular.bootstrap = function (element, modules, config) {
	        // we use slice to make a clean copy
	        angular.forEach(modules.slice(), function (module) {
	            _addToLoadList(module, true, true);
	        });
	        return bootstrapFct(element, modules, config);
	    };

	    var _addToLoadList = function _addToLoadList(name, force, real) {
	        if ((recordDeclarations.length > 0 || force) && angular.isString(name) && modulesToLoad.indexOf(name) === -1) {
	            modulesToLoad.push(name);
	            if (real) {
	                realModules.push(name);
	            }
	        }
	    };

	    var ngModuleFct = angular.module;
	    angular.module = function (name, requires, configFn) {
	        _addToLoadList(name, false, true);
	        return ngModuleFct(name, requires, configFn);
	    };

	    // CommonJS package manager support:
	    if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
	        module.exports = 'oc.lazyLoad';
	    }
	})(angular, window);
	(function (angular) {
	    'use strict';

	    angular.module('oc.lazyLoad').directive('ocLazyLoad', ["$ocLazyLoad", "$compile", "$animate", "$parse", "$timeout", function ($ocLazyLoad, $compile, $animate, $parse, $timeout) {
	        return {
	            restrict: 'A',
	            terminal: true,
	            priority: 1000,
	            compile: function compile(element, attrs) {
	                // we store the content and remove it before compilation
	                var content = element[0].innerHTML;
	                element.html('');

	                return function ($scope, $element, $attr) {
	                    var model = $parse($attr.ocLazyLoad);
	                    $scope.$watch(function () {
	                        return model($scope) || $attr.ocLazyLoad; // it can be a module name (string), an object, an array, or a scope reference to any of this
	                    }, function (moduleName) {
	                        if (angular.isDefined(moduleName)) {
	                            $ocLazyLoad.load(moduleName).then(function () {
	                                // Attach element contents to DOM and then compile them.
	                                // This prevents an issue where IE invalidates saved element objects (HTMLCollections)
	                                // of the compiled contents when attaching to the parent DOM.
	                                $animate.enter(content, $element);
	                                // get the new content & compile it
	                                $compile($element.contents())($scope);
	                            });
	                        }
	                    }, true);
	                };
	            }
	        };
	    }]);
	})(angular);
	(function (angular) {
	    'use strict';

	    angular.module('oc.lazyLoad').config(["$provide", function ($provide) {
	        $provide.decorator('$ocLazyLoad', ["$delegate", "$q", "$window", "$interval", function ($delegate, $q, $window, $interval) {
	            var uaCssChecked = false,
	                useCssLoadPatch = false,
	                anchor = $window.document.getElementsByTagName('head')[0] || $window.document.getElementsByTagName('body')[0];

	            /**
	             * Load a js/css file
	             * @param type
	             * @param path
	             * @param params
	             * @returns promise
	             */
	            $delegate.buildElement = function buildElement(type, path, params) {
	                var deferred = $q.defer(),
	                    el,
	                    loaded,
	                    filesCache = $delegate._getFilesCache(),
	                    cacheBuster = function cacheBuster(url) {
	                    var dc = new Date().getTime();
	                    if (url.indexOf('?') >= 0) {
	                        if (url.substring(0, url.length - 1) === '&') {
	                            return url + '_dc=' + dc;
	                        }
	                        return url + '&_dc=' + dc;
	                    } else {
	                        return url + '?_dc=' + dc;
	                    }
	                };

	                // Store the promise early so the file load can be detected by other parallel lazy loads
	                // (ie: multiple routes on one page) a 'true' value isn't sufficient
	                // as it causes false positive load results.
	                if (angular.isUndefined(filesCache.get(path))) {
	                    filesCache.put(path, deferred.promise);
	                }

	                // Switch in case more content types are added later
	                switch (type) {
	                    case 'css':
	                        el = $window.document.createElement('link');
	                        el.type = 'text/css';
	                        el.rel = 'stylesheet';
	                        el.href = params.cache === false ? cacheBuster(path) : path;
	                        break;
	                    case 'js':
	                        el = $window.document.createElement('script');
	                        el.src = params.cache === false ? cacheBuster(path) : path;
	                        break;
	                    default:
	                        filesCache.remove(path);
	                        deferred.reject(new Error('Requested type "' + type + '" is not known. Could not inject "' + path + '"'));
	                        break;
	                }
	                el.onload = el['onreadystatechange'] = function (e) {
	                    if (el['readyState'] && !/^c|loade/.test(el['readyState']) || loaded) return;
	                    el.onload = el['onreadystatechange'] = null;
	                    loaded = 1;
	                    $delegate._broadcast('ocLazyLoad.fileLoaded', path);
	                    deferred.resolve();
	                };
	                el.onerror = function () {
	                    filesCache.remove(path);
	                    deferred.reject(new Error('Unable to load ' + path));
	                };
	                el.async = params.serie ? 0 : 1;

	                var insertBeforeElem = anchor.lastChild;
	                if (params.insertBefore) {
	                    var element = angular.element(angular.isDefined(window.jQuery) ? params.insertBefore : document.querySelector(params.insertBefore));
	                    if (element && element.length > 0) {
	                        insertBeforeElem = element[0];
	                    }
	                }
	                insertBeforeElem.parentNode.insertBefore(el, insertBeforeElem);

	                /*
	                 The event load or readystatechange doesn't fire in:
	                 - iOS < 6       (default mobile browser)
	                 - Android < 4.4 (default mobile browser)
	                 - Safari < 6    (desktop browser)
	                 */
	                if (type == 'css') {
	                    if (!uaCssChecked) {
	                        var ua = $window.navigator.userAgent.toLowerCase();

	                        // iOS < 6
	                        if (/iP(hone|od|ad)/.test($window.navigator.platform)) {
	                            var v = $window.navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
	                            var iOSVersion = parseFloat([parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)].join('.'));
	                            useCssLoadPatch = iOSVersion < 6;
	                        } else if (ua.indexOf("android") > -1) {
	                            // Android < 4.4
	                            var androidVersion = parseFloat(ua.slice(ua.indexOf("android") + 8));
	                            useCssLoadPatch = androidVersion < 4.4;
	                        } else if (ua.indexOf('safari') > -1) {
	                            var versionMatch = ua.match(/version\/([\.\d]+)/i);
	                            useCssLoadPatch = versionMatch && versionMatch[1] && parseFloat(versionMatch[1]) < 6;
	                        }
	                    }

	                    if (useCssLoadPatch) {
	                        var tries = 1000; // * 20 = 20000 miliseconds
	                        var interval = $interval(function () {
	                            try {
	                                el.sheet.cssRules;
	                                $interval.cancel(interval);
	                                el.onload();
	                            } catch (e) {
	                                if (--tries <= 0) {
	                                    el.onerror();
	                                }
	                            }
	                        }, 20);
	                    }
	                }

	                return deferred.promise;
	            };

	            return $delegate;
	        }]);
	    }]);
	})(angular);
	(function (angular) {
	    'use strict';

	    angular.module('oc.lazyLoad').config(["$provide", function ($provide) {
	        $provide.decorator('$ocLazyLoad', ["$delegate", "$q", function ($delegate, $q) {
	            /**
	             * The function that loads new files
	             * @param config
	             * @param params
	             * @returns {*}
	             */
	            $delegate.filesLoader = function filesLoader(config) {
	                var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	                var cssFiles = [],
	                    templatesFiles = [],
	                    jsFiles = [],
	                    promises = [],
	                    cachePromise = null,
	                    filesCache = $delegate._getFilesCache();

	                $delegate.toggleWatch(true); // start watching angular.module calls

	                angular.extend(params, config);

	                var pushFile = function pushFile(path) {
	                    var file_type = null,
	                        m;
	                    if (angular.isObject(path)) {
	                        file_type = path.type;
	                        path = path.path;
	                    }
	                    cachePromise = filesCache.get(path);
	                    if (angular.isUndefined(cachePromise) || params.cache === false) {

	                        // always check for requirejs syntax just in case
	                        if ((m = /^(css|less|html|htm|js)?(?=!)/.exec(path)) !== null) {
	                            // Detect file type using preceding type declaration (ala requireJS)
	                            file_type = m[1];
	                            path = path.substr(m[1].length + 1, path.length); // Strip the type from the path
	                        }

	                        if (!file_type) {
	                            if ((m = /[.](css|less|html|htm|js)?((\?|#).*)?$/.exec(path)) !== null) {
	                                // Detect file type via file extension
	                                file_type = m[1];
	                            } else if (!$delegate.jsLoader.hasOwnProperty('ocLazyLoadLoader') && $delegate.jsLoader.hasOwnProperty('requirejs')) {
	                                // requirejs
	                                file_type = 'js';
	                            } else {
	                                $delegate._$log.error('File type could not be determined. ' + path);
	                                return;
	                            }
	                        }

	                        if ((file_type === 'css' || file_type === 'less') && cssFiles.indexOf(path) === -1) {
	                            cssFiles.push(path);
	                        } else if ((file_type === 'html' || file_type === 'htm') && templatesFiles.indexOf(path) === -1) {
	                            templatesFiles.push(path);
	                        } else if (file_type === 'js' || jsFiles.indexOf(path) === -1) {
	                            jsFiles.push(path);
	                        } else {
	                            $delegate._$log.error('File type is not valid. ' + path);
	                        }
	                    } else if (cachePromise) {
	                        promises.push(cachePromise);
	                    }
	                };

	                if (params.serie) {
	                    pushFile(params.files.shift());
	                } else {
	                    angular.forEach(params.files, function (path) {
	                        pushFile(path);
	                    });
	                }

	                if (cssFiles.length > 0) {
	                    var cssDeferred = $q.defer();
	                    $delegate.cssLoader(cssFiles, function (err) {
	                        if (angular.isDefined(err) && $delegate.cssLoader.hasOwnProperty('ocLazyLoadLoader')) {
	                            $delegate._$log.error(err);
	                            cssDeferred.reject(err);
	                        } else {
	                            cssDeferred.resolve();
	                        }
	                    }, params);
	                    promises.push(cssDeferred.promise);
	                }

	                if (templatesFiles.length > 0) {
	                    var templatesDeferred = $q.defer();
	                    $delegate.templatesLoader(templatesFiles, function (err) {
	                        if (angular.isDefined(err) && $delegate.templatesLoader.hasOwnProperty('ocLazyLoadLoader')) {
	                            $delegate._$log.error(err);
	                            templatesDeferred.reject(err);
	                        } else {
	                            templatesDeferred.resolve();
	                        }
	                    }, params);
	                    promises.push(templatesDeferred.promise);
	                }

	                if (jsFiles.length > 0) {
	                    var jsDeferred = $q.defer();
	                    $delegate.jsLoader(jsFiles, function (err) {
	                        if (angular.isDefined(err) && ($delegate.jsLoader.hasOwnProperty("ocLazyLoadLoader") || $delegate.jsLoader.hasOwnProperty("requirejs"))) {
	                            $delegate._$log.error(err);
	                            jsDeferred.reject(err);
	                        } else {
	                            jsDeferred.resolve();
	                        }
	                    }, params);
	                    promises.push(jsDeferred.promise);
	                }

	                if (promises.length === 0) {
	                    var deferred = $q.defer(),
	                        err = "Error: no file to load has been found, if you're trying to load an existing module you should use the 'inject' method instead of 'load'.";
	                    $delegate._$log.error(err);
	                    deferred.reject(err);
	                    return deferred.promise;
	                } else if (params.serie && params.files.length > 0) {
	                    return $q.all(promises).then(function () {
	                        return $delegate.filesLoader(config, params);
	                    });
	                } else {
	                    return $q.all(promises)['finally'](function (res) {
	                        $delegate.toggleWatch(false); // stop watching angular.module calls
	                        return res;
	                    });
	                }
	            };

	            /**
	             * Load a module or a list of modules into Angular
	             * @param module Mixed the name of a predefined module config object, or a module config object, or an array of either
	             * @param params Object optional parameters
	             * @returns promise
	             */
	            $delegate.load = function (originalModule) {
	                var originalParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	                var self = this,
	                    config = null,
	                    deferredList = [],
	                    deferred = $q.defer(),
	                    errText;

	                // clean copy
	                var module = angular.copy(originalModule);
	                var params = angular.copy(originalParams);

	                // If module is an array, break it down
	                if (angular.isArray(module)) {
	                    // Resubmit each entry as a single module
	                    angular.forEach(module, function (m) {
	                        deferredList.push(self.load(m, params));
	                    });

	                    // Resolve the promise once everything has loaded
	                    $q.all(deferredList).then(function (res) {
	                        deferred.resolve(res);
	                    }, function (err) {
	                        deferred.reject(err);
	                    });

	                    return deferred.promise;
	                }

	                // Get or Set a configuration depending on what was passed in
	                if (angular.isString(module)) {
	                    config = self.getModuleConfig(module);
	                    if (!config) {
	                        config = {
	                            files: [module]
	                        };
	                    }
	                } else if (angular.isObject(module)) {
	                    // case {type: 'js', path: lazyLoadUrl + 'testModule.fakejs'}
	                    if (angular.isDefined(module.path) && angular.isDefined(module.type)) {
	                        config = {
	                            files: [module]
	                        };
	                    } else {
	                        config = self.setModuleConfig(module);
	                    }
	                }

	                if (config === null) {
	                    var moduleName = self._getModuleName(module);
	                    errText = 'Module "' + (moduleName || 'unknown') + '" is not configured, cannot load.';
	                    $delegate._$log.error(errText);
	                    deferred.reject(new Error(errText));
	                    return deferred.promise;
	                } else {
	                    // deprecated
	                    if (angular.isDefined(config.template)) {
	                        if (angular.isUndefined(config.files)) {
	                            config.files = [];
	                        }
	                        if (angular.isString(config.template)) {
	                            config.files.push(config.template);
	                        } else if (angular.isArray(config.template)) {
	                            config.files.concat(config.template);
	                        }
	                    }
	                }

	                var localParams = angular.extend({}, params, config);

	                // if someone used an external loader and called the load function with just the module name
	                if (angular.isUndefined(config.files) && angular.isDefined(config.name) && $delegate.moduleExists(config.name)) {
	                    return $delegate.inject(config.name, localParams, true);
	                }

	                $delegate.filesLoader(config, localParams).then(function () {
	                    $delegate.inject(null, localParams).then(function (res) {
	                        deferred.resolve(res);
	                    }, function (err) {
	                        deferred.reject(err);
	                    });
	                }, function (err) {
	                    deferred.reject(err);
	                });

	                return deferred.promise;
	            };

	            // return the patched service
	            return $delegate;
	        }]);
	    }]);
	})(angular);
	(function (angular) {
	    'use strict';

	    angular.module('oc.lazyLoad').config(["$provide", function ($provide) {
	        $provide.decorator('$ocLazyLoad', ["$delegate", "$q", function ($delegate, $q) {
	            /**
	             * cssLoader function
	             * @type Function
	             * @param paths array list of css files to load
	             * @param callback to call when everything is loaded. We use a callback and not a promise
	             * @param params object config parameters
	             * because the user can overwrite cssLoader and it will probably not use promises :(
	             */
	            $delegate.cssLoader = function (paths, callback, params) {
	                var promises = [];
	                angular.forEach(paths, function (path) {
	                    promises.push($delegate.buildElement('css', path, params));
	                });
	                $q.all(promises).then(function () {
	                    callback();
	                }, function (err) {
	                    callback(err);
	                });
	            };
	            $delegate.cssLoader.ocLazyLoadLoader = true;

	            return $delegate;
	        }]);
	    }]);
	})(angular);
	(function (angular) {
	    'use strict';

	    angular.module('oc.lazyLoad').config(["$provide", function ($provide) {
	        $provide.decorator('$ocLazyLoad', ["$delegate", "$q", function ($delegate, $q) {
	            /**
	             * jsLoader function
	             * @type Function
	             * @param paths array list of js files to load
	             * @param callback to call when everything is loaded. We use a callback and not a promise
	             * @param params object config parameters
	             * because the user can overwrite jsLoader and it will probably not use promises :(
	             */
	            $delegate.jsLoader = function (paths, callback, params) {
	                var promises = [];
	                angular.forEach(paths, function (path) {
	                    promises.push($delegate.buildElement('js', path, params));
	                });
	                $q.all(promises).then(function () {
	                    callback();
	                }, function (err) {
	                    callback(err);
	                });
	            };
	            $delegate.jsLoader.ocLazyLoadLoader = true;

	            return $delegate;
	        }]);
	    }]);
	})(angular);
	(function (angular) {
	    'use strict';

	    angular.module('oc.lazyLoad').config(["$provide", function ($provide) {
	        $provide.decorator('$ocLazyLoad', ["$delegate", "$templateCache", "$q", "$http", function ($delegate, $templateCache, $q, $http) {
	            /**
	             * templatesLoader function
	             * @type Function
	             * @param paths array list of css files to load
	             * @param callback to call when everything is loaded. We use a callback and not a promise
	             * @param params object config parameters for $http
	             * because the user can overwrite templatesLoader and it will probably not use promises :(
	             */
	            $delegate.templatesLoader = function (paths, callback, params) {
	                var promises = [],
	                    filesCache = $delegate._getFilesCache();

	                angular.forEach(paths, function (url) {
	                    var deferred = $q.defer();
	                    promises.push(deferred.promise);
	                    $http.get(url, params).success(function (data) {
	                        if (angular.isString(data) && data.length > 0) {
	                            angular.forEach(angular.element(data), function (node) {
	                                if (node.nodeName === 'SCRIPT' && node.type === 'text/ng-template') {
	                                    $templateCache.put(node.id, node.innerHTML);
	                                }
	                            });
	                        }
	                        if (angular.isUndefined(filesCache.get(url))) {
	                            filesCache.put(url, true);
	                        }
	                        deferred.resolve();
	                    }).error(function (err) {
	                        deferred.reject(new Error('Unable to load template file "' + url + '": ' + err));
	                    });
	                });
	                return $q.all(promises).then(function () {
	                    callback();
	                }, function (err) {
	                    callback(err);
	                });
	            };
	            $delegate.templatesLoader.ocLazyLoadLoader = true;

	            return $delegate;
	        }]);
	    }]);
	})(angular);
	// Array.indexOf polyfill for IE8
	if (!Array.prototype.indexOf) {
	    Array.prototype.indexOf = function (searchElement, fromIndex) {
	        var k;

	        // 1. Let O be the result of calling ToObject passing
	        //    the this value as the argument.
	        if (this == null) {
	            throw new TypeError('"this" is null or not defined');
	        }

	        var O = Object(this);

	        // 2. Let lenValue be the result of calling the Get
	        //    internal method of O with the argument "length".
	        // 3. Let len be ToUint32(lenValue).
	        var len = O.length >>> 0;

	        // 4. If len is 0, return -1.
	        if (len === 0) {
	            return -1;
	        }

	        // 5. If argument fromIndex was passed let n be
	        //    ToInteger(fromIndex); else let n be 0.
	        var n = +fromIndex || 0;

	        if (Math.abs(n) === Infinity) {
	            n = 0;
	        }

	        // 6. If n >= len, return -1.
	        if (n >= len) {
	            return -1;
	        }

	        // 7. If n >= 0, then Let k be n.
	        // 8. Else, n<0, Let k be len - abs(n).
	        //    If k is less than 0, then let k be 0.
	        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

	        // 9. Repeat, while k < len
	        while (k < len) {
	            // a. Let Pk be ToString(k).
	            //   This is implicit for LHS operands of the in operator
	            // b. Let kPresent be the result of calling the
	            //    HasProperty internal method of O with argument Pk.
	            //   This step can be combined with c
	            // c. If kPresent is true, then
	            //    i.  Let elementK be the result of calling the Get
	            //        internal method of O with the argument ToString(k).
	            //   ii.  Let same be the result of applying the
	            //        Strict Equality Comparison Algorithm to
	            //        searchElement and elementK.
	            //  iii.  If same is true, return k.
	            if (k in O && O[k] === searchElement) {
	                return k;
	            }
	            k++;
	        }
	        return -1;
	    };
	}

/***/ },

/***/ 29:
/***/ function(module, exports) {

	/*
	 * angular-ui-bootstrap
	 * http://angular-ui.github.io/bootstrap/

	 * Version: 1.3.2 - 2016-04-14
	 * License: MIT
	 */angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
	angular.module("ui.bootstrap.tpls", ["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/backdrop.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]);
	angular.module('ui.bootstrap.collapse', [])

	  .directive('uibCollapse', ['$animate', '$q', '$parse', '$injector', function($animate, $q, $parse, $injector) {
	    var $animateCss = $injector.has('$animateCss') ? $injector.get('$animateCss') : null;
	    return {
	      link: function(scope, element, attrs) {
	        var expandingExpr = $parse(attrs.expanding),
	            expandedExpr = $parse(attrs.expanded),
	            collapsingExpr = $parse(attrs.collapsing),
	            collapsedExpr = $parse(attrs.collapsed);

	        if (!scope.$eval(attrs.uibCollapse)) {
	          element.addClass('in')
	            .addClass('collapse')
	            .attr('aria-expanded', true)
	            .attr('aria-hidden', false)
	            .css({height: 'auto'});
	        }

	        function expand() {
	          if (element.hasClass('collapse') && element.hasClass('in')) {
	            return;
	          }

	          $q.resolve(expandingExpr(scope))
	            .then(function() {
	              element.removeClass('collapse')
	                .addClass('collapsing')
	                .attr('aria-expanded', true)
	                .attr('aria-hidden', false);

	              if ($animateCss) {
	                $animateCss(element, {
	                  addClass: 'in',
	                  easing: 'ease',
	                  to: { height: element[0].scrollHeight + 'px' }
	                }).start()['finally'](expandDone);
	              } else {
	                $animate.addClass(element, 'in', {
	                  to: { height: element[0].scrollHeight + 'px' }
	                }).then(expandDone);
	              }
	            });
	        }

	        function expandDone() {
	          element.removeClass('collapsing')
	            .addClass('collapse')
	            .css({height: 'auto'});
	          expandedExpr(scope);
	        }

	        function collapse() {
	          if (!element.hasClass('collapse') && !element.hasClass('in')) {
	            return collapseDone();
	          }

	          $q.resolve(collapsingExpr(scope))
	            .then(function() {
	              element
	                // IMPORTANT: The height must be set before adding "collapsing" class.
	                // Otherwise, the browser attempts to animate from height 0 (in
	                // collapsing class) to the given height here.
	                .css({height: element[0].scrollHeight + 'px'})
	                // initially all panel collapse have the collapse class, this removal
	                // prevents the animation from jumping to collapsed state
	                .removeClass('collapse')
	                .addClass('collapsing')
	                .attr('aria-expanded', false)
	                .attr('aria-hidden', true);

	              if ($animateCss) {
	                $animateCss(element, {
	                  removeClass: 'in',
	                  to: {height: '0'}
	                }).start()['finally'](collapseDone);
	              } else {
	                $animate.removeClass(element, 'in', {
	                  to: {height: '0'}
	                }).then(collapseDone);
	              }
	            });
	        }

	        function collapseDone() {
	          element.css({height: '0'}); // Required so that collapse works when animation is disabled
	          element.removeClass('collapsing')
	            .addClass('collapse');
	          collapsedExpr(scope);
	        }

	        scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
	          if (shouldCollapse) {
	            collapse();
	          } else {
	            expand();
	          }
	        });
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

	.constant('uibAccordionConfig', {
	  closeOthers: true
	})

	.controller('UibAccordionController', ['$scope', '$attrs', 'uibAccordionConfig', function($scope, $attrs, accordionConfig) {
	  // This array keeps track of the accordion groups
	  this.groups = [];

	  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
	  this.closeOthers = function(openGroup) {
	    var closeOthers = angular.isDefined($attrs.closeOthers) ?
	      $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
	    if (closeOthers) {
	      angular.forEach(this.groups, function(group) {
	        if (group !== openGroup) {
	          group.isOpen = false;
	        }
	      });
	    }
	  };

	  // This is called from the accordion-group directive to add itself to the accordion
	  this.addGroup = function(groupScope) {
	    var that = this;
	    this.groups.push(groupScope);

	    groupScope.$on('$destroy', function(event) {
	      that.removeGroup(groupScope);
	    });
	  };

	  // This is called from the accordion-group directive when to remove itself
	  this.removeGroup = function(group) {
	    var index = this.groups.indexOf(group);
	    if (index !== -1) {
	      this.groups.splice(index, 1);
	    }
	  };
	}])

	// The accordion directive simply sets up the directive controller
	// and adds an accordion CSS class to itself element.
	.directive('uibAccordion', function() {
	  return {
	    controller: 'UibAccordionController',
	    controllerAs: 'accordion',
	    transclude: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/accordion/accordion.html';
	    }
	  };
	})

	// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
	.directive('uibAccordionGroup', function() {
	  return {
	    require: '^uibAccordion',         // We need this directive to be inside an accordion
	    transclude: true,              // It transcludes the contents of the directive into the template
	    replace: true,                // The element containing the directive will be replaced with the template
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/accordion/accordion-group.html';
	    },
	    scope: {
	      heading: '@',               // Interpolate the heading attribute onto this scope
	      panelClass: '@?',           // Ditto with panelClass
	      isOpen: '=?',
	      isDisabled: '=?'
	    },
	    controller: function() {
	      this.setHeading = function(element) {
	        this.heading = element;
	      };
	    },
	    link: function(scope, element, attrs, accordionCtrl) {
	      accordionCtrl.addGroup(scope);

	      scope.openClass = attrs.openClass || 'panel-open';
	      scope.panelClass = attrs.panelClass || 'panel-default';
	      scope.$watch('isOpen', function(value) {
	        element.toggleClass(scope.openClass, !!value);
	        if (value) {
	          accordionCtrl.closeOthers(scope);
	        }
	      });

	      scope.toggleOpen = function($event) {
	        if (!scope.isDisabled) {
	          if (!$event || $event.which === 32) {
	            scope.isOpen = !scope.isOpen;
	          }
	        }
	      };

	      var id = 'accordiongroup-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
	      scope.headingId = id + '-tab';
	      scope.panelId = id + '-panel';
	    }
	  };
	})

	// Use accordion-heading below an accordion-group to provide a heading containing HTML
	.directive('uibAccordionHeading', function() {
	  return {
	    transclude: true,   // Grab the contents to be used as the heading
	    template: '',       // In effect remove this element!
	    replace: true,
	    require: '^uibAccordionGroup',
	    link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
	      // Pass the heading to the accordion-group controller
	      // so that it can be transcluded into the right place in the template
	      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
	      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
	    }
	  };
	})

	// Use in the accordion-group template to indicate where you want the heading to be transcluded
	// You must provide the property on the accordion-group controller that will hold the transcluded element
	.directive('uibAccordionTransclude', function() {
	  return {
	    require: '^uibAccordionGroup',
	    link: function(scope, element, attrs, controller) {
	      scope.$watch(function() { return controller[attrs.uibAccordionTransclude]; }, function(heading) {
	        if (heading) {
	          var elem = angular.element(element[0].querySelector('[uib-accordion-header]'));
	          elem.html('');
	          elem.append(heading);
	        }
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.alert', [])

	.controller('UibAlertController', ['$scope', '$attrs', '$interpolate', '$timeout', function($scope, $attrs, $interpolate, $timeout) {
	  $scope.closeable = !!$attrs.close;

	  var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ?
	    $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;

	  if (dismissOnTimeout) {
	    $timeout(function() {
	      $scope.close();
	    }, parseInt(dismissOnTimeout, 10));
	  }
	}])

	.directive('uibAlert', function() {
	  return {
	    controller: 'UibAlertController',
	    controllerAs: 'alert',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/alert/alert.html';
	    },
	    transclude: true,
	    replace: true,
	    scope: {
	      type: '@',
	      close: '&'
	    }
	  };
	});

	angular.module('ui.bootstrap.buttons', [])

	.constant('uibButtonConfig', {
	  activeClass: 'active',
	  toggleEvent: 'click'
	})

	.controller('UibButtonsController', ['uibButtonConfig', function(buttonConfig) {
	  this.activeClass = buttonConfig.activeClass || 'active';
	  this.toggleEvent = buttonConfig.toggleEvent || 'click';
	}])

	.directive('uibBtnRadio', ['$parse', function($parse) {
	  return {
	    require: ['uibBtnRadio', 'ngModel'],
	    controller: 'UibButtonsController',
	    controllerAs: 'buttons',
	    link: function(scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
	      var uncheckableExpr = $parse(attrs.uibUncheckable);

	      element.find('input').css({display: 'none'});

	      //model -> UI
	      ngModelCtrl.$render = function() {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
	      };

	      //ui->model
	      element.on(buttonsCtrl.toggleEvent, function() {
	        if (attrs.disabled) {
	          return;
	        }

	        var isActive = element.hasClass(buttonsCtrl.activeClass);

	        if (!isActive || angular.isDefined(attrs.uncheckable)) {
	          scope.$apply(function() {
	            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
	            ngModelCtrl.$render();
	          });
	        }
	      });

	      if (attrs.uibUncheckable) {
	        scope.$watch(uncheckableExpr, function(uncheckable) {
	          attrs.$set('uncheckable', uncheckable ? '' : undefined);
	        });
	      }
	    }
	  };
	}])

	.directive('uibBtnCheckbox', function() {
	  return {
	    require: ['uibBtnCheckbox', 'ngModel'],
	    controller: 'UibButtonsController',
	    controllerAs: 'button',
	    link: function(scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      element.find('input').css({display: 'none'});

	      function getTrueValue() {
	        return getCheckboxValue(attrs.btnCheckboxTrue, true);
	      }

	      function getFalseValue() {
	        return getCheckboxValue(attrs.btnCheckboxFalse, false);
	      }

	      function getCheckboxValue(attribute, defaultValue) {
	        return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
	      }

	      //model -> UI
	      ngModelCtrl.$render = function() {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
	      };

	      //ui->model
	      element.on(buttonsCtrl.toggleEvent, function() {
	        if (attrs.disabled) {
	          return;
	        }

	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
	          ngModelCtrl.$render();
	        });
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.carousel', [])

	.controller('UibCarouselController', ['$scope', '$element', '$interval', '$timeout', '$animate', function($scope, $element, $interval, $timeout, $animate) {
	  var self = this,
	    slides = self.slides = $scope.slides = [],
	    SLIDE_DIRECTION = 'uib-slideDirection',
	    currentIndex = $scope.active,
	    currentInterval, isPlaying, bufferedTransitions = [];

	  var destroyed = false;

	  self.addSlide = function(slide, element) {
	    slides.push({
	      slide: slide,
	      element: element
	    });
	    slides.sort(function(a, b) {
	      return +a.slide.index - +b.slide.index;
	    });
	    //if this is the first slide or the slide is set to active, select it
	    if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
	      if ($scope.$currentTransition) {
	        $scope.$currentTransition = null;
	      }

	      currentIndex = slide.index;
	      $scope.active = slide.index;
	      setActive(currentIndex);
	      self.select(slides[findSlideIndex(slide)]);
	      if (slides.length === 1) {
	        $scope.play();
	      }
	    }
	  };

	  self.getCurrentIndex = function() {
	    for (var i = 0; i < slides.length; i++) {
	      if (slides[i].slide.index === currentIndex) {
	        return i;
	      }
	    }
	  };

	  self.next = $scope.next = function() {
	    var newIndex = (self.getCurrentIndex() + 1) % slides.length;

	    if (newIndex === 0 && $scope.noWrap()) {
	      $scope.pause();
	      return;
	    }

	    return self.select(slides[newIndex], 'next');
	  };

	  self.prev = $scope.prev = function() {
	    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

	    if ($scope.noWrap() && newIndex === slides.length - 1) {
	      $scope.pause();
	      return;
	    }

	    return self.select(slides[newIndex], 'prev');
	  };

	  self.removeSlide = function(slide) {
	    var index = findSlideIndex(slide);

	    var bufferedIndex = bufferedTransitions.indexOf(slides[index]);
	    if (bufferedIndex !== -1) {
	      bufferedTransitions.splice(bufferedIndex, 1);
	    }

	    //get the index of the slide inside the carousel
	    slides.splice(index, 1);
	    if (slides.length > 0 && currentIndex === index) {
	      if (index >= slides.length) {
	        currentIndex = slides.length - 1;
	        $scope.active = currentIndex;
	        setActive(currentIndex);
	        self.select(slides[slides.length - 1]);
	      } else {
	        currentIndex = index;
	        $scope.active = currentIndex;
	        setActive(currentIndex);
	        self.select(slides[index]);
	      }
	    } else if (currentIndex > index) {
	      currentIndex--;
	      $scope.active = currentIndex;
	    }

	    //clean the active value when no more slide
	    if (slides.length === 0) {
	      currentIndex = null;
	      $scope.active = null;
	      clearBufferedTransitions();
	    }
	  };

	  /* direction: "prev" or "next" */
	  self.select = $scope.select = function(nextSlide, direction) {
	    var nextIndex = findSlideIndex(nextSlide.slide);
	    //Decide direction if it's not given
	    if (direction === undefined) {
	      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
	    }
	    //Prevent this user-triggered transition from occurring if there is already one in progress
	    if (nextSlide.slide.index !== currentIndex &&
	      !$scope.$currentTransition) {
	      goNext(nextSlide.slide, nextIndex, direction);
	    } else if (nextSlide && nextSlide.slide.index !== currentIndex && $scope.$currentTransition) {
	      bufferedTransitions.push(slides[nextIndex]);
	    }
	  };

	  /* Allow outside people to call indexOf on slides array */
	  $scope.indexOfSlide = function(slide) {
	    return +slide.slide.index;
	  };

	  $scope.isActive = function(slide) {
	    return $scope.active === slide.slide.index;
	  };

	  $scope.isPrevDisabled = function() {
	    return $scope.active === 0 && $scope.noWrap();
	  };

	  $scope.isNextDisabled = function() {
	    return $scope.active === slides.length - 1 && $scope.noWrap();
	  };

	  $scope.pause = function() {
	    if (!$scope.noPause) {
	      isPlaying = false;
	      resetTimer();
	    }
	  };

	  $scope.play = function() {
	    if (!isPlaying) {
	      isPlaying = true;
	      restartTimer();
	    }
	  };

	  $scope.$on('$destroy', function() {
	    destroyed = true;
	    resetTimer();
	  });

	  $scope.$watch('noTransition', function(noTransition) {
	    $animate.enabled($element, !noTransition);
	  });

	  $scope.$watch('interval', restartTimer);

	  $scope.$watchCollection('slides', resetTransition);

	  $scope.$watch('active', function(index) {
	    if (angular.isNumber(index) && currentIndex !== index) {
	      for (var i = 0; i < slides.length; i++) {
	        if (slides[i].slide.index === index) {
	          index = i;
	          break;
	        }
	      }

	      var slide = slides[index];
	      if (slide) {
	        setActive(index);
	        self.select(slides[index]);
	        currentIndex = index;
	      }
	    }
	  });

	  function clearBufferedTransitions() {
	    while (bufferedTransitions.length) {
	      bufferedTransitions.shift();
	    }
	  }

	  function getSlideByIndex(index) {
	    for (var i = 0, l = slides.length; i < l; ++i) {
	      if (slides[i].index === index) {
	        return slides[i];
	      }
	    }
	  }

	  function setActive(index) {
	    for (var i = 0; i < slides.length; i++) {
	      slides[i].slide.active = i === index;
	    }
	  }

	  function goNext(slide, index, direction) {
	    if (destroyed) {
	      return;
	    }

	    angular.extend(slide, {direction: direction});
	    angular.extend(slides[currentIndex].slide || {}, {direction: direction});
	    if ($animate.enabled($element) && !$scope.$currentTransition &&
	      slides[index].element && self.slides.length > 1) {
	      slides[index].element.data(SLIDE_DIRECTION, slide.direction);
	      var currentIdx = self.getCurrentIndex();

	      if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
	        slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
	      }

	      $scope.$currentTransition = true;
	      $animate.on('addClass', slides[index].element, function(element, phase) {
	        if (phase === 'close') {
	          $scope.$currentTransition = null;
	          $animate.off('addClass', element);
	          if (bufferedTransitions.length) {
	            var nextSlide = bufferedTransitions.pop().slide;
	            var nextIndex = nextSlide.index;
	            var nextDirection = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
	            clearBufferedTransitions();

	            goNext(nextSlide, nextIndex, nextDirection);
	          }
	        }
	      });
	    }

	    $scope.active = slide.index;
	    currentIndex = slide.index;
	    setActive(index);

	    //every time you change slides, reset the timer
	    restartTimer();
	  }

	  function findSlideIndex(slide) {
	    for (var i = 0; i < slides.length; i++) {
	      if (slides[i].slide === slide) {
	        return i;
	      }
	    }
	  }

	  function resetTimer() {
	    if (currentInterval) {
	      $interval.cancel(currentInterval);
	      currentInterval = null;
	    }
	  }

	  function resetTransition(slides) {
	    if (!slides.length) {
	      $scope.$currentTransition = null;
	      clearBufferedTransitions();
	    }
	  }

	  function restartTimer() {
	    resetTimer();
	    var interval = +$scope.interval;
	    if (!isNaN(interval) && interval > 0) {
	      currentInterval = $interval(timerFn, interval);
	    }
	  }

	  function timerFn() {
	    var interval = +$scope.interval;
	    if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
	      $scope.next();
	    } else {
	      $scope.pause();
	    }
	  }
	}])

	.directive('uibCarousel', function() {
	  return {
	    transclude: true,
	    replace: true,
	    controller: 'UibCarouselController',
	    controllerAs: 'carousel',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/carousel/carousel.html';
	    },
	    scope: {
	      active: '=',
	      interval: '=',
	      noTransition: '=',
	      noPause: '=',
	      noWrap: '&'
	    }
	  };
	})

	.directive('uibSlide', function() {
	  return {
	    require: '^uibCarousel',
	    transclude: true,
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/carousel/slide.html';
	    },
	    scope: {
	      actual: '=?',
	      index: '=?'
	    },
	    link: function (scope, element, attrs, carouselCtrl) {
	      carouselCtrl.addSlide(scope, element);
	      //when the scope is destroyed then remove the slide from the current slides array
	      scope.$on('$destroy', function() {
	        carouselCtrl.removeSlide(scope);
	      });
	    }
	  };
	})

	.animation('.item', ['$animateCss',
	function($animateCss) {
	  var SLIDE_DIRECTION = 'uib-slideDirection';

	  function removeClass(element, className, callback) {
	    element.removeClass(className);
	    if (callback) {
	      callback();
	    }
	  }

	  return {
	    beforeAddClass: function(element, className, done) {
	      if (className === 'active') {
	        var stopped = false;
	        var direction = element.data(SLIDE_DIRECTION);
	        var directionClass = direction === 'next' ? 'left' : 'right';
	        var removeClassFn = removeClass.bind(this, element,
	          directionClass + ' ' + direction, done);
	        element.addClass(direction);

	        $animateCss(element, {addClass: directionClass})
	          .start()
	          .done(removeClassFn);

	        return function() {
	          stopped = true;
	        };
	      }
	      done();
	    },
	    beforeRemoveClass: function (element, className, done) {
	      if (className === 'active') {
	        var stopped = false;
	        var direction = element.data(SLIDE_DIRECTION);
	        var directionClass = direction === 'next' ? 'left' : 'right';
	        var removeClassFn = removeClass.bind(this, element, directionClass, done);

	        $animateCss(element, {addClass: directionClass})
	          .start()
	          .done(removeClassFn);

	        return function() {
	          stopped = true;
	        };
	      }
	      done();
	    }
	  };
	}]);

	angular.module('ui.bootstrap.dateparser', [])

	.service('uibDateParser', ['$log', '$locale', 'dateFilter', 'orderByFilter', function($log, $locale, dateFilter, orderByFilter) {
	  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
	  var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

	  var localeId;
	  var formatCodeToRegex;

	  this.init = function() {
	    localeId = $locale.id;

	    this.parsers = {};
	    this.formatters = {};

	    formatCodeToRegex = [
	      {
	        key: 'yyyy',
	        regex: '\\d{4}',
	        apply: function(value) { this.year = +value; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'yyyy');
	        }
	      },
	      {
	        key: 'yy',
	        regex: '\\d{2}',
	        apply: function(value) { value = +value; this.year = value < 69 ? value + 2000 : value + 1900; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'yy');
	        }
	      },
	      {
	        key: 'y',
	        regex: '\\d{1,4}',
	        apply: function(value) { this.year = +value; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'y');
	        }
	      },
	      {
	        key: 'M!',
	        regex: '0?[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) {
	          var value = date.getMonth();
	          if (/^[0-9]$/.test(value)) {
	            return dateFilter(date, 'MM');
	          }

	          return dateFilter(date, 'M');
	        }
	      },
	      {
	        key: 'MMMM',
	        regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
	        apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); },
	        formatter: function(date) { return dateFilter(date, 'MMMM'); }
	      },
	      {
	        key: 'MMM',
	        regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
	        apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); },
	        formatter: function(date) { return dateFilter(date, 'MMM'); }
	      },
	      {
	        key: 'MM',
	        regex: '0[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) { return dateFilter(date, 'MM'); }
	      },
	      {
	        key: 'M',
	        regex: '[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) { return dateFilter(date, 'M'); }
	      },
	      {
	        key: 'd!',
	        regex: '[0-2]?[0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) {
	          var value = date.getDate();
	          if (/^[1-9]$/.test(value)) {
	            return dateFilter(date, 'dd');
	          }

	          return dateFilter(date, 'd');
	        }
	      },
	      {
	        key: 'dd',
	        regex: '[0-2][0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) { return dateFilter(date, 'dd'); }
	      },
	      {
	        key: 'd',
	        regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) { return dateFilter(date, 'd'); }
	      },
	      {
	        key: 'EEEE',
	        regex: $locale.DATETIME_FORMATS.DAY.join('|'),
	        formatter: function(date) { return dateFilter(date, 'EEEE'); }
	      },
	      {
	        key: 'EEE',
	        regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
	        formatter: function(date) { return dateFilter(date, 'EEE'); }
	      },
	      {
	        key: 'HH',
	        regex: '(?:0|1)[0-9]|2[0-3]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'HH'); }
	      },
	      {
	        key: 'hh',
	        regex: '0[0-9]|1[0-2]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'hh'); }
	      },
	      {
	        key: 'H',
	        regex: '1?[0-9]|2[0-3]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'H'); }
	      },
	      {
	        key: 'h',
	        regex: '[0-9]|1[0-2]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'h'); }
	      },
	      {
	        key: 'mm',
	        regex: '[0-5][0-9]',
	        apply: function(value) { this.minutes = +value; },
	        formatter: function(date) { return dateFilter(date, 'mm'); }
	      },
	      {
	        key: 'm',
	        regex: '[0-9]|[1-5][0-9]',
	        apply: function(value) { this.minutes = +value; },
	        formatter: function(date) { return dateFilter(date, 'm'); }
	      },
	      {
	        key: 'sss',
	        regex: '[0-9][0-9][0-9]',
	        apply: function(value) { this.milliseconds = +value; },
	        formatter: function(date) { return dateFilter(date, 'sss'); }
	      },
	      {
	        key: 'ss',
	        regex: '[0-5][0-9]',
	        apply: function(value) { this.seconds = +value; },
	        formatter: function(date) { return dateFilter(date, 'ss'); }
	      },
	      {
	        key: 's',
	        regex: '[0-9]|[1-5][0-9]',
	        apply: function(value) { this.seconds = +value; },
	        formatter: function(date) { return dateFilter(date, 's'); }
	      },
	      {
	        key: 'a',
	        regex: $locale.DATETIME_FORMATS.AMPMS.join('|'),
	        apply: function(value) {
	          if (this.hours === 12) {
	            this.hours = 0;
	          }

	          if (value === 'PM') {
	            this.hours += 12;
	          }
	        },
	        formatter: function(date) { return dateFilter(date, 'a'); }
	      },
	      {
	        key: 'Z',
	        regex: '[+-]\\d{4}',
	        apply: function(value) {
	          var matches = value.match(/([+-])(\d{2})(\d{2})/),
	            sign = matches[1],
	            hours = matches[2],
	            minutes = matches[3];
	          this.hours += toInt(sign + hours);
	          this.minutes += toInt(sign + minutes);
	        },
	        formatter: function(date) {
	          return dateFilter(date, 'Z');
	        }
	      },
	      {
	        key: 'ww',
	        regex: '[0-4][0-9]|5[0-3]',
	        formatter: function(date) { return dateFilter(date, 'ww'); }
	      },
	      {
	        key: 'w',
	        regex: '[0-9]|[1-4][0-9]|5[0-3]',
	        formatter: function(date) { return dateFilter(date, 'w'); }
	      },
	      {
	        key: 'GGGG',
	        regex: $locale.DATETIME_FORMATS.ERANAMES.join('|').replace(/\s/g, '\\s'),
	        formatter: function(date) { return dateFilter(date, 'GGGG'); }
	      },
	      {
	        key: 'GGG',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'GGG'); }
	      },
	      {
	        key: 'GG',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'GG'); }
	      },
	      {
	        key: 'G',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'G'); }
	      }
	    ];
	  };

	  this.init();

	  function createParser(format, func) {
	    var map = [], regex = format.split('');

	    // check for literal values
	    var quoteIndex = format.indexOf('\'');
	    if (quoteIndex > -1) {
	      var inLiteral = false;
	      format = format.split('');
	      for (var i = quoteIndex; i < format.length; i++) {
	        if (inLiteral) {
	          if (format[i] === '\'') {
	            if (i + 1 < format.length && format[i+1] === '\'') { // escaped single quote
	              format[i+1] = '$';
	              regex[i+1] = '';
	            } else { // end of literal
	              regex[i] = '';
	              inLiteral = false;
	            }
	          }
	          format[i] = '$';
	        } else {
	          if (format[i] === '\'') { // start of literal
	            format[i] = '$';
	            regex[i] = '';
	            inLiteral = true;
	          }
	        }
	      }

	      format = format.join('');
	    }

	    angular.forEach(formatCodeToRegex, function(data) {
	      var index = format.indexOf(data.key);

	      if (index > -1) {
	        format = format.split('');

	        regex[index] = '(' + data.regex + ')';
	        format[index] = '$'; // Custom symbol to define consumed part of format
	        for (var i = index + 1, n = index + data.key.length; i < n; i++) {
	          regex[i] = '';
	          format[i] = '$';
	        }
	        format = format.join('');

	        map.push({
	          index: index,
	          key: data.key,
	          apply: data[func],
	          matcher: data.regex
	        });
	      }
	    });

	    return {
	      regex: new RegExp('^' + regex.join('') + '$'),
	      map: orderByFilter(map, 'index')
	    };
	  }

	  this.filter = function(date, format) {
	    if (!angular.isDate(date) || isNaN(date) || !format) {
	      return '';
	    }

	    format = $locale.DATETIME_FORMATS[format] || format;

	    if ($locale.id !== localeId) {
	      this.init();
	    }

	    if (!this.formatters[format]) {
	      this.formatters[format] = createParser(format, 'formatter');
	    }

	    var parser = this.formatters[format],
	      map = parser.map;

	    var _format = format;

	    return map.reduce(function(str, mapper, i) {
	      var match = _format.match(new RegExp('(.*)' + mapper.key));
	      if (match && angular.isString(match[1])) {
	        str += match[1];
	        _format = _format.replace(match[1] + mapper.key, '');
	      }

	      var endStr = i === map.length - 1 ? _format : '';

	      if (mapper.apply) {
	        return str + mapper.apply.call(null, date) + endStr;
	      }

	      return str + endStr;
	    }, '');
	  };

	  this.parse = function(input, format, baseDate) {
	    if (!angular.isString(input) || !format) {
	      return input;
	    }

	    format = $locale.DATETIME_FORMATS[format] || format;
	    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

	    if ($locale.id !== localeId) {
	      this.init();
	    }

	    if (!this.parsers[format]) {
	      this.parsers[format] = createParser(format, 'apply');
	    }

	    var parser = this.parsers[format],
	        regex = parser.regex,
	        map = parser.map,
	        results = input.match(regex),
	        tzOffset = false;
	    if (results && results.length) {
	      var fields, dt;
	      if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
	        fields = {
	          year: baseDate.getFullYear(),
	          month: baseDate.getMonth(),
	          date: baseDate.getDate(),
	          hours: baseDate.getHours(),
	          minutes: baseDate.getMinutes(),
	          seconds: baseDate.getSeconds(),
	          milliseconds: baseDate.getMilliseconds()
	        };
	      } else {
	        if (baseDate) {
	          $log.warn('dateparser:', 'baseDate is not a valid date');
	        }
	        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };
	      }

	      for (var i = 1, n = results.length; i < n; i++) {
	        var mapper = map[i - 1];
	        if (mapper.matcher === 'Z') {
	          tzOffset = true;
	        }

	        if (mapper.apply) {
	          mapper.apply.call(fields, results[i]);
	        }
	      }

	      var datesetter = tzOffset ? Date.prototype.setUTCFullYear :
	        Date.prototype.setFullYear;
	      var timesetter = tzOffset ? Date.prototype.setUTCHours :
	        Date.prototype.setHours;

	      if (isValid(fields.year, fields.month, fields.date)) {
	        if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
	          dt = new Date(baseDate);
	          datesetter.call(dt, fields.year, fields.month, fields.date);
	          timesetter.call(dt, fields.hours, fields.minutes,
	            fields.seconds, fields.milliseconds);
	        } else {
	          dt = new Date(0);
	          datesetter.call(dt, fields.year, fields.month, fields.date);
	          timesetter.call(dt, fields.hours || 0, fields.minutes || 0,
	            fields.seconds || 0, fields.milliseconds || 0);
	        }
	      }

	      return dt;
	    }
	  };

	  // Check if date is valid for specific month (and year for February).
	  // Month: 0 = Jan, 1 = Feb, etc
	  function isValid(year, month, date) {
	    if (date < 1) {
	      return false;
	    }

	    if (month === 1 && date > 28) {
	      return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
	    }

	    if (month === 3 || month === 5 || month === 8 || month === 10) {
	      return date < 31;
	    }

	    return true;
	  }

	  function toInt(str) {
	    return parseInt(str, 10);
	  }

	  this.toTimezone = toTimezone;
	  this.fromTimezone = fromTimezone;
	  this.timezoneToOffset = timezoneToOffset;
	  this.addDateMinutes = addDateMinutes;
	  this.convertTimezoneToLocal = convertTimezoneToLocal;

	  function toTimezone(date, timezone) {
	    return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
	  }

	  function fromTimezone(date, timezone) {
	    return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
	  }

	  //https://github.com/angular/angular.js/blob/4daafd3dbe6a80d578f5a31df1bb99c77559543e/src/Angular.js#L1207
	  function timezoneToOffset(timezone, fallback) {
	    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	  }

	  function addDateMinutes(date, minutes) {
	    date = new Date(date.getTime());
	    date.setMinutes(date.getMinutes() + minutes);
	    return date;
	  }

	  function convertTimezoneToLocal(date, timezone, reverse) {
	    reverse = reverse ? -1 : 1;
	    var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
	    return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));
	  }
	}]);

	// Avoiding use of ng-class as it creates a lot of watchers when a class is to be applied to
	// at most one element.
	angular.module('ui.bootstrap.isClass', [])
	.directive('uibIsClass', [
	         '$animate',
	function ($animate) {
	  //                    11111111          22222222
	  var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
	  //                    11111111           22222222
	  var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;

	  var dataPerTracked = {};

	  return {
	    restrict: 'A',
	    compile: function(tElement, tAttrs) {
	      var linkedScopes = [];
	      var instances = [];
	      var expToData = {};
	      var lastActivated = null;
	      var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
	      var onExp = onExpMatches[2];
	      var expsStr = onExpMatches[1];
	      var exps = expsStr.split(',');

	      return linkFn;

	      function linkFn(scope, element, attrs) {
	        linkedScopes.push(scope);
	        instances.push({
	          scope: scope,
	          element: element
	        });

	        exps.forEach(function(exp, k) {
	          addForExp(exp, scope);
	        });

	        scope.$on('$destroy', removeScope);
	      }

	      function addForExp(exp, scope) {
	        var matches = exp.match(IS_REGEXP);
	        var clazz = scope.$eval(matches[1]);
	        var compareWithExp = matches[2];
	        var data = expToData[exp];
	        if (!data) {
	          var watchFn = function(compareWithVal) {
	            var newActivated = null;
	            instances.some(function(instance) {
	              var thisVal = instance.scope.$eval(onExp);
	              if (thisVal === compareWithVal) {
	                newActivated = instance;
	                return true;
	              }
	            });
	            if (data.lastActivated !== newActivated) {
	              if (data.lastActivated) {
	                $animate.removeClass(data.lastActivated.element, clazz);
	              }
	              if (newActivated) {
	                $animate.addClass(newActivated.element, clazz);
	              }
	              data.lastActivated = newActivated;
	            }
	          };
	          expToData[exp] = data = {
	            lastActivated: null,
	            scope: scope,
	            watchFn: watchFn,
	            compareWithExp: compareWithExp,
	            watcher: scope.$watch(compareWithExp, watchFn)
	          };
	        }
	        data.watchFn(scope.$eval(compareWithExp));
	      }

	      function removeScope(e) {
	        var removedScope = e.targetScope;
	        var index = linkedScopes.indexOf(removedScope);
	        linkedScopes.splice(index, 1);
	        instances.splice(index, 1);
	        if (linkedScopes.length) {
	          var newWatchScope = linkedScopes[0];
	          angular.forEach(expToData, function(data) {
	            if (data.scope === removedScope) {
	              data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
	              data.scope = newWatchScope;
	            }
	          });
	        } else {
	          expToData = {};
	        }
	      }
	    }
	  };
	}]);
	angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.isClass'])

	.value('$datepickerSuppressError', false)

	.value('$datepickerLiteralWarning', true)

	.constant('uibDatepickerConfig', {
	  datepickerMode: 'day',
	  formatDay: 'dd',
	  formatMonth: 'MMMM',
	  formatYear: 'yyyy',
	  formatDayHeader: 'EEE',
	  formatDayTitle: 'MMMM yyyy',
	  formatMonthTitle: 'yyyy',
	  maxDate: null,
	  maxMode: 'year',
	  minDate: null,
	  minMode: 'day',
	  ngModelOptions: {},
	  shortcutPropagation: false,
	  showWeeks: true,
	  yearColumns: 5,
	  yearRows: 4
	})

	.controller('UibDatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$locale', '$log', 'dateFilter', 'uibDatepickerConfig', '$datepickerLiteralWarning', '$datepickerSuppressError', 'uibDateParser',
	  function($scope, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
	  var self = this,
	      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl;
	      ngModelOptions = {},
	      watchListeners = [],
	      optionsUsed = !!$attrs.datepickerOptions;

	  if (!$scope.datepickerOptions) {
	    $scope.datepickerOptions = {};
	  }

	  // Modes chain
	  this.modes = ['day', 'month', 'year'];

	  [
	    'customClass',
	    'dateDisabled',
	    'datepickerMode',
	    'formatDay',
	    'formatDayHeader',
	    'formatDayTitle',
	    'formatMonth',
	    'formatMonthTitle',
	    'formatYear',
	    'maxDate',
	    'maxMode',
	    'minDate',
	    'minMode',
	    'showWeeks',
	    'shortcutPropagation',
	    'startingDay',
	    'yearColumns',
	    'yearRows'
	  ].forEach(function(key) {
	    switch (key) {
	      case 'customClass':
	      case 'dateDisabled':
	        $scope[key] = $scope.datepickerOptions[key] || angular.noop;
	        break;
	      case 'datepickerMode':
	        $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ?
	          $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
	        break;
	      case 'formatDay':
	      case 'formatDayHeader':
	      case 'formatDayTitle':
	      case 'formatMonth':
	      case 'formatMonthTitle':
	      case 'formatYear':
	        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
	          $interpolate($scope.datepickerOptions[key])($scope.$parent) :
	          datepickerConfig[key];
	        break;
	      case 'showWeeks':
	      case 'shortcutPropagation':
	      case 'yearColumns':
	      case 'yearRows':
	        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
	          $scope.datepickerOptions[key] : datepickerConfig[key];
	        break;
	      case 'startingDay':
	        if (angular.isDefined($scope.datepickerOptions.startingDay)) {
	          self.startingDay = $scope.datepickerOptions.startingDay;
	        } else if (angular.isNumber(datepickerConfig.startingDay)) {
	          self.startingDay = datepickerConfig.startingDay;
	        } else {
	          self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
	        }

	        break;
	      case 'maxDate':
	      case 'minDate':
	        $scope.$watch('datepickerOptions.' + key, function(value) {
	          if (value) {
	            if (angular.isDate(value)) {
	              self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.timezone);
	            } else {
	              if ($datepickerLiteralWarning) {
	                $log.warn('Literal date support has been deprecated, please switch to date object usage');
	              }

	              self[key] = new Date(dateFilter(value, 'medium'));
	            }
	          } else {
	            self[key] = datepickerConfig[key] ?
	              dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.timezone) :
	              null;
	          }

	          self.refreshView();
	        });

	        break;
	      case 'maxMode':
	      case 'minMode':
	        if ($scope.datepickerOptions[key]) {
	          $scope.$watch(function() { return $scope.datepickerOptions[key]; }, function(value) {
	            self[key] = $scope[key] = angular.isDefined(value) ? value : datepickerOptions[key];
	            if (key === 'minMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) ||
	              key === 'maxMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
	              $scope.datepickerMode = self[key];
	              $scope.datepickerOptions.datepickerMode = self[key];
	            }
	          });
	        } else {
	          self[key] = $scope[key] = datepickerConfig[key] || null;
	        }

	        break;
	    }
	  });

	  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

	  $scope.disabled = angular.isDefined($attrs.disabled) || false;
	  if (angular.isDefined($attrs.ngDisabled)) {
	    watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
	      $scope.disabled = disabled;
	      self.refreshView();
	    }));
	  }

	  $scope.isActive = function(dateObject) {
	    if (self.compare(dateObject.date, self.activeDate) === 0) {
	      $scope.activeDateId = dateObject.uid;
	      return true;
	    }
	    return false;
	  };

	  this.init = function(ngModelCtrl_) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelOptions = ngModelCtrl_.$options || datepickerConfig.ngModelOptions;
	    if ($scope.datepickerOptions.initDate) {
	      self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.timezone) || new Date();
	      $scope.$watch('datepickerOptions.initDate', function(initDate) {
	        if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
	          self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.timezone);
	          self.refreshView();
	        }
	      });
	    } else {
	      self.activeDate = new Date();
	    }

	    this.activeDate = ngModelCtrl.$modelValue ?
	      dateParser.fromTimezone(new Date(ngModelCtrl.$modelValue), ngModelOptions.timezone) :
	      dateParser.fromTimezone(new Date(), ngModelOptions.timezone);

	    ngModelCtrl.$render = function() {
	      self.render();
	    };
	  };

	  this.render = function() {
	    if (ngModelCtrl.$viewValue) {
	      var date = new Date(ngModelCtrl.$viewValue),
	          isValid = !isNaN(date);

	      if (isValid) {
	        this.activeDate = dateParser.fromTimezone(date, ngModelOptions.timezone);
	      } else if (!$datepickerSuppressError) {
	        $log.error('Datepicker directive: "ng-model" value must be a Date object');
	      }
	    }
	    this.refreshView();
	  };

	  this.refreshView = function() {
	    if (this.element) {
	      $scope.selectedDt = null;
	      this._refreshView();
	      if ($scope.activeDt) {
	        $scope.activeDateId = $scope.activeDt.uid;
	      }

	      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
	      date = dateParser.fromTimezone(date, ngModelOptions.timezone);
	      ngModelCtrl.$setValidity('dateDisabled', !date ||
	        this.element && !this.isDisabled(date));
	    }
	  };

	  this.createDateObject = function(date, format) {
	    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
	    model = dateParser.fromTimezone(model, ngModelOptions.timezone);
	    var today = new Date();
	    today = dateParser.fromTimezone(today, ngModelOptions.timezone);
	    var time = this.compare(date, today);
	    var dt = {
	      date: date,
	      label: dateParser.filter(date, format),
	      selected: model && this.compare(date, model) === 0,
	      disabled: this.isDisabled(date),
	      past: time < 0,
	      current: time === 0,
	      future: time > 0,
	      customClass: this.customClass(date) || null
	    };

	    if (model && this.compare(date, model) === 0) {
	      $scope.selectedDt = dt;
	    }

	    if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
	      $scope.activeDt = dt;
	    }

	    return dt;
	  };

	  this.isDisabled = function(date) {
	    return $scope.disabled ||
	      this.minDate && this.compare(date, this.minDate) < 0 ||
	      this.maxDate && this.compare(date, this.maxDate) > 0 ||
	      $scope.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode});
	  };

	  this.customClass = function(date) {
	    return $scope.customClass({date: date, mode: $scope.datepickerMode});
	  };

	  // Split array into smaller arrays
	  this.split = function(arr, size) {
	    var arrays = [];
	    while (arr.length > 0) {
	      arrays.push(arr.splice(0, size));
	    }
	    return arrays;
	  };

	  $scope.select = function(date) {
	    if ($scope.datepickerMode === self.minMode) {
	      var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.timezone) : new Date(0, 0, 0, 0, 0, 0, 0);
	      dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	      dt = dateParser.toTimezone(dt, ngModelOptions.timezone);
	      ngModelCtrl.$setViewValue(dt);
	      ngModelCtrl.$render();
	    } else {
	      self.activeDate = date;
	      setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);

	      $scope.$emit('uib:datepicker.mode');
	    }

	    $scope.$broadcast('uib:datepicker.focus');
	  };

	  $scope.move = function(direction) {
	    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
	        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
	    self.activeDate.setFullYear(year, month, 1);
	    self.refreshView();
	  };

	  $scope.toggleMode = function(direction) {
	    direction = direction || 1;

	    if ($scope.datepickerMode === self.maxMode && direction === 1 ||
	      $scope.datepickerMode === self.minMode && direction === -1) {
	      return;
	    }

	    setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);

	    $scope.$emit('uib:datepicker.mode');
	  };

	  // Key event mapper
	  $scope.keys = { 13: 'enter', 32: 'space', 33: 'pageup', 34: 'pagedown', 35: 'end', 36: 'home', 37: 'left', 38: 'up', 39: 'right', 40: 'down' };

	  var focusElement = function() {
	    self.element[0].focus();
	  };

	  // Listen for focus requests from popup directive
	  $scope.$on('uib:datepicker.focus', focusElement);

	  $scope.keydown = function(evt) {
	    var key = $scope.keys[evt.which];

	    if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
	      return;
	    }

	    evt.preventDefault();
	    if (!self.shortcutPropagation) {
	      evt.stopPropagation();
	    }

	    if (key === 'enter' || key === 'space') {
	      if (self.isDisabled(self.activeDate)) {
	        return; // do nothing
	      }
	      $scope.select(self.activeDate);
	    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
	      $scope.toggleMode(key === 'up' ? 1 : -1);
	    } else {
	      self.handleKeyDown(key, evt);
	      self.refreshView();
	    }
	  };

	  $scope.$on('$destroy', function() {
	    //Clear all watch listeners on destroy
	    while (watchListeners.length) {
	      watchListeners.shift()();
	    }
	  });

	  function setMode(mode) {
	    $scope.datepickerMode = mode;
	    $scope.datepickerOptions.datepickerMode = mode;
	  }
	}])

	.controller('UibDaypickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

	  this.step = { months: 1 };
	  this.element = $element;
	  function getDaysInMonth(year, month) {
	    return month === 1 && year % 4 === 0 &&
	      (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
	  }

	  this.init = function(ctrl) {
	    angular.extend(ctrl, this);
	    scope.showWeeks = ctrl.showWeeks;
	    ctrl.refreshView();
	  };

	  this.getDates = function(startDate, n) {
	    var dates = new Array(n), current = new Date(startDate), i = 0, date;
	    while (i < n) {
	      date = new Date(current);
	      dates[i++] = date;
	      current.setDate(current.getDate() + 1);
	    }
	    return dates;
	  };

	  this._refreshView = function() {
	    var year = this.activeDate.getFullYear(),
	      month = this.activeDate.getMonth(),
	      firstDayOfMonth = new Date(this.activeDate);

	    firstDayOfMonth.setFullYear(year, month, 1);

	    var difference = this.startingDay - firstDayOfMonth.getDay(),
	      numDisplayedFromPreviousMonth = difference > 0 ?
	        7 - difference : - difference,
	      firstDate = new Date(firstDayOfMonth);

	    if (numDisplayedFromPreviousMonth > 0) {
	      firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
	    }

	    // 42 is the number of days on a six-week calendar
	    var days = this.getDates(firstDate, 42);
	    for (var i = 0; i < 42; i ++) {
	      days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
	        secondary: days[i].getMonth() !== month,
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.labels = new Array(7);
	    for (var j = 0; j < 7; j++) {
	      scope.labels[j] = {
	        abbr: dateFilter(days[j].date, this.formatDayHeader),
	        full: dateFilter(days[j].date, 'EEEE')
	      };
	    }

	    scope.title = dateFilter(this.activeDate, this.formatDayTitle);
	    scope.rows = this.split(days, 7);

	    if (scope.showWeeks) {
	      scope.weekNumbers = [];
	      var thursdayIndex = (4 + 7 - this.startingDay) % 7,
	          numWeeks = scope.rows.length;
	      for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
	        scope.weekNumbers.push(
	          getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
	      }
	    }
	  };

	  this.compare = function(date1, date2) {
	    var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
	    var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
	    _date1.setFullYear(date1.getFullYear());
	    _date2.setFullYear(date2.getFullYear());
	    return _date1 - _date2;
	  };

	  function getISO8601WeekNumber(date) {
	    var checkDate = new Date(date);
	    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
	    var time = checkDate.getTime();
	    checkDate.setMonth(0); // Compare with Jan 1
	    checkDate.setDate(1);
	    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	  }

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getDate();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - 7;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + 7;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      var month = this.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
	      this.activeDate.setMonth(month, 1);
	      date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
	    } else if (key === 'home') {
	      date = 1;
	    } else if (key === 'end') {
	      date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
	    }
	    this.activeDate.setDate(date);
	  };
	}])

	.controller('UibMonthpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  this.step = { years: 1 };
	  this.element = $element;

	  this.init = function(ctrl) {
	    angular.extend(ctrl, this);
	    ctrl.refreshView();
	  };

	  this._refreshView = function() {
	    var months = new Array(12),
	        year = this.activeDate.getFullYear(),
	        date;

	    for (var i = 0; i < 12; i++) {
	      date = new Date(this.activeDate);
	      date.setFullYear(year, i, 1);
	      months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
	    scope.rows = this.split(months, 3);
	  };

	  this.compare = function(date1, date2) {
	    var _date1 = new Date(date1.getFullYear(), date1.getMonth());
	    var _date2 = new Date(date2.getFullYear(), date2.getMonth());
	    _date1.setFullYear(date1.getFullYear());
	    _date2.setFullYear(date2.getFullYear());
	    return _date1 - _date2;
	  };

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getMonth();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - 3;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + 3;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      var year = this.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
	      this.activeDate.setFullYear(year);
	    } else if (key === 'home') {
	      date = 0;
	    } else if (key === 'end') {
	      date = 11;
	    }
	    this.activeDate.setMonth(date);
	  };
	}])

	.controller('UibYearpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  var columns, range;
	  this.element = $element;

	  function getStartingYear(year) {
	    return parseInt((year - 1) / range, 10) * range + 1;
	  }

	  this.yearpickerInit = function() {
	    columns = this.yearColumns;
	    range = this.yearRows * columns;
	    this.step = { years: range };
	  };

	  this._refreshView = function() {
	    var years = new Array(range), date;

	    for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
	      date = new Date(this.activeDate);
	      date.setFullYear(start + i, 0, 1);
	      years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.title = [years[0].label, years[range - 1].label].join(' - ');
	    scope.rows = this.split(years, columns);
	    scope.columns = columns;
	  };

	  this.compare = function(date1, date2) {
	    return date1.getFullYear() - date2.getFullYear();
	  };

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getFullYear();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - columns;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + columns;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      date += (key === 'pageup' ? - 1 : 1) * range;
	    } else if (key === 'home') {
	      date = getStartingYear(this.activeDate.getFullYear());
	    } else if (key === 'end') {
	      date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
	    }
	    this.activeDate.setFullYear(date);
	  };
	}])

	.directive('uibDatepicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/datepicker.html';
	    },
	    scope: {
	      datepickerOptions: '=?'
	    },
	    require: ['uibDatepicker', '^ngModel'],
	    controller: 'UibDatepickerController',
	    controllerAs: 'datepicker',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      datepickerCtrl.init(ngModelCtrl);
	    }
	  };
	})

	.directive('uibDaypicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/day.html';
	    },
	    require: ['^uibDatepicker', 'uibDaypicker'],
	    controller: 'UibDaypickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0],
	        daypickerCtrl = ctrls[1];

	      daypickerCtrl.init(datepickerCtrl);
	    }
	  };
	})

	.directive('uibMonthpicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/month.html';
	    },
	    require: ['^uibDatepicker', 'uibMonthpicker'],
	    controller: 'UibMonthpickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0],
	        monthpickerCtrl = ctrls[1];

	      monthpickerCtrl.init(datepickerCtrl);
	    }
	  };
	})

	.directive('uibYearpicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/year.html';
	    },
	    require: ['^uibDatepicker', 'uibYearpicker'],
	    controller: 'UibYearpickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var ctrl = ctrls[0];
	      angular.extend(ctrl, ctrls[1]);
	      ctrl.yearpickerInit();

	      ctrl.refreshView();
	    }
	  };
	});

	angular.module('ui.bootstrap.position', [])

	/**
	 * A set of utility methods for working with the DOM.
	 * It is meant to be used where we need to absolute-position elements in
	 * relation to another element (this is the case for tooltips, popovers,
	 * typeahead suggestions etc.).
	 */
	  .factory('$uibPosition', ['$document', '$window', function($document, $window) {
	    /**
	     * Used by scrollbarWidth() function to cache scrollbar's width.
	     * Do not access this variable directly, use scrollbarWidth() instead.
	     */
	    var SCROLLBAR_WIDTH;
	    /**
	     * scrollbar on body and html element in IE and Edge overlay
	     * content and should be considered 0 width.
	     */
	    var BODY_SCROLLBAR_WIDTH;
	    var OVERFLOW_REGEX = {
	      normal: /(auto|scroll)/,
	      hidden: /(auto|scroll|hidden)/
	    };
	    var PLACEMENT_REGEX = {
	      auto: /\s?auto?\s?/i,
	      primary: /^(top|bottom|left|right)$/,
	      secondary: /^(top|bottom|left|right|center)$/,
	      vertical: /^(top|bottom)$/
	    };
	    var BODY_REGEX = /(HTML|BODY)/;

	    return {

	      /**
	       * Provides a raw DOM element from a jQuery/jQLite element.
	       *
	       * @param {element} elem - The element to convert.
	       *
	       * @returns {element} A HTML element.
	       */
	      getRawNode: function(elem) {
	        return elem.nodeName ? elem : elem[0] || elem;
	      },

	      /**
	       * Provides a parsed number for a style property.  Strips
	       * units and casts invalid numbers to 0.
	       *
	       * @param {string} value - The style value to parse.
	       *
	       * @returns {number} A valid number.
	       */
	      parseStyle: function(value) {
	        value = parseFloat(value);
	        return isFinite(value) ? value : 0;
	      },

	      /**
	       * Provides the closest positioned ancestor.
	       *
	       * @param {element} element - The element to get the offest parent for.
	       *
	       * @returns {element} The closest positioned ancestor.
	       */
	      offsetParent: function(elem) {
	        elem = this.getRawNode(elem);

	        var offsetParent = elem.offsetParent || $document[0].documentElement;

	        function isStaticPositioned(el) {
	          return ($window.getComputedStyle(el).position || 'static') === 'static';
	        }

	        while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
	          offsetParent = offsetParent.offsetParent;
	        }

	        return offsetParent || $document[0].documentElement;
	      },

	      /**
	       * Provides the scrollbar width, concept from TWBS measureScrollbar()
	       * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
	       * In IE and Edge, scollbar on body and html element overlay and should
	       * return a width of 0.
	       *
	       * @returns {number} The width of the browser scollbar.
	       */
	      scrollbarWidth: function(isBody) {
	        if (isBody) {
	          if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
	            var bodyElem = $document.find('body');
	            bodyElem.addClass('uib-position-body-scrollbar-measure');
	            BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
	            BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
	            bodyElem.removeClass('uib-position-body-scrollbar-measure');
	          }
	          return BODY_SCROLLBAR_WIDTH;
	        }

	        if (angular.isUndefined(SCROLLBAR_WIDTH)) {
	          var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
	          $document.find('body').append(scrollElem);
	          SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
	          SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
	          scrollElem.remove();
	        }

	        return SCROLLBAR_WIDTH;
	      },

	      /**
	       * Provides the padding required on an element to replace the scrollbar.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**scrollbarWidth**: the width of the scrollbar</li>
	       *     <li>**widthOverflow**: whether the the width is overflowing</li>
	       *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
	       *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
	       *     <li>**heightOverflow**: whether the the height is overflowing</li>
	       *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
	       *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
	       *   </ul>
	       */
	      scrollbarPadding: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemStyle = $window.getComputedStyle(elem);
	        var paddingRight = this.parseStyle(elemStyle.paddingRight);
	        var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
	        var scrollParent = this.scrollParent(elem, false, true);
	        var scrollbarWidth = this.scrollbarWidth(scrollParent, BODY_REGEX.test(scrollParent.tagName));

	        return {
	          scrollbarWidth: scrollbarWidth,
	          widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
	          right: paddingRight + scrollbarWidth,
	          originalRight: paddingRight,
	          heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
	          bottom: paddingBottom + scrollbarWidth,
	          originalBottom: paddingBottom
	         };
	      },

	      /**
	       * Checks to see if the element is scrollable.
	       *
	       * @param {element} elem - The element to check.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       *
	       * @returns {boolean} Whether the element is scrollable.
	       */
	      isScrollable: function(elem, includeHidden) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var elemStyle = $window.getComputedStyle(elem);
	        return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
	      },

	      /**
	       * Provides the closest scrollable ancestor.
	       * A port of the jQuery UI scrollParent method:
	       * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
	       *
	       * @param {element} elem - The element to find the scroll parent of.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       * @param {boolean=} [includeSelf=false] - Should the element being passed be
	       * included in the scrollable llokup.
	       *
	       * @returns {element} A HTML element.
	       */
	      scrollParent: function(elem, includeHidden, includeSelf) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var documentEl = $document[0].documentElement;
	        var elemStyle = $window.getComputedStyle(elem);
	        if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
	          return elem;
	        }
	        var excludeStatic = elemStyle.position === 'absolute';
	        var scrollParent = elem.parentElement || documentEl;

	        if (scrollParent === documentEl || elemStyle.position === 'fixed') {
	          return documentEl;
	        }

	        while (scrollParent.parentElement && scrollParent !== documentEl) {
	          var spStyle = $window.getComputedStyle(scrollParent);
	          if (excludeStatic && spStyle.position !== 'static') {
	            excludeStatic = false;
	          }

	          if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
	            break;
	          }
	          scrollParent = scrollParent.parentElement;
	        }

	        return scrollParent;
	      },

	      /**
	       * Provides read-only equivalent of jQuery's position function:
	       * http://api.jquery.com/position/ - distance to closest positioned
	       * ancestor.  Does not account for margins by default like jQuery position.
	       *
	       * @param {element} elem - The element to caclulate the position on.
	       * @param {boolean=} [includeMargins=false] - Should margins be accounted
	       * for, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of offset parent</li>
	       *     <li>**left**: distance to left edge of offset parent</li>
	       *   </ul>
	       */
	      position: function(elem, includeMagins) {
	        elem = this.getRawNode(elem);

	        var elemOffset = this.offset(elem);
	        if (includeMagins) {
	          var elemStyle = $window.getComputedStyle(elem);
	          elemOffset.top -= this.parseStyle(elemStyle.marginTop);
	          elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
	        }
	        var parent = this.offsetParent(elem);
	        var parentOffset = {top: 0, left: 0};

	        if (parent !== $document[0].documentElement) {
	          parentOffset = this.offset(parent);
	          parentOffset.top += parent.clientTop - parent.scrollTop;
	          parentOffset.left += parent.clientLeft - parent.scrollLeft;
	        }

	        return {
	          width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
	          top: Math.round(elemOffset.top - parentOffset.top),
	          left: Math.round(elemOffset.left - parentOffset.left)
	        };
	      },

	      /**
	       * Provides read-only equivalent of jQuery's offset function:
	       * http://api.jquery.com/offset/ - distance to viewport.  Does
	       * not account for borders, margins, or padding on the body
	       * element.
	       *
	       * @param {element} elem - The element to calculate the offset on.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of viewport</li>
	       *     <li>**right**: distance to bottom edge of viewport</li>
	       *   </ul>
	       */
	      offset: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemBCR = elem.getBoundingClientRect();
	        return {
	          width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
	          top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
	          left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
	        };
	      },

	      /**
	       * Provides offset distance to the closest scrollable ancestor
	       * or viewport.  Accounts for border and scrollbar width.
	       *
	       * Right and bottom dimensions represent the distance to the
	       * respective edge of the viewport element.  If the element
	       * edge extends beyond the viewport, a negative value will be
	       * reported.
	       *
	       * @param {element} elem - The element to get the viewport offset for.
	       * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
	       * of the first scrollable element, default is false.
	       * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
	       * be accounted for, default is true.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: distance to the top content edge of viewport element</li>
	       *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
	       *     <li>**left**: distance to the left content edge of viewport element</li>
	       *     <li>**right**: distance to the right content edge of viewport element</li>
	       *   </ul>
	       */
	      viewportOffset: function(elem, useDocument, includePadding) {
	        elem = this.getRawNode(elem);
	        includePadding = includePadding !== false ? true : false;

	        var elemBCR = elem.getBoundingClientRect();
	        var offsetBCR = {top: 0, left: 0, bottom: 0, right: 0};

	        var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
	        var offsetParentBCR = offsetParent.getBoundingClientRect();

	        offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
	        offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
	        if (offsetParent === $document[0].documentElement) {
	          offsetBCR.top += $window.pageYOffset;
	          offsetBCR.left += $window.pageXOffset;
	        }
	        offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
	        offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;

	        if (includePadding) {
	          var offsetParentStyle = $window.getComputedStyle(offsetParent);
	          offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
	          offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
	          offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
	          offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
	        }

	        return {
	          top: Math.round(elemBCR.top - offsetBCR.top),
	          bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
	          left: Math.round(elemBCR.left - offsetBCR.left),
	          right: Math.round(offsetBCR.right - elemBCR.right)
	        };
	      },

	      /**
	       * Provides an array of placement values parsed from a placement string.
	       * Along with the 'auto' indicator, supported placement strings are:
	       *   <ul>
	       *     <li>top: element on top, horizontally centered on host element.</li>
	       *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
	       *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
	       *     <li>bottom: element on bottom, horizontally centered on host element.</li>
	       *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
	       *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
	       *     <li>left: element on left, vertically centered on host element.</li>
	       *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
	       *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
	       *     <li>right: element on right, vertically centered on host element.</li>
	       *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
	       *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
	       *   </ul>
	       * A placement string with an 'auto' indicator is expected to be
	       * space separated from the placement, i.e: 'auto bottom-left'  If
	       * the primary and secondary placement values do not match 'top,
	       * bottom, left, right' then 'top' will be the primary placement and
	       * 'center' will be the secondary placement.  If 'auto' is passed, true
	       * will be returned as the 3rd value of the array.
	       *
	       * @param {string} placement - The placement string to parse.
	       *
	       * @returns {array} An array with the following values
	       * <ul>
	       *   <li>**[0]**: The primary placement.</li>
	       *   <li>**[1]**: The secondary placement.</li>
	       *   <li>**[2]**: If auto is passed: true, else undefined.</li>
	       * </ul>
	       */
	      parsePlacement: function(placement) {
	        var autoPlace = PLACEMENT_REGEX.auto.test(placement);
	        if (autoPlace) {
	          placement = placement.replace(PLACEMENT_REGEX.auto, '');
	        }

	        placement = placement.split('-');

	        placement[0] = placement[0] || 'top';
	        if (!PLACEMENT_REGEX.primary.test(placement[0])) {
	          placement[0] = 'top';
	        }

	        placement[1] = placement[1] || 'center';
	        if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
	          placement[1] = 'center';
	        }

	        if (autoPlace) {
	          placement[2] = true;
	        } else {
	          placement[2] = false;
	        }

	        return placement;
	      },

	      /**
	       * Provides coordinates for an element to be positioned relative to
	       * another element.  Passing 'auto' as part of the placement parameter
	       * will enable smart placement - where the element fits. i.e:
	       * 'auto left-top' will check to see if there is enough space to the left
	       * of the hostElem to fit the targetElem, if not place right (same for secondary
	       * top placement).  Available space is calculated using the viewportOffset
	       * function.
	       *
	       * @param {element} hostElem - The element to position against.
	       * @param {element} targetElem - The element to position.
	       * @param {string=} [placement=top] - The placement for the targetElem,
	       *   default is 'top'. 'center' is assumed as secondary placement for
	       *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
	       *   <ul>
	       *     <li>top</li>
	       *     <li>top-right</li>
	       *     <li>top-left</li>
	       *     <li>bottom</li>
	       *     <li>bottom-left</li>
	       *     <li>bottom-right</li>
	       *     <li>left</li>
	       *     <li>left-top</li>
	       *     <li>left-bottom</li>
	       *     <li>right</li>
	       *     <li>right-top</li>
	       *     <li>right-bottom</li>
	       *   </ul>
	       * @param {boolean=} [appendToBody=false] - Should the top and left values returned
	       *   be calculated from the body element, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: Value for targetElem top.</li>
	       *     <li>**left**: Value for targetElem left.</li>
	       *     <li>**placement**: The resolved placement.</li>
	       *   </ul>
	       */
	      positionElements: function(hostElem, targetElem, placement, appendToBody) {
	        hostElem = this.getRawNode(hostElem);
	        targetElem = this.getRawNode(targetElem);

	        // need to read from prop to support tests.
	        var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop('offsetWidth');
	        var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop('offsetHeight');

	        placement = this.parsePlacement(placement);

	        var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
	        var targetElemPos = {top: 0, left: 0, placement: ''};

	        if (placement[2]) {
	          var viewportOffset = this.viewportOffset(hostElem, appendToBody);

	          var targetElemStyle = $window.getComputedStyle(targetElem);
	          var adjustedSize = {
	            width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
	            height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
	          };

	          placement[0] = placement[0] === 'top' && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? 'bottom' :
	                         placement[0] === 'bottom' && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? 'top' :
	                         placement[0] === 'left' && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? 'right' :
	                         placement[0] === 'right' && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? 'left' :
	                         placement[0];

	          placement[1] = placement[1] === 'top' && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? 'bottom' :
	                         placement[1] === 'bottom' && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? 'top' :
	                         placement[1] === 'left' && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? 'right' :
	                         placement[1] === 'right' && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? 'left' :
	                         placement[1];

	          if (placement[1] === 'center') {
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
	              if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
	                placement[1] = 'left';
	              } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
	                placement[1] = 'right';
	              }
	            } else {
	              var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
	              if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
	                placement[1] = 'top';
	              } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
	                placement[1] = 'bottom';
	              }
	            }
	          }
	        }

	        switch (placement[0]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top - targetHeight;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left - targetWidth;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width;
	            break;
	        }

	        switch (placement[1]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
	            break;
	          case 'center':
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
	            } else {
	              targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
	            }
	            break;
	        }

	        targetElemPos.top = Math.round(targetElemPos.top);
	        targetElemPos.left = Math.round(targetElemPos.left);
	        targetElemPos.placement = placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1];

	        return targetElemPos;
	      },

	      /**
	      * Provides a way for positioning tooltip & dropdown
	      * arrows when using placement options beyond the standard
	      * left, right, top, or bottom.
	      *
	      * @param {element} elem - The tooltip/dropdown element.
	      * @param {string} placement - The placement for the elem.
	      */
	      positionArrow: function(elem, placement) {
	        elem = this.getRawNode(elem);

	        var innerElem = elem.querySelector('.tooltip-inner, .popover-inner');
	        if (!innerElem) {
	          return;
	        }

	        var isTooltip = angular.element(innerElem).hasClass('tooltip-inner');

	        var arrowElem = isTooltip ? elem.querySelector('.tooltip-arrow') : elem.querySelector('.arrow');
	        if (!arrowElem) {
	          return;
	        }

	        var arrowCss = {
	          top: '',
	          bottom: '',
	          left: '',
	          right: ''
	        };

	        placement = this.parsePlacement(placement);
	        if (placement[1] === 'center') {
	          // no adjustment necessary - just reset styles
	          angular.element(arrowElem).css(arrowCss);
	          return;
	        }

	        var borderProp = 'border-' + placement[0] + '-width';
	        var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];

	        var borderRadiusProp = 'border-';
	        if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	          borderRadiusProp += placement[0] + '-' + placement[1];
	        } else {
	          borderRadiusProp += placement[1] + '-' + placement[0];
	        }
	        borderRadiusProp += '-radius';
	        var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];

	        switch (placement[0]) {
	          case 'top':
	            arrowCss.bottom = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'bottom':
	            arrowCss.top = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'left':
	            arrowCss.right = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'right':
	            arrowCss.left = isTooltip ? '0' : '-' + borderWidth;
	            break;
	        }

	        arrowCss[placement[1]] = borderRadius;

	        angular.element(arrowElem).css(arrowCss);
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.datepickerPopup', ['ui.bootstrap.datepicker', 'ui.bootstrap.position'])

	.value('$datepickerPopupLiteralWarning', true)

	.constant('uibDatepickerPopupConfig', {
	  altInputFormats: [],
	  appendToBody: false,
	  clearText: 'Clear',
	  closeOnDateSelection: true,
	  closeText: 'Done',
	  currentText: 'Today',
	  datepickerPopup: 'yyyy-MM-dd',
	  datepickerPopupTemplateUrl: 'uib/template/datepickerPopup/popup.html',
	  datepickerTemplateUrl: 'uib/template/datepicker/datepicker.html',
	  html5Types: {
	    date: 'yyyy-MM-dd',
	    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
	    'month': 'yyyy-MM'
	  },
	  onOpenFocus: true,
	  showButtonBar: true,
	  placement: 'auto bottom-left'
	})

	.controller('UibDatepickerPopupController', ['$scope', '$element', '$attrs', '$compile', '$log', '$parse', '$window', '$document', '$rootScope', '$uibPosition', 'dateFilter', 'uibDateParser', 'uibDatepickerPopupConfig', '$timeout', 'uibDatepickerConfig', '$datepickerPopupLiteralWarning',
	function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
	  var cache = {},
	    isHtml5DateInput = false;
	  var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus,
	    datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl,
	    ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [],
	    timezone;

	  this.init = function(_ngModel_) {
	    ngModel = _ngModel_;
	    ngModelOptions = _ngModel_.$options;
	    closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ?
	      $scope.$parent.$eval($attrs.closeOnDateSelection) :
	      datepickerPopupConfig.closeOnDateSelection;
	    appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ?
	      $scope.$parent.$eval($attrs.datepickerAppendToBody) :
	      datepickerPopupConfig.appendToBody;
	    onOpenFocus = angular.isDefined($attrs.onOpenFocus) ?
	      $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
	    datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ?
	      $attrs.datepickerPopupTemplateUrl :
	      datepickerPopupConfig.datepickerPopupTemplateUrl;
	    datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ?
	      $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
	    altInputFormats = angular.isDefined($attrs.altInputFormats) ?
	      $scope.$parent.$eval($attrs.altInputFormats) :
	      datepickerPopupConfig.altInputFormats;

	    $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ?
	      $scope.$parent.$eval($attrs.showButtonBar) :
	      datepickerPopupConfig.showButtonBar;

	    if (datepickerPopupConfig.html5Types[$attrs.type]) {
	      dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
	      isHtml5DateInput = true;
	    } else {
	      dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
	      $attrs.$observe('uibDatepickerPopup', function(value, oldValue) {
	        var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
	        // Invalidate the $modelValue to ensure that formatters re-run
	        // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
	        if (newDateFormat !== dateFormat) {
	          dateFormat = newDateFormat;
	          ngModel.$modelValue = null;

	          if (!dateFormat) {
	            throw new Error('uibDatepickerPopup must have a date format specified.');
	          }
	        }
	      });
	    }

	    if (!dateFormat) {
	      throw new Error('uibDatepickerPopup must have a date format specified.');
	    }

	    if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
	      throw new Error('HTML5 date input types do not support custom formats.');
	    }

	    // popup element used to display calendar
	    popupEl = angular.element('<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>');
	    if (ngModelOptions) {
	      timezone = ngModelOptions.timezone;
	      $scope.ngModelOptions = angular.copy(ngModelOptions);
	      $scope.ngModelOptions.timezone = null;
	      if ($scope.ngModelOptions.updateOnDefault === true) {
	        $scope.ngModelOptions.updateOn = $scope.ngModelOptions.updateOn ?
	          $scope.ngModelOptions.updateOn + ' default' : 'default';
	      }

	      popupEl.attr('ng-model-options', 'ngModelOptions');
	    } else {
	      timezone = null;
	    }

	    popupEl.attr({
	      'ng-model': 'date',
	      'ng-change': 'dateSelection(date)',
	      'template-url': datepickerPopupTemplateUrl
	    });

	    // datepicker element
	    datepickerEl = angular.element(popupEl.children()[0]);
	    datepickerEl.attr('template-url', datepickerTemplateUrl);

	    if (!$scope.datepickerOptions) {
	      $scope.datepickerOptions = {};
	    }

	    if (isHtml5DateInput) {
	      if ($attrs.type === 'month') {
	        $scope.datepickerOptions.datepickerMode = 'month';
	        $scope.datepickerOptions.minMode = 'month';
	      }
	    }

	    datepickerEl.attr('datepicker-options', 'datepickerOptions');

	    if (!isHtml5DateInput) {
	      // Internal API to maintain the correct ng-invalid-[key] class
	      ngModel.$$parserName = 'date';
	      ngModel.$validators.date = validator;
	      ngModel.$parsers.unshift(parseDate);
	      ngModel.$formatters.push(function(value) {
	        if (ngModel.$isEmpty(value)) {
	          $scope.date = value;
	          return value;
	        }

	        $scope.date = dateParser.fromTimezone(value, timezone);

	        if (angular.isNumber($scope.date)) {
	          $scope.date = new Date($scope.date);
	        }

	        return dateParser.filter($scope.date, dateFormat);
	      });
	    } else {
	      ngModel.$formatters.push(function(value) {
	        $scope.date = dateParser.fromTimezone(value, timezone);
	        return value;
	      });
	    }

	    // Detect changes in the view from the text box
	    ngModel.$viewChangeListeners.push(function() {
	      $scope.date = parseDateString(ngModel.$viewValue);
	    });

	    $element.on('keydown', inputKeydownBind);

	    $popup = $compile(popupEl)($scope);
	    // Prevent jQuery cache memory leak (template is now redundant after linking)
	    popupEl.remove();

	    if (appendToBody) {
	      $document.find('body').append($popup);
	    } else {
	      $element.after($popup);
	    }

	    $scope.$on('$destroy', function() {
	      if ($scope.isOpen === true) {
	        if (!$rootScope.$$phase) {
	          $scope.$apply(function() {
	            $scope.isOpen = false;
	          });
	        }
	      }

	      $popup.remove();
	      $element.off('keydown', inputKeydownBind);
	      $document.off('click', documentClickBind);
	      if (scrollParentEl) {
	        scrollParentEl.off('scroll', positionPopup);
	      }
	      angular.element($window).off('resize', positionPopup);

	      //Clear all watch listeners on destroy
	      while (watchListeners.length) {
	        watchListeners.shift()();
	      }
	    });
	  };

	  $scope.getText = function(key) {
	    return $scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
	  };

	  $scope.isDisabled = function(date) {
	    if (date === 'today') {
	      date = dateParser.fromTimezone(new Date(), timezone);
	    }

	    var dates = {};
	    angular.forEach(['minDate', 'maxDate'], function(key) {
	      if (!$scope.datepickerOptions[key]) {
	        dates[key] = null;
	      } else if (angular.isDate($scope.datepickerOptions[key])) {
	        dates[key] = dateParser.fromTimezone(new Date($scope.datepickerOptions[key]), timezone);
	      } else {
	        if ($datepickerPopupLiteralWarning) {
	          $log.warn('Literal date support has been deprecated, please switch to date object usage');
	        }

	        dates[key] = new Date(dateFilter($scope.datepickerOptions[key], 'medium'));
	      }
	    });

	    return $scope.datepickerOptions &&
	      dates.minDate && $scope.compare(date, dates.minDate) < 0 ||
	      dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
	  };

	  $scope.compare = function(date1, date2) {
	    return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
	  };

	  // Inner change
	  $scope.dateSelection = function(dt) {
	    if (angular.isDefined(dt)) {
	      $scope.date = dt;
	    }
	    var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null; // Setting to NULL is necessary for form validators to function
	    $element.val(date);
	    ngModel.$setViewValue(date);

	    if (closeOnDateSelection) {
	      $scope.isOpen = false;
	      $element[0].focus();
	    }
	  };

	  $scope.keydown = function(evt) {
	    if (evt.which === 27) {
	      evt.stopPropagation();
	      $scope.isOpen = false;
	      $element[0].focus();
	    }
	  };

	  $scope.select = function(date, evt) {
	    evt.stopPropagation();

	    if (date === 'today') {
	      var today = new Date();
	      if (angular.isDate($scope.date)) {
	        date = new Date($scope.date);
	        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
	      } else {
	        date = new Date(today.setHours(0, 0, 0, 0));
	      }
	    }
	    $scope.dateSelection(date);
	  };

	  $scope.close = function(evt) {
	    evt.stopPropagation();

	    $scope.isOpen = false;
	    $element[0].focus();
	  };

	  $scope.disabled = angular.isDefined($attrs.disabled) || false;
	  if ($attrs.ngDisabled) {
	    watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
	      $scope.disabled = disabled;
	    }));
	  }

	  $scope.$watch('isOpen', function(value) {
	    if (value) {
	      if (!$scope.disabled) {
	        $timeout(function() {
	          positionPopup();

	          if (onOpenFocus) {
	            $scope.$broadcast('uib:datepicker.focus');
	          }

	          $document.on('click', documentClickBind);

	          var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
	          if (appendToBody || $position.parsePlacement(placement)[2]) {
	            scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
	            if (scrollParentEl) {
	              scrollParentEl.on('scroll', positionPopup);
	            }
	          } else {
	            scrollParentEl = null;
	          }

	          angular.element($window).on('resize', positionPopup);
	        }, 0, false);
	      } else {
	        $scope.isOpen = false;
	      }
	    } else {
	      $document.off('click', documentClickBind);
	      if (scrollParentEl) {
	        scrollParentEl.off('scroll', positionPopup);
	      }
	      angular.element($window).off('resize', positionPopup);
	    }
	  });

	  function cameltoDash(string) {
	    return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
	  }

	  function parseDateString(viewValue) {
	    var date = dateParser.parse(viewValue, dateFormat, $scope.date);
	    if (isNaN(date)) {
	      for (var i = 0; i < altInputFormats.length; i++) {
	        date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
	        if (!isNaN(date)) {
	          return date;
	        }
	      }
	    }
	    return date;
	  }

	  function parseDate(viewValue) {
	    if (angular.isNumber(viewValue)) {
	      // presumably timestamp to date object
	      viewValue = new Date(viewValue);
	    }

	    if (!viewValue) {
	      return null;
	    }

	    if (angular.isDate(viewValue) && !isNaN(viewValue)) {
	      return viewValue;
	    }

	    if (angular.isString(viewValue)) {
	      var date = parseDateString(viewValue);
	      if (!isNaN(date)) {
	        return dateParser.toTimezone(date, timezone);
	      }
	    }

	    return ngModel.$options && ngModel.$options.allowInvalid ? viewValue : undefined;
	  }

	  function validator(modelValue, viewValue) {
	    var value = modelValue || viewValue;

	    if (!$attrs.ngRequired && !value) {
	      return true;
	    }

	    if (angular.isNumber(value)) {
	      value = new Date(value);
	    }

	    if (!value) {
	      return true;
	    }

	    if (angular.isDate(value) && !isNaN(value)) {
	      return true;
	    }

	    if (angular.isString(value)) {
	      return !isNaN(parseDateString(viewValue));
	    }

	    return false;
	  }

	  function documentClickBind(event) {
	    if (!$scope.isOpen && $scope.disabled) {
	      return;
	    }

	    var popup = $popup[0];
	    var dpContainsTarget = $element[0].contains(event.target);
	    // The popup node may not be an element node
	    // In some browsers (IE) only element nodes have the 'contains' function
	    var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
	    if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
	      $scope.$apply(function() {
	        $scope.isOpen = false;
	      });
	    }
	  }

	  function inputKeydownBind(evt) {
	    if (evt.which === 27 && $scope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.$apply(function() {
	        $scope.isOpen = false;
	      });
	      $element[0].focus();
	    } else if (evt.which === 40 && !$scope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.$apply(function() {
	        $scope.isOpen = true;
	      });
	    }
	  }

	  function positionPopup() {
	    if ($scope.isOpen) {
	      var dpElement = angular.element($popup[0].querySelector('.uib-datepicker-popup'));
	      var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
	      var position = $position.positionElements($element, dpElement, placement, appendToBody);
	      dpElement.css({top: position.top + 'px', left: position.left + 'px'});
	      if (dpElement.hasClass('uib-position-measure')) {
	        dpElement.removeClass('uib-position-measure');
	      }
	    }
	  }

	  $scope.$on('uib:datepicker.mode', function() {
	    $timeout(positionPopup, 0, false);
	  });
	}])

	.directive('uibDatepickerPopup', function() {
	  return {
	    require: ['ngModel', 'uibDatepickerPopup'],
	    controller: 'UibDatepickerPopupController',
	    scope: {
	      datepickerOptions: '=?',
	      isOpen: '=?',
	      currentText: '@',
	      clearText: '@',
	      closeText: '@'
	    },
	    link: function(scope, element, attrs, ctrls) {
	      var ngModel = ctrls[0],
	        ctrl = ctrls[1];

	      ctrl.init(ngModel);
	    }
	  };
	})

	.directive('uibDatepickerPopupWrap', function() {
	  return {
	    replace: true,
	    transclude: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepickerPopup/popup.html';
	    }
	  };
	});

	angular.module('ui.bootstrap.debounce', [])
	/**
	 * A helper, internal service that debounces a function
	 */
	  .factory('$$debounce', ['$timeout', function($timeout) {
	    return function(callback, debounceTime) {
	      var timeoutPromise;

	      return function() {
	        var self = this;
	        var args = Array.prototype.slice.call(arguments);
	        if (timeoutPromise) {
	          $timeout.cancel(timeoutPromise);
	        }

	        timeoutPromise = $timeout(function() {
	          callback.apply(self, args);
	        }, debounceTime);
	      };
	    };
	  }]);

	angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.position'])

	.constant('uibDropdownConfig', {
	  appendToOpenClass: 'uib-dropdown-open',
	  openClass: 'open'
	})

	.service('uibDropdownService', ['$document', '$rootScope', function($document, $rootScope) {
	  var openScope = null;

	  this.open = function(dropdownScope, element) {
	    if (!openScope) {
	      $document.on('click', closeDropdown);
	      element.on('keydown', keybindFilter);
	    }

	    if (openScope && openScope !== dropdownScope) {
	      openScope.isOpen = false;
	    }

	    openScope = dropdownScope;
	  };

	  this.close = function(dropdownScope, element) {
	    if (openScope === dropdownScope) {
	      openScope = null;
	      $document.off('click', closeDropdown);
	      element.off('keydown', keybindFilter);
	    }
	  };

	  var closeDropdown = function(evt) {
	    // This method may still be called during the same mouse event that
	    // unbound this event handler. So check openScope before proceeding.
	    if (!openScope) { return; }

	    if (evt && openScope.getAutoClose() === 'disabled') { return; }

	    if (evt && evt.which === 3) { return; }

	    var toggleElement = openScope.getToggleElement();
	    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
	      return;
	    }

	    var dropdownElement = openScope.getDropdownElement();
	    if (evt && openScope.getAutoClose() === 'outsideClick' &&
	      dropdownElement && dropdownElement[0].contains(evt.target)) {
	      return;
	    }

	    openScope.isOpen = false;

	    if (!$rootScope.$$phase) {
	      openScope.$apply();
	    }
	  };

	  var keybindFilter = function(evt) {
	    if (evt.which === 27) {
	      evt.stopPropagation();
	      openScope.focusToggleElement();
	      closeDropdown();
	    } else if (openScope.isKeynavEnabled() && [38, 40].indexOf(evt.which) !== -1 && openScope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      openScope.focusDropdownEntry(evt.which);
	    }
	  };
	}])

	.controller('UibDropdownController', ['$scope', '$element', '$attrs', '$parse', 'uibDropdownConfig', 'uibDropdownService', '$animate', '$uibPosition', '$document', '$compile', '$templateRequest', function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
	  var self = this,
	    scope = $scope.$new(), // create a child scope so we are not polluting original one
	    templateScope,
	    appendToOpenClass = dropdownConfig.appendToOpenClass,
	    openClass = dropdownConfig.openClass,
	    getIsOpen,
	    setIsOpen = angular.noop,
	    toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
	    appendToBody = false,
	    appendTo = null,
	    keynavEnabled = false,
	    selectedOption = null,
	    body = $document.find('body');

	  $element.addClass('dropdown');

	  this.init = function() {
	    if ($attrs.isOpen) {
	      getIsOpen = $parse($attrs.isOpen);
	      setIsOpen = getIsOpen.assign;

	      $scope.$watch(getIsOpen, function(value) {
	        scope.isOpen = !!value;
	      });
	    }

	    if (angular.isDefined($attrs.dropdownAppendTo)) {
	      var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
	      if (appendToEl) {
	        appendTo = angular.element(appendToEl);
	      }
	    }

	    appendToBody = angular.isDefined($attrs.dropdownAppendToBody);
	    keynavEnabled = angular.isDefined($attrs.keyboardNav);

	    if (appendToBody && !appendTo) {
	      appendTo = body;
	    }

	    if (appendTo && self.dropdownMenu) {
	      appendTo.append(self.dropdownMenu);
	      $element.on('$destroy', function handleDestroyEvent() {
	        self.dropdownMenu.remove();
	      });
	    }
	  };

	  this.toggle = function(open) {
	    scope.isOpen = arguments.length ? !!open : !scope.isOpen;
	    if (angular.isFunction(setIsOpen)) {
	      setIsOpen(scope, scope.isOpen);
	    }

	    return scope.isOpen;
	  };

	  // Allow other directives to watch status
	  this.isOpen = function() {
	    return scope.isOpen;
	  };

	  scope.getToggleElement = function() {
	    return self.toggleElement;
	  };

	  scope.getAutoClose = function() {
	    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
	  };

	  scope.getElement = function() {
	    return $element;
	  };

	  scope.isKeynavEnabled = function() {
	    return keynavEnabled;
	  };

	  scope.focusDropdownEntry = function(keyCode) {
	    var elems = self.dropdownMenu ? //If append to body is used.
	      angular.element(self.dropdownMenu).find('a') :
	      $element.find('ul').eq(0).find('a');

	    switch (keyCode) {
	      case 40: {
	        if (!angular.isNumber(self.selectedOption)) {
	          self.selectedOption = 0;
	        } else {
	          self.selectedOption = self.selectedOption === elems.length - 1 ?
	            self.selectedOption :
	            self.selectedOption + 1;
	        }
	        break;
	      }
	      case 38: {
	        if (!angular.isNumber(self.selectedOption)) {
	          self.selectedOption = elems.length - 1;
	        } else {
	          self.selectedOption = self.selectedOption === 0 ?
	            0 : self.selectedOption - 1;
	        }
	        break;
	      }
	    }
	    elems[self.selectedOption].focus();
	  };

	  scope.getDropdownElement = function() {
	    return self.dropdownMenu;
	  };

	  scope.focusToggleElement = function() {
	    if (self.toggleElement) {
	      self.toggleElement[0].focus();
	    }
	  };

	  scope.$watch('isOpen', function(isOpen, wasOpen) {
	    if (appendTo && self.dropdownMenu) {
	      var pos = $position.positionElements($element, self.dropdownMenu, 'bottom-left', true),
	        css,
	        rightalign;

	      css = {
	        top: pos.top + 'px',
	        display: isOpen ? 'block' : 'none'
	      };

	      rightalign = self.dropdownMenu.hasClass('dropdown-menu-right');
	      if (!rightalign) {
	        css.left = pos.left + 'px';
	        css.right = 'auto';
	      } else {
	        css.left = 'auto';
	        css.right = window.innerWidth -
	          (pos.left + $element.prop('offsetWidth')) + 'px';
	      }

	      // Need to adjust our positioning to be relative to the appendTo container
	      // if it's not the body element
	      if (!appendToBody) {
	        var appendOffset = $position.offset(appendTo);

	        css.top = pos.top - appendOffset.top + 'px';

	        if (!rightalign) {
	          css.left = pos.left - appendOffset.left + 'px';
	        } else {
	          css.right = window.innerWidth -
	            (pos.left - appendOffset.left + $element.prop('offsetWidth')) + 'px';
	        }
	      }

	      self.dropdownMenu.css(css);
	    }

	    var openContainer = appendTo ? appendTo : $element;
	    var hasOpenClass = openContainer.hasClass(appendTo ? appendToOpenClass : openClass);

	    if (hasOpenClass === !isOpen) {
	      $animate[isOpen ? 'addClass' : 'removeClass'](openContainer, appendTo ? appendToOpenClass : openClass).then(function() {
	        if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
	          toggleInvoker($scope, { open: !!isOpen });
	        }
	      });
	    }

	    if (isOpen) {
	      if (self.dropdownMenuTemplateUrl) {
	        $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
	          templateScope = scope.$new();
	          $compile(tplContent.trim())(templateScope, function(dropdownElement) {
	            var newEl = dropdownElement;
	            self.dropdownMenu.replaceWith(newEl);
	            self.dropdownMenu = newEl;
	          });
	        });
	      }

	      scope.focusToggleElement();
	      uibDropdownService.open(scope, $element);
	    } else {
	      if (self.dropdownMenuTemplateUrl) {
	        if (templateScope) {
	          templateScope.$destroy();
	        }
	        var newEl = angular.element('<ul class="dropdown-menu"></ul>');
	        self.dropdownMenu.replaceWith(newEl);
	        self.dropdownMenu = newEl;
	      }

	      uibDropdownService.close(scope, $element);
	      self.selectedOption = null;
	    }

	    if (angular.isFunction(setIsOpen)) {
	      setIsOpen($scope, isOpen);
	    }
	  });
	}])

	.directive('uibDropdown', function() {
	  return {
	    controller: 'UibDropdownController',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      dropdownCtrl.init();
	    }
	  };
	})

	.directive('uibDropdownMenu', function() {
	  return {
	    restrict: 'A',
	    require: '?^uibDropdown',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
	        return;
	      }

	      element.addClass('dropdown-menu');

	      var tplUrl = attrs.templateUrl;
	      if (tplUrl) {
	        dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
	      }

	      if (!dropdownCtrl.dropdownMenu) {
	        dropdownCtrl.dropdownMenu = element;
	      }
	    }
	  };
	})

	.directive('uibDropdownToggle', function() {
	  return {
	    require: '?^uibDropdown',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      if (!dropdownCtrl) {
	        return;
	      }

	      element.addClass('dropdown-toggle');

	      dropdownCtrl.toggleElement = element;

	      var toggleDropdown = function(event) {
	        event.preventDefault();

	        if (!element.hasClass('disabled') && !attrs.disabled) {
	          scope.$apply(function() {
	            dropdownCtrl.toggle();
	          });
	        }
	      };

	      element.bind('click', toggleDropdown);

	      // WAI-ARIA
	      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
	      scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
	        element.attr('aria-expanded', !!isOpen);
	      });

	      scope.$on('$destroy', function() {
	        element.unbind('click', toggleDropdown);
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.stackedMap', [])
	/**
	 * A helper, internal data structure that acts as a map but also allows getting / removing
	 * elements in the LIFO order
	 */
	  .factory('$$stackedMap', function() {
	    return {
	      createNew: function() {
	        var stack = [];

	        return {
	          add: function(key, value) {
	            stack.push({
	              key: key,
	              value: value
	            });
	          },
	          get: function(key) {
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                return stack[i];
	              }
	            }
	          },
	          keys: function() {
	            var keys = [];
	            for (var i = 0; i < stack.length; i++) {
	              keys.push(stack[i].key);
	            }
	            return keys;
	          },
	          top: function() {
	            return stack[stack.length - 1];
	          },
	          remove: function(key) {
	            var idx = -1;
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                idx = i;
	                break;
	              }
	            }
	            return stack.splice(idx, 1)[0];
	          },
	          removeTop: function() {
	            return stack.splice(stack.length - 1, 1)[0];
	          },
	          length: function() {
	            return stack.length;
	          }
	        };
	      }
	    };
	  });
	angular.module('ui.bootstrap.modal', ['ui.bootstrap.stackedMap', 'ui.bootstrap.position'])
	/**
	 * A helper, internal data structure that stores all references attached to key
	 */
	  .factory('$$multiMap', function() {
	    return {
	      createNew: function() {
	        var map = {};

	        return {
	          entries: function() {
	            return Object.keys(map).map(function(key) {
	              return {
	                key: key,
	                value: map[key]
	              };
	            });
	          },
	          get: function(key) {
	            return map[key];
	          },
	          hasKey: function(key) {
	            return !!map[key];
	          },
	          keys: function() {
	            return Object.keys(map);
	          },
	          put: function(key, value) {
	            if (!map[key]) {
	              map[key] = [];
	            }

	            map[key].push(value);
	          },
	          remove: function(key, value) {
	            var values = map[key];

	            if (!values) {
	              return;
	            }

	            var idx = values.indexOf(value);

	            if (idx !== -1) {
	              values.splice(idx, 1);
	            }

	            if (!values.length) {
	              delete map[key];
	            }
	          }
	        };
	      }
	    };
	  })

	/**
	 * Pluggable resolve mechanism for the modal resolve resolution
	 * Supports UI Router's $resolve service
	 */
	  .provider('$uibResolve', function() {
	    var resolve = this;
	    this.resolver = null;

	    this.setResolver = function(resolver) {
	      this.resolver = resolver;
	    };

	    this.$get = ['$injector', '$q', function($injector, $q) {
	      var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
	      return {
	        resolve: function(invocables, locals, parent, self) {
	          if (resolver) {
	            return resolver.resolve(invocables, locals, parent, self);
	          }

	          var promises = [];

	          angular.forEach(invocables, function(value) {
	            if (angular.isFunction(value) || angular.isArray(value)) {
	              promises.push($q.resolve($injector.invoke(value)));
	            } else if (angular.isString(value)) {
	              promises.push($q.resolve($injector.get(value)));
	            } else {
	              promises.push($q.resolve(value));
	            }
	          });

	          return $q.all(promises).then(function(resolves) {
	            var resolveObj = {};
	            var resolveIter = 0;
	            angular.forEach(invocables, function(value, key) {
	              resolveObj[key] = resolves[resolveIter++];
	            });

	            return resolveObj;
	          });
	        }
	      };
	    }];
	  })

	/**
	 * A helper directive for the $modal service. It creates a backdrop element.
	 */
	  .directive('uibModalBackdrop', ['$animate', '$injector', '$uibModalStack',
	  function($animate, $injector, $modalStack) {
	    return {
	      replace: true,
	      templateUrl: 'uib/template/modal/backdrop.html',
	      compile: function(tElement, tAttrs) {
	        tElement.addClass(tAttrs.backdropClass);
	        return linkFn;
	      }
	    };

	    function linkFn(scope, element, attrs) {
	      if (attrs.modalInClass) {
	        $animate.addClass(element, attrs.modalInClass);

	        scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	          var done = setIsAsync();
	          if (scope.modalOptions.animation) {
	            $animate.removeClass(element, attrs.modalInClass).then(done);
	          } else {
	            done();
	          }
	        });
	      }
	    }
	  }])

	  .directive('uibModalWindow', ['$uibModalStack', '$q', '$animateCss', '$document',
	  function($modalStack, $q, $animateCss, $document) {
	    return {
	      scope: {
	        index: '@'
	      },
	      replace: true,
	      transclude: true,
	      templateUrl: function(tElement, tAttrs) {
	        return tAttrs.templateUrl || 'uib/template/modal/window.html';
	      },
	      link: function(scope, element, attrs) {
	        element.addClass(attrs.windowClass || '');
	        element.addClass(attrs.windowTopClass || '');
	        scope.size = attrs.size;

	        scope.close = function(evt) {
	          var modal = $modalStack.getTop();
	          if (modal && modal.value.backdrop &&
	            modal.value.backdrop !== 'static' &&
	            evt.target === evt.currentTarget) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            $modalStack.dismiss(modal.key, 'backdrop click');
	          }
	        };

	        // moved from template to fix issue #2280
	        element.on('click', scope.close);

	        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
	        // We can detect that by using this property in the template associated with this directive and then use
	        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
	        scope.$isRendered = true;

	        // Deferred object that will be resolved when this modal is render.
	        var modalRenderDeferObj = $q.defer();
	        // Observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.
	        // In order to use this way of finding whether DOM is ready, we need to observe a scope property used in modal's template.
	        attrs.$observe('modalRender', function(value) {
	          if (value === 'true') {
	            modalRenderDeferObj.resolve();
	          }
	        });

	        modalRenderDeferObj.promise.then(function() {
	          var animationPromise = null;

	          if (attrs.modalInClass) {
	            animationPromise = $animateCss(element, {
	              addClass: attrs.modalInClass
	            }).start();

	            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	              var done = setIsAsync();
	              $animateCss(element, {
	                removeClass: attrs.modalInClass
	              }).start().then(done);
	            });
	          }


	          $q.when(animationPromise).then(function() {
	            // Notify {@link $modalStack} that modal is rendered.
	            var modal = $modalStack.getTop();
	            if (modal) {
	              $modalStack.modalRendered(modal.key);
	            }

	            /**
	             * If something within the freshly-opened modal already has focus (perhaps via a
	             * directive that causes focus). then no need to try and focus anything.
	             */
	            if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
	              var inputWithAutofocus = element[0].querySelector('[autofocus]');
	              /**
	               * Auto-focusing of a freshly-opened modal element causes any child elements
	               * with the autofocus attribute to lose focus. This is an issue on touch
	               * based devices which will show and then hide the onscreen keyboard.
	               * Attempts to refocus the autofocus element via JavaScript will not reopen
	               * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
	               * the modal element if the modal does not contain an autofocus element.
	               */
	              if (inputWithAutofocus) {
	                inputWithAutofocus.focus();
	              } else {
	                element[0].focus();
	              }
	            }
	          });
	        });
	      }
	    };
	  }])

	  .directive('uibModalAnimationClass', function() {
	    return {
	      compile: function(tElement, tAttrs) {
	        if (tAttrs.modalAnimation) {
	          tElement.addClass(tAttrs.uibModalAnimationClass);
	        }
	      }
	    };
	  })

	  .directive('uibModalTransclude', function() {
	    return {
	      link: function(scope, element, attrs, controller, transclude) {
	        transclude(scope.$parent, function(clone) {
	          element.empty();
	          element.append(clone);
	        });
	      }
	    };
	  })

	  .factory('$uibModalStack', ['$animate', '$animateCss', '$document',
	    '$compile', '$rootScope', '$q', '$$multiMap', '$$stackedMap', '$uibPosition',
	    function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
	      var OPENED_MODAL_CLASS = 'modal-open';

	      var backdropDomEl, backdropScope;
	      var openedWindows = $$stackedMap.createNew();
	      var openedClasses = $$multiMap.createNew();
	      var $modalStack = {
	        NOW_CLOSING_EVENT: 'modal.stack.now-closing'
	      };
	      var topModalIndex = 0;
	      var previousTopOpenedModal = null;

	      //Modal focus behavior
	      var tabableSelector = 'a[href], area[href], input:not([disabled]), ' +
	        'button:not([disabled]),select:not([disabled]), textarea:not([disabled]), ' +
	        'iframe, object, embed, *[tabindex], *[contenteditable=true]';
	      var scrollbarPadding;

	      function isVisible(element) {
	        return !!(element.offsetWidth ||
	          element.offsetHeight ||
	          element.getClientRects().length);
	      }

	      function backdropIndex() {
	        var topBackdropIndex = -1;
	        var opened = openedWindows.keys();
	        for (var i = 0; i < opened.length; i++) {
	          if (openedWindows.get(opened[i]).value.backdrop) {
	            topBackdropIndex = i;
	          }
	        }

	        // If any backdrop exist, ensure that it's index is always
	        // right below the top modal
	        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
	          topBackdropIndex = topModalIndex;
	        }
	        return topBackdropIndex;
	      }

	      $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
	        if (backdropScope) {
	          backdropScope.index = newBackdropIndex;
	        }
	      });

	      function removeModalWindow(modalInstance, elementToReceiveFocus) {
	        var modalWindow = openedWindows.get(modalInstance).value;
	        var appendToElement = modalWindow.appendTo;

	        //clean up the stack
	        openedWindows.remove(modalInstance);
	        previousTopOpenedModal = openedWindows.top();
	        if (previousTopOpenedModal) {
	          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10);
	        }

	        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
	          var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
	          openedClasses.remove(modalBodyClass, modalInstance);
	          var areAnyOpen = openedClasses.hasKey(modalBodyClass);
	          appendToElement.toggleClass(modalBodyClass, areAnyOpen);
	          if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	            if (scrollbarPadding.originalRight) {
	              appendToElement.css({paddingRight: scrollbarPadding.originalRight + 'px'});
	            } else {
	              appendToElement.css({paddingRight: ''});
	            }
	            scrollbarPadding = null;
	          }
	          toggleTopWindowClass(true);
	        }, modalWindow.closedDeferred);
	        checkRemoveBackdrop();

	        //move focus to specified element if available, or else to body
	        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
	          elementToReceiveFocus.focus();
	        } else if (appendToElement.focus) {
	          appendToElement.focus();
	        }
	      }

	      // Add or remove "windowTopClass" from the top window in the stack
	      function toggleTopWindowClass(toggleSwitch) {
	        var modalWindow;

	        if (openedWindows.length() > 0) {
	          modalWindow = openedWindows.top().value;
	          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch);
	        }
	      }

	      function checkRemoveBackdrop() {
	        //remove backdrop if no longer needed
	        if (backdropDomEl && backdropIndex() === -1) {
	          var backdropScopeRef = backdropScope;
	          removeAfterAnimate(backdropDomEl, backdropScope, function() {
	            backdropScopeRef = null;
	          });
	          backdropDomEl = undefined;
	          backdropScope = undefined;
	        }
	      }

	      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
	        var asyncDeferred;
	        var asyncPromise = null;
	        var setIsAsync = function() {
	          if (!asyncDeferred) {
	            asyncDeferred = $q.defer();
	            asyncPromise = asyncDeferred.promise;
	          }

	          return function asyncDone() {
	            asyncDeferred.resolve();
	          };
	        };
	        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

	        // Note that it's intentional that asyncPromise might be null.
	        // That's when setIsAsync has not been called during the
	        // NOW_CLOSING_EVENT broadcast.
	        return $q.when(asyncPromise).then(afterAnimating);

	        function afterAnimating() {
	          if (afterAnimating.done) {
	            return;
	          }
	          afterAnimating.done = true;

	          $animate.leave(domEl).then(function() {
	            domEl.remove();
	            if (closedDeferred) {
	              closedDeferred.resolve();
	            }
	          });

	          scope.$destroy();
	          if (done) {
	            done();
	          }
	        }
	      }

	      $document.on('keydown', keydownListener);

	      $rootScope.$on('$destroy', function() {
	        $document.off('keydown', keydownListener);
	      });

	      function keydownListener(evt) {
	        if (evt.isDefaultPrevented()) {
	          return evt;
	        }

	        var modal = openedWindows.top();
	        if (modal) {
	          switch (evt.which) {
	            case 27: {
	              if (modal.value.keyboard) {
	                evt.preventDefault();
	                $rootScope.$apply(function() {
	                  $modalStack.dismiss(modal.key, 'escape key press');
	                });
	              }
	              break;
	            }
	            case 9: {
	              var list = $modalStack.loadFocusElementList(modal);
	              var focusChanged = false;
	              if (evt.shiftKey) {
	                if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
	                  focusChanged = $modalStack.focusLastFocusableElement(list);
	                }
	              } else {
	                if ($modalStack.isFocusInLastItem(evt, list)) {
	                  focusChanged = $modalStack.focusFirstFocusableElement(list);
	                }
	              }

	              if (focusChanged) {
	                evt.preventDefault();
	                evt.stopPropagation();
	              }

	              break;
	            }
	          }
	        }
	      }

	      $modalStack.open = function(modalInstance, modal) {
	        var modalOpener = $document[0].activeElement,
	          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;

	        toggleTopWindowClass(false);

	        // Store the current top first, to determine what index we ought to use
	        // for the current top modal
	        previousTopOpenedModal = openedWindows.top();

	        openedWindows.add(modalInstance, {
	          deferred: modal.deferred,
	          renderDeferred: modal.renderDeferred,
	          closedDeferred: modal.closedDeferred,
	          modalScope: modal.scope,
	          backdrop: modal.backdrop,
	          keyboard: modal.keyboard,
	          openedClass: modal.openedClass,
	          windowTopClass: modal.windowTopClass,
	          animation: modal.animation,
	          appendTo: modal.appendTo
	        });

	        openedClasses.put(modalBodyClass, modalInstance);

	        var appendToElement = modal.appendTo,
	            currBackdropIndex = backdropIndex();

	        if (!appendToElement.length) {
	          throw new Error('appendTo element not found. Make sure that the element passed is in DOM.');
	        }

	        if (currBackdropIndex >= 0 && !backdropDomEl) {
	          backdropScope = $rootScope.$new(true);
	          backdropScope.modalOptions = modal;
	          backdropScope.index = currBackdropIndex;
	          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
	          backdropDomEl.attr('backdrop-class', modal.backdropClass);
	          if (modal.animation) {
	            backdropDomEl.attr('modal-animation', 'true');
	          }
	          $compile(backdropDomEl)(backdropScope);
	          $animate.enter(backdropDomEl, appendToElement);
	          scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
	          if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	            appendToElement.css({paddingRight: scrollbarPadding.right + 'px'});
	          }
	        }

	        // Set the top modal index based on the index of the previous top modal
	        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1 : 0;
	        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
	        angularDomEl.attr({
	          'template-url': modal.windowTemplateUrl,
	          'window-class': modal.windowClass,
	          'window-top-class': modal.windowTopClass,
	          'size': modal.size,
	          'index': topModalIndex,
	          'animate': 'animate'
	        }).html(modal.content);
	        if (modal.animation) {
	          angularDomEl.attr('modal-animation', 'true');
	        }

	        appendToElement.addClass(modalBodyClass);
	        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);

	        openedWindows.top().value.modalDomEl = angularDomEl;
	        openedWindows.top().value.modalOpener = modalOpener;
	      };

	      function broadcastClosing(modalWindow, resultOrReason, closing) {
	        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
	      }

	      $modalStack.close = function(modalInstance, result) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.resolve(result);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }
	        return !modalWindow;
	      };

	      $modalStack.dismiss = function(modalInstance, reason) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.reject(reason);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }
	        return !modalWindow;
	      };

	      $modalStack.dismissAll = function(reason) {
	        var topModal = this.getTop();
	        while (topModal && this.dismiss(topModal.key, reason)) {
	          topModal = this.getTop();
	        }
	      };

	      $modalStack.getTop = function() {
	        return openedWindows.top();
	      };

	      $modalStack.modalRendered = function(modalInstance) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow) {
	          modalWindow.value.renderDeferred.resolve();
	        }
	      };

	      $modalStack.focusFirstFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[0].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.focusLastFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[list.length - 1].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.isModalFocused = function(evt, modalWindow) {
	        if (evt && modalWindow) {
	          var modalDomEl = modalWindow.value.modalDomEl;
	          if (modalDomEl && modalDomEl.length) {
	            return (evt.target || evt.srcElement) === modalDomEl[0];
	          }
	        }
	        return false;
	      };

	      $modalStack.isFocusInFirstItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[0];
	        }
	        return false;
	      };

	      $modalStack.isFocusInLastItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[list.length - 1];
	        }
	        return false;
	      };

	      $modalStack.loadFocusElementList = function(modalWindow) {
	        if (modalWindow) {
	          var modalDomE1 = modalWindow.value.modalDomEl;
	          if (modalDomE1 && modalDomE1.length) {
	            var elements = modalDomE1[0].querySelectorAll(tabableSelector);
	            return elements ?
	              Array.prototype.filter.call(elements, function(element) {
	                return isVisible(element);
	              }) : elements;
	          }
	        }
	      };

	      return $modalStack;
	    }])

	  .provider('$uibModal', function() {
	    var $modalProvider = {
	      options: {
	        animation: true,
	        backdrop: true, //can also be false or 'static'
	        keyboard: true
	      },
	      $get: ['$rootScope', '$q', '$document', '$templateRequest', '$controller', '$uibResolve', '$uibModalStack',
	        function ($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
	          var $modal = {};

	          function getTemplatePromise(options) {
	            return options.template ? $q.when(options.template) :
	              $templateRequest(angular.isFunction(options.templateUrl) ?
	                options.templateUrl() : options.templateUrl);
	          }

	          var promiseChain = null;
	          $modal.getPromiseChain = function() {
	            return promiseChain;
	          };

	          $modal.open = function(modalOptions) {
	            var modalResultDeferred = $q.defer();
	            var modalOpenedDeferred = $q.defer();
	            var modalClosedDeferred = $q.defer();
	            var modalRenderDeferred = $q.defer();

	            //prepare an instance of a modal to be injected into controllers and returned to a caller
	            var modalInstance = {
	              result: modalResultDeferred.promise,
	              opened: modalOpenedDeferred.promise,
	              closed: modalClosedDeferred.promise,
	              rendered: modalRenderDeferred.promise,
	              close: function (result) {
	                return $modalStack.close(modalInstance, result);
	              },
	              dismiss: function (reason) {
	                return $modalStack.dismiss(modalInstance, reason);
	              }
	            };

	            //merge and clean up options
	            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
	            modalOptions.resolve = modalOptions.resolve || {};
	            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0);

	            //verify options
	            if (!modalOptions.template && !modalOptions.templateUrl) {
	              throw new Error('One of template or templateUrl options is required.');
	            }

	            var templateAndResolvePromise =
	              $q.all([getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null)]);

	            function resolveWithTemplate() {
	              return templateAndResolvePromise;
	            }

	            // Wait for the resolution of the existing promise chain.
	            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
	            // Then add to $modalStack and resolve opened.
	            // Finally clean up the chain variable if no subsequent modal has overwritten it.
	            var samePromise;
	            samePromise = promiseChain = $q.all([promiseChain])
	              .then(resolveWithTemplate, resolveWithTemplate)
	              .then(function resolveSuccess(tplAndVars) {
	                var providedScope = modalOptions.scope || $rootScope;

	                var modalScope = providedScope.$new();
	                modalScope.$close = modalInstance.close;
	                modalScope.$dismiss = modalInstance.dismiss;

	                modalScope.$on('$destroy', function() {
	                  if (!modalScope.$$uibDestructionScheduled) {
	                    modalScope.$dismiss('$uibUnscheduledDestruction');
	                  }
	                });

	                var ctrlInstance, ctrlInstantiate, ctrlLocals = {};

	                //controllers
	                if (modalOptions.controller) {
	                  ctrlLocals.$scope = modalScope;
	                  ctrlLocals.$uibModalInstance = modalInstance;
	                  angular.forEach(tplAndVars[1], function(value, key) {
	                    ctrlLocals[key] = value;
	                  });

	                  // the third param will make the controller instantiate later,private api
	                  // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
	                  ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true);
	                  if (modalOptions.controllerAs) {
	                    ctrlInstance = ctrlInstantiate.instance;

	                    if (modalOptions.bindToController) {
	                      ctrlInstance.$close = modalScope.$close;
	                      ctrlInstance.$dismiss = modalScope.$dismiss;
	                      angular.extend(ctrlInstance, providedScope);
	                    }

	                    ctrlInstance = ctrlInstantiate();

	                    modalScope[modalOptions.controllerAs] = ctrlInstance;
	                  } else {
	                    ctrlInstance = ctrlInstantiate();
	                  }

	                  if (angular.isFunction(ctrlInstance.$onInit)) {
	                    ctrlInstance.$onInit();
	                  }
	                }

	                $modalStack.open(modalInstance, {
	                  scope: modalScope,
	                  deferred: modalResultDeferred,
	                  renderDeferred: modalRenderDeferred,
	                  closedDeferred: modalClosedDeferred,
	                  content: tplAndVars[0],
	                  animation: modalOptions.animation,
	                  backdrop: modalOptions.backdrop,
	                  keyboard: modalOptions.keyboard,
	                  backdropClass: modalOptions.backdropClass,
	                  windowTopClass: modalOptions.windowTopClass,
	                  windowClass: modalOptions.windowClass,
	                  windowTemplateUrl: modalOptions.windowTemplateUrl,
	                  size: modalOptions.size,
	                  openedClass: modalOptions.openedClass,
	                  appendTo: modalOptions.appendTo
	                });
	                modalOpenedDeferred.resolve(true);

	            }, function resolveError(reason) {
	              modalOpenedDeferred.reject(reason);
	              modalResultDeferred.reject(reason);
	            })['finally'](function() {
	              if (promiseChain === samePromise) {
	                promiseChain = null;
	              }
	            });

	            return modalInstance;
	          };

	          return $modal;
	        }
	      ]
	    };

	    return $modalProvider;
	  });

	angular.module('ui.bootstrap.paging', [])
	/**
	 * Helper internal service for generating common controller code between the
	 * pager and pagination components
	 */
	.factory('uibPaging', ['$parse', function($parse) {
	  return {
	    create: function(ctrl, $scope, $attrs) {
	      ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
	      ctrl.ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl
	      ctrl._watchers = [];

	      ctrl.init = function(ngModelCtrl, config) {
	        ctrl.ngModelCtrl = ngModelCtrl;
	        ctrl.config = config;

	        ngModelCtrl.$render = function() {
	          ctrl.render();
	        };

	        if ($attrs.itemsPerPage) {
	          ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
	            ctrl.itemsPerPage = parseInt(value, 10);
	            $scope.totalPages = ctrl.calculateTotalPages();
	            ctrl.updatePage();
	          }));
	        } else {
	          ctrl.itemsPerPage = config.itemsPerPage;
	        }

	        $scope.$watch('totalItems', function(newTotal, oldTotal) {
	          if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
	            $scope.totalPages = ctrl.calculateTotalPages();
	            ctrl.updatePage();
	          }
	        });
	      };

	      ctrl.calculateTotalPages = function() {
	        var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
	        return Math.max(totalPages || 0, 1);
	      };

	      ctrl.render = function() {
	        $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
	      };

	      $scope.selectPage = function(page, evt) {
	        if (evt) {
	          evt.preventDefault();
	        }

	        var clickAllowed = !$scope.ngDisabled || !evt;
	        if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
	          if (evt && evt.target) {
	            evt.target.blur();
	          }
	          ctrl.ngModelCtrl.$setViewValue(page);
	          ctrl.ngModelCtrl.$render();
	        }
	      };

	      $scope.getText = function(key) {
	        return $scope[key + 'Text'] || ctrl.config[key + 'Text'];
	      };

	      $scope.noPrevious = function() {
	        return $scope.page === 1;
	      };

	      $scope.noNext = function() {
	        return $scope.page === $scope.totalPages;
	      };

	      ctrl.updatePage = function() {
	        ctrl.setNumPages($scope.$parent, $scope.totalPages); // Readonly variable

	        if ($scope.page > $scope.totalPages) {
	          $scope.selectPage($scope.totalPages);
	        } else {
	          ctrl.ngModelCtrl.$render();
	        }
	      };

	      $scope.$on('$destroy', function() {
	        while (ctrl._watchers.length) {
	          ctrl._watchers.shift()();
	        }
	      });
	    }
	  };
	}]);

	angular.module('ui.bootstrap.pager', ['ui.bootstrap.paging'])

	.controller('UibPagerController', ['$scope', '$attrs', 'uibPaging', 'uibPagerConfig', function($scope, $attrs, uibPaging, uibPagerConfig) {
	  $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;

	  uibPaging.create(this, $scope, $attrs);
	}])

	.constant('uibPagerConfig', {
	  itemsPerPage: 10,
	  previousText: '« Previous',
	  nextText: 'Next »',
	  align: true
	})

	.directive('uibPager', ['uibPagerConfig', function(uibPagerConfig) {
	  return {
	    scope: {
	      totalItems: '=',
	      previousText: '@',
	      nextText: '@',
	      ngDisabled: '='
	    },
	    require: ['uibPager', '?ngModel'],
	    controller: 'UibPagerController',
	    controllerAs: 'pager',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/pager/pager.html';
	    },
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	        return; // do nothing if no ng-model
	      }

	      paginationCtrl.init(ngModelCtrl, uibPagerConfig);
	    }
	  };
	}]);

	angular.module('ui.bootstrap.pagination', ['ui.bootstrap.paging'])
	.controller('UibPaginationController', ['$scope', '$attrs', '$parse', 'uibPaging', 'uibPaginationConfig', function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
	  var ctrl = this;
	  // Setup configuration parameters
	  var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize,
	    rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate,
	    forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses,
	    boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers,
	    pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) { return $scope.$parent.$eval($attrs.pageLabel, {$page: idx}); } : angular.identity;
	  $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
	  $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;

	  uibPaging.create(this, $scope, $attrs);

	  if ($attrs.maxSize) {
	    ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
	      maxSize = parseInt(value, 10);
	      ctrl.render();
	    }));
	  }

	  // Create page object used in template
	  function makePage(number, text, isActive) {
	    return {
	      number: number,
	      text: text,
	      active: isActive
	    };
	  }

	  function getPages(currentPage, totalPages) {
	    var pages = [];

	    // Default page limits
	    var startPage = 1, endPage = totalPages;
	    var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;

	    // recompute if maxSize
	    if (isMaxSized) {
	      if (rotate) {
	        // Current page is displayed in the middle of the visible ones
	        startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
	        endPage = startPage + maxSize - 1;

	        // Adjust if limit is exceeded
	        if (endPage > totalPages) {
	          endPage = totalPages;
	          startPage = endPage - maxSize + 1;
	        }
	      } else {
	        // Visible pages are paginated with maxSize
	        startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;

	        // Adjust last page if limit is exceeded
	        endPage = Math.min(startPage + maxSize - 1, totalPages);
	      }
	    }

	    // Add page number links
	    for (var number = startPage; number <= endPage; number++) {
	      var page = makePage(number, pageLabel(number), number === currentPage);
	      pages.push(page);
	    }

	    // Add links to move between page sets
	    if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
	      if (startPage > 1) {
	        if (!boundaryLinkNumbers || startPage > 3) { //need ellipsis for all options unless range is too close to beginning
	        var previousPageSet = makePage(startPage - 1, '...', false);
	        pages.unshift(previousPageSet);
	      }
	        if (boundaryLinkNumbers) {
	          if (startPage === 3) { //need to replace ellipsis when the buttons would be sequential
	            var secondPageLink = makePage(2, '2', false);
	            pages.unshift(secondPageLink);
	          }
	          //add the first page
	          var firstPageLink = makePage(1, '1', false);
	          pages.unshift(firstPageLink);
	        }
	      }

	      if (endPage < totalPages) {
	        if (!boundaryLinkNumbers || endPage < totalPages - 2) { //need ellipsis for all options unless range is too close to end
	        var nextPageSet = makePage(endPage + 1, '...', false);
	        pages.push(nextPageSet);
	      }
	        if (boundaryLinkNumbers) {
	          if (endPage === totalPages - 2) { //need to replace ellipsis when the buttons would be sequential
	            var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
	            pages.push(secondToLastPageLink);
	          }
	          //add the last page
	          var lastPageLink = makePage(totalPages, totalPages, false);
	          pages.push(lastPageLink);
	        }
	      }
	    }
	    return pages;
	  }

	  var originalRender = this.render;
	  this.render = function() {
	    originalRender();
	    if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
	      $scope.pages = getPages($scope.page, $scope.totalPages);
	    }
	  };
	}])

	.constant('uibPaginationConfig', {
	  itemsPerPage: 10,
	  boundaryLinks: false,
	  boundaryLinkNumbers: false,
	  directionLinks: true,
	  firstText: 'First',
	  previousText: 'Previous',
	  nextText: 'Next',
	  lastText: 'Last',
	  rotate: true,
	  forceEllipses: false
	})

	.directive('uibPagination', ['$parse', 'uibPaginationConfig', function($parse, uibPaginationConfig) {
	  return {
	    scope: {
	      totalItems: '=',
	      firstText: '@',
	      previousText: '@',
	      nextText: '@',
	      lastText: '@',
	      ngDisabled:'='
	    },
	    require: ['uibPagination', '?ngModel'],
	    controller: 'UibPaginationController',
	    controllerAs: 'pagination',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/pagination/pagination.html';
	    },
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	         return; // do nothing if no ng-model
	      }

	      paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
	    }
	  };
	}]);

	/**
	 * The following features are still outstanding: animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, html tooltips, and selector delegation.
	 */
	angular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap'])

	/**
	 * The $tooltip service creates tooltip- and popover-like directives as well as
	 * houses global options for them.
	 */
	.provider('$uibTooltip', function() {
	  // The default options tooltip and popover.
	  var defaultOptions = {
	    placement: 'top',
	    placementClassPrefix: '',
	    animation: true,
	    popupDelay: 0,
	    popupCloseDelay: 0,
	    useContentExp: false
	  };

	  // Default hide triggers for each show trigger
	  var triggerMap = {
	    'mouseenter': 'mouseleave',
	    'click': 'click',
	    'outsideClick': 'outsideClick',
	    'focus': 'blur',
	    'none': ''
	  };

	  // The options specified to the provider globally.
	  var globalOptions = {};

	  /**
	   * `options({})` allows global configuration of all tooltips in the
	   * application.
	   *
	   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
	   *     // place tooltips left instead of top by default
	   *     $tooltipProvider.options( { placement: 'left' } );
	   *   });
	   */
		this.options = function(value) {
			angular.extend(globalOptions, value);
		};

	  /**
	   * This allows you to extend the set of trigger mappings available. E.g.:
	   *
	   *   $tooltipProvider.setTriggers( { 'openTrigger': 'closeTrigger' } );
	   */
	  this.setTriggers = function setTriggers(triggers) {
	    angular.extend(triggerMap, triggers);
	  };

	  /**
	   * This is a helper function for translating camel-case to snake_case.
	   */
	  function snake_case(name) {
	    var regexp = /[A-Z]/g;
	    var separator = '-';
	    return name.replace(regexp, function(letter, pos) {
	      return (pos ? separator : '') + letter.toLowerCase();
	    });
	  }

	  /**
	   * Returns the actual instance of the $tooltip service.
	   * TODO support multiple triggers
	   */
	  this.$get = ['$window', '$compile', '$timeout', '$document', '$uibPosition', '$interpolate', '$rootScope', '$parse', '$$stackedMap', function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
	    var openedTooltips = $$stackedMap.createNew();
	    $document.on('keypress', keypressListener);

	    $rootScope.$on('$destroy', function() {
	      $document.off('keypress', keypressListener);
	    });

	    function keypressListener(e) {
	      if (e.which === 27) {
	        var last = openedTooltips.top();
	        if (last) {
	          last.value.close();
	          openedTooltips.removeTop();
	          last = null;
	        }
	      }
	    }

	    return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
	      options = angular.extend({}, defaultOptions, globalOptions, options);

	      /**
	       * Returns an object of show and hide triggers.
	       *
	       * If a trigger is supplied,
	       * it is used to show the tooltip; otherwise, it will use the `trigger`
	       * option passed to the `$tooltipProvider.options` method; else it will
	       * default to the trigger supplied to this directive factory.
	       *
	       * The hide trigger is based on the show trigger. If the `trigger` option
	       * was passed to the `$tooltipProvider.options` method, it will use the
	       * mapped trigger from `triggerMap` or the passed trigger if the map is
	       * undefined; otherwise, it uses the `triggerMap` value of the show
	       * trigger; else it will just use the show trigger.
	       */
	      function getTriggers(trigger) {
	        var show = (trigger || options.trigger || defaultTriggerShow).split(' ');
	        var hide = show.map(function(trigger) {
	          return triggerMap[trigger] || trigger;
	        });
	        return {
	          show: show,
	          hide: hide
	        };
	      }

	      var directiveName = snake_case(ttType);

	      var startSym = $interpolate.startSymbol();
	      var endSym = $interpolate.endSymbol();
	      var template =
	        '<div '+ directiveName + '-popup ' +
	          'uib-title="' + startSym + 'title' + endSym + '" ' +
	          (options.useContentExp ?
	            'content-exp="contentExp()" ' :
	            'content="' + startSym + 'content' + endSym + '" ') +
	          'placement="' + startSym + 'placement' + endSym + '" ' +
	          'popup-class="' + startSym + 'popupClass' + endSym + '" ' +
	          'animation="animation" ' +
	          'is-open="isOpen" ' +
	          'origin-scope="origScope" ' +
	          'class="uib-position-measure"' +
	          '>' +
	        '</div>';

	      return {
	        compile: function(tElem, tAttrs) {
	          var tooltipLinker = $compile(template);

	          return function link(scope, element, attrs, tooltipCtrl) {
	            var tooltip;
	            var tooltipLinkedScope;
	            var transitionTimeout;
	            var showTimeout;
	            var hideTimeout;
	            var positionTimeout;
	            var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
	            var triggers = getTriggers(undefined);
	            var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);
	            var ttScope = scope.$new(true);
	            var repositionScheduled = false;
	            var isOpenParse = angular.isDefined(attrs[prefix + 'IsOpen']) ? $parse(attrs[prefix + 'IsOpen']) : false;
	            var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
	            var observers = [];
	            var lastPlacement;

	            var positionTooltip = function() {
	              // check if tooltip exists and is not empty
	              if (!tooltip || !tooltip.html()) { return; }

	              if (!positionTimeout) {
	                positionTimeout = $timeout(function() {
	                  var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
	                  tooltip.css({ top: ttPosition.top + 'px', left: ttPosition.left + 'px' });

	                  if (!tooltip.hasClass(ttPosition.placement.split('-')[0])) {
	                    tooltip.removeClass(lastPlacement.split('-')[0]);
	                    tooltip.addClass(ttPosition.placement.split('-')[0]);
	                  }

	                  if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
	                    tooltip.removeClass(options.placementClassPrefix + lastPlacement);
	                    tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
	                  }

	                  // first time through tt element will have the
	                  // uib-position-measure class or if the placement
	                  // has changed we need to position the arrow.
	                  if (tooltip.hasClass('uib-position-measure')) {
	                    $position.positionArrow(tooltip, ttPosition.placement);
	                    tooltip.removeClass('uib-position-measure');
	                  } else if (lastPlacement !== ttPosition.placement) {
	                    $position.positionArrow(tooltip, ttPosition.placement);
	                  }
	                  lastPlacement = ttPosition.placement;

	                  positionTimeout = null;
	                }, 0, false);
	              }
	            };

	            // Set up the correct scope to allow transclusion later
	            ttScope.origScope = scope;

	            // By default, the tooltip is not open.
	            // TODO add ability to start tooltip opened
	            ttScope.isOpen = false;
	            openedTooltips.add(ttScope, {
	              close: hide
	            });

	            function toggleTooltipBind() {
	              if (!ttScope.isOpen) {
	                showTooltipBind();
	              } else {
	                hideTooltipBind();
	              }
	            }

	            // Show the tooltip with delay if specified, otherwise show it immediately
	            function showTooltipBind() {
	              if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
	                return;
	              }

	              cancelHide();
	              prepareTooltip();

	              if (ttScope.popupDelay) {
	                // Do nothing if the tooltip was already scheduled to pop-up.
	                // This happens if show is triggered multiple times before any hide is triggered.
	                if (!showTimeout) {
	                  showTimeout = $timeout(show, ttScope.popupDelay, false);
	                }
	              } else {
	                show();
	              }
	            }

	            function hideTooltipBind() {
	              cancelShow();

	              if (ttScope.popupCloseDelay) {
	                if (!hideTimeout) {
	                  hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
	                }
	              } else {
	                hide();
	              }
	            }

	            // Show the tooltip popup element.
	            function show() {
	              cancelShow();
	              cancelHide();

	              // Don't show empty tooltips.
	              if (!ttScope.content) {
	                return angular.noop;
	              }

	              createTooltip();

	              // And show the tooltip.
	              ttScope.$evalAsync(function() {
	                ttScope.isOpen = true;
	                assignIsOpen(true);
	                positionTooltip();
	              });
	            }

	            function cancelShow() {
	              if (showTimeout) {
	                $timeout.cancel(showTimeout);
	                showTimeout = null;
	              }

	              if (positionTimeout) {
	                $timeout.cancel(positionTimeout);
	                positionTimeout = null;
	              }
	            }

	            // Hide the tooltip popup element.
	            function hide() {
	              if (!ttScope) {
	                return;
	              }

	              // First things first: we don't show it anymore.
	              ttScope.$evalAsync(function() {
	                if (ttScope) {
	                  ttScope.isOpen = false;
	                  assignIsOpen(false);
	                  // And now we remove it from the DOM. However, if we have animation, we
	                  // need to wait for it to expire beforehand.
	                  // FIXME: this is a placeholder for a port of the transitions library.
	                  // The fade transition in TWBS is 150ms.
	                  if (ttScope.animation) {
	                    if (!transitionTimeout) {
	                      transitionTimeout = $timeout(removeTooltip, 150, false);
	                    }
	                  } else {
	                    removeTooltip();
	                  }
	                }
	              });
	            }

	            function cancelHide() {
	              if (hideTimeout) {
	                $timeout.cancel(hideTimeout);
	                hideTimeout = null;
	              }

	              if (transitionTimeout) {
	                $timeout.cancel(transitionTimeout);
	                transitionTimeout = null;
	              }
	            }

	            function createTooltip() {
	              // There can only be one tooltip element per directive shown at once.
	              if (tooltip) {
	                return;
	              }

	              tooltipLinkedScope = ttScope.$new();
	              tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
	                if (appendToBody) {
	                  $document.find('body').append(tooltip);
	                } else {
	                  element.after(tooltip);
	                }
	              });

	              prepObservers();
	            }

	            function removeTooltip() {
	              cancelShow();
	              cancelHide();
	              unregisterObservers();

	              if (tooltip) {
	                tooltip.remove();
	                tooltip = null;
	              }
	              if (tooltipLinkedScope) {
	                tooltipLinkedScope.$destroy();
	                tooltipLinkedScope = null;
	              }
	            }

	            /**
	             * Set the initial scope values. Once
	             * the tooltip is created, the observers
	             * will be added to keep things in sync.
	             */
	            function prepareTooltip() {
	              ttScope.title = attrs[prefix + 'Title'];
	              if (contentParse) {
	                ttScope.content = contentParse(scope);
	              } else {
	                ttScope.content = attrs[ttType];
	              }

	              ttScope.popupClass = attrs[prefix + 'Class'];
	              ttScope.placement = angular.isDefined(attrs[prefix + 'Placement']) ? attrs[prefix + 'Placement'] : options.placement;
	              var placement = $position.parsePlacement(ttScope.placement);
	              lastPlacement = placement[1] ? placement[0] + '-' + placement[1] : placement[0];

	              var delay = parseInt(attrs[prefix + 'PopupDelay'], 10);
	              var closeDelay = parseInt(attrs[prefix + 'PopupCloseDelay'], 10);
	              ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
	              ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
	            }

	            function assignIsOpen(isOpen) {
	              if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
	                isOpenParse.assign(scope, isOpen);
	              }
	            }

	            ttScope.contentExp = function() {
	              return ttScope.content;
	            };

	            /**
	             * Observe the relevant attributes.
	             */
	            attrs.$observe('disabled', function(val) {
	              if (val) {
	                cancelShow();
	              }

	              if (val && ttScope.isOpen) {
	                hide();
	              }
	            });

	            if (isOpenParse) {
	              scope.$watch(isOpenParse, function(val) {
	                if (ttScope && !val === ttScope.isOpen) {
	                  toggleTooltipBind();
	                }
	              });
	            }

	            function prepObservers() {
	              observers.length = 0;

	              if (contentParse) {
	                observers.push(
	                  scope.$watch(contentParse, function(val) {
	                    ttScope.content = val;
	                    if (!val && ttScope.isOpen) {
	                      hide();
	                    }
	                  })
	                );

	                observers.push(
	                  tooltipLinkedScope.$watch(function() {
	                    if (!repositionScheduled) {
	                      repositionScheduled = true;
	                      tooltipLinkedScope.$$postDigest(function() {
	                        repositionScheduled = false;
	                        if (ttScope && ttScope.isOpen) {
	                          positionTooltip();
	                        }
	                      });
	                    }
	                  })
	                );
	              } else {
	                observers.push(
	                  attrs.$observe(ttType, function(val) {
	                    ttScope.content = val;
	                    if (!val && ttScope.isOpen) {
	                      hide();
	                    } else {
	                      positionTooltip();
	                    }
	                  })
	                );
	              }

	              observers.push(
	                attrs.$observe(prefix + 'Title', function(val) {
	                  ttScope.title = val;
	                  if (ttScope.isOpen) {
	                    positionTooltip();
	                  }
	                })
	              );

	              observers.push(
	                attrs.$observe(prefix + 'Placement', function(val) {
	                  ttScope.placement = val ? val : options.placement;
	                  if (ttScope.isOpen) {
	                    positionTooltip();
	                  }
	                })
	              );
	            }

	            function unregisterObservers() {
	              if (observers.length) {
	                angular.forEach(observers, function(observer) {
	                  observer();
	                });
	                observers.length = 0;
	              }
	            }

	            // hide tooltips/popovers for outsideClick trigger
	            function bodyHideTooltipBind(e) {
	              if (!ttScope || !ttScope.isOpen || !tooltip) {
	                return;
	              }
	              // make sure the tooltip/popover link or tool tooltip/popover itself were not clicked
	              if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
	                hideTooltipBind();
	              }
	            }

	            var unregisterTriggers = function() {
	              triggers.show.forEach(function(trigger) {
	                if (trigger === 'outsideClick') {
	                  element.off('click', toggleTooltipBind);
	                } else {
	                  element.off(trigger, showTooltipBind);
	                  element.off(trigger, toggleTooltipBind);
	                }
	              });
	              triggers.hide.forEach(function(trigger) {
	                if (trigger === 'outsideClick') {
	                  $document.off('click', bodyHideTooltipBind);
	                } else {
	                  element.off(trigger, hideTooltipBind);
	                }
	              });
	            };

	            function prepTriggers() {
	              var val = attrs[prefix + 'Trigger'];
	              unregisterTriggers();

	              triggers = getTriggers(val);

	              if (triggers.show !== 'none') {
	                triggers.show.forEach(function(trigger, idx) {
	                  if (trigger === 'outsideClick') {
	                    element.on('click', toggleTooltipBind);
	                    $document.on('click', bodyHideTooltipBind);
	                  } else if (trigger === triggers.hide[idx]) {
	                    element.on(trigger, toggleTooltipBind);
	                  } else if (trigger) {
	                    element.on(trigger, showTooltipBind);
	                    element.on(triggers.hide[idx], hideTooltipBind);
	                  }

	                  element.on('keypress', function(e) {
	                    if (e.which === 27) {
	                      hideTooltipBind();
	                    }
	                  });
	                });
	              }
	            }

	            prepTriggers();

	            var animation = scope.$eval(attrs[prefix + 'Animation']);
	            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

	            var appendToBodyVal;
	            var appendKey = prefix + 'AppendToBody';
	            if (appendKey in attrs && attrs[appendKey] === undefined) {
	              appendToBodyVal = true;
	            } else {
	              appendToBodyVal = scope.$eval(attrs[appendKey]);
	            }

	            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

	            // Make sure tooltip is destroyed and removed.
	            scope.$on('$destroy', function onDestroyTooltip() {
	              unregisterTriggers();
	              removeTooltip();
	              openedTooltips.remove(ttScope);
	              ttScope = null;
	            });
	          };
	        }
	      };
	    };
	  }];
	})

	// This is mostly ngInclude code but with a custom scope
	.directive('uibTooltipTemplateTransclude', [
	         '$animate', '$sce', '$compile', '$templateRequest',
	function ($animate, $sce, $compile, $templateRequest) {
	  return {
	    link: function(scope, elem, attrs) {
	      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

	      var changeCounter = 0,
	        currentScope,
	        previousElement,
	        currentElement;

	      var cleanupLastIncludeContent = function() {
	        if (previousElement) {
	          previousElement.remove();
	          previousElement = null;
	        }

	        if (currentScope) {
	          currentScope.$destroy();
	          currentScope = null;
	        }

	        if (currentElement) {
	          $animate.leave(currentElement).then(function() {
	            previousElement = null;
	          });
	          previousElement = currentElement;
	          currentElement = null;
	        }
	      };

	      scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
	        var thisChangeId = ++changeCounter;

	        if (src) {
	          //set the 2nd param to true to ignore the template request error so that the inner
	          //contents and scope can be cleaned up.
	          $templateRequest(src, true).then(function(response) {
	            if (thisChangeId !== changeCounter) { return; }
	            var newScope = origScope.$new();
	            var template = response;

	            var clone = $compile(template)(newScope, function(clone) {
	              cleanupLastIncludeContent();
	              $animate.enter(clone, elem);
	            });

	            currentScope = newScope;
	            currentElement = clone;

	            currentScope.$emit('$includeContentLoaded', src);
	          }, function() {
	            if (thisChangeId === changeCounter) {
	              cleanupLastIncludeContent();
	              scope.$emit('$includeContentError', src);
	            }
	          });
	          scope.$emit('$includeContentRequested', src);
	        } else {
	          cleanupLastIncludeContent();
	        }
	      });

	      scope.$on('$destroy', cleanupLastIncludeContent);
	    }
	  };
	}])

	/**
	 * Note that it's intentional that these classes are *not* applied through $animate.
	 * They must not be animated as they're expected to be present on the tooltip on
	 * initialization.
	 */
	.directive('uibTooltipClasses', ['$uibPosition', function($uibPosition) {
	  return {
	    restrict: 'A',
	    link: function(scope, element, attrs) {
	      // need to set the primary position so the
	      // arrow has space during position measure.
	      // tooltip.positionTooltip()
	      if (scope.placement) {
	        // // There are no top-left etc... classes
	        // // in TWBS, so we need the primary position.
	        var position = $uibPosition.parsePlacement(scope.placement);
	        element.addClass(position[0]);
	      }

	      if (scope.popupClass) {
	        element.addClass(scope.popupClass);
	      }

	      if (scope.animation()) {
	        element.addClass(attrs.tooltipAnimationClass);
	      }
	    }
	  };
	}])

	.directive('uibTooltipPopup', function() {
	  return {
	    replace: true,
	    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-popup.html'
	  };
	})

	.directive('uibTooltip', [ '$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltip', 'tooltip', 'mouseenter');
	}])

	.directive('uibTooltipTemplatePopup', function() {
	  return {
	    replace: true,
	    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
	      originScope: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'
	  };
	})

	.directive('uibTooltipTemplate', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltipTemplate', 'tooltip', 'mouseenter', {
	    useContentExp: true
	  });
	}])

	.directive('uibTooltipHtmlPopup', function() {
	  return {
	    replace: true,
	    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-html-popup.html'
	  };
	})

	.directive('uibTooltipHtml', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltipHtml', 'tooltip', 'mouseenter', {
	    useContentExp: true
	  });
	}]);

	/**
	 * The following features are still outstanding: popup delay, animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, and selector delegatation.
	 */
	angular.module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

	.directive('uibPopoverTemplatePopup', function() {
	  return {
	    replace: true,
	    scope: { uibTitle: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
	      originScope: '&' },
	    templateUrl: 'uib/template/popover/popover-template.html'
	  };
	})

	.directive('uibPopoverTemplate', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopoverTemplate', 'popover', 'click', {
	    useContentExp: true
	  });
	}])

	.directive('uibPopoverHtmlPopup', function() {
	  return {
	    replace: true,
	    scope: { contentExp: '&', uibTitle: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/popover/popover-html.html'
	  };
	})

	.directive('uibPopoverHtml', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopoverHtml', 'popover', 'click', {
	    useContentExp: true
	  });
	}])

	.directive('uibPopoverPopup', function() {
	  return {
	    replace: true,
	    scope: { uibTitle: '@', content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/popover/popover.html'
	  };
	})

	.directive('uibPopover', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopover', 'popover', 'click');
	}]);

	angular.module('ui.bootstrap.progressbar', [])

	.constant('uibProgressConfig', {
	  animate: true,
	  max: 100
	})

	.controller('UibProgressController', ['$scope', '$attrs', 'uibProgressConfig', function($scope, $attrs, progressConfig) {
	  var self = this,
	      animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

	  this.bars = [];
	  $scope.max = getMaxOrDefault();

	  this.addBar = function(bar, element, attrs) {
	    if (!animate) {
	      element.css({'transition': 'none'});
	    }

	    this.bars.push(bar);

	    bar.max = getMaxOrDefault();
	    bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : 'progressbar';

	    bar.$watch('value', function(value) {
	      bar.recalculatePercentage();
	    });

	    bar.recalculatePercentage = function() {
	      var totalPercentage = self.bars.reduce(function(total, bar) {
	        bar.percent = +(100 * bar.value / bar.max).toFixed(2);
	        return total + bar.percent;
	      }, 0);

	      if (totalPercentage > 100) {
	        bar.percent -= totalPercentage - 100;
	      }
	    };

	    bar.$on('$destroy', function() {
	      element = null;
	      self.removeBar(bar);
	    });
	  };

	  this.removeBar = function(bar) {
	    this.bars.splice(this.bars.indexOf(bar), 1);
	    this.bars.forEach(function (bar) {
	      bar.recalculatePercentage();
	    });
	  };

	  //$attrs.$observe('maxParam', function(maxParam) {
	  $scope.$watch('maxParam', function(maxParam) {
	    self.bars.forEach(function(bar) {
	      bar.max = getMaxOrDefault();
	      bar.recalculatePercentage();
	    });
	  });

	  function getMaxOrDefault () {
	    return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
	  }
	}])

	.directive('uibProgress', function() {
	  return {
	    replace: true,
	    transclude: true,
	    controller: 'UibProgressController',
	    require: 'uibProgress',
	    scope: {
	      maxParam: '=?max'
	    },
	    templateUrl: 'uib/template/progressbar/progress.html'
	  };
	})

	.directive('uibBar', function() {
	  return {
	    replace: true,
	    transclude: true,
	    require: '^uibProgress',
	    scope: {
	      value: '=',
	      type: '@'
	    },
	    templateUrl: 'uib/template/progressbar/bar.html',
	    link: function(scope, element, attrs, progressCtrl) {
	      progressCtrl.addBar(scope, element, attrs);
	    }
	  };
	})

	.directive('uibProgressbar', function() {
	  return {
	    replace: true,
	    transclude: true,
	    controller: 'UibProgressController',
	    scope: {
	      value: '=',
	      maxParam: '=?max',
	      type: '@'
	    },
	    templateUrl: 'uib/template/progressbar/progressbar.html',
	    link: function(scope, element, attrs, progressCtrl) {
	      progressCtrl.addBar(scope, angular.element(element.children()[0]), {title: attrs.title});
	    }
	  };
	});

	angular.module('ui.bootstrap.rating', [])

	.constant('uibRatingConfig', {
	  max: 5,
	  stateOn: null,
	  stateOff: null,
	  enableReset: true,
	  titles : ['one', 'two', 'three', 'four', 'five']
	})

	.controller('UibRatingController', ['$scope', '$attrs', 'uibRatingConfig', function($scope, $attrs, ratingConfig) {
	  var ngModelCtrl = { $setViewValue: angular.noop },
	    self = this;

	  this.init = function(ngModelCtrl_) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    ngModelCtrl.$formatters.push(function(value) {
	      if (angular.isNumber(value) && value << 0 !== value) {
	        value = Math.round(value);
	      }

	      return value;
	    });

	    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
	    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
	    this.enableReset = angular.isDefined($attrs.enableReset) ?
	      $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
	    var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
	    this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ?
	      tmpTitles : ratingConfig.titles;

	    var ratingStates = angular.isDefined($attrs.ratingStates) ?
	      $scope.$parent.$eval($attrs.ratingStates) :
	      new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
	    $scope.range = this.buildTemplateObjects(ratingStates);
	  };

	  this.buildTemplateObjects = function(states) {
	    for (var i = 0, n = states.length; i < n; i++) {
	      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(i) }, states[i]);
	    }
	    return states;
	  };

	  this.getTitle = function(index) {
	    if (index >= this.titles.length) {
	      return index + 1;
	    }

	    return this.titles[index];
	  };

	  $scope.rate = function(value) {
	    if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
	      var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
	      ngModelCtrl.$setViewValue(newViewValue);
	      ngModelCtrl.$render();
	    }
	  };

	  $scope.enter = function(value) {
	    if (!$scope.readonly) {
	      $scope.value = value;
	    }
	    $scope.onHover({value: value});
	  };

	  $scope.reset = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	    $scope.onLeave();
	  };

	  $scope.onKeydown = function(evt) {
	    if (/(37|38|39|40)/.test(evt.which)) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
	    }
	  };

	  this.render = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	    $scope.title = self.getTitle($scope.value - 1);
	  };
	}])

	.directive('uibRating', function() {
	  return {
	    require: ['uibRating', 'ngModel'],
	    scope: {
	      readonly: '=?readOnly',
	      onHover: '&',
	      onLeave: '&'
	    },
	    controller: 'UibRatingController',
	    templateUrl: 'uib/template/rating/rating.html',
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
	      ratingCtrl.init(ngModelCtrl);
	    }
	  };
	});

	angular.module('ui.bootstrap.tabs', [])

	.controller('UibTabsetController', ['$scope', function ($scope) {
	  var ctrl = this,
	    oldIndex;
	  ctrl.tabs = [];

	  ctrl.select = function(index, evt) {
	    if (!destroyed) {
	      var previousIndex = findTabIndex(oldIndex);
	      var previousSelected = ctrl.tabs[previousIndex];
	      if (previousSelected) {
	        previousSelected.tab.onDeselect({
	          $event: evt
	        });
	        if (evt && evt.isDefaultPrevented()) {
	          return;
	        }
	        previousSelected.tab.active = false;
	      }

	      var selected = ctrl.tabs[index];
	      if (selected) {
	        selected.tab.onSelect({
	          $event: evt
	        });
	        selected.tab.active = true;
	        ctrl.active = selected.index;
	        oldIndex = selected.index;
	      } else if (!selected && angular.isNumber(oldIndex)) {
	        ctrl.active = null;
	        oldIndex = null;
	      }
	    }
	  };

	  ctrl.addTab = function addTab(tab) {
	    ctrl.tabs.push({
	      tab: tab,
	      index: tab.index
	    });
	    ctrl.tabs.sort(function(t1, t2) {
	      if (t1.index > t2.index) {
	        return 1;
	      }

	      if (t1.index < t2.index) {
	        return -1;
	      }

	      return 0;
	    });

	    if (tab.index === ctrl.active || !angular.isNumber(ctrl.active) && ctrl.tabs.length === 1) {
	      var newActiveIndex = findTabIndex(tab.index);
	      ctrl.select(newActiveIndex);
	    }
	  };

	  ctrl.removeTab = function removeTab(tab) {
	    var index;
	    for (var i = 0; i < ctrl.tabs.length; i++) {
	      if (ctrl.tabs[i].tab === tab) {
	        index = i;
	        break;
	      }
	    }

	    if (ctrl.tabs[index].index === ctrl.active) {
	      var newActiveTabIndex = index === ctrl.tabs.length - 1 ?
	        index - 1 : index + 1 % ctrl.tabs.length;
	      ctrl.select(newActiveTabIndex);
	    }

	    ctrl.tabs.splice(index, 1);
	  };

	  $scope.$watch('tabset.active', function(val) {
	    if (angular.isNumber(val) && val !== oldIndex) {
	      ctrl.select(findTabIndex(val));
	    }
	  });

	  var destroyed;
	  $scope.$on('$destroy', function() {
	    destroyed = true;
	  });

	  function findTabIndex(index) {
	    for (var i = 0; i < ctrl.tabs.length; i++) {
	      if (ctrl.tabs[i].index === index) {
	        return i;
	      }
	    }
	  }
	}])

	.directive('uibTabset', function() {
	  return {
	    transclude: true,
	    replace: true,
	    scope: {},
	    bindToController: {
	      active: '=?',
	      type: '@'
	    },
	    controller: 'UibTabsetController',
	    controllerAs: 'tabset',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/tabs/tabset.html';
	    },
	    link: function(scope, element, attrs) {
	      scope.vertical = angular.isDefined(attrs.vertical) ?
	        scope.$parent.$eval(attrs.vertical) : false;
	      scope.justified = angular.isDefined(attrs.justified) ?
	        scope.$parent.$eval(attrs.justified) : false;
	      if (angular.isUndefined(attrs.active)) {
	        scope.active = 0;
	      }
	    }
	  };
	})

	.directive('uibTab', ['$parse', function($parse) {
	  return {
	    require: '^uibTabset',
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/tabs/tab.html';
	    },
	    transclude: true,
	    scope: {
	      heading: '@',
	      index: '=?',
	      classes: '@?',
	      onSelect: '&select', //This callback is called in contentHeadingTransclude
	                          //once it inserts the tab's content into the dom
	      onDeselect: '&deselect'
	    },
	    controller: function() {
	      //Empty controller so other directives can require being 'under' a tab
	    },
	    controllerAs: 'tab',
	    link: function(scope, elm, attrs, tabsetCtrl, transclude) {
	      scope.disabled = false;
	      if (attrs.disable) {
	        scope.$parent.$watch($parse(attrs.disable), function(value) {
	          scope.disabled = !! value;
	        });
	      }

	      if (angular.isUndefined(attrs.index)) {
	        if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
	          scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) { return t.index; })) + 1;
	        } else {
	          scope.index = 0;
	        }
	      }

	      if (angular.isUndefined(attrs.classes)) {
	        scope.classes = '';
	      }

	      scope.select = function(evt) {
	        if (!scope.disabled) {
	          var index;
	          for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
	            if (tabsetCtrl.tabs[i].tab === scope) {
	              index = i;
	              break;
	            }
	          }

	          tabsetCtrl.select(index, evt);
	        }
	      };

	      tabsetCtrl.addTab(scope);
	      scope.$on('$destroy', function() {
	        tabsetCtrl.removeTab(scope);
	      });

	      //We need to transclude later, once the content container is ready.
	      //when this link happens, we're inside a tab heading.
	      scope.$transcludeFn = transclude;
	    }
	  };
	}])

	.directive('uibTabHeadingTransclude', function() {
	  return {
	    restrict: 'A',
	    require: '^uibTab',
	    link: function(scope, elm) {
	      scope.$watch('headingElement', function updateHeadingElement(heading) {
	        if (heading) {
	          elm.html('');
	          elm.append(heading);
	        }
	      });
	    }
	  };
	})

	.directive('uibTabContentTransclude', function() {
	  return {
	    restrict: 'A',
	    require: '^uibTabset',
	    link: function(scope, elm, attrs) {
	      var tab = scope.$eval(attrs.uibTabContentTransclude).tab;

	      //Now our tab is ready to be transcluded: both the tab heading area
	      //and the tab content area are loaded.  Transclude 'em both.
	      tab.$transcludeFn(tab.$parent, function(contents) {
	        angular.forEach(contents, function(node) {
	          if (isTabHeading(node)) {
	            //Let tabHeadingTransclude know.
	            tab.headingElement = node;
	          } else {
	            elm.append(node);
	          }
	        });
	      });
	    }
	  };

	  function isTabHeading(node) {
	    return node.tagName && (
	      node.hasAttribute('uib-tab-heading') ||
	      node.hasAttribute('data-uib-tab-heading') ||
	      node.hasAttribute('x-uib-tab-heading') ||
	      node.tagName.toLowerCase() === 'uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'data-uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'x-uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'uib:tab-heading'
	    );
	  }
	});

	angular.module('ui.bootstrap.timepicker', [])

	.constant('uibTimepickerConfig', {
	  hourStep: 1,
	  minuteStep: 1,
	  secondStep: 1,
	  showMeridian: true,
	  showSeconds: false,
	  meridians: null,
	  readonlyInput: false,
	  mousewheel: true,
	  arrowkeys: true,
	  showSpinners: true,
	  templateUrl: 'uib/template/timepicker/timepicker.html'
	})

	.controller('UibTimepickerController', ['$scope', '$element', '$attrs', '$parse', '$log', '$locale', 'uibTimepickerConfig', function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
	  var selected = new Date(),
	    watchers = [],
	    ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
	    meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS,
	    padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;

	  $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
	  $element.removeAttr('tabindex');

	  this.init = function(ngModelCtrl_, inputs) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    ngModelCtrl.$formatters.unshift(function(modelValue) {
	      return modelValue ? new Date(modelValue) : null;
	    });

	    var hoursInputEl = inputs.eq(0),
	        minutesInputEl = inputs.eq(1),
	        secondsInputEl = inputs.eq(2);

	    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;

	    if (mousewheel) {
	      this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	    }

	    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
	    if (arrowkeys) {
	      this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	    }

	    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
	    this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	  };

	  var hourStep = timepickerConfig.hourStep;
	  if ($attrs.hourStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
	      hourStep = +value;
	    }));
	  }

	  var minuteStep = timepickerConfig.minuteStep;
	  if ($attrs.minuteStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
	      minuteStep = +value;
	    }));
	  }

	  var min;
	  watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
	    var dt = new Date(value);
	    min = isNaN(dt) ? undefined : dt;
	  }));

	  var max;
	  watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
	    var dt = new Date(value);
	    max = isNaN(dt) ? undefined : dt;
	  }));

	  var disabled = false;
	  if ($attrs.ngDisabled) {
	    watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
	      disabled = value;
	    }));
	  }

	  $scope.noIncrementHours = function() {
	    var incrementedSelected = addMinutes(selected, hourStep * 60);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementHours = function() {
	    var decrementedSelected = addMinutes(selected, -hourStep * 60);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noIncrementMinutes = function() {
	    var incrementedSelected = addMinutes(selected, minuteStep);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementMinutes = function() {
	    var decrementedSelected = addMinutes(selected, -minuteStep);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noIncrementSeconds = function() {
	    var incrementedSelected = addSeconds(selected, secondStep);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementSeconds = function() {
	    var decrementedSelected = addSeconds(selected, -secondStep);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noToggleMeridian = function() {
	    if (selected.getHours() < 12) {
	      return disabled || addMinutes(selected, 12 * 60) > max;
	    }

	    return disabled || addMinutes(selected, -12 * 60) < min;
	  };

	  var secondStep = timepickerConfig.secondStep;
	  if ($attrs.secondStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
	      secondStep = +value;
	    }));
	  }

	  $scope.showSeconds = timepickerConfig.showSeconds;
	  if ($attrs.showSeconds) {
	    watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
	      $scope.showSeconds = !!value;
	    }));
	  }

	  // 12H / 24H mode
	  $scope.showMeridian = timepickerConfig.showMeridian;
	  if ($attrs.showMeridian) {
	    watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
	      $scope.showMeridian = !!value;

	      if (ngModelCtrl.$error.time) {
	        // Evaluate from template
	        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
	        if (angular.isDefined(hours) && angular.isDefined(minutes)) {
	          selected.setHours(hours);
	          refresh();
	        }
	      } else {
	        updateTemplate();
	      }
	    }));
	  }

	  // Get $scope.hours in 24H mode if valid
	  function getHoursFromTemplate() {
	    var hours = +$scope.hours;
	    var valid = $scope.showMeridian ? hours > 0 && hours < 13 :
	      hours >= 0 && hours < 24;
	    if (!valid || $scope.hours === '') {
	      return undefined;
	    }

	    if ($scope.showMeridian) {
	      if (hours === 12) {
	        hours = 0;
	      }
	      if ($scope.meridian === meridians[1]) {
	        hours = hours + 12;
	      }
	    }
	    return hours;
	  }

	  function getMinutesFromTemplate() {
	    var minutes = +$scope.minutes;
	    var valid = minutes >= 0 && minutes < 60;
	    if (!valid || $scope.minutes === '') {
	      return undefined;
	    }
	    return minutes;
	  }

	  function getSecondsFromTemplate() {
	    var seconds = +$scope.seconds;
	    return seconds >= 0 && seconds < 60 ? seconds : undefined;
	  }

	  function pad(value, noPad) {
	    if (value === null) {
	      return '';
	    }

	    return angular.isDefined(value) && value.toString().length < 2 && !noPad ?
	      '0' + value : value.toString();
	  }

	  // Respond on mousewheel spin
	  this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    var isScrollingUp = function(e) {
	      if (e.originalEvent) {
	        e = e.originalEvent;
	      }
	      //pick correct delta variable depending on event
	      var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
	      return e.detail || delta > 0;
	    };

	    hoursInputEl.bind('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
	      }
	      e.preventDefault();
	    });

	    minutesInputEl.bind('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
	      }
	      e.preventDefault();
	    });

	     secondsInputEl.bind('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
	      }
	      e.preventDefault();
	    });
	  };

	  // Respond on up/down arrowkeys
	  this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    hoursInputEl.bind('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementHours();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementHours();
	          $scope.$apply();
	        }
	      }
	    });

	    minutesInputEl.bind('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementMinutes();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementMinutes();
	          $scope.$apply();
	        }
	      }
	    });

	    secondsInputEl.bind('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementSeconds();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementSeconds();
	          $scope.$apply();
	        }
	      }
	    });
	  };

	  this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    if ($scope.readonlyInput) {
	      $scope.updateHours = angular.noop;
	      $scope.updateMinutes = angular.noop;
	      $scope.updateSeconds = angular.noop;
	      return;
	    }

	    var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
	      ngModelCtrl.$setViewValue(null);
	      ngModelCtrl.$setValidity('time', false);
	      if (angular.isDefined(invalidHours)) {
	        $scope.invalidHours = invalidHours;
	      }

	      if (angular.isDefined(invalidMinutes)) {
	        $scope.invalidMinutes = invalidMinutes;
	      }

	      if (angular.isDefined(invalidSeconds)) {
	        $scope.invalidSeconds = invalidSeconds;
	      }
	    };

	    $scope.updateHours = function() {
	      var hours = getHoursFromTemplate(),
	        minutes = getMinutesFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(hours) && angular.isDefined(minutes)) {
	        selected.setHours(hours);
	        selected.setMinutes(minutes);
	        if (selected < min || selected > max) {
	          invalidate(true);
	        } else {
	          refresh('h');
	        }
	      } else {
	        invalidate(true);
	      }
	    };

	    hoursInputEl.bind('blur', function(e) {
	      ngModelCtrl.$setTouched();
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if ($scope.hours === null || $scope.hours === '') {
	        invalidate(true);
	      } else if (!$scope.invalidHours && $scope.hours < 10) {
	        $scope.$apply(function() {
	          $scope.hours = pad($scope.hours, !padHours);
	        });
	      }
	    });

	    $scope.updateMinutes = function() {
	      var minutes = getMinutesFromTemplate(),
	        hours = getHoursFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
	        selected.setHours(hours);
	        selected.setMinutes(minutes);
	        if (selected < min || selected > max) {
	          invalidate(undefined, true);
	        } else {
	          refresh('m');
	        }
	      } else {
	        invalidate(undefined, true);
	      }
	    };

	    minutesInputEl.bind('blur', function(e) {
	      ngModelCtrl.$setTouched();
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if ($scope.minutes === null) {
	        invalidate(undefined, true);
	      } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
	        $scope.$apply(function() {
	          $scope.minutes = pad($scope.minutes);
	        });
	      }
	    });

	    $scope.updateSeconds = function() {
	      var seconds = getSecondsFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(seconds)) {
	        selected.setSeconds(seconds);
	        refresh('s');
	      } else {
	        invalidate(undefined, undefined, true);
	      }
	    };

	    secondsInputEl.bind('blur', function(e) {
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
	        $scope.$apply( function() {
	          $scope.seconds = pad($scope.seconds);
	        });
	      }
	    });

	  };

	  this.render = function() {
	    var date = ngModelCtrl.$viewValue;

	    if (isNaN(date)) {
	      ngModelCtrl.$setValidity('time', false);
	      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
	    } else {
	      if (date) {
	        selected = date;
	      }

	      if (selected < min || selected > max) {
	        ngModelCtrl.$setValidity('time', false);
	        $scope.invalidHours = true;
	        $scope.invalidMinutes = true;
	      } else {
	        makeValid();
	      }
	      updateTemplate();
	    }
	  };

	  // Call internally when we know that model is valid.
	  function refresh(keyboardChange) {
	    makeValid();
	    ngModelCtrl.$setViewValue(new Date(selected));
	    updateTemplate(keyboardChange);
	  }

	  function makeValid() {
	    ngModelCtrl.$setValidity('time', true);
	    $scope.invalidHours = false;
	    $scope.invalidMinutes = false;
	    $scope.invalidSeconds = false;
	  }

	  function updateTemplate(keyboardChange) {
	    if (!ngModelCtrl.$modelValue) {
	      $scope.hours = null;
	      $scope.minutes = null;
	      $scope.seconds = null;
	      $scope.meridian = meridians[0];
	    } else {
	      var hours = selected.getHours(),
	        minutes = selected.getMinutes(),
	        seconds = selected.getSeconds();

	      if ($scope.showMeridian) {
	        hours = hours === 0 || hours === 12 ? 12 : hours % 12; // Convert 24 to 12 hour system
	      }

	      $scope.hours = keyboardChange === 'h' ? hours : pad(hours, !padHours);
	      if (keyboardChange !== 'm') {
	        $scope.minutes = pad(minutes);
	      }
	      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];

	      if (keyboardChange !== 's') {
	        $scope.seconds = pad(seconds);
	      }
	      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
	    }
	  }

	  function addSecondsToSelected(seconds) {
	    selected = addSeconds(selected, seconds);
	    refresh();
	  }

	  function addMinutes(selected, minutes) {
	    return addSeconds(selected, minutes*60);
	  }

	  function addSeconds(date, seconds) {
	    var dt = new Date(date.getTime() + seconds * 1000);
	    var newDate = new Date(date);
	    newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
	    return newDate;
	  }

	  function modelIsEmpty() {
	    return ($scope.hours === null || $scope.hours === '') &&
	      ($scope.minutes === null || $scope.minutes === '') &&
	      (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ''));
	  }

	  $scope.showSpinners = angular.isDefined($attrs.showSpinners) ?
	    $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;

	  $scope.incrementHours = function() {
	    if (!$scope.noIncrementHours()) {
	      addSecondsToSelected(hourStep * 60 * 60);
	    }
	  };

	  $scope.decrementHours = function() {
	    if (!$scope.noDecrementHours()) {
	      addSecondsToSelected(-hourStep * 60 * 60);
	    }
	  };

	  $scope.incrementMinutes = function() {
	    if (!$scope.noIncrementMinutes()) {
	      addSecondsToSelected(minuteStep * 60);
	    }
	  };

	  $scope.decrementMinutes = function() {
	    if (!$scope.noDecrementMinutes()) {
	      addSecondsToSelected(-minuteStep * 60);
	    }
	  };

	  $scope.incrementSeconds = function() {
	    if (!$scope.noIncrementSeconds()) {
	      addSecondsToSelected(secondStep);
	    }
	  };

	  $scope.decrementSeconds = function() {
	    if (!$scope.noDecrementSeconds()) {
	      addSecondsToSelected(-secondStep);
	    }
	  };

	  $scope.toggleMeridian = function() {
	    var minutes = getMinutesFromTemplate(),
	        hours = getHoursFromTemplate();

	    if (!$scope.noToggleMeridian()) {
	      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
	        addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
	      } else {
	        $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
	      }
	    }
	  };

	  $scope.blur = function() {
	    ngModelCtrl.$setTouched();
	  };

	  $scope.$on('$destroy', function() {
	    while (watchers.length) {
	      watchers.shift()();
	    }
	  });
	}])

	.directive('uibTimepicker', ['uibTimepickerConfig', function(uibTimepickerConfig) {
	  return {
	    require: ['uibTimepicker', '?^ngModel'],
	    controller: 'UibTimepickerController',
	    controllerAs: 'timepicker',
	    replace: true,
	    scope: {},
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || uibTimepickerConfig.templateUrl;
	    },
	    link: function(scope, element, attrs, ctrls) {
	      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (ngModelCtrl) {
	        timepickerCtrl.init(ngModelCtrl, element.find('input'));
	      }
	    }
	  };
	}]);

	angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.debounce', 'ui.bootstrap.position'])

	/**
	 * A helper service that can parse typeahead's syntax (string provided by users)
	 * Extracted to a separate service for ease of unit testing
	 */
	  .factory('uibTypeaheadParser', ['$parse', function($parse) {
	    //                      00000111000000000000022200000000000000003333333333333330000000000044000
	    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
	    return {
	      parse: function(input) {
	        var match = input.match(TYPEAHEAD_REGEXP);
	        if (!match) {
	          throw new Error(
	            'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
	              ' but got "' + input + '".');
	        }

	        return {
	          itemName: match[3],
	          source: $parse(match[4]),
	          viewMapper: $parse(match[2] || match[1]),
	          modelMapper: $parse(match[1])
	        };
	      }
	    };
	  }])

	  .controller('UibTypeaheadController', ['$scope', '$element', '$attrs', '$compile', '$parse', '$q', '$timeout', '$document', '$window', '$rootScope', '$$debounce', '$uibPosition', 'uibTypeaheadParser',
	    function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
	    var HOT_KEYS = [9, 13, 27, 38, 40];
	    var eventDebounceTime = 200;
	    var modelCtrl, ngModelOptions;
	    //SUPPORTED ATTRIBUTES (OPTIONS)

	    //minimal no of characters that needs to be entered before typeahead kicks-in
	    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
	    if (!minLength && minLength !== 0) {
	      minLength = 1;
	    }

	    originalScope.$watch(attrs.typeaheadMinLength, function (newVal) {
	        minLength = !newVal && newVal !== 0 ? 1 : newVal;
	    });
	    
	    //minimal wait time after last character typed before typeahead kicks-in
	    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

	    //should it restrict model values to the ones selected from the popup only?
	    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
	    originalScope.$watch(attrs.typeaheadEditable, function (newVal) {
	      isEditable = newVal !== false;
	    });

	    //binding to a variable that indicates if matches are being retrieved asynchronously
	    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

	    //a callback executed when a match is selected
	    var onSelectCallback = $parse(attrs.typeaheadOnSelect);

	    //should it select highlighted popup value when losing focus?
	    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;

	    //binding to a variable that indicates if there were no results after the query is completed
	    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;

	    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

	    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

	    var appendTo = attrs.typeaheadAppendTo ?
	      originalScope.$eval(attrs.typeaheadAppendTo) : null;

	    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

	    //If input matches an item of the list exactly, select it automatically
	    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;

	    //binding to a variable that indicates if dropdown is open
	    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;

	    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;

	    //INTERNAL VARIABLES

	    //model setter executed upon match selection
	    var parsedModel = $parse(attrs.ngModel);
	    var invokeModelSetter = $parse(attrs.ngModel + '($$$p)');
	    var $setModelValue = function(scope, newValue) {
	      if (angular.isFunction(parsedModel(originalScope)) &&
	        ngModelOptions && ngModelOptions.$options && ngModelOptions.$options.getterSetter) {
	        return invokeModelSetter(scope, {$$$p: newValue});
	      }

	      return parsedModel.assign(scope, newValue);
	    };

	    //expressions used by typeahead
	    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);

	    var hasFocus;

	    //Used to avoid bug in iOS webview where iOS keyboard does not fire
	    //mousedown & mouseup events
	    //Issue #3699
	    var selected;

	    //create a child scope for the typeahead directive so we are not polluting original scope
	    //with typeahead-specific data (matches, query etc.)
	    var scope = originalScope.$new();
	    var offDestroy = originalScope.$on('$destroy', function() {
	      scope.$destroy();
	    });
	    scope.$on('$destroy', offDestroy);

	    // WAI-ARIA
	    var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
	    element.attr({
	      'aria-autocomplete': 'list',
	      'aria-expanded': false,
	      'aria-owns': popupId
	    });

	    var inputsContainer, hintInputElem;
	    //add read-only input to show hint
	    if (showHint) {
	      inputsContainer = angular.element('<div></div>');
	      inputsContainer.css('position', 'relative');
	      element.after(inputsContainer);
	      hintInputElem = element.clone();
	      hintInputElem.attr('placeholder', '');
	      hintInputElem.attr('tabindex', '-1');
	      hintInputElem.val('');
	      hintInputElem.css({
	        'position': 'absolute',
	        'top': '0px',
	        'left': '0px',
	        'border-color': 'transparent',
	        'box-shadow': 'none',
	        'opacity': 1,
	        'background': 'none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)',
	        'color': '#999'
	      });
	      element.css({
	        'position': 'relative',
	        'vertical-align': 'top',
	        'background-color': 'transparent'
	      });
	      inputsContainer.append(hintInputElem);
	      hintInputElem.after(element);
	    }

	    //pop-up element used to display matches
	    var popUpEl = angular.element('<div uib-typeahead-popup></div>');
	    popUpEl.attr({
	      id: popupId,
	      matches: 'matches',
	      active: 'activeIdx',
	      select: 'select(activeIdx, evt)',
	      'move-in-progress': 'moveInProgress',
	      query: 'query',
	      position: 'position',
	      'assign-is-open': 'assignIsOpen(isOpen)',
	      debounce: 'debounceUpdate'
	    });
	    //custom item template
	    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
	      popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
	    }

	    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
	      popUpEl.attr('popup-template-url', attrs.typeaheadPopupTemplateUrl);
	    }

	    var resetHint = function() {
	      if (showHint) {
	        hintInputElem.val('');
	      }
	    };

	    var resetMatches = function() {
	      scope.matches = [];
	      scope.activeIdx = -1;
	      element.attr('aria-expanded', false);
	      resetHint();
	    };

	    var getMatchId = function(index) {
	      return popupId + '-option-' + index;
	    };

	    // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
	    // This attribute is added or removed automatically when the `activeIdx` changes.
	    scope.$watch('activeIdx', function(index) {
	      if (index < 0) {
	        element.removeAttr('aria-activedescendant');
	      } else {
	        element.attr('aria-activedescendant', getMatchId(index));
	      }
	    });

	    var inputIsExactMatch = function(inputValue, index) {
	      if (scope.matches.length > index && inputValue) {
	        return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
	      }

	      return false;
	    };

	    var getMatchesAsync = function(inputValue, evt) {
	      var locals = {$viewValue: inputValue};
	      isLoadingSetter(originalScope, true);
	      isNoResultsSetter(originalScope, false);
	      $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
	        //it might happen that several async queries were in progress if a user were typing fast
	        //but we are interested only in responses that correspond to the current view value
	        var onCurrentRequest = inputValue === modelCtrl.$viewValue;
	        if (onCurrentRequest && hasFocus) {
	          if (matches && matches.length > 0) {
	            scope.activeIdx = focusFirst ? 0 : -1;
	            isNoResultsSetter(originalScope, false);
	            scope.matches.length = 0;

	            //transform labels
	            for (var i = 0; i < matches.length; i++) {
	              locals[parserResult.itemName] = matches[i];
	              scope.matches.push({
	                id: getMatchId(i),
	                label: parserResult.viewMapper(scope, locals),
	                model: matches[i]
	              });
	            }

	            scope.query = inputValue;
	            //position pop-up with matches - we need to re-calculate its position each time we are opening a window
	            //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
	            //due to other elements being rendered
	            recalculatePosition();

	            element.attr('aria-expanded', true);

	            //Select the single remaining option if user input matches
	            if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
	              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
	                $$debounce(function() {
	                  scope.select(0, evt);
	                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
	              } else {
	                scope.select(0, evt);
	              }
	            }

	            if (showHint) {
	              var firstLabel = scope.matches[0].label;
	              if (angular.isString(inputValue) &&
	                inputValue.length > 0 &&
	                firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
	                hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
	              } else {
	                hintInputElem.val('');
	              }
	            }
	          } else {
	            resetMatches();
	            isNoResultsSetter(originalScope, true);
	          }
	        }
	        if (onCurrentRequest) {
	          isLoadingSetter(originalScope, false);
	        }
	      }, function() {
	        resetMatches();
	        isLoadingSetter(originalScope, false);
	        isNoResultsSetter(originalScope, true);
	      });
	    };

	    // bind events only if appendToBody params exist - performance feature
	    if (appendToBody) {
	      angular.element($window).on('resize', fireRecalculating);
	      $document.find('body').on('scroll', fireRecalculating);
	    }

	    // Declare the debounced function outside recalculating for
	    // proper debouncing
	    var debouncedRecalculate = $$debounce(function() {
	      // if popup is visible
	      if (scope.matches.length) {
	        recalculatePosition();
	      }

	      scope.moveInProgress = false;
	    }, eventDebounceTime);

	    // Default progress type
	    scope.moveInProgress = false;

	    function fireRecalculating() {
	      if (!scope.moveInProgress) {
	        scope.moveInProgress = true;
	        scope.$digest();
	      }

	      debouncedRecalculate();
	    }

	    // recalculate actual position and set new values to scope
	    // after digest loop is popup in right position
	    function recalculatePosition() {
	      scope.position = appendToBody ? $position.offset(element) : $position.position(element);
	      scope.position.top += element.prop('offsetHeight');
	    }

	    //we need to propagate user's query so we can higlight matches
	    scope.query = undefined;

	    //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
	    var timeoutPromise;

	    var scheduleSearchWithTimeout = function(inputValue) {
	      timeoutPromise = $timeout(function() {
	        getMatchesAsync(inputValue);
	      }, waitTime);
	    };

	    var cancelPreviousTimeout = function() {
	      if (timeoutPromise) {
	        $timeout.cancel(timeoutPromise);
	      }
	    };

	    resetMatches();

	    scope.assignIsOpen = function (isOpen) {
	      isOpenSetter(originalScope, isOpen);
	    };

	    scope.select = function(activeIdx, evt) {
	      //called from within the $digest() cycle
	      var locals = {};
	      var model, item;

	      selected = true;
	      locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
	      model = parserResult.modelMapper(originalScope, locals);
	      $setModelValue(originalScope, model);
	      modelCtrl.$setValidity('editable', true);
	      modelCtrl.$setValidity('parse', true);

	      onSelectCallback(originalScope, {
	        $item: item,
	        $model: model,
	        $label: parserResult.viewMapper(originalScope, locals),
	        $event: evt
	      });

	      resetMatches();

	      //return focus to the input element if a match was selected via a mouse click event
	      // use timeout to avoid $rootScope:inprog error
	      if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
	        $timeout(function() { element[0].focus(); }, 0, false);
	      }
	    };

	    //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
	    element.on('keydown', function(evt) {
	      //typeahead is open and an "interesting" key was pressed
	      if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
	        return;
	      }

	      /**
	       * if there's nothing selected (i.e. focusFirst) and enter or tab is hit
	       * or
	       * shift + tab is pressed to bring focus to the previous element
	       * then clear the results
	       */
	      if (scope.activeIdx === -1 && (evt.which === 9 || evt.which === 13) || evt.which === 9 && !!evt.shiftKey) {
	        resetMatches();
	        scope.$digest();
	        return;
	      }

	      evt.preventDefault();
	      var target;
	      switch (evt.which) {
	        case 9:
	        case 13:
	          scope.$apply(function () {
	            if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
	              $$debounce(function() {
	                scope.select(scope.activeIdx, evt);
	              }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
	            } else {
	              scope.select(scope.activeIdx, evt);
	            }
	          });
	          break;
	        case 27:
	          evt.stopPropagation();

	          resetMatches();
	          originalScope.$digest();
	          break;
	        case 38:
	          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
	          scope.$digest();
	          target = popUpEl.find('li')[scope.activeIdx];
	          target.parentNode.scrollTop = target.offsetTop;
	          break;
	        case 40:
	          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
	          scope.$digest();
	          target = popUpEl.find('li')[scope.activeIdx];
	          target.parentNode.scrollTop = target.offsetTop;
	          break;
	      }
	    });

	    element.bind('focus', function (evt) {
	      hasFocus = true;
	      if (minLength === 0 && !modelCtrl.$viewValue) {
	        $timeout(function() {
	          getMatchesAsync(modelCtrl.$viewValue, evt);
	        }, 0);
	      }
	    });

	    element.bind('blur', function(evt) {
	      if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
	        selected = true;
	        scope.$apply(function() {
	          if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
	            $$debounce(function() {
	              scope.select(scope.activeIdx, evt);
	            }, scope.debounceUpdate.blur);
	          } else {
	            scope.select(scope.activeIdx, evt);
	          }
	        });
	      }
	      if (!isEditable && modelCtrl.$error.editable) {
	        modelCtrl.$setViewValue();
	        // Reset validity as we are clearing
	        modelCtrl.$setValidity('editable', true);
	        modelCtrl.$setValidity('parse', true);
	        element.val('');
	      }
	      hasFocus = false;
	      selected = false;
	    });

	    // Keep reference to click handler to unbind it.
	    var dismissClickHandler = function(evt) {
	      // Issue #3973
	      // Firefox treats right click as a click on document
	      if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
	        resetMatches();
	        if (!$rootScope.$$phase) {
	          originalScope.$digest();
	        }
	      }
	    };

	    $document.on('click', dismissClickHandler);

	    originalScope.$on('$destroy', function() {
	      $document.off('click', dismissClickHandler);
	      if (appendToBody || appendTo) {
	        $popup.remove();
	      }

	      if (appendToBody) {
	        angular.element($window).off('resize', fireRecalculating);
	        $document.find('body').off('scroll', fireRecalculating);
	      }
	      // Prevent jQuery cache memory leak
	      popUpEl.remove();

	      if (showHint) {
	          inputsContainer.remove();
	      }
	    });

	    var $popup = $compile(popUpEl)(scope);

	    if (appendToBody) {
	      $document.find('body').append($popup);
	    } else if (appendTo) {
	      angular.element(appendTo).eq(0).append($popup);
	    } else {
	      element.after($popup);
	    }

	    this.init = function(_modelCtrl, _ngModelOptions) {
	      modelCtrl = _modelCtrl;
	      ngModelOptions = _ngModelOptions;

	      scope.debounceUpdate = modelCtrl.$options && $parse(modelCtrl.$options.debounce)(originalScope);

	      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
	      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
	      modelCtrl.$parsers.unshift(function(inputValue) {
	        hasFocus = true;

	        if (minLength === 0 || inputValue && inputValue.length >= minLength) {
	          if (waitTime > 0) {
	            cancelPreviousTimeout();
	            scheduleSearchWithTimeout(inputValue);
	          } else {
	            getMatchesAsync(inputValue);
	          }
	        } else {
	          isLoadingSetter(originalScope, false);
	          cancelPreviousTimeout();
	          resetMatches();
	        }

	        if (isEditable) {
	          return inputValue;
	        }

	        if (!inputValue) {
	          // Reset in case user had typed something previously.
	          modelCtrl.$setValidity('editable', true);
	          return null;
	        }

	        modelCtrl.$setValidity('editable', false);
	        return undefined;
	      });

	      modelCtrl.$formatters.push(function(modelValue) {
	        var candidateViewValue, emptyViewValue;
	        var locals = {};

	        // The validity may be set to false via $parsers (see above) if
	        // the model is restricted to selected values. If the model
	        // is set manually it is considered to be valid.
	        if (!isEditable) {
	          modelCtrl.$setValidity('editable', true);
	        }

	        if (inputFormatter) {
	          locals.$model = modelValue;
	          return inputFormatter(originalScope, locals);
	        }

	        //it might happen that we don't have enough info to properly render input value
	        //we need to check for this situation and simply return model value if we can't apply custom formatting
	        locals[parserResult.itemName] = modelValue;
	        candidateViewValue = parserResult.viewMapper(originalScope, locals);
	        locals[parserResult.itemName] = undefined;
	        emptyViewValue = parserResult.viewMapper(originalScope, locals);

	        return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
	      });
	    };
	  }])

	  .directive('uibTypeahead', function() {
	    return {
	      controller: 'UibTypeaheadController',
	      require: ['ngModel', '^?ngModelOptions', 'uibTypeahead'],
	      link: function(originalScope, element, attrs, ctrls) {
	        ctrls[2].init(ctrls[0], ctrls[1]);
	      }
	    };
	  })

	  .directive('uibTypeaheadPopup', ['$$debounce', function($$debounce) {
	    return {
	      scope: {
	        matches: '=',
	        query: '=',
	        active: '=',
	        position: '&',
	        moveInProgress: '=',
	        select: '&',
	        assignIsOpen: '&',
	        debounce: '&'
	      },
	      replace: true,
	      templateUrl: function(element, attrs) {
	        return attrs.popupTemplateUrl || 'uib/template/typeahead/typeahead-popup.html';
	      },
	      link: function(scope, element, attrs) {
	        scope.templateUrl = attrs.templateUrl;

	        scope.isOpen = function() {
	          var isDropdownOpen = scope.matches.length > 0;
	          scope.assignIsOpen({ isOpen: isDropdownOpen });
	          return isDropdownOpen;
	        };

	        scope.isActive = function(matchIdx) {
	          return scope.active === matchIdx;
	        };

	        scope.selectActive = function(matchIdx) {
	          scope.active = matchIdx;
	        };

	        scope.selectMatch = function(activeIdx, evt) {
	          var debounce = scope.debounce();
	          if (angular.isNumber(debounce) || angular.isObject(debounce)) {
	            $$debounce(function() {
	              scope.select({activeIdx: activeIdx, evt: evt});
	            }, angular.isNumber(debounce) ? debounce : debounce['default']);
	          } else {
	            scope.select({activeIdx: activeIdx, evt: evt});
	          }
	        };
	      }
	    };
	  }])

	  .directive('uibTypeaheadMatch', ['$templateRequest', '$compile', '$parse', function($templateRequest, $compile, $parse) {
	    return {
	      scope: {
	        index: '=',
	        match: '=',
	        query: '='
	      },
	      link: function(scope, element, attrs) {
	        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'uib/template/typeahead/typeahead-match.html';
	        $templateRequest(tplUrl).then(function(tplContent) {
	          var tplEl = angular.element(tplContent.trim());
	          element.replaceWith(tplEl);
	          $compile(tplEl)(scope);
	        });
	      }
	    };
	  }])

	  .filter('uibTypeaheadHighlight', ['$sce', '$injector', '$log', function($sce, $injector, $log) {
	    var isSanitizePresent;
	    isSanitizePresent = $injector.has('$sanitize');

	    function escapeRegexp(queryToEscape) {
	      // Regex: capture the whole query string and replace it with the string that will be used to match
	      // the results, for example if the capture is "a" the result will be \a
	      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	    }

	    function containsHtml(matchItem) {
	      return /<.*>/g.test(matchItem);
	    }

	    return function(matchItem, query) {
	      if (!isSanitizePresent && containsHtml(matchItem)) {
	        $log.warn('Unsafe use of typeahead please use ngSanitize'); // Warn the user about the danger
	      }
	      matchItem = query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem; // Replaces the capture string with a the same string inside of a "strong" tag
	      if (!isSanitizePresent) {
	        matchItem = $sce.trustAsHtml(matchItem); // If $sanitize is not present we pack the string in a $sce object for the ng-bind-html directive
	      }
	      return matchItem;
	    };
	  }]);

	angular.module("uib/template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/accordion/accordion-group.html",
	    "<div class=\"panel\" ng-class=\"panelClass || 'panel-default'\">\n" +
	    "  <div role=\"tab\" id=\"{{::headingId}}\" aria-selected=\"{{isOpen}}\" class=\"panel-heading\" ng-keypress=\"toggleOpen($event)\">\n" +
	    "    <h4 class=\"panel-title\">\n" +
	    "      <a role=\"button\" data-toggle=\"collapse\" href aria-expanded=\"{{isOpen}}\" aria-controls=\"{{::panelId}}\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"toggleOpen()\" uib-accordion-transclude=\"heading\"><span uib-accordion-header ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
	    "    </h4>\n" +
	    "  </div>\n" +
	    "  <div id=\"{{::panelId}}\" aria-labelledby=\"{{::headingId}}\" aria-hidden=\"{{!isOpen}}\" role=\"tabpanel\" class=\"panel-collapse collapse\" uib-collapse=\"!isOpen\">\n" +
	    "    <div class=\"panel-body\" ng-transclude></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/accordion/accordion.html",
	    "<div role=\"tablist\" class=\"panel-group\" ng-transclude></div>");
	}]);

	angular.module("uib/template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/alert/alert.html",
	    "<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissible' : null]\" role=\"alert\">\n" +
	    "    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close({$event: $event})\">\n" +
	    "        <span aria-hidden=\"true\">&times;</span>\n" +
	    "        <span class=\"sr-only\">Close</span>\n" +
	    "    </button>\n" +
	    "    <div ng-transclude></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/carousel/carousel.html",
	    "<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\" ng-swipe-right=\"prev()\" ng-swipe-left=\"next()\">\n" +
	    "  <div class=\"carousel-inner\" ng-transclude></div>\n" +
	    "  <a role=\"button\" href class=\"left carousel-control\" ng-click=\"prev()\" ng-class=\"{ disabled: isPrevDisabled() }\" ng-show=\"slides.length > 1\">\n" +
	    "    <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></span>\n" +
	    "    <span class=\"sr-only\">previous</span>\n" +
	    "  </a>\n" +
	    "  <a role=\"button\" href class=\"right carousel-control\" ng-click=\"next()\" ng-class=\"{ disabled: isNextDisabled() }\" ng-show=\"slides.length > 1\">\n" +
	    "    <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></span>\n" +
	    "    <span class=\"sr-only\">next</span>\n" +
	    "  </a>\n" +
	    "  <ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
	    "    <li ng-repeat=\"slide in slides | orderBy:indexOfSlide track by $index\" ng-class=\"{ active: isActive(slide) }\" ng-click=\"select(slide)\">\n" +
	    "      <span class=\"sr-only\">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if=\"isActive(slide)\">, currently active</span></span>\n" +
	    "    </li>\n" +
	    "  </ol>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/carousel/slide.html",
	    "<div ng-class=\"{\n" +
	    "    'active': active\n" +
	    "  }\" class=\"item text-center\" ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/datepicker.html",
	    "<div class=\"uib-datepicker\" ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\n" +
	    "  <uib-daypicker ng-switch-when=\"day\" tabindex=\"0\"></uib-daypicker>\n" +
	    "  <uib-monthpicker ng-switch-when=\"month\" tabindex=\"0\"></uib-monthpicker>\n" +
	    "  <uib-yearpicker ng-switch-when=\"year\" tabindex=\"0\"></uib-yearpicker>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/day.html",
	    "<table class=\"uib-daypicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "    <tr>\n" +
	    "      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
	    "      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-weeks\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-day text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default btn-sm\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/month.html",
	    "<table class=\"uib-monthpicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-months\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-month text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/year.html",
	    "<table class=\"uib-yearpicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th colspan=\"{{::columns - 2}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-years\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-year text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepickerPopup/popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepickerPopup/popup.html",
	    "<div>\n" +
	    "  <ul class=\"uib-datepicker-popup dropdown-menu uib-position-measure\" dropdown-nested ng-if=\"isOpen\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
	    "    <li ng-transclude></li>\n" +
	    "    <li ng-if=\"showButtonBar\" class=\"uib-button-bar\">\n" +
	    "      <span class=\"btn-group pull-left\">\n" +
	    "        <button type=\"button\" class=\"btn btn-sm btn-info uib-datepicker-current\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('current') }}</button>\n" +
	    "        <button type=\"button\" class=\"btn btn-sm btn-danger uib-clear\" ng-click=\"select(null, $event)\">{{ getText('clear') }}</button>\n" +
	    "      </span>\n" +
	    "      <button type=\"button\" class=\"btn btn-sm btn-success pull-right uib-close\" ng-click=\"close($event)\">{{ getText('close') }}</button>\n" +
	    "    </li>\n" +
	    "  </ul>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/modal/backdrop.html",
	    "<div class=\"modal-backdrop\"\n" +
	    "     uib-modal-animation-class=\"fade\"\n" +
	    "     modal-in-class=\"in\"\n" +
	    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
	    "></div>\n" +
	    "");
	}]);

	angular.module("uib/template/modal/window.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/modal/window.html",
	    "<div modal-render=\"{{$isRendered}}\" tabindex=\"-1\" role=\"dialog\" class=\"modal\"\n" +
	    "    uib-modal-animation-class=\"fade\"\n" +
	    "    modal-in-class=\"in\"\n" +
	    "    ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\">\n" +
	    "    <div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/pager/pager.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/pager/pager.html",
	    "<ul class=\"pager\">\n" +
	    "  <li ng-class=\"{disabled: noPrevious()||ngDisabled, previous: align}\"><a href ng-click=\"selectPage(page - 1, $event)\">{{::getText('previous')}}</a></li>\n" +
	    "  <li ng-class=\"{disabled: noNext()||ngDisabled, next: align}\"><a href ng-click=\"selectPage(page + 1, $event)\">{{::getText('next')}}</a></li>\n" +
	    "</ul>\n" +
	    "");
	}]);

	angular.module("uib/template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/pagination/pagination.html",
	    "<ul class=\"pagination\">\n" +
	    "  <li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-first\"><a href ng-click=\"selectPage(1, $event)\">{{::getText('first')}}</a></li>\n" +
	    "  <li ng-if=\"::directionLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-prev\"><a href ng-click=\"selectPage(page - 1, $event)\">{{::getText('previous')}}</a></li>\n" +
	    "  <li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active,disabled: ngDisabled&&!page.active}\" class=\"pagination-page\"><a href ng-click=\"selectPage(page.number, $event)\">{{page.text}}</a></li>\n" +
	    "  <li ng-if=\"::directionLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-next\"><a href ng-click=\"selectPage(page + 1, $event)\">{{::getText('next')}}</a></li>\n" +
	    "  <li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-last\"><a href ng-click=\"selectPage(totalPages, $event)\">{{::getText('last')}}</a></li>\n" +
	    "</ul>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-html-popup.html",
	    "<div class=\"tooltip\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\" ng-bind-html=\"contentExp()\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-popup.html",
	    "<div class=\"tooltip\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-template-popup.html",
	    "<div class=\"tooltip\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\"\n" +
	    "    uib-tooltip-template-transclude=\"contentExp()\"\n" +
	    "    tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover-html.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover-html.html",
	    "<div class=\"popover\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"arrow\"></div>\n" +
	    "\n" +
	    "  <div class=\"popover-inner\">\n" +
	    "      <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "      <div class=\"popover-content\" ng-bind-html=\"contentExp()\"></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover-template.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover-template.html",
	    "<div class=\"popover\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"arrow\"></div>\n" +
	    "\n" +
	    "  <div class=\"popover-inner\">\n" +
	    "      <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "      <div class=\"popover-content\"\n" +
	    "        uib-tooltip-template-transclude=\"contentExp()\"\n" +
	    "        tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover.html",
	    "<div class=\"popover\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"arrow\"></div>\n" +
	    "\n" +
	    "  <div class=\"popover-inner\">\n" +
	    "      <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/bar.html",
	    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("uib/template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/progress.html",
	    "<div class=\"progress\" ng-transclude aria-labelledby=\"{{::title}}\"></div>");
	}]);

	angular.module("uib/template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/progressbar.html",
	    "<div class=\"progress\">\n" +
	    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/rating/rating.html",
	    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\" aria-valuetext=\"{{title}}\">\n" +
	    "    <span ng-repeat-start=\"r in range track by $index\" class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
	    "    <i ng-repeat-end ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\" ng-attr-title=\"{{r.title}}\"></i>\n" +
	    "</span>\n" +
	    "");
	}]);

	angular.module("uib/template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tabs/tab.html",
	    "<li ng-class=\"[{active: active, disabled: disabled}, classes]\" class=\"uib-tab nav-item\">\n" +
	    "  <a href ng-click=\"select($event)\" class=\"nav-link\" uib-tab-heading-transclude>{{heading}}</a>\n" +
	    "</li>\n" +
	    "");
	}]);

	angular.module("uib/template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tabs/tabset.html",
	    "<div>\n" +
	    "  <ul class=\"nav nav-{{tabset.type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
	    "  <div class=\"tab-content\">\n" +
	    "    <div class=\"tab-pane\"\n" +
	    "         ng-repeat=\"tab in tabset.tabs\"\n" +
	    "         ng-class=\"{active: tabset.active === tab.index}\"\n" +
	    "         uib-tab-content-transclude=\"tab\">\n" +
	    "    </div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/timepicker/timepicker.html",
	    "<table class=\"uib-timepicker\">\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
	    "      <td class=\"uib-increment hours\"><a ng-click=\"incrementHours()\" ng-class=\"{disabled: noIncrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementHours()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td>&nbsp;</td>\n" +
	    "      <td class=\"uib-increment minutes\"><a ng-click=\"incrementMinutes()\" ng-class=\"{disabled: noIncrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementMinutes()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-increment seconds\"><a ng-click=\"incrementSeconds()\" ng-class=\"{disabled: noIncrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementSeconds()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td ng-show=\"showMeridian\"></td>\n" +
	    "    </tr>\n" +
	    "    <tr>\n" +
	    "      <td class=\"form-group uib-time hours\" ng-class=\"{'has-error': invalidHours}\">\n" +
	    "        <input type=\"text\" placeholder=\"HH\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementHours()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td class=\"uib-separator\">:</td>\n" +
	    "      <td class=\"form-group uib-time minutes\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
	    "        <input type=\"text\" placeholder=\"MM\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementMinutes()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-separator\">:</td>\n" +
	    "      <td class=\"form-group uib-time seconds\" ng-class=\"{'has-error': invalidSeconds}\" ng-show=\"showSeconds\">\n" +
	    "        <input type=\"text\" placeholder=\"SS\" ng-model=\"seconds\" ng-change=\"updateSeconds()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementSeconds()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td ng-show=\"showMeridian\" class=\"uib-time am-pm\"><button type=\"button\" ng-class=\"{disabled: noToggleMeridian()}\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\" ng-disabled=\"noToggleMeridian()\" tabindex=\"{{::tabindex}}\">{{meridian}}</button></td>\n" +
	    "    </tr>\n" +
	    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
	    "      <td class=\"uib-decrement hours\"><a ng-click=\"decrementHours()\" ng-class=\"{disabled: noDecrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementHours()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td>&nbsp;</td>\n" +
	    "      <td class=\"uib-decrement minutes\"><a ng-click=\"decrementMinutes()\" ng-class=\"{disabled: noDecrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementMinutes()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-decrement seconds\"><a ng-click=\"decrementSeconds()\" ng-class=\"{disabled: noDecrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementSeconds()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td ng-show=\"showMeridian\"></td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/typeahead/typeahead-match.html",
	    "<a href\n" +
	    "   tabindex=\"-1\"\n" +
	    "   ng-bind-html=\"match.label | uibTypeaheadHighlight:query\"\n" +
	    "   ng-attr-title=\"{{match.label}}\"></a>\n" +
	    "");
	}]);

	angular.module("uib/template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/typeahead/typeahead-popup.html",
	    "<ul class=\"dropdown-menu\" ng-show=\"isOpen() && !moveInProgress\" ng-style=\"{top: position().top+'px', left: position().left+'px'}\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
	    "    <li ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index, $event)\" role=\"option\" id=\"{{::match.id}}\">\n" +
	    "        <div uib-typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
	    "    </li>\n" +
	    "</ul>\n" +
	    "");
	}]);
	angular.module('ui.bootstrap.carousel').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'); angular.$$uibCarouselCss = true; });
	angular.module('ui.bootstrap.datepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'); angular.$$uibDatepickerCss = true; });
	angular.module('ui.bootstrap.position').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'); angular.$$uibPositionCss = true; });
	angular.module('ui.bootstrap.datepickerPopup').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'); angular.$$uibDatepickerpopupCss = true; });
	angular.module('ui.bootstrap.tooltip').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'); angular.$$uibTooltipCss = true; });
	angular.module('ui.bootstrap.timepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-time input{width:50px;}</style>'); angular.$$uibTimepickerCss = true; });
	angular.module('ui.bootstrap.typeahead').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'); angular.$$uibTypeaheadCss = true; });

/***/ },

/***/ 30:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-04-05T19:26Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.3",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {
			var key;

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the 1.x branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },

/***/ 31:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }

/******/ });